//     version: 2.1.46            - April 8, 2016
//									added cvjs_versionNumber, method cvjs_version()
//									tip[cvjs_active_floorplan_div_nr].css : +document.body.scrollLeft +document.body.scrollTop
//     version: 2.1.47            - April 11, 2016
//									DoTouchEnd(), 	DoTouchStart(), DoTouchMove, DoMouseDown, DoMouseUp +document.body.scrollLeft +document.body.scrollTop
//									stickynote, zoomWindow: +document.body.scrollLeft +document.body.scrollTop
//									adjustment of tooltip
//     version: 2.1.48-49         - April 15, 2016
//									various print controls
//     version: 2.1.50            - April 30, 2016
//									method: cvjs_AddTextAndTBorderOnSpaceObjectNode  with clipping controls added. SVG mask implemented in the same shape as room polygon
//     version: 2.1.51            - May 3, 2016
//									methods added: cvjs_setCustomToolTipValue(), cvjs_setCustomToolTip(), cvjs_getSpaceObjectIdList(), text objects in labels made invisible for mouse interaction
//     version: 2.1.52            - May 4, 2016
//									methods added: cvjs_NameObjectClicked
//     version: 2.1.53            - May 9, 2016
//									methods added: cvjs_setNoModalMode()   , hiding modals, but still keep system in standard highlight mode (not creation mode for admin)
//     version: 2.1.54            - May 12, 2016
//									methods added: cvjs_addMouseWheelControls()  , Safari: clear drawing when loading subsequent pages in multipage file
//     version: 2.1.55, 56,57     - May 12, 2016
//									methods added: cvjs_wait_looper controls, cvjs_wait_looper html embedded in init
//     version: 2.1.60            - May 18, 2016
//									methods added: check for tooltipLast >-1  , license key generation separated into MAKELICENSE js file
//     version: 2.1.61            - May 20-23, 2016
//									methods added: license key generation separated into MAKELICENSE js file
//        						    added prior to OnLoadEnd: cvjs_rPaper[cvjs_active_floorplan_div_nr].selectAll('text').attr({"stroke-width":"0"}); checkLicense() moved internally in code
//     version: 2.1.62            - May 24, 2016
//									methods added: moved redlines handling into main js files
//									methods added: cvjs_setPhpSaveRedlineUrlLocation through cvjs_deleteAllRedlines
//     version: 2.1.63-65           May 25-31, June 1-4,  2016
//									methods added: conversion through REST Api, added to check license key prior to rest conversion call
//     version: 2.1.66              June, 6-7,  2016
//									methods added: pinch controls for hyperlinks, cvjs_ApplyPatternOnUrl
//     version: 2.1.67-68           June, 10-12,  2016
//									methods added: cvjs_highlightURL
//									June, 13-16,  2016 methods added: handling of PNG direct load
//     version: 2.1.69           	July, 13,  2016
//									redesign: var a = 1, b = 2, c = 3, d = 4;
//     version: 2.1.70           	August 1-5,  2016
//									methods added: cvjs_LayerList, cvjs_setBackgroundColorHex();
//     version: 2.1.71           	August 7-16,  2016
//									methods added: text message handling xampp php error messages;
//     version: 2.1.72-73           August 16-19,  2016
//									methods added: redline commands, fixed bugs in repetitive save-load of redlines and stickynotes
//     version: 2.1.74              August 19,  2016
//									methods added: background color modal, user access controls
//     version: 2.1.75              August 22,  2016
//									methods added: controls of hidden and locked users
//     version: 2.1.76              August 22,  2016
//									methods added: modal html generation moved to js files
//     version: 2.1.77              August 23,  2016
//									methods added: click handler for redlines for delete
//     version: 2.1.78-79           August 23-26,  2016
//									methods added: multipage redlining, pagechange, save and load handling, dragable, changeable icon menu
//     version: 2.1.80-81           August 27- September 2,  2016
//									methods added: redline text, modals moved into js files, measurement commands, scaling of arrows
//     version: 2.1.82-84           September 2 - 4,  2016
//									methods added: modals and image maps encapsulated in js files, controls for which pages to display
//     version: 2.1.85-86           September 5 - 7,  2016
//									methods added: redline text, multipage redline bug fixes, messageModal implemented, version information added
//     version: 2.1.87           	September 8 - 9,  2016
//									methods added: first implementation of adjust line thickness
//     version: 2.1.88 -2.2.01      September 10 - 15,  2016
//									methods added: file loader, redline loader, 3rd page Space Management methods - first implementation
//     version: 2.3.01           		September 16 - 15,  2016
//									methods added: file loader, redline loader, 3rd page Space Management methods - first implementation
//     version: 2.3.04           	September 17 - 19,  2016
//									methods added: page name navigator, encapsulation of all file modals
//     version: 2.3.06           	September 19 - 22,  2016
//									methods added: svgz loading, external hooks for customer implementations in svg
//     version: 2.3.07           	September 23,  2016
//									methods added: external set color menu
//     version: 2.3.09           	September 27,  2016
//									methods added: line thickness modal added
//     version: 2.3.10-13           September 27-28,  2016
//									methods added: print of bitmaps, print on IE
//     version: 2.3.14-18           September 29-30,  2016
//									methods added: close print-modal after use, print for IE, redone calculation for print canvas
//     version: 2.3.19-26           October 2-3,  2016
//									methods added: magnifying glass completed, image location first draft,
//     version: 2.3.27           	October 4-7,  2016
//									methods added: print optimization
//     version: 2.3.28           	October 8-10,  2016
//									methods added: date check added to license key, fixed print of bitmaps with redlines in zoomed state
//     version: 2.3.29           	October 11-12,  2016
//									methods added: added US Leger, US Legal paper formats
//     version: 2.3.30-33           October 11-16,  2016
//									methods added: Optimized all modals for size, redesign of all modals, printobject up to 5.7Mb
//     version: 2.3.34-35           October 18-20,  2016
//									methods added: Fixed setting of print object for SVG/SVGZ in portrait mode, reorder print
//     version: 2.3.36           	October 20,     2016
//									methods added: POST mode for server php communication, updated PHP scripts,
// 									set php server file load to use POST instead of JSONP GET
//									cvjs_setServerAccessToPost(true);
//     version: 2.3.37-38           October 21-26,  2016
//									methods added: structure to control print via servlet, control redline save via servlet
//									methods added: cvjs_setServerHandlersPath, cvjs_setPrintObjectPath, cvjs_setPrintObjectPathAbsolute, cvjs_setServerSaveFileHandler, cvjs_setServerAppendFileHandler, cvjs_setServerDeleteFileHandler
//     version: 2.3.39              October 30-31,  2016
//									methods added:  B/W icons command
//     version: 2.3.40              November 2-7,   2016
//									methods added:  image object load and management, upload of images to folder
//									methods added:  servlet controls, save and load redlines
//     version: 2.3.41              November 8-17,  2016
//									methods added: icons for image upload and insert
//									methods added: image note datasctructure for save and load
//      							methods added: check count methods
//     version: 2.3.41              November 21,  2016
//									methods added: CAFM creation interface, initial work
//     version: 2.3.42              November 21-25,  2016
//									methods added: CAFM creation interface, global scope on vqXXX variables in .js files
//     version: 2.3.43              November 28 - Dec 4,  2016
//									methods added: controls for minimum classic skin zoom buttons, beginning of CAFM interface
//     version: 2.3.44-45           Dec 5-12,  2016
//									methods added: controls for minimum classic skin zoom buttons, beginning of CAFM interface
//									methods added: experiment with clipping of cones (heat emmision with walls)
//     version: 2.3.46-47           Dec 14-22,  2016:
//     version: 2.3.48-49           Jan 4-12, 16,  2017:
//									methods added: Localization, all modals any tooltips, re-formatting of all modals, localization of edit modals in file loader
//                                  methods added: Added absolute paths for fileload, redline, and imagefolder
//									methods added: cvjs_imageObjectServerName so a unique path corresponding to each image object can added
//     version: 2.3.50              Jan 18-19,  2017:
//									methods added: console.log changed to console.log
//									methods added: cvjs_SVGGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].svg(0,0, wid, hgt), wid and hgt are set high to avoid clipping -cvjs_masterbackground[cvjs_active_floorplan_div_nr] is adjusted afterwards -
//     version: 2.3.51              Jan 23,  2017:
//									methods added: access control for cross domain handling , updated clearCurrentRedline to not clear locked redlines
//     version: 2.3.52              Jan 30-Feb 08,  2017:
//									methods added: not delete locked redlines when clearing redlines, update algorithm so save and load afterwards works
//									methods added: check for php document for ax2017, change executable to ax2017
//
//     version: 2.3.53              Feb 12 - Feb 21,  2017:
//									methods added: adding placeholder for datamaps in Space Management display mode  - intial work
//
//     version: 2.3.54              March 6 - 14 ,  2017:
//									methods added: adding placeholder for datamaps in Space Management display mode
//									methods added: cvjs_setCustomCallbackMethodOnLoadEnd(true, myOnLoadEndMethod)
//									methods added: escapeUnicode() for all -layout commands, will allow AX to convert view/layout in Unicode
//									methods added: try-catch around cvjs_OnLoadEnd() and cvjs_OnLoadEndRedlines()
//     version: 2.3.55              March 20 - 29 ,  2017:
//									methods added: save screen image to server, produce two thumbnails, add file with stickynote content
//									methods added: loop over list of drawings, load them, make screen image, send to server, at end of loop merge files into pdf file
//									methods added: single pdf creation of screen image
//     version: 2.3.56              March 30 - April 4 ,  2017:
//									methods added: redone structure with /app folder to be able to load content in space management case, converters folder for more
//                                                 general structured case
//     version: 2.3.56          	April 5 - April 18 ,  2017: SVG click handler structure implemented: cvjs_addSVGClickHandler_onLoad(), adding list-directory handler cvjs_setServerListDirectoryHandler(),
//															    adding ability to create Multipage SVG through php and Servlet, cvjs_buildMultiPageSVG(directory)
//															    adding ability to convert Multipage PDF through pdfbox and batik
//     version: 2.3.57-59          	April 24 -April  2017: adding ability to convert Multipage PDF through pdfbox and batik
//     version: 2.3.60          	April 25: 	Updated into new release version. Set up for call-Api_Conversion
//     version: 2.3.61          	April 25 - May 17: 	Change of folder tcftp to tcpdf, script implementations on Linux
//     version: 2.3.61          	May   23 - June xx:  Updated SNAP library, added CAFM detect and add polygon command
//     version: 2.3.63-4          	May   June 1 - June xx: Made CAFM commands generic, data_host_connector structure, reorganized CAFM page
//     version: 2.3.64          	May   June 20 - June xx: implemented cvjs_initMasterBackground controls for file overlay
//     version: 2.3.65          	May   June 26 - June 27: callback variable cvjs_ajaxPostStatus for success when saved via ajax
//     version: 2.3.66          	June 29: remove id="dummy1" from images in modals
//     version: 2.3.67          	June 29 - July 2:  implemted cvjs_setInformationModalType(2); modals to be changed between bootstrap and non-bootstrap information modal mode
//     version: 2.3.68          	July 4 - July 6:  Init JS, clear modal and svg object, NOTE: Not working properly for hyperlink modals
//     version: 2.3.68          	July 7 - July 8:  Load multiple redlines; introduction work + immplemented: cvjs_loadMultipleRedlinesStickyNotes
//     version: 2.4.01          	July 9 - July 10:  Load&save multiple redlines; new structure to push and pop cvjs_stickyNotesRedlines, method cvjs_setLoadMultipleRedlinesStickyNotes() implemented
// 	   version: 2.4.02				July 11: Implemented controls cvjs_serverListDirectoryControllerRedlines to filter only .js files in file menu
// 	   version: 2.4.03				July 11:  Added cvjs_fileSaverRedlineMode , so that there can be dual modes for redline save/load, in which redlines can be loaded in sequence
// 	   version: 2.4.04				July 18:  Rearranged 3rd standard icon desk to be able to add comparison icons.
// 	   version: 2.4.05				July 19 - July 25:  Collaboration icons addeed, methods implemented

// 	   version: 2.5.01				August 1 - August 02:  Set up SVG mode in call-Api_Conversions.php, set up page-change to handle SVG page change, specify variable set in <metadata> section of SVG to replace JS variable declaration
// 	   version: 2.5.01 -				     - August 03:  SVG LayerList and change page arrays based on <metadata> variables, SVG for thickness change based on cv_ ID in SVG

// 	   version: 2.5.20 -			August 6 - 	        :  Trapping hyperlinks in SVG and create custom highligh and pass through methods
// 	   version: 2.5.20 -			August 15 - 	    :  Adding handling of DGN files, both .dgn and .pcf
// 	   version: 2.5.21 -			August 17 - 	    :  Click handler of -rl -tl setup in SVG files, new setup based on changed data structure in SVG files
//														:  cvjs: namespace controls all structural elements in clickable definitions in SVG, cvjs:node, cvjs:roomId, etc.
// 	   version: 2.5.22 - 27			August 18 - Sep 10	:  building key recognition for Esc for redline commands , flag	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] to control double click or trying to call multiple methods
// 	                                                    :  replacing href with onclick in iconmenu
//														:  redoing array generation for file/load save modals redlines and files
//														:  unicode in layer id/class files, remove \ over all layers id and parsing layerNames for unicode
//														:  increased number of files entry in file-modal 20->40, increased split-size in print to 8550000 (+950000)
//														:  changed cvjs_masterbackground[cvjs_active_floorplan_div_nr] definition for SVG files, allowing zoom extents to work properly
//														:  added ability to parse current HTML url for parameters, for use in visualQuery applications for execute on load
//														:  added linecap on higlight areas, updated user display mode, console log more as debug mode
// 	   version: 2.5.28 - 			Sep 14  - Sep 17 	:  change b/w for SVG, change background color white/black. movrd draggable modals into main class
// 	   version: 2.5.29 - 			Sep 22   			:  callback from PNG generation

// 	   version: 2.6.01 - 			Sep 26-   			:  French language file, removed x in cvjs_masterbackground[cvjs_active_floorplan_div_nr] for bitmaps
// 	   version: 2.6.02 - 			Sep 26-  Oct 12  	:  Server side path setting in loading of .rw file. , added updated French language file, added SVG click API commande
// 	   version: 2.6.03 - 			Oct 13-  Oct 22   	:  Added flag to send Print as PDF down to server as ajax call. Flag added to only load cvjs_addMouseWheelControls once
//														:  Tomcat implementation including conversion servlet and controls. Servlets to work for Url and File.
// 	   version: 2.6.04 - 			Oct 23-  Oct    	:  Added parsing of drawing coordinate matrix, added methods for cvjs_SVGtoOriginal_X_coord, cvjs_SVGtoOriginal_Y_coord
// 	   version: 2.6.05 - 			Oct 30-  Nov 5    	:  Url encoding of json rest parameter for Tomcat 8
// 	  											    	:  Added controls for SharePoint server file loading cvjs_fileLoadFromSharePointServer(true); , programming of rest call + update of php code
// 	   version: 2.6.06 - 			Nov 8 -  Nov 12   	:  Sharepoint API programming. method added, cvjs_printToPdf_windowRelativeSize() for pdf print popup window control
//														:  Added method: cvjs_storeFillColors(), cvjs_layerNamefromObjectID(myObjectID) for SVG click handler, 
// 	   version: 2.6.07 - 			Nov 17 - Nov 30   	:  Added handlers for SVG hyperlink trapping and coloring: cvjs_InitializeSVGHyperlinkClick(), cvjs_colorSingleSVGHyperlink(), cvjs_resetSVGHyperlinkColors()
//														:  Added parsing for: AutoCAD Handle room polygons:  new methods: cvjs_makeLegendUpperRight() , cvjs_changeText_On_BlockHandle()
//														:  Added parsing for: trapping of layers from block layers, moving these layers into existing layer, if present, parsing for unicode layers and classnames
// 	   version: 2.6.10 - 			Dec 1  - Dec3    	:  Changed tooltip to be based on their position, tip[cvjs_active_floorplan_div_nr].css() , based on floorPlan embedded in div or external free 
//														:  Changed cvjs_wait_looper location based on either embedded or free
// 	   version: 2.6.11 - 			Dec 4  - Dec 7   	:  Added: cvjs_addedObjectsToExtents for zoomextents based on canvas objects, not inital content, added: cvjs_zoomHere_ObjectId(rmid, factor)
// 	   version: 2.6.12a - 			Dec 7   - Dec 11 	:  Defined rPaper, masterBackground as arrays, defined counter for active floorplan number cvjs_active_floorplan_div_nr
//														:  implemented multipe version of gmenu, basic zoom desk
// 	   version: 2.6.12b - 			Dec 7    - Dec 11 	:  Defined rPaper, masterBackground as arrays, defined counter for active floorplan number cvjs_active_floorplan_div_nr
// 	   version: 2.6.12c - 			Dec 12   - Dec 15 	:  Added _floorplan_div to all modals
// 	   version: 2.6.12d - 			Dec 15   - Dec 31 	:  Enable all modals in single floorplan_div environment.  
//														:  to Fix zoom issue on PDF Batik SVG files, to Fix cross-domain error on SVG load of Batik SVG files
//														:  cvjs_resetZoomPan_SetMasterBackground, zoom to bounding box, one instance before onLoadEnd with update of masterbackground, update actualLL? x4 , and scalefactor on redlines
//														:  load of multipage PDF to SVG via php, 
//														:  xmlns:NS , for printing on IE before passing over to canvg , the svg has to be parsed for added namespaces, also TMS namespace references has been removed
//														:  A,B,C remove : for pagechange on IE 11, added myNode.removeChild loop to get rid of previous SVG file in DOM
//														:   cvjs_InitCADViewerJS_app_highLight() implemented, to control style of highlight objects 
//														:  Added cvjs_getAllRedlines_UserIdList(), cvjs_getAllRedlines_TextList(), cvjs_hideAllRedlines_ExceptUser(userId), cvjs_lockAllRedlines_ExceptUser(userId)
//														:  Added conditional flag for SharePoint loading of bitmaps and pdf files:   cvjs_LoadDrawingPDF_base(FileNamePath), SetUpVqPngDefault_base(fileName)
// 	   version: 2.6.12e - 			Jan 7   - Jan xx 	:  Updated all modals to be css class based instead of css id based
// 	   version: 2.6.12f - 			Jan 7   - Jan xx 	:  Updated all modals to be css class based instead of css id based
// 	   version: 2.6.12g - 			Jan 7   - Jan xx 	:  Updated all modals to be css class based instead of css id based
// 	   version: 2.6.12h - n			Jan 7   - Jan xx 	:  Updated all modals to be css class based instead of css id based
// 	   version: 2.6.12o				Jan 19  - Jan 23 	:  Updated page change for multi instances, updated redlines for multi instances
// 	   version: 2.6.12p				Jan 19  - Jan 23 	:  Updated page change for multi instances, updated redlines for multi instances
// 	   version: 2.6.12q				Jan 27  - Jan 29 	:  All tables updated for control of size and colors cvjs_74.css.  (file load missing)
// 	   version: 2.6.12r				Jan 30  - Jan  		:  Updates for internal resize after load , not relying on jQuery(window).resize(); 
// 	   version: 2.6.12s				Jan 31  - Feb 1  	:  Creation of Stamp command, rewrite of bitmap load method.  Still drag + tooltips not properly implemented.  
// 	   version: 2.6.12t-u-v			Feb 2   - Feb 6  	:  Implementation of Load/Save of Stamp SVG files, general SVG layer save/load. Optimization of bitmap load, cross domain issue  
// 	   version: 2.6.12t-u-v			Feb 6   - Feb 6  	:  floorplan_div_Array is now being initialized at initalization, not at load.  
// 	   version: 2.6.14  		    Feb 7   - Feb 8  	:  make timer when loading two drawings simultaniously, make conversion parameters to each floorplan_div  
// 	   version: 2.6.14a  		    Feb 9   - Feb 10  	:  removed references to init.js at LoadDrawing  
// 	   version: 2.6.14b  		    Feb 14     			:  Redline load error, current page uninitialized at save,  removed reference to init.js at load 
// 	   version: 2.6.14c  		    Feb 14    			:  floorplan_div_Array is now being initialized at initalization, not at load.  
// 	   version: 2.6.14d  		    Feb 14    			:  extended bitmap print to check extents of custom layer and use those extents to include (stamps) in printing, cvjs_customLayerContentAdded
// 	   version: 2.6.14e  		    Feb 16  - Feb 20  	:  Scalefactor on masterbackground to make drag on extended canvas possible, scaling of handleGroup for drawing of redlines
// 	   version: 2.6.14f  		    Feb 21  - Feb   	:  allow load of jpeg files, previously only jpg allowed.
// 	   version: 2.6.14g-h  		    Feb 23  - Feb   	:  methods to extract and save all stickynotes as text  (separation of methods already done for thumb generation for calan)
// 	   version: 2.6.14i  		    Mar 3  -  Mar 6   	:  For PDF reading added java class to detect number of pages, generate list of pages, and then added timer to wait for page to be converted,
//														:  Updated PHP config, php code and new batch files and java code    
//														:  Added parser to read old type redlines.
// 	   version: 2.6.14j  		    Mar 7  -     		:  Added scale matrix to masterbackground, added scale matrix for handlegroup for all redlines and Zoom Window.
// 	   version: 2.6.15b  		    Mar 10 -     		:  Added cvjs_setCustomPdfFolder, so a pre-converted pdf can be loaded in instead of converting from scratch each time 
// 	   version: 2.6.15c  		    Mar 12 -     		:  Multi-user SharePoint integration, use -Xmx1424m" for pdf creation, in php.ini set: post_max_size=40M
// 	   version: 2.6.15d  		    Mar 13 - Mar 14    	:  Mousewheel zoom in 2.5% increments, zoom in/out in 10% increments
//														:  containment of modals: cvjs_containmentModalLeft, cvjs_containmentModalTop, cvjs_containmentModalRight, cvjs_containmentModalBottom
//														:  cvjs_SVG_multiPagesFlag[cvjs_active_floorplan_div_nr] = false; in non-pdf branches for page change icons
//														:  page change by input documentPageChangeModal_ added with update in cvjs_74.css to set it up properly 
// 	   version: 2.6.15e  		    Mar 14    			:  On loading sticky notes, check for maximum index instead of number of notes
// 	   version: 2.6.15f  		    Mar 15 - Mar 16     :  Bug fix,cvjs_changePageByNumber.  Save stickyNotes, scale them to 0.01 , Load StickyNotes, cvjs_setUpVqStickyNotes_currentNode_vqIndex_passedInstanceonly(), apply transformation and data ID, the software (?) takes care of the rest 
//														:  cvjs_updateDrawingRedlines(), added redlines layer object, stickynote now are interactive as after master_, but vqRooms lost
//														:  added: x = x+document.body.scrollLeft+factor, based on scale; to make note to insert into pdf, for create note and move note, cannot move behind handleGroup										
//														:  removed translation after insertion, notes now inserts correctly 
//	   version: 2.6.15g  		    Mar 17   			:  Added: cvjs_getCurrentPage()
//	   version: 2.6.15h  		    Mar 19   			:  Added, internal reorder of cvjs_SVGGroup to group objects to allow rotation of canvas
//	   version: 2.6.20a  		    Mar 20   			:  Build new user controls to rotate files on canvas.
//	   					  		    Mar 20   			:  New control pageChange_05.png, updated in cvjs_75.css , rotate backwards and forwards as icons on control
//	   					  		    Mar 20   			:  cvjs_saveStickyNoteInfo(), XML syntax <StickyNote> </StickyNote>
//	   version: 2.6.20b  		    Mar 21   			:  Page change keep redlines activated for DWG, PDF, redone zoom extents scaling, based on cvjs_customLayerContent
//	   version: 2.6.20c  		    Mar 21   			:  Implemented into redline format:  drawingRotation: -90, automated rotation when pagechange function cvjs_updateDrawingRedlines() 
//	   version: 2.6.20d  		    Mar 23   			:  SharePoint interface functionality, upload of files, methods initiated
//	    		    				Mar 25   			:  Change encapsulating svg from 3500 ->10000, clipped vector/bitmap (siemens) sample,
//	   version: 2.6.20e  		    April 2   			:  Implemented cvjs_saveFloorplanAsPDFtoSharePoint(), cvjs_makeStampUpperRight() modified for rotation, modified for line thickness
//	   version: 2.6.20f  		    April 6   			:  Implemented php, ajax calls to Merge and Split PDF files. Split embedded in load pdf file code. Java+php+js code
//	   version: 2.6.30a  		    April 8   			:  Implemented 5 icon pages, page 3 for pdf publish command
//	   version: 2.6.30b  		    April 8   			:  PDF Publish command part programming
//	   version: 2.6.30b  		    April 11   			:  PDF Publish command part programming
//	   version: 2.6.40a  		    April 12  			:  Change in interface, zoom in/zoom extents moved to top navigation bar, pdf download moved to page 2, page 3...
//	   version: 2.6.40b  		    April 13  			:  temp file on server to have same name as with datestamp, make html pdf encapsulation on server on server and then load
//	   version: 2.6.40c  		    April 16  			:  Flag to not include Print as PDF in Print Command,cvjs_PrintModal_PrintPDF. 
//	     		    				April 16  			:  Rewrote print method to be based on Style settings for: media=\"print\"
//	     		    				         			:  Old rotation mode for Landscape, for IE, Firefox, Edge
//	     		    				        			:  New media=print mode for all browsers in Portrait, but width adjustment for Chrome
//	   version: 2.6.40d  		    April 17 			:  Added fontSize to redline Text modal, cache issue for .js files: createjscssfile(newfilename+"?dummy="+Math.random(), filetype); 
//														:  also for: loadJSbase(file)
//	   version: 2.6.40e  		    April 18 			:  cvjs_updateDrawingRedlines(redlineStickyNoteLayer); // removed creation part for Arrow, it was placed out double on the canvas, and would not delete
//	   version: 2.6.41a  		    April 18 			:  updated algorithm for mouse-wheel coordinates: (viewBoxWidth[cvjs_active_floorplan_div_nr] - vBWo)*(x_offset);
//	   version: 2.6.41b  		    April 20 			:  built: cvjs_setLooperPosition() for load. Tooltip cvjs_showStickynoteTip fixed,  
//	   version: 2.6.50a  		    April 23-24 		:  implementation of DXF output for Redlines, first part
//	   version: 2.6.50b  		    April 25 			:  Tooltips when cvjs_windowResize_fixedSize(), redone and removed methods, ensured all modals open inside floorPlan div
//	   version: 2.6.50c  		    April 25 			:  Redline polyline, added thickness scalefactor. 
//														:  DXF: Added handle, line thickness, closed polygon in RedlineFillPolygon, 
//	   version: 2.6.51a  		    April 26 			:  Rewrite DXF output to be based on DraftSight template
//	   version: 2.6.51b  		    April 27 			:  DXF output. Add xdata attributes
//	   version: 3.0.10a  		    May   02 			:  Renamed for AX2019 upload and release
//	   version: 3.0.10b 		    May   02 			:  Reformatted for Google Closure, both .js files now compiled over to single cadviewer.min.js 
//	   version: 3.0.10c 		    May   02 			:  Updated .php configuration and main call-Api_Conversion for AX2019 conversion.
//	   version: 3.0.10d-g 		    May   02-03 		:  Replaced $ with jQuery   $.  jQuery(
//	   					 		    May   02-03 		:  Page change command vjs_changeToIconPage fixed, fadeout 1500 ms on redline modal when saving redlines
//	   					 		    May   02-03 		:  Add pagename to redlines, so they can be individually turned on/off in model/paperspace
//	   version: 3.0.10h 		    May   04 			:  Put remove files after print as default, updated patch settings cvjs_setServerLocationURL) and removed print settings from demo pages
//														:   
//	   version: 3.0.11a-b 		    May   05 - 06		:  Rewritten Compare methods to be based on DWG files, cvjs_OnLoadEndCompareDrawings(), variable secondLoading, controls if SVG 
//														:  is loaded into #main_master_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]+"_secondfile"
//	   version: 3.0.11c 		    May   06 - 07		:  for xlink hyperlinks, position masterbackground in back: 			cvjs_SVGGroup[cvjs_active_floorplan_div_nr].before(cvjs_masterBackground[cvjs_active_floorplan_div_nr]);
//	   version: 3.0.11d 		    May   08 - 			:  Set cvjs_setCustomPdfFolder() in LoadDrawing when loading second PDF file from FileModal
//	   							    May   09 - 			:  Setting of print entire document in Publish PDF, included functionality to merge PDF
//	   							    May   09 - 			:  in each cvjs_removeHandleFunc_ : then save redline screen as PDF if FileName.indexOf(".pdf")>-1 && cvjs_customPdfFolderFlag
//														:  What to do about php loaded files?  think OK, because name in ? &name= 
//														:  StickyNote insertion, stroke on text too fat. Adjusted
//	   version: 3.0.11e 		    May   09 - 			:  Clear current redline before load of new drawing from filemenu
//														:  cvjs_InitializeSVGHyperlinkClick(floorplan_div) extended to handle drag of xlink hyperlinks
//	   version: 3.0.11f 		    May   09 - 			:  xlink, drag improvements
//	   version: 3.0.11g 		    May   09 - 			:  Setting SVGGroup to use masterBackground drag ,  cvjs_SVGGroup[cvjs_active_floorplan_div_nr].drag(dragMove, dragStart, dragEnd);
//	   version: 3.0.12a 		    May   10 - 			:  For: cvjs_customMethodForOnLoadEnd , set cvjs_loadInProgress flag.
//	   version: 3.0.12b - h 		May   11 - 15   	:  Moved dragStart, dragEnd, dragMove externally , changed cvjs_InitializeSVGHyperlinkClick() to be similar to vqRooms setup
//	   version: 3.0.12n 			May   17   			:  moved borders around highlights in cvjs_InitializeSVGHyperlinkClick
//	   version: 3.0.13a 			May   17   			:  Threshold for xlink pinch operation
//	   version: 3.0.13a 			May   17   			:  Border thickness on xlink objects 
//	   version: 3.0.13b 			May   17   			:  Parsing of non formatted layers. Added layer URLs off to cvjs_InitializeSVGHyperlinkClick 
//	   version: 3.0.13c 			May   17   			:  Updated arrays for cvjs_colorSingleSVGHyperlink and cvjs_resetSVGHyperlinkColors
//	   version: 3.0.13d 			May   21   			:  cvjs_layerOff, cvjs_LayerOn, added code for handling layername (layer list all on/off would stall on individual _block layers)
//	   version: 3.0.13e 			May   21 - 24  		:  Add original file array,  e-mail interface, PDF publishing  
//	    							May   21 - 24  		:  cvjs_serverSendPDFEmailController, cvjs_emailScreenAsPDFwithRedlines()
//	   version: 3.0.13f 			May   25 - 28		:  text_move1, redline text, transformation would make Acrobat Standalone crash  
//														:  cvjs_setLooperPosition , cvjs_windowResize_position()
//	   version: 3.0.13g 			May   28			:  adjustment of QuickCount symbol, ImageObject tooltips implemented
//	   version: 3.0.13h 			May   28 - 			:  adjustment of QuickCount symbol, ImageObject tooltips implemented
//	   version: 3.0.13i 			May   30 - 			:  All layer off at layer parsing, then layers on. Extents issue for JPMC DWG drawing, works on all browsers besides Chrome! (extents on several layers are off)
//     version: 3.0.13j             May   30 -          :  in cvjs_resetZoomPan_SetMasterBackground(active_floorplan_div_nr) added cvjs_checkLicense()
//														:  in cvjs_setLicenseKeyDirect, parse for json
//														:  change trial mode to be based on bbox extents in masterbackground
//     version: 3.0.13k             May   30 - 31       :  cvjs_SVGGroup[cvjs_active_floorplan_div_nr].add(notLicensed)
//														:  only license key check at creation of masterbackground
//     version: 3.0.14a             June  1   			:  added direct SVG load under sharepoint server
//     version: 3.0.14a             June  1   			:  in cvjs_publishPDFViaButton(), changed to tcpdf creation library, note! new php files!
//     version: 3.0.14c             June  4   			:  changed init AX version for servlet based conversion
//     version: 3.0.14d             June  7-8   		:  replace cvjs_serverDeleteFileController globally for delete-file.php
//														:  implementing custom method cvjs_dragBackgroundToFront_SVG() 
//														:  PNG, masterbackground to front + mouse drag handler activated
//														:  If PDF, we put masterbackground on top (bitmaps in documents) 
//     version: 3.0.14e             June  8   			:  new method cvjs_AddTextAndTBorderOnSpaceObjectId_GlobalHeight
//     version: 3.0.14e             June  11   			:  vqRooms[cvjs_active_floorplan_div_nr]. in Space, SpaceLayerList, 
//     version: 3.0.14f             June  18   			:  panWithThumb, try/catch on zoomWindow 
//     version: 3.0.14f             June  19 -June 21 	:  various stuff for space object activation, see custom_host_parser.js 
//     version: 3.0.14g             June  25 			:  Debug for cvjs_rPaper after second initialization
//     version: 3.0.14g             June  25 			:  Download Space Object processed SVG, iconpage 5, cvjs_saveAsSVG(floorplan_div)
//     version: 3.0.14g             June  26 			:  cvjs_getStickyNotesRedlineXML()
//     version: 3.0.15a             July  1 			:  XML DXF merge added to interface
//     version: 3.0.15a             July  2 -3			:  cvjs_mergeDXFViaButton(floorplan_div) with all associated functions
//														:  /merged/ folder and /converters/dwgmerge2019/ folder
//														:  /br/ in text objects
//     version: 3.0.15b             July  10			:  download_link() implemented
//     version: 3.0.15c             July  24			:  fix of multipage PDF loading from within Sharepoint structure, when setting op a fixed /conversion/pdf/ folder
//     version: 3.0.15d             July  27			:  (labelled as 15c in comments):  ALL interface methods has been updated 
//     													:  so they can be called through external API with floorplan_div as parameter
//     version: 3.0.16a             Aug   07-09			:  API methods to extract and set scale information , cvjs_setCurrentMeasurementUnits(), cvjs_getSvgToWorldUnits(), cvjs_getCurrentMeasurementUnit()
//     version: 3.0.16a             					:  cvjs_resetInitialization_FloorplanDiv()  , pane change UNI Stuttgart application
//     version: 3.1.20b            NEW VERSION NR		:  returns false if cvjs_resetZoomPan(); is not called with a floorplan_div
//     version: 3.1.20b             					:  updated: cvjs_loadStickyNotesRedlines(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
//														:  cvjs_saveStickyNotesRedlines(floorplan_div_Array[cvjs_active_floorplan_div_nr] )
//														:  cvjs_clearCurrentRedline( floorplan_div_Array[cvjs_active_floorplan_div_nr] )
//														:  cvjs_insertImageLink(floorplan_div)
//														:  cvjs_openFileLoadToServer(floorplan_div_Array[cvjs_active_floorplan_div_nr])
//     version: 3.1.20c            Aug 15 - 			:  cvjs_setLooperPosition()
//														:  cvjs_CalibrateMeasurementCallback() 
//     version: 3.1.20d            Aug 15 - 			:  cvjs_QuickCountCallback() , renamed method, seems to calculate double click twice, esc works. 
//     version: 3.1.20e            Aug 16 - 21			:  Added: FileNamePath.indexOf('fileName=')>-1 for preconverted .svg load through asp, php, etc. 
//														:  for all page-change methods, added "fileName=" check for asp type page change
//														:  added: cvjs_getFileController, for page change when loading pdf	
// 
//     version: 3.1.20f            Aug 22				:  cvjs_PageChangeList() , similar to CADViewer Pro page change list
//     version: 3.1.20g            Aug 24				:  if (cvname == "cvjs:area") cvjsArea = this.value;
//     version: 3.1.20h            Aug 28-29			:  if (cvname == "cvjs:area") cvjsArea = this.value;
//														:  cvjs_AddTextAndTBorderOnSpaceObject  , var i=0;
//     version: 3.1.20i            Aug 31				:  fixed double click eescape process in QuickCount
//														:  cvjs_MeasurementCallback();
//     version: 3.1.21a-b          Sep 8 -13			:  Implemented area measurement command
//     version: 3.1.21c            Sep 15				:  Controls of server side print path to php cvjs_setServerLocationURL , so pdf is saved in the same location path as fileLoader
//     version: 3.1.21d            Sep 20				:  
//     version: 3.1.21e            Sep 20  23			:  Make ellipse redline  cvjs_drawSpaceObject_RedlineEllipse(),  cvjs_drawSpaceObject_RedlineEllipseCloud()
//     version: 3.1.21f            Sep 25				:  Implemented cvjs_setDragBackgroundOnTop(floorplan_div) to enable drag on image and text rich pdf files
//     version: 3.1.21g            Sep 26				:  Cloud is generated interactively on drag. Ellipse implemented in save redline.js file redline (xml not yet implemented)
//     version: 3.1.21h            Sep 27-28			:  cvjs_closeAreaMeasurement() and MeasurementModal is extended with button to close measurement polygon
//     version: 3.1.21i            Oct 1				:  cvjs_svgToWorldUnits = cvjs_get_dwg_scaled_value(1.0, ) based on cvjs_drawingCoordinates
// 								   Oct 1				:  Implemented: cvjs_buildFolderTree(FileLocation, "floorPlan"); for generation of right side menu tree
//     version: 3.1.21j            Oct 2				:  Implemented cvjs_CleanLayout(floorplan_div), 
//														:  added: variable cvjs_buildFolderTree_crossDomain, cvjs_selectPageFromList(floorplan_div)
//								   Oct 3				:  mouseup_stickynote() changed transformation, mousedown_movestickynote, mousedown_imagelink, 
//								   Oct 3                :   .appendTo('body'); on all modals for initial positioning 
//     version: 3.1.21k            Oct 4				:  changed transformation in: changed transformation, mousedown_movestickynote, mousedown_imagelink
//														:  function cvjs_showIconnoteTip modified .appendTo('body'); for imagenotes
//														:  added scrollLeft scrollTop for imagenotes , changed all .appendTo('body'); to .css({position: "fixed"});
//					l									:  add_file_object_image() modification	
//     version: 3.2.01a            Oct 8				:  renamed for new release and upload
//     version: 3.2.01b            Oct 10				:  renamed for new release and upload
//     version: 3.2.01b            Oct 14				:  only uri encoding for conversion when % not present in filename, works for ServerLocation, ServerUrl on Servlets
//     	           				   Oct 14				:  works for ServerLocation, ServerUrl on Servlets
//  							   Oct 14               :  conversion content paths,  replace \\ for / in all originating content .replace(/\\/g, "/");
//                                 Oct 18				:  cvjs_setBackgroundColorHex() , changed to work for floorplan_div   (adding _svg)
//                                 Oct 18				:  Added KO-KR , language with translation
//     version: 3.2.01c            Oct 18				:  Updated language file for other languages, made sure all changed are carried into french, spanish and portuguese
//     version: 3.2.01d            Oct 19				:  Editing Merge PDF, Upload, use current path from foldertree/latest converted file.
//								   Oct 19 				:  Implemented cvjs_serverCopyFileController, cvjs_setServerCopyFileHandler 	 
//								   Oct 22 				:  Added cvjs_setCustomMergedEmailHandler, cvjs_serverMergeDWGHandler
//								   Oct 23				:  Added code for cvjs_screenToPDF_Controller   - servlet code
//     version: 3.2.01e            Nov 6				:  Styled selection boxes, 3.2.0.css file: cvjs_paperSize, cvjs_paperOrientation, cvjs_unitForScale 
//								   Nov 8                :  id_data_connector, location changed, now based on cvjs_ServerUrl, updated to /space/html/nav_user_SpaceObjects_A_1_10.html
//														:  added: cvjs_buildCustom_4_dropdownMenu, cvjs_buildCustom_5_dropdownMenu
//														:  added: var cvjs_jsTreeSelectionCurrentData = ""; var cvjs_jsTreeSelectionCurrentDataLength =0; cvjs_custom_jsTreeSelection, for including tree structure in maximo case
//     version: 3.2.01f            Nov 15				:  batch print pdf: sendServerStringToServer, updated cvjs_serverSavePrintModeController == 2 to be a server path. 
//														:  Note: setting done in method, not as an inital control parameter
//								   Nov 16			    :  in finish_measurement(),added flag to clean out removeHandleFunc if Area
//								   Nov 16			    :  cvjs_measurearea_checkbox added removeHandleFunc depending on area/length
//								   Nov 19			    :  updated cvjs_buildFolderTree() to check string length of server path
//     version: 3.2.01g    Nov 20	:  3.2.01g   - change to cvjs_add_file_object  and have the file element element as parameter
//								 	: <div style='height: 0px;width: 0px; overflow:hidden;'><input id="cvjs_upfile_2" type="file" multiple onchange="cvjs_add_file_object('cvjs_upfile_2');"/></div>
//  
//									:  when axupload is finish:  we add a try-catch refresh of the #tree , jstree for service implementations
//									: 	fixed onFineChange:\'cvjs_setBackgroundColorHex(this)\'}   // bug in backgroundchange
//									:   added HandleLayer to Space Layer modal, so dual processing -hl  and -rl/-tl
//						   Nov 22   :   To make consistant with service added variables rest_serviceCall, rest_applicationPlatform - rest_ServiceToken;
//									:   added cvjs_conversion_setApplicationServiceParameters(), and updated 
//									:  	added rest_leaveStreamOnServer controls
//									:   Russian language file
//     version: 3.2.01h   	Dec 04	:   Added Malaysian language translation
//         					Dec 05	:   Added Chinese-Simplified language translation
//     version: 3.2.01i   	Dec 10	:   change_space_fixed_location() added cvjs_ in cvjs_active_floorplan_div_nr);
//									:   new floor_plan objects, tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});
//     version: 3.2.02a   	Dec 13	:   function cvjs_drawSpaceObject_CustomRectangle(svgImagePath, spaceObjectId) to add custom space content with background (HVAC case)
//     version: 3.2.02b   	Dec 14	:   updated call using in all method calls, currentNode_attributeStatus = "unpopulated";  // 3.2.02b
//     								:   added: cvjs_addRectangleCustomSpaceObject() method, including sorting of background objects, added behind last cv_ object.
//     version: 3.2.02c   	Jan 07	:   cvjs_AddTextAndTBorderOnSpaceObjectId()   - added to cvjs_setCreationMode
//				2019		Jan 08	:   // AUTOCAD HANDLE PARSING  - cvjs:xdata handling added to branch
//							Jan 08  :   id_main_data_template_type added in custom settings and in  cvjs_setCreationMode
//									:   added: creationModeModal_   and cvjs_creationInputType , to control input type
//									:   /space/html/nav_admin_SpaceObjects_C_1_06.html
//     version: 3.2.02d   	Jan 09	:   setting worldUnits.units =cvjs_units=mm as default. Include cvjs:area branch to calculate unit, display and store as m2 (shall this be changed?)
//							Jan 10-13  :   cvjs_batchConvertDrawingsToPDF_CustomReport()  implemented
//     version: 3.2.02e   	Jan 14	:   introduced an handle: cvjsHandle into node structure to be able to update original drawing with xdata
//
//										<cvjsAddXdataToHandle>
//											<totalUpdateHandles>1</totalUpdateHandles>
//											<updateHandle>
//												<handle>2901</handle>
//												<altName>myNewHandle_01</altName>
//											</updateHandle>
//										</cvjsAddXdataToHandle>
//
//     version: 3.2.02f   	Jan 16	:  all parameters around icon interface show/hide as array of floorplan_div: cvjs_iconInterfaceDisabled[]
//							Jan 25  :  Quick count adjusted for doubleclick 
//							Jan 25  :  Save of .rw files in asp.net or servlet mode 
//     version: 3.2.02g   	Jan 26	:  CreationModeModal: added to all other languages (not translated)
//							Jan 26  :  cvjs_PrintIconDisabled  , Enable/ cvjs_DisablePrintIcon("floorPlan");
//							Jan 30  :  nav_user_SpaceObjects_A_1_12, added cvjs_hideInformationModal(floorplan_div), cvjs_displayInformationModal(floorplan_div, textString, modalHeight)
//							Feb 04  :  cvjs:area  added "in"/inch in area calculation
//							Feb 05  :  adjustment: cvjs_displayInformationModal
//     version: 3.2.02h   	Feb 06	:  cvjs_units -> cvjs_units[] , cvjs_svgToWorldUnits[]
//        					Feb 07	:  
//							Feb 10  :  Added flag to be able to demo change handle ID, demoonly_customHandleChange; 
//							Feb 12  :  Set to default color when leaving the Space, setUpVqRooms()


//     version: 3.3.01a   	Feb 12	:  Start on new interface design
//							Feb 13-14: Implementing topIconMenu, new Icon controller
//							Feb		 :  changed class: controls_min  to position minimum icon menu to topIconMenu
//							Feb 14   :  Added tooltip to minimumDisk
//									 :  Adding placeholders to topIconBar
//     version: 3.3.01b   	Feb 15	 :  Added text string. 	NextMenuPage: 'Next Menu Page'
//     								 :  Extended programming in cvjs_3.3.0.css   - topIconMenu settings for highlight
//									 :  Setting text object on topIconBar navigation bar: #floatpagemenuText1_topBar_, #floatpagemenuText2_topBar_
//							Feb 16   :  Removed "pages" from nav_user_SpaceObjects_A_3_3_01
//     version: 3.3.01c   	Feb 17	 :  Added xml to js parser
// 							Feb 18   :  cvjs_LoadTopIconMenuXML() implemented
//									 :  hideOnlyPop(), set  vqRoomMouseSelect = false;, and set vqRooms, so with modal active, highlight is permanent	
//     version: 3.3.01d   	Feb 19	 :  based location of topMenu as function of Element location, updated _resize methods
//									 :  display:'inline-block'  for tooltip on top menu items
//							Feb 20   :   cvjs_windowResize_position_WidthHeight , updated to return if <div> not intialized, reposition topNavigation bar
//     version: 3.3.01e   	Feb 20	 :  implemented _resizeWindow_ methods, removing boolean variable, exchanged in all samples
//									 :  cvjs_floorPlanInsertImageEncapsulate  , given init location  
//							Feb 27   :  cvjs_makeStampUpperRight()  - updated code 
//							Feb 27- Mar 1   :  floodfill algorithm
//     version: 3.3.01f   	Mar 1	 :  second canvas object
//							Mar 5    : cvjs_serverSavePrintModeController = 6;  to make a bitmap image of floodfill spaces
//     version: 3.3.01g   	Mar 7	 : assignment of at load: cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr], cvjs_units[cvjs_active_floorplan_div_nr] 
//     version: 3.3.01h   	Mar 10	 : update cvjs_LoadTopIconMenuXML() for space menu XML input
//                          Mar 12   : cvjs_connectTextInstances(textString1, textInstance1, textString2, textInstance2, lengthfactor1, lengthfactor2)
//                          Mar 15   : cvjs_LayerListSpaceObject() added mode 3 for floodfill - Space ID 
//							Mar 15   : moved all cvjs_floodfill() processing into 3.3.01h
//     version: 3.3.02a   	Mar 15	 : .mouseout() in cvjs_setUpVqRooms_currentNode()
//     version: 3.3.02b   	Mar 20	 : cvjs_serverSavePrintModeController = 7, callback after a png has been created
//							Mar 22   : Adjusted gMenu top location  (not changed width + height)
//     version: 3.3.02c     Mar 26   : cvjs_swapLayersInDrawing  missing in XML parser  
//     version: 3.3.02d     Apr 05   : change_space_fixed_location controls popup of modals in vqRooms
//                                   : when adding cvjs_addRectangleCustomSpaceObject() introducing new parameter: cvjs_supressPopUpModal_callback_JS
//									 : for callback and no modal popup  
// 									 : stop_cvjs_create_custom_rectangle , updated to put external svg embedded image back in svg 
//                          Apr 08   : cvjs_addPinMarker(floorplan_div, spaceObjectId, spaceObjectName, spaceObjectType, spaceObjectLayer) defined  
// 							Apr 09   : updated cvjs_LoadTopIconMenuXML , with PinMarker

// 		version: 3.3.02e  	Apr 15   :  printDebugFlag = false;  this variable is needed true when applying floodfill algorithm
  
// 		version: 3.3.02f  	Apr 25   :  print to scale start
//                          Apr 30   : added cvjs_PrintToScale
//                          May  1   : printOnLoadedDocumentRotated_Server_PrintToScale, printOnLoadedDocument_Server_PrintToScale
//									 : adding content to .printModal
//		version: 3.3.02g	May	 2	 : cvjs_PrintModal_PrintToScale 
//                          May  9   : cvjs_customFileLoad, .., cvjs_mergeQR  added as new graphics placeholders

//		version: 3.3.04a	May	 9	 : moving a sub version 
//							May 10   : topDownloadButtonPane implemented,   mergeQR externally implemented
//		version: 3.3.04b	May	13	 : making a new download mode to DWGMerge 
//		version: 3.3.04c	May	14	 : encapsulating all DWGMergeCode mergQR code into 04c, qrcode.js source file in /app/js 
//		version: 3.3.04d	May	20	 :  
//		version: 3.3.04e	May	21	 : added: jQuery("body").on('DOMSubtreeModified', "#cvjs_qrcode_"+floorplan_div, function(  
//		version: 3.3.04e	May	22	 : added: cvjs_directFileLoad and fileLoad callback in  cvjs_add_file_object()
//		version: 3.3.05a	May	23	 : Simplyfying topDownloadButtonPane call for redline merge
//                                   : changing MergeDwgServlet.java to include "<customoutfilename>"+outFile.substring(outFile.lastIndexOf("/")+1)+"</customoutfilename>";
//									 : parsing for this in QR class and mode=4, merge download
//		version: 3.3.05b	May	27	 : Implemented:  cvjs_CompareFiles_CustomFileModalContent ,  cvjs_CompareFiles_CustomFileModalContent_flag, to control the content of the 
//									 : file menu modal for compare drawings
//		version: 3.3.05b	May	28	 : updated call to GetQRCodeController, to include filename in case file is not dwg.
//		version: 3.3.05c	May	28	 : rewritten cvjs_navigationMenuItemHighlight(),  cvjs_insertSingleIconImage()
//			 						 : made topIconMenu_placeholder_2, topIconMenu_placeholder_1 draggable
//		version: 3.3.05d	May	29	 : for dragging, topIconMenu_placeholder_1 needs to have width set dynamically, cvjs_LoadTopIconMenuXML, cvjs_LoadTopIconMenu
//									 : added cvjs_customCommand_xx to cvjs_LoadTopIconMenuXML  , extended XML to include tooltip text to custom commands
//									 : 	<customcommand>
//									 :		<tooltip>This is the highlight text for customCommand 01</tooltip>
//		version: 3.3.05e	June 03	 : custom control of icon menu width
//							June 04  : jQuery("#topIconMenu_placeholder_1), adjusted in cvjs_resize_postion , change tip[cvjs_active_floorplan_div_nr] in cvjs_insertSingleIconImage()
//									 : in .xml, added: <icons_per_row>0</icons_per_row>	<icon_page_left_x>0</icon_page_left_x>	<icon_page_left_y>0</icon_page_left_y>
//		version: 3.3.05f	June 04	 : cvjs_loadFileWithDataOverlays(filename,10); // 3.3.05f  
// 									 : cvjs_CompareFiles_setFileModalContent()
//		version: 3.3.06a	June 04	 : encapulate all jQuery('#1floor1').mouseover(function() in one method
//		version: 3.3.06b	June 04	 : cvjs_setModalSingleFileItems(number)   - optimized modal creation process
//		version: 3.3.06c	June 05	 : position of zoom disk in xml, cvjs_gMenu_pos_x , cvjs_gMenu_pos_y
//		version: 3.3.06d	June 05	 : exit condition cvjs_CompareFiles_setFileModalContent(); 
//							June 10  : vjs_gMenu_pos_x, y init values
//		version: 3.3.06e	June 10	 : setUpVqRoomsGeneric();
//									 :  change default in cvjs_addRectangleSpaceObject() x4
//									 :  defined cvjs_changeSpaceObject_ManualCreationMode  , created new icon structure in standard, non XML case
//		version: 3.3.07a    June 11  : cvjs_createSpaceOutput_JSfile(), cvjs_createSpaceOutput_JSfile_Legacy() 
//									 : added cvjs_loadSpaceObjectsUser()
//									 : added cvjs_setSpaceObjectsAbsolutePath(path,serverPath) 
//									 : cvjs_setSpaceObjectUrl(file) , cvjs_loadSpaceObjects(floorplan_div)
//		version: 3.3.07a    June 18  : add extra icon space for info-command on page 1
//		version: 4.1.01a    June 19  : Set up for - AX2020
//		version: 4.1.01b    June 20  : Compare file box implemented, compareDrawingName_11.png
//		version: 4.1.01c    June 24  : Compare file box &uarr; , &darr; 
//									 : CompareDrawingName_11B
//		version: 4.1.01d    June 25  : placeholderwidth adjust, i-icon 
//		version: 4.1.01e-f  June 26  : compare check for &filename=  , added copy of content of custom_modal_dir_listing to compare name modal
//		version: 4.1.01g  	June 26  : Asp.net, use cvjs_serverSaveFileControllerRedlines for save space objects
//		version: 4.1.01h  	July 3   : function cvjs_supressPopUpModalMode(modal_mode)
//		version: 4.1.01j  	July 4-9 : QR code , added js_data['zip_output'] = "true"; js_data['QR_code'] = "true";
//		version: 4.1.01k  	July 15  : thingable Remove check for direct upload of same drawing multiple times. , $document.getElementById(myElement).value = "";
//		version: 4.1.02a  	July 20  : <customoutfilename>  return url in addition to filename, cvjs_getStickyNotesRedlineXML(false) for Merge to remove sticky notes

//		version: 4.1.02b  	Aug 1    : js_data['zip_output'] updated for mergeRedlines, allowed custom callback, added waitlooper to QRcode
//		version: 4.1.02c  	Aug 3    : Added standard case QR code, when no <customoutfilename>
//		version: 4.1.02d  	Aug 5    : cvjs_displaySpaceObjectsStructure() rewrite to new icon layout. Note tha users can control layout in custom pulldown from data_host_connector
//		  					Aug 5    : <no_QR_code_available> as return call in cvjs_serverGetQRCodeController
//		version: 4.1.02e-f  Aug 7    : cvjs_deleteSpaceImageObject(floorplan_div)
//		version: 4.1.02g-h  Aug 8    :  SearchCustomModal , missing in all languages, IconPage_p5_8 missing in some languages
//                          Aug 8    :  NextMenuPage not translated in all languages
//							Aug 8    : icon_command_active == 34 , cvjs_resizeSpaceImageObject("floorPlan");
//		version: 4.1.02i    Aug 9    : port of all Space Image code to .js file 
//		version: 4.1.02j    Aug 15   : in cvlicense.js, document.body.appendChild is asynchronious, so have to put the check at the end of the onload End
//									 : alternatively, have the license defined in top part of document	
//									 : cvjs_maxfiles = 60;  
//		version: 4.1.02k-l  Aug 22-26: 	jQuery("#"+floorplan+"_svg").position() as function of _svg.
// 									 :  resize_Position, cvjs_insertSingleIconImage, cvjs_navigationMenuItemHighlight
//		version: 4.1.03a    Aug 27 -29   :  Angular JS implementation, cvjs_setImagesLocationPathDirect(imagePath)
//									 : 	cvjs_InitCADViewerJS_app() , added imagePath  , implemented nodejs server.js
//                          Sep 2 -  :  cvjs_NodeJSserver implemented to control NodeJS  temp_print?file=
//		version: 4.1.03a    Sep 3    :  cvjs_saveAsSVGOnServer -> cvjs_saveAsSVG in sensor insert + xml, "download SVG" swap to  /assets  in Angular 
//      version: 4.1.03b    Sep 9    :  Ionic, background color bug, added: try {document.getElementById('cvjs_backgroundPickerValue')
//  	version: 4.1.03d    Sep 9    :  cvjs_insertSingleIconImage(), cvjs_navigationMenuItemHighlight(), tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'}); + rewrite

// 		version v5.01.03e   Oct 10    . Flag for 3D drawings

// 		version v5.01.03f   Oct 31    . <use_as_QR_code_bitmap>
// 		version v5.01.03g   Oct 31    . <use_as_QR_code_bitmap>

// 		version v5.01.03h   Dec 3    : 

// 		version v5.01.03i-k   Jan 24 -25   :  debug for compare in FileAgo on AWS
// 		version v5.01.04a   Jan 28 -29     :  PowerSouth - ZW class added for thickness control  
//										   :  jQuery("*[id] .ZW").each(function()
//		version v5.01.04c   Feb 04		   :  cvjs_initZeroWidthHandling() scale factor redraw
 
//		version v5.01.04d	Feb 25		   :  Added new custom image insert method: cvjs_addFixedSizeImageSpaceObjectXY("floorPlan", 1100, -210)

//		version v6.01.15 	Apr 25	:   Image Space Objects
 
 
//  
 
    
var cvjs_maxfiles = 200;   // 4.1.02j  // 6.1.30
 
var cvjs_globalScaleNote = 1.0;   // variable to control the size of the Note

// Variables moved from community version
 

var custom_modal_dir_listing = [
	{ filename: "My file - revision1.dwg", url: "http://server/path/myfile-revison1.dwg", path: "/serverx/path/myfile-revison1.dwg"  },
	{ filename: "My file - revision2.dwg", url: "http://server/path/myfile-revison2.dwg", path: "/serverx/path/myfile-revison2.dwg" },
	{ filename: "My file - revision3.dwg", url: "http://server/path/myfile-revison3.dwg", path: "/serverx/path/myfile-revison3.dwg" },
	{ filename: "My file - revision4.dwg", url: "http://server/path/myfile-revison4.dwg", path: "/serverx/path/myfile-revison4.dwg" }
];

var cvjs_saveRedlinesAsDXF = false;
var cvjs_saveRedlinesAsXML = false;


// Variables moved from community version

var layer_vqstickynotes = "";   // partially done
var layer_vqredlines = "";

var bMouseDown = false,
bTempMouseDown = false,
bPan = false,
firstx, firsty,
lastDX, lastDY,
TouchZoomFactor = 1.1,
floorplan_height,
floorplan_width,
tip_width=30,
tip,
vqRoomMouseSelect = false,

thumbsMode = false,

layer_vqdrag,

totalDragStart = 0,
string_X = "",
dx = 0,
dy = 0,
pdx = 0,
pdy = 0,
openHyperlinkInNewWindow = false,
hyperlinkNewWindowWidth = 200,
hyperlinkNewWindowHeight = 200,

cvjs_customToolTip = false,
locked = false,
rid;

/**
 * Set a custom tooltip overwriting the standard tooltip displaying either Name or Id
 * @param {boolean} customtooltip - true for custom tooltip, false otherwise
 */

function cvjs_setCustomToolTip(customtooltip){

	cvjs_customToolTip = customtooltip;
}

var cvjs_customToolTipArrayId = new Array();
var cvjs_customToolTipArrayContent = new Array();


/**
 * Show the standard tooltip in a given location
 * @param {string} tiptext - text of the tooltip to be displayed
 * @param {int} x - x coordinate location of the tooltip object to be displayed
 * @param {int} y - y coordinate location of the tooltip object to be displayed
 */

function cvjs_showToolTipLocation(tiptext, x, y){

	tip[cvjs_active_floorplan_div_nr].html(tiptext);

					// 3.2.01e
					tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});
	
	
	var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
	var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
	if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
	//console.log("absolute");
	   tip[cvjs_active_floorplan_div_nr].css("left", x+document.documentElement.scrollLeft+10).css("top", y+document.documentElement.scrollTop-25);
	}
	else{  // we have placed CV-JS inside a div and we have to make a relative position

		//console.log("inside");
		//console.log(position.left+" "+position.top+"tipText="+tipText+" e.clientX "+e.clientX+" e.clientY "+e.clientY+" "+document.documentElement.scrollLeft+" "+document.documentElement.scrollTop);
		//console.log(e.clientX-position.left+document.documentElement.scrollLeft+10);
		//console.log(e.clientY-position.top+document.documentElement.scrollTop-25);
		tip[cvjs_active_floorplan_div_nr].css("left", x-position.left+document.documentElement.scrollLeft+10).css("top", y-position.top+document.documentElement.scrollTop-25);
	}
	
/*	
	
	
	if (x > floorplan_width)
	   tip[cvjs_active_floorplan_div_nr].css("left", x+document.body.scrollLeft-tip_width-20).css("top", y+document.body.scrollTop-25);
	else
	   tip[cvjs_active_floorplan_div_nr].css("left", x+document.body.scrollLeft+10).css("top", y+document.body.scrollTop-25);
*/

	tip[cvjs_active_floorplan_div_nr].show();
}


/**
 * Hides the standard tooltip previously shown with cvjs_showToolTipLocation(tiptext, x, y)
 */

function cvjs_hideToolTip(){

	tip[cvjs_active_floorplan_div_nr].hide();

}





/**
 * Set a custom tooltip overwriting the standard tooltip displaying either Name or Id
 * @param {string} id - id of the custom tooltip object to be displayed
 */

function cvjs_displayCustomToolTip(id){

//console.log(id);

	for (ids in cvjs_customToolTipArrayId){

		if (cvjs_customToolTipArrayId[ids] == id){

			return	cvjs_customToolTipArrayContent[ids];

		}

	}

	// there is no data for content, return the id
	//var newtooltip = "no data"

	return id;
}



/**
 * Set the content of a custom tooltip, based on the id of the object
 * @param {string} id - id for tooltip
 * @param {arr} contentArr - content for custom tooltip, array with lines of text
 */

function cvjs_setCustomToolTipValue(id, contentArr){

	// we make a string based on the contentArray
try{
	var contentString = "";

	for (var i=0; i<contentArr.length; i++){

		if (i==0)
			contentString = contentArr[0];
		else
			contentString = contentString+"<br>"+contentArr[i];
	}
	// 6.2.64
	var createflag = true;
	for (i=0; i<cvjs_customToolTipArrayId.length; i++){
		if ( id == cvjs_customToolTipArrayId[i]){
	//console.log("inner "+cvjs_customToolTipArrayId[i]+" "+id);
			cvjs_customToolTipArrayContent[i] = contentString;
			createflag = false;
		}
	}
	//console.log("set tooltip "+id+"  "+contentString+" "+createflag);
	
	if (createflag){	
		cvjs_customToolTipArrayId.push(id);
		cvjs_customToolTipArrayContent.push(contentString);
	}
	
}catch(err){console.log(err);}	
	
}






/**
 * Text Search; finds a text string in the drawing, and zooms over the search result
 * @param {string} searchString - the text string to search after
 * @param {string} replaceString - the text string to replace with
 */

function cvjs_searchReplaceText(textString, replaceString){


	jQuery("text").each(function( index ) {

		  if ( ((jQuery( this ).text()).toLowerCase()).indexOf(textString.toLowerCase())>-1){

			//console.log(jQuery( this ));

				// console.log( index + ": " + jQuery( this ).text() );

				var xx = jQuery( this ).attr('x');
				var yy = jQuery( this ).attr('y')

				var transformtext = jQuery( this ).attr('transform');
				var font_size = jQuery( this ).attr('font-size');
				var stroke = jQuery( this ).attr('stroke');
				var fill = jQuery( this ).attr('fill');
				var fill_opacity = jQuery( this ).attr('fill-opacity');

//				console.log(xx+" "+yy+" "+transformtext+" font "+font_size+" stroke "+stroke+" fill "+fill+" fill-opacity "+fill_opacity);

//console.log("before swap!" + jQuery( this ).text());

				var replacewith = "<text x=\""+xx+"\" y=\""+yy+"\" transform=\""+transformtext+"\" >"+replaceString+"</text>";

//	(jQuery( this ).text()).replaceWith("hello world!");

//console.log(replacewith);

				jQuery( this ).replaceWith( replacewith );

	//			layer_TEXTOS_PRINCIPALES.add(cvjs_rPaper[cvjs_active_floorplan_div_nr].text(xx,yy,replaceString).attr({"font-size": "28px","font-family": "Arial", fill: "magenta", stroke:"magenta", "fill-opacity":"1"}));

				//(jQuery( this ).text()).html("hello world!");

		  }
	});

}





/**
 * Controls hyperlinks, so if click on a hyperlink shall open the link in the same instance or open the link in a new window. Default is false.
 * @param {boolean} openLinkFlag - true if to open links in new window, false otherwise
 * @param {int} windowWidth - width of new popup window, set an arbitary value if openLinkFlag is false
 * @param {int} windowHeight - height of new popup window, set an arbitary value if openLinkFlag is false
 */

function cvjs_openHyperlinkInNewWindow(openLinkFlag, windowWidth, windowHeight){

	openHyperlinkInNewWindow = openLinkFlag;
	hyperlinkNewWindowWidth = windowWidth;
	hyperlinkNewWindowHeight = windowHeight;
}



function consolelog(str)
{
	console.log(str);
}



/**
 * Returns a list with all Ids in the Space Object structure
 * @return {array} value - Returns Id list
 */

function cvjs_getSpaceObjectIdList(){

	var idList = new Array();

	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		idList.push(vqRooms[cvjs_active_floorplan_div_nr][spc].data("id"));
	}
	return idList;
}


/**
 * Returns a list with all Names in the Space Object structure
 * @return {array} value - Returns Names list
 */

function cvjs_getSpaceObjectNamesList(){

	var idList = new Array();

	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		idList.push(vqRooms[cvjs_active_floorplan_div_nr][spc].data("name"));
	}
	return idList;
}


/**
 * Returns the Type of a given Space Object ID
 * @param {string} Id - Id of the Space Object in which to retrive the corresponding Type
 * @return {object} value - Returns the Type corresponding to the given Id, -1 if not found
 */

function cvjs_getSpaceObjectTypefromId(Id){

	var type = -1;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == Id ){
			type = vqRooms[cvjs_active_floorplan_div_nr][spc].data("type");
			return type;
		}
	}

	return type;
}





/**
 * Returns the first NodeId in the Space Object structure based on an Id
 * @param {string} Id - Id of the Space Object in which to retrive the Node id
 * @return {object} value - Returns the NodeId corresponding to the given Id, -1 if not found
 */

function cvjs_getSpaceObjectNodefromId(Id){

	var node = -1;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == Id ){
			node = vqRooms[cvjs_active_floorplan_div_nr][spc].data("node");
			return node;
		}
	}

	return node;
}


/**
 * Returns the first Name in the Space Object structure based on an Id
 * @param {string} Id - Id of the Space Object in which to retrive the name
 * @return {object} value - Returns the Name corresponding to the given Id, -1 if not found
 */

function cvjs_getSpaceObjectNamefromId(Id){

	var name = -1;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == Id ){
			name = vqRooms[cvjs_active_floorplan_div_nr][spc].data("name");
			return name;
		}
	}

	return name;
}


/**
 * Returns the first Id in the Space Object structure based on a nodeId
 * @param {string} Id - Node id of the Space Object in which to retrive the id data filed
 * @return {object} value - Returns the id corresponding to the given nodeId, -1 if not found
 */

function cvjs_getSpaceObjectIdfromNode(nodeId){

	var id = -1;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("node") == nodeId ){
			id = vqRooms[cvjs_active_floorplan_div_nr][spc].data("id");
			return id;
		}
	}

	return id;
}


/**
 * Returns the first Name in the Space Object structure based on a nodeId
 * @param {string} NodeId - Node id of the Space Object in which to retrive the Name data filed
 * @return {object} value - Returns the Name corresponding to the given nodeId, -1 if not found
 */

function cvjs_getSpaceObjectNamefromNode(nodeId){

	var name = -1;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("node") == nodeId ){
			name = vqRooms[cvjs_active_floorplan_div_nr][spc].data("name");
			return name;
		}
	}

	return name;
}




/**
 * Retrieves the attribute status from a Space Object
 * @param {string} NodeId - Node id of the Space Object in which to retrive the status
 * @return {object} value - Returns the attributeStatus
 */

function cvjs_getAttributeStatus(nodeId){

	var nodeArrId = 0;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("node") == nodeId ){
			nodeArrId = spc;
		}
	}
//console.log(nodeId+" "+nodeArrId);
	var status = vqRooms[cvjs_active_floorplan_div_nr][nodeArrId].data("attributeStatus");

//console.log(status);
	return status;
}

/**
 * Retrieves the attribute status from a Space Object
 * @param {string} NodeId - Node id of the Space Object in which to retrive the status
 * @param {string} attributeStatus - attributeStatus of the node, "populated" or "unpopulated"
 */

function cvjs_setAttributeStatus(nodeId, attributeStatus){

	var nodeArrId = 0;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("node") == nodeId ){
			nodeArrId = spc;
		}
	}
//console.log(nodeId+" "+nodeArrId);

	vqRooms[cvjs_active_floorplan_div_nr][nodeArrId].removeData("attributeStatus");
	vqRooms[cvjs_active_floorplan_div_nr][nodeArrId].data("attributeStatus", attributeStatus);

}






/**
 * Retrieves an attribute value from a Space Object
 * @param {string} NodeId - Node id of the Space Object in which to retrive an attribute
 * @param {string} name - name of attribute (name, value) pair
 * @return {object} value - Returns the value pair corresponding to the given name
 */

function cvjs_getAttributeFromSpaceObjectNode(nodeId, attributeName){


	var nodeArrId = 0;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("node") == nodeId ){
			nodeArrId = spc;
		}
	}

//console.log(nodeId+" "+nodeArrId);

	var allAttr = vqRooms[cvjs_active_floorplan_div_nr][nodeArrId].data("attributes");

//console.log(allAttr);

	for (var attrs in allAttr){
		var attrData = allAttr[attrs];
//		console.log(attrData.name+"  "+attrData.value);
		if ( attrData.name==attributeName){
			return attrData.value;
		}
	}

	return -1;
}



/**
 * Sets an attribute value in a Space Object
 * @param {string} NodeId - Node id of the Space Object in which to retrive an attribute
 * @param {string} name - name of attribute (name, value) pair
 * @param {string} value - name of attribute (name, value) pair to be set
 */


function cvjs_setAttributeInSpaceObjectNode(nodeId, attributeName, attributeValue){


	var nodeArrId = 0;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("node") == nodeId ){
			nodeArrId = spc;
		}
	}

//console.log(nodeId+" "+nodeArrId);
	var allAttr = vqRooms[cvjs_active_floorplan_div_nr][nodeArrId].data("attributes");

//console.log(allAttr);
	var attrflag = false;
	for (var attrs in allAttr){
		var attrData = allAttr[attrs];
		if ( attrData.name==attributeName){
			allAttr[attrs].value = attributeValue;
			attrflag = true;
		}
	}

	// 2017-08-26
	if (!attrflag){
			allAttr[allAttr.length] = { name: attributeName, value: attributeValue};
	}




// update the data field
	vqRooms[cvjs_active_floorplan_div_nr][nodeArrId].removeData("attributes");
	vqRooms[cvjs_active_floorplan_div_nr][nodeArrId].data("attributes", allAttr);


/*

	for (var attrs in allAttr){
		var attrData = allAttr[attrs];
		console.log(attrData.name+"  "+attrData.value);

	}

*/




}

// handling of Layers and Groups

/**
 * Creates a new layer
 * @param {string} layer - name of layer to be created
 * @return {object} layerObject - Returns a new layer as a group on the SVG canvas
 */


function cvjs_newLayer(layer){

	try{
		layer = cvjs_rPaper[cvjs_active_floorplan_div_nr].g();
		//console.log("layer "+layer);
		return layer;
	}
	catch(err){
		// console.log(err);
	}
}



/**
 * Creates a new layer
 * @param {string} layer - name of layer to be created
 * @param {string} floorplan_div - name of floorplan div
 * @return {object} layerObject - Returns a new layer as a group on the SVG canvas
 */


function cvjs_newLayerDiv(layer, floorplan_div){

	try{
		layer = cvjs_rPaper[cvjs_rPaperIndex(floorplan_div)].g();
		//console.log("layer "+layer);
		return layer;
	}
	catch(err){
		// console.log(err);
	}
}





/**
 * Clears the current layer
 * @param {string} layer - name of layer to be cleared
 * @return {none}
 */


function cvjs_clearLayer(layer){

	try{
		
//		window.alert("1 "+layer);
		layer.remove();
//		window.alert("2 "+layer);
//		layer = cvjs_rPaper[cvjs_active_floorplan_div_nr].g(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0 0L0 0"));
		layer = cvjs_rPaper[cvjs_active_floorplan_div_nr].g();
//		window.alert("3 "+layer);
		//console.log("clear layer "+layer);
	}
		catch(err){
		layer = cvjs_rPaper[cvjs_active_floorplan_div_nr].g();
	}
	
	cvjs_customLayerContentAdded = false;
	
	return layer;
}


/**
 * Clears the current layer on a named floorplan div
 * @param {string} layer - name of layer to be cleared
 * @param {string} floorplan_div - name of floorplan div
 * @return {none}
 */


function cvjs_clearLayerDiv(layer, floorplan_div){

	//floorplan_div = floorplan_div + "_svg";
	
	
	
	
	try{
		layer.remove();
		layer = cvjs_rPaper[cvjs_rPaperIndex(floorplan_div+ "_svg")].g();
		//console.log("clear layer "+layer);
	}
		catch(err){
		layer = cvjs_rPaper[cvjs_rPaperIndex(floorplan_div)].g();
	}
	return layer;
}







/**
 * Clears the current layer and resets Text border objects
 * @param {string} layer - name of layer to be cleared
 * @return {none}
 */


function cvjs_clearTextLayer(layer){

	try{
		layer.remove();
		layer = cvjs_rPaper[cvjs_active_floorplan_div_nr].g();

		var border;
		for (border in vqTBorder){
				vqTBorder[border].attr(hide);
		}
	}
		catch(err){
		layer = cvjs_rPaper[cvjs_active_floorplan_div_nr].g();
	}
	return layer;
}










/**
 * Sort two layers in order
 * @param {string} layer1 - name of layer one
 * @param {string} layer2 - name of layer two
 * @return {boolean} - true if sorted, false otherwise
 */



function cvjs_sortLayersInOrder(layer1, layer2){

	try{

			layer1.prepend(layer2);

	}
	catch(err){
		return false
	}
	return true;
}


/**
 * Sort two layers in order, prepend layer2
 * @param {string} layer1 - name of layer one
 * @param {string} layer2 - name of layer two
 * @return {boolean} - true if sorted, false otherwise
 */


function cvjs_sortLayers_prepend(layer1, layer2){

	try{

			layer1.prepend(layer2);

	}
	catch(err){
		return false
	}
	return true;
}


/**
 * Sort two layers in order, insert layer2 after layer1
 * @param {string} layer1 - name of layer one
 * @param {string} layer2 - name of layer two
 * @return {boolean} - true if sorted, false otherwise
 */

function cvjs_sortLayers_insertAfter(layer1, layer2){

	try{

			layer1.insertAfter(layer2);

	}
	catch(err){
		return false
	}
	return true;
}



/**
* Turn all Object Space groups on - Object Spaces, Sticky Notes and Redlines are differentiated.
 */

function cvjs_AllGroupsOn(){

	for (var room in vqRooms[cvjs_active_floorplan_div_nr]){
		//if (vqRooms[cvjs_active_floorplan_div_nr][room].data("group") == "Undefined" || vqRooms[cvjs_active_floorplan_div_nr][room].data("group") == ""){
		//// do nothing
		//}
		//else{
		vqRooms[cvjs_active_floorplan_div_nr][room].attr(show);
		//}
	}
}


/**
* Turn all Object Space groups off - Object Spaces, Sticky Notes and Redlines are differentiated.
 */

function cvjs_AllGroupsOff(){

	for (var room in vqRooms[cvjs_active_floorplan_div_nr]){
		if (vqRooms[cvjs_active_floorplan_div_nr][room].data("group") == "Undefined" || vqRooms[cvjs_active_floorplan_div_nr][room].data("group") == ""){
		// do nothing
		}
		else{
		vqRooms[cvjs_active_floorplan_div_nr][room].attr(hide);
		}
	}
}

/**
* Turn single Object Space group on  - Object Spaces, Sticky Notes and Redlines are differentiated.
 * @param {string} layer - name of group to turn on
 */
function cvjs_GroupOn(group){

	for (var room in vqRooms[cvjs_active_floorplan_div_nr]){
		if (vqRooms[cvjs_active_floorplan_div_nr][room].data("group") == group){
			vqRooms[cvjs_active_floorplan_div_nr][room].attr(show);
		}
	}
}

/**
* Turn single Object Space group on, all other groups are turned off  - Object Spaces, Sticky Notes and Redlines are differentiated.
 * @param {string} layer - name of group to turn on
 */

function cvjs_GroupOn_OthersOff(group){

	for (var room in vqRooms[cvjs_active_floorplan_div_nr]){
		if (vqRooms[cvjs_active_floorplan_div_nr][room].data("group") == group){
//console.log("show "+room);
		vqRooms[cvjs_active_floorplan_div_nr][room].attr(show);
		}
		else{
//console.log("hide "+room);
			vqRooms[cvjs_active_floorplan_div_nr][room].attr(hide);
		}
	}
}

/**
* Turn single Object Space group on, all other groups are turned off  - Object Spaces, Sticky Notes and Redlines are differentiated.
 * @param {string} layer - name of group to turn on
 */

function cvjs_GroupOn_AllOff(group){

	for (var room in vqRooms[cvjs_active_floorplan_div_nr]){
		if (vqRooms[cvjs_active_floorplan_div_nr][room].data("group") == group){
//console.log("show "+room);
		vqRooms[cvjs_active_floorplan_div_nr][room].attr(show);
		}
		else{
//console.log("hide "+room);
			vqRooms[cvjs_active_floorplan_div_nr][room].attr(hide);
		}
	}
}

/**
* Turn single Object Space group off  - Object Spaces, Sticky Notes and Redlines are differentiated.
 * @param {string} layer - name of group to turn off
 */
function cvjs_GroupOff(group){

	for (var room in vqRooms[cvjs_active_floorplan_div_nr]){
		if (vqRooms[cvjs_active_floorplan_div_nr][room].data("group") == group){
			vqRooms[cvjs_active_floorplan_div_nr][room].attr(hide);
		}
	}
}

// END handling of Layers and Groups


// BEGIN Patterns and Gradients


/**
 * Apply a predefined pattern on a graphical Space Object
 * @param {string} layer - layer to apply the pattern
 * @param {string} Id - Id of the graphical object to add hatches
 * @param {string} graphicalPattern - name of the hatch pattern, from a predefined list of patterns:
 *  	"pattern_45degree_standard"
 *		"pattern_45degree_fine"
 *		"pattern_45degree_wide"
 *		"pattern_90degree_standard"
 *		"pattern_90degree_fine"
 *		"pattern_90degree_wide"
 *		"pattern_135degree_standard"
 *		"pattern_135degree_fine"
 *		"pattern_135degree_wide"
 *		"pattern_0degree_standard"
 *		"pattern_0degree_fine"
 *		"pattern_0degree_wide"
 *		"pattern_45degree_crosshatch_standard"
 *		"pattern_45degree_crosshatch_fine"
 * @param {string} colorHex - color of hatch in hex form, for example: #FF0000
 * @param {float} fillOpacity - fill opacity of pattern, value between 0 and 1
 */

function cvjs_ApplyPatternOnSpaceObjectId(layer,Id, graphicalPattern, colorHex, fillOpacity)
{
	var nodeId = cvjs_getSpaceObjectNodefromId(Id);
	cvjs__ApplyPatternOnObject_layerSort(layer, nodeId, graphicalPattern, colorHex, fillOpacity, layer_vqrooms[cvjs_active_floorplan_div_nr], 1);
}






/**
 * Apply a predefined pattern on a graphical Space Object
 * @param {string} layer - layer to apply the pattern
 * @param {string} nodeId - nodeId of the graphical object to add hatches
 * @param {string} graphicalPattern - name of the hatch pattern, from a predefined list of patterns:
 *  	"pattern_45degree_standard"
 *		"pattern_45degree_fine"
 *		"pattern_45degree_wide"
 *		"pattern_90degree_standard"
 *		"pattern_90degree_fine"
 *		"pattern_90degree_wide"
 *		"pattern_135degree_standard"
 *		"pattern_135degree_fine"
 *		"pattern_135degree_wide"
 *		"pattern_0degree_standard"
 *		"pattern_0degree_fine"
 *		"pattern_0degree_wide"
 *		"pattern_45degree_crosshatch_standard"
 *		"pattern_45degree_crosshatch_fine"
 * @param {string} colorHex - color of hatch in hex form, for example: #FF0000
 * @param {float} fillOpacity - fill opacity of pattern, value between 0 and 1
 */

function cvjs_ApplyPatternOnSpaceObjectNode(layer,nodeId, graphicalPattern, colorHex, fillOpacity)
{

	cvjs__ApplyPatternOnObject_layerSort(layer, nodeId, graphicalPattern, colorHex, fillOpacity, layer_vqrooms[cvjs_active_floorplan_div_nr], 1);

}





/**
 * Apply a predefined pattern on a URL
 * @param {string} layer - layer to apply the pattern
 * @param {string} nodeId - nodeId of the graphical object to add hatches
 * @param {string} graphicalPattern - name of the hatch pattern, from a predefined list of patterns:
 *  	"pattern_45degree_standard"
 *		"pattern_45degree_fine"
 *		"pattern_45degree_wide"
 *		"pattern_90degree_standard"
 *		"pattern_90degree_fine"
 *		"pattern_90degree_wide"
 *		"pattern_135degree_standard"
 *		"pattern_135degree_fine"
 *		"pattern_135degree_wide"
 *		"pattern_0degree_standard"
 *		"pattern_0degree_fine"
 *		"pattern_0degree_wide"
 *		"pattern_45degree_crosshatch_standard"
 *		"pattern_45degree_crosshatch_fine"
 * @param {string} colorHex - color of hatch in hex form, for example: #FF0000
 * @param {float} fillOpacity - fill opacity of pattern, value between 0 and 1
 */

function cvjs_ApplyPatternOnUrl(layer,nodeId, graphicalPattern, colorHex, fillOpacity)
{

	cvjs__ApplyPatternOnObject_layerSort(layer, nodeId, graphicalPattern, colorHex, fillOpacity, layer_vqrooms[cvjs_active_floorplan_div_nr], 2);

}



function cvjs__ApplyPatternOnObject_layerSort(layer, nodeId, graphicalPattern, colorHex, fillOpacity, layer2, nodetype)
{

	var graphicalObject;
	var flag = false;

	if (nodetype==1)
		for (spc in vqRooms[cvjs_active_floorplan_div_nr])
		{
			if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("node") == nodeId ){
				graphicalObject = vqRooms[cvjs_active_floorplan_div_nr][spc];
				flag = true;
			}
		}


	if (nodetype==2)
		for (spc in vqURLs)
		{
			if (vqURLs[spc].data("node") == nodeId ){
				graphicalObject = vqURLs[spc];
				flag = true;
			}
		}


	if (!flag) return;

	var strRoom = graphicalObject.toString();

	//console.log(nodeId+" "+strRoom);


	var path1;
	var path_flag = true;
	var cx;
	var cy;
	var r;

	if (strRoom.indexOf("path")>-1){
		path_flag = true;
		var pos1 = strRoom.indexOf(" d=");
		var pathStr1 = strRoom.substring(pos1+4);
		//console.log(pathStr1);
		var pos1A = pathStr1.indexOf("\" ");
		path1 = pathStr1.substring(0, pos1A);
	}

	if (strRoom.indexOf("circle")>-1){
		path_flag = false;

		var p_cx = strRoom.indexOf(" cx=");
		var s1_cx = strRoom.substring(p_cx+5);
		var p2_cx = s1_cx.indexOf("\"");
		cx = s1_cx.substring(0, p2_cx)

		var p_cy = strRoom.indexOf(" cy=");
		var s1_cy = strRoom.substring(p_cy+5);
		var p2_cy = s1_cy.indexOf("\"");
		cy = s1_cy.substring(0, p2_cy)


		var p_r = strRoom.indexOf(" r=");
		var s1_r = strRoom.substring(p_r+4);
		var p2_r = s1_r.indexOf("\"");
		r = s1_r.substring(0, p2_r)
	}

	if (graphicalPattern=="pattern_45degree_standard" || graphicalPattern=="pattern_45degree_fine" || graphicalPattern=="pattern_45degree_wide" ||
		graphicalPattern=="pattern_90degree_standard" || graphicalPattern=="pattern_90degree_fine" || graphicalPattern=="pattern_90degree_wide" ||
		graphicalPattern=="pattern_135degree_standard" || graphicalPattern=="pattern_135degree_fine" || graphicalPattern=="pattern_135degree_wide" ||
		graphicalPattern=="pattern_0degree_standard" || graphicalPattern=="pattern_0degree_fine" || graphicalPattern=="pattern_0degree_wide" ||
		graphicalPattern=="pattern_45degree_crosshatch_standard" || graphicalPattern=="pattern_45degree_crosshatch_fine"
		){

	var pattern;

//	console.log(graphicalPattern);

	if (graphicalPattern=="pattern_45degree_standard"){
		cvjs_setUpPattern_45degree_standard(colorHex, "1.0");
		pattern = pattern_45degree_standard;
	}
	if (graphicalPattern=="pattern_45degree_fine"){
		cvjs_setUpPattern_45degree_fine(colorHex, "1.0");
		pattern = pattern_45degree_standard;
	}
	if (graphicalPattern=="pattern_45degree_wide"){
		cvjs_setUpPattern_45degree_wide(colorHex, "1.0");
		pattern = pattern_45degree_standard;
	}

	if (graphicalPattern=="pattern_90degree_standard"){
		cvjs_setUpPattern_90degree_standard(colorHex, "1.0");
		pattern = pattern_90degree_standard;
	}
	if (graphicalPattern=="pattern_90degree_fine"){
		cvjs_setUpPattern_90degree_fine(colorHex, "1.0");
		pattern = pattern_90degree_standard;
	}
	if (graphicalPattern=="pattern_90degree_wide"){
		cvjs_setUpPattern_90degree_wide(colorHex, "1.0");
		pattern = pattern_90degree_standard;
	}

	if (graphicalPattern=="pattern_135degree_standard"){
		cvjs_setUpPattern_135degree_standard(colorHex, "1.0");
		pattern = pattern_135degree_standard;
	}

	if (graphicalPattern=="pattern_135degree_fine"){
		cvjs_setUpPattern_135degree_fine(colorHex, "1.0");
		pattern = pattern_135degree_standard;
	}

	if (graphicalPattern=="pattern_135degree_wide"){
		cvjs_setUpPattern_135degree_wide(colorHex, "1.0");
		pattern = pattern_135degree_standard;
	}

	if (graphicalPattern=="pattern_0degree_standard"){
		cvjs_setUpPattern_0degree_standard(colorHex, "1.0");
		pattern = pattern_0degree_standard;
	}

	if (graphicalPattern=="pattern_0degree_fine"){
		cvjs_setUpPattern_0degree_fine(colorHex, "1.0");
		pattern = pattern_0degree_standard;
	}

	if (graphicalPattern=="pattern_0degree_wide"){
		cvjs_setUpPattern_0degree_wide(colorHex, "1.0");
		pattern = pattern_0degree_standard;
	}

	if (graphicalPattern=="pattern_45degree_crosshatch_standard"){
		cvjs_setUpPattern_45degree_crosshatch_standard(colorHex, "1.0");
		pattern = pattern_45degree_crosshatch;
	}

	if (graphicalPattern=="pattern_45degree_crosshatch_fine"){
		cvjs_setUpPattern_45degree_crosshatch_fine(colorHex, "1.0");
		pattern = pattern_45degree_crosshatch;
	}




//		graphicalObject.attr({'fill': pattern_45degree_standard, 'fill-opacity': fillOpacity, stroke: colorHex, 'stroke-opacity': fillOpacity })

		if (path_flag){
			var pathX = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(path1);
			pathX.attr({'fill': pattern, 'fill-opacity': fillOpacity, stroke: colorHex, 'stroke-opacity': fillOpacity })
			layer.add(pathX);
		}
		else{
			var circleX = cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(cx,cy,r,r);
if (cvjs_debug)				console.log(circleX);
			layer.add(circleX.attr({'fill': pattern, 'fill-opacity': fillOpacity, stroke: colorHex, 'stroke-opacity': fillOpacity }));
		}

		try{
			layer2.prepend(layer);
		}
		catch (err){
			var iii = 0;
		}

		return 1;
	}

	return -1;
}


var pattern_45degree_standard = null;
var pattern_90degree_standard = null;
var pattern_135degree_standard = null;
var pattern_0degree_standard = null;
var pattern_45degree_crosshatch = null;


function cvjs_setUpPattern_45degree_standard(colorHex, patternOpacity ){
	pattern_45degree_standard = cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M10-5-10,15M15,0,0,15M0-5-20,15").attr({
        fill: "none",
        stroke: colorHex,
        strokeWidth: 2,
        "stroke-opacity": patternOpacity
    }).pattern(0, 0, 10, 10);
}


function cvjs_setUpPattern_45degree_wide(colorHex, patternOpacity ){
	pattern_45degree_standard = cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M10-5-10,15M15,0,0,15M0-5-20,15").attr({
        fill: "none",
        stroke: colorHex,
        strokeWidth: 5,
        "stroke-opacity": patternOpacity
    }).pattern(0, 0, 10, 10);
}


function cvjs_setUpPattern_45degree_fine(colorHex, patternOpacity ){
	pattern_45degree_standard = cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M10-5-10,15M15,0,0,15M0-5-20,15").attr({
        fill: "none",
        stroke: colorHex,
        strokeWidth: 0.5,
        "stroke-opacity": patternOpacity
    }).pattern(0, 0, 10, 10);
}


function cvjs_setUpPattern_90degree_fine(colorHex, patternOpacity ){
	pattern_90degree_standard = cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M10-5 10,15M15,0,15,15M0-5 0,15").attr({
        fill: "none",
        stroke: colorHex,
        strokeWidth: 0.5,
        "stroke-opacity": patternOpacity
    }).pattern(0, 0, 10, 10);
}


function cvjs_setUpPattern_90degree_standard(colorHex, patternOpacity ){
	pattern_90degree_standard = cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M10-5 10,15M15,0,15,15M0-5 0,15").attr({
        fill: "none",
        stroke: colorHex,
        strokeWidth: 2,
        "stroke-opacity": patternOpacity
    }).pattern(0, 0, 10, 10);
}

function cvjs_setUpPattern_90degree_wide(colorHex, patternOpacity ){
	pattern_90degree_standard = cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M10-5 10,15M15,0,15,15M0-5 0,15").attr({
        fill: "none",
        stroke: colorHex,
        strokeWidth: 5,
        "stroke-opacity": patternOpacity
    }).pattern(0, 0, 10, 10);
}

function cvjs_setUpPattern_135degree_standard(colorHex, patternOpacity ){
	pattern_135degree_standard = cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0-5 20,15M10,-5,30,15M-10-5 10,15").attr({
        fill: "none",
        stroke: colorHex,
        strokeWidth: 2,
        "stroke-opacity": patternOpacity
    }).pattern(0, 0, 10, 10);
}

function cvjs_setUpPattern_135degree_wide(colorHex, patternOpacity ){
	pattern_135degree_standard = cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0-5 20,15M10,-5,30,15M-10-5 10,15").attr({
        fill: "none",
        stroke: colorHex,
        strokeWidth: 5,
        "stroke-opacity": patternOpacity
    }).pattern(0, 0, 10, 10);
}

function cvjs_setUpPattern_135degree_fine(colorHex, patternOpacity ){
	pattern_135degree_standard = cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0-5 20,15M10,-5,30,15M-10-5 10,15").attr({
        fill: "none",
        stroke: colorHex,
        strokeWidth: 0.5,
        "stroke-opacity": patternOpacity
    }).pattern(0, 0, 10, 10);
}

function cvjs_setUpPattern_0degree_standard(colorHex, patternOpacity ){
	pattern_0degree_standard = cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M-5,0,15,0M-5,10,15,10M-5,20,15,20").attr({
        fill: "none",
        stroke: colorHex,
        strokeWidth: 2,
        "stroke-opacity": patternOpacity
    }).pattern(0, 0, 10, 10);
}

function cvjs_setUpPattern_0degree_wide(colorHex, patternOpacity ){
	pattern_0degree_standard = cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M-5,0,15,0M-5,10,15,10M-5,20,15,20").attr({
        fill: "none",
        stroke: colorHex,
        strokeWidth: 5,
        "stroke-opacity": patternOpacity
    }).pattern(0, 0, 10, 10);
}

function cvjs_setUpPattern_0degree_fine(colorHex, patternOpacity ){
	pattern_0degree_standard = cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M-5,0,15,0M-5,10,15,10M-5,20,15,20").attr({
        fill: "none",
        stroke: colorHex,
        strokeWidth: 0.5,
        "stroke-opacity": patternOpacity
    }).pattern(0, 0, 10, 10);
}


function cvjs_setUpPattern_45degree_crosshatch_standard(colorHex, patternOpacity ){
	pattern_45degree_crosshatch = cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0-5 20,15M10,-5,30,15M-10-5 10,15M10-5-10,15M15,0,0,15M0-5-20,15").attr({
        fill: "none",
        stroke: colorHex,
        strokeWidth: 2,
        "stroke-opacity": patternOpacity
    }).pattern(0, 0, 10, 10);
}

function cvjs_setUpPattern_45degree_crosshatch_fine(colorHex, patternOpacity ){
	pattern_45degree_crosshatch = cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0-5 20,15M10,-5,30,15M-10-5 10,15M10-5-10,15M15,0,0,15M0-5-20,15").attr({
        fill: "none",
        stroke: colorHex,
        strokeWidth: 0.5,
        "stroke-opacity": patternOpacity
    }).pattern(0, 0, 10, 10);
}







var linear_gradient;

function cvjs_ApplyRelativeLinearGradientStandard2Colors(graphicalObject, startColor, endColor, fillOpacity){

	cvjs_ApplyRelativeLinearGradient(graphicalObject, 0, 0, 1, 1, startColor, "", endColor, fillOpacity);
}

function cvjs_ApplyRelativeLinearGradientStandard3Colors(graphicalObject, startColor, middleColor, endColor, fillOpacity){

	cvjs_ApplyRelativeLinearGradient(graphicalObject, 0, 0, 1, 1, startColor, middleColor, endColor, fillOpacity)
}


function cvjs_ApplyRelativeLinearGradient(graphicalObject, xStart, yStart, xEnd, yEnd, startColor, middleColor, endColor, fillOpacity){

		if (middleColor=="")
			linear_gradient = cvjs_rPaper[cvjs_active_floorplan_div_nr].gradient("l("+xStart+", "+yStart+", "+xEnd+" ,"+yEnd+" )"+startColor+"-"+endColor);
		else
			linear_gradient = cvjs_rPaper[cvjs_active_floorplan_div_nr].gradient("l("+xStart+", "+yStart+", "+xEnd+" ,"+yEnd+" )"+startColor+"-"+middleColor+"-"+endColor);

		graphicalObject.attr({'fill': linear_gradient, 'fill-opacity': fillOpacity, 'stroke-opacity': fillOpacity });
}


/**
 * Apply a standard linear gradient with two colors on a graphical Space Object
 * @param {string} layer - layer to apply the pattern
 * @param {string} Id - Id of the graphical object
 * @param {string} startColor - start color of gradient in hex form, for example: #FF0000
 * @param {string} endColor - end color of gradient in hex form, for example: #00DD00
 * @param {float} fillOpacity - fill opacity of pattern, value between 0 and 1
 */

function cvjs_ApplyRelativeLinearGradientStandard2ColorsOnSpaceObjectId(layer, Id, startColor, endColor, fillOpacity){

	var nodeId = cvjs_getSpaceObjectNodefromId(Id);
	cvjs_ApplyRelativeLinearGradientOnObject_layerSort(layer, nodeId, 0, 0, 1, 1, startColor, "", endColor, fillOpacity, layer_vqrooms[cvjs_active_floorplan_div_nr]);
}


/**
 * Apply a standard linear gradient with two colors on a graphical Space Object
 * @param {string} layer - layer to apply the pattern
 * @param {string} nodeId - nodeId of the graphical object
 * @param {string} startColor - start color of gradient in hex form, for example: #FF0000
 * @param {string} endColor - end color of gradient in hex form, for example: #00DD00
 * @param {float} fillOpacity - fill opacity of pattern, value between 0 and 1
 */

function cvjs_ApplyRelativeLinearGradientStandard2ColorsOnSpaceObjectNode(layer, nodeId, startColor, endColor, fillOpacity){

	cvjs_ApplyRelativeLinearGradientOnObject_layerSort(layer, nodeId, 0, 0, 1, 1, startColor, "", endColor, fillOpacity, layer_vqrooms[cvjs_active_floorplan_div_nr]);
}




/**
 * Apply a standard linear gradient with three colors on a graphical Space Object
 * @param {string} layer - layer to apply the pattern
 * @param {string} Id - Id of the graphical object
 * @param {string} startColor - start color of gradient in hex form, for example: #FF0000
 * @param {string} middleColor - middle color of gradient in hex form, for example: #AA00AA
 * @param {string} endColor - end color of gradient in hex form, for example: #00DD00
 * @param {float} fillOpacity - fill opacity of pattern, value between 0 and 1
 */

function cvjs_ApplyRelativeLinearGradientStandard3ColorsOnSpaceObjectId(layer, Id, startColor, middleColor, endColor, fillOpacity){

	var nodeId = cvjs_getSpaceObjectNodefromId(Id);
	cvjs_ApplyRelativeLinearGradientOnObject_layerSort(layer, nodeId, 0, 0, 1, 1, startColor, middleColor, endColor, fillOpacity, layer_vqrooms[cvjs_active_floorplan_div_nr]);
}



/**
 * Apply a standard linear gradient with three colors on a graphical Space Object
 * @param {string} layer - layer to apply the pattern
 * @param {string} nodeId - nodeId of the graphical object
 * @param {string} startColor - start color of gradient in hex form, for example: #FF0000
 * @param {string} middleColor - middle color of gradient in hex form, for example: #AA00AA
 * @param {string} endColor - end color of gradient in hex form, for example: #00DD00
 * @param {float} fillOpacity - fill opacity of pattern, value between 0 and 1
 */

function cvjs_ApplyRelativeLinearGradientStandard3ColorsOnSpaceObjectNode(layer, nodeId, startColor, middleColor, endColor, fillOpacity){

	cvjs_ApplyRelativeLinearGradientOnObject_layerSort(layer, nodeId, 0, 0, 1, 1, startColor, middleColor, endColor, fillOpacity, layer_vqrooms[cvjs_active_floorplan_div_nr]);
}


/**
 * Apply a linear gradient, with definition of gradient vector,  with three colors on a graphical Space Object
 * @param {string} layer - layer to apply the pattern
 * @param {string} nodeId - nodeId of the graphical object
 * @param {float} xStart - gradient vector x start point, value between 0 and 1
 * @param {float} yStart - gradient vector y start point, value between 0 and 1
 * @param {float} xEnd - gradient vector x end point, value between 0 and 1
 * @param {float} yEnd - gradient vector y end point, value between 0 and 1
 * @param {string} startColor - start color of gradient in hex form, for example: #FF0000
 * @param {string} middleColor - middle color of gradient in hex form, for example: #AA00AA
 * @param {string} endColor - end color of gradient in hex form, for example: #00DD00
 * @param {float} fillOpacity - fill opacity of pattern, value between 0 and 1
 * @param {string} layer2 - layer which to prepend the gradient layer (typically the main Space Object layer)
 */

function cvjs_ApplyRelativeLinearGradientOnObject_layerSort(layer, nodeId, xStart, yStart, xEnd, yEnd, startColor, middleColor, endColor, fillOpacity, layer2 )
{

	var graphicalObject;
	var flag = false;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("node") == nodeId ){
			graphicalObject = vqRooms[cvjs_active_floorplan_div_nr][spc];
			flag = true;
		}
	}
	if (!flag) return;

	var strRoom = graphicalObject.toString();

	var path1;
	var path_flag = true;
	var cx;
	var cy;
	var r;

	if (strRoom.indexOf("path")>-1){
		path_flag = true;
		var pos1 = strRoom.indexOf(" d=");
		var pathStr1 = strRoom.substring(pos1+4);
		//console.log(pathStr1);
		var pos1A = pathStr1.indexOf("\" ");
		path1 = pathStr1.substring(0, pos1A);
	}

	if (strRoom.indexOf("circle")>-1){
		path_flag = false;

		var p_cx = strRoom.indexOf(" cx=");
		var s1_cx = strRoom.substring(p_cx+5);
		var p2_cx = s1_cx.indexOf("\"");
		cx = s1_cx.substring(0, p2_cx)

		var p_cy = strRoom.indexOf(" cy=");
		var s1_cy = strRoom.substring(p_cy+5);
		var p2_cy = s1_cy.indexOf("\"");
		cy = s1_cy.substring(0, p2_cy)


		var p_r = strRoom.indexOf(" r=");
		var s1_r = strRoom.substring(p_r+4);
		var p2_r = s1_r.indexOf("\"");
		r = s1_r.substring(0, p2_r)
	}

	if (middleColor=="")
		linear_gradient = cvjs_rPaper[cvjs_active_floorplan_div_nr].gradient("l("+xStart+", "+yStart+", "+xEnd+" ,"+yEnd+" )"+startColor+"-"+endColor);
	else
		linear_gradient = cvjs_rPaper[cvjs_active_floorplan_div_nr].gradient("l("+xStart+", "+yStart+", "+xEnd+" ,"+yEnd+" )"+startColor+"-"+middleColor+"-"+endColor);

	if (path_flag){
		var pathX = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(path1);
		pathX.attr({'fill': linear_gradient, 'fill-opacity': fillOpacity, 'stroke-opacity': fillOpacity });
		layer.add(pathX);
	}
	else{
		var circleX = cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(cx,cy,r,r);
		circleX.attr({'fill': linear_gradient, 'fill-opacity': fillOpacity, 'stroke-opacity': fillOpacity });
		layer.add(circleX);
	}

	try{
		layer2.prepend(layer);
		return 1;
	}
	catch (err){
		var iii = 0;
	}
	return -1;
}








var radial_gradient;

function cvjs_ApplyRelativeRadialGradientStandard2Colors(graphicalObject, startColor, endColor, fillOpacity){

	cvjs_ApplyRelativeRadialGradient(graphicalObject, 0.5, 0.5, 0.5, startColor, "", endColor, fillOpacity);
}

function cvjs_ApplyRelativeRadialGradientStandard3Colors(graphicalObject, startColor, middleColor, endColor, fillOpacity){

	cvjs_ApplyRelativeRadialGradient(graphicalObject, 0.5, 0.5, 0.5, startColor, middleColor, endColor, fillOpacity)
}

function cvjs_ApplyRelativeRadialGradient(graphicalObject, xC, yC, radius, startColor, middleColor, endColor, fillOpacity){

		if (middleColor=="")
			radial_gradient = cvjs_rPaper[cvjs_active_floorplan_div_nr].gradient("r("+xC+", "+yC+", "+radius+" )"+startColor+"-"+endColor);
		else
			radial_gradient = cvjs_rPaper[cvjs_active_floorplan_div_nr].gradient("r("+xC+", "+yC+", "+radius+" )"+startColor+"-"+middleColor+"-"+endColor);

		graphicalObject.attr({'fill': radial_gradient, 'fill-opacity': fillOpacity, 'stroke-opacity': fillOpacity });

if (cvjs_debug)		console.log("after "+graphicalObject);
}



/**
 * Apply a standard radial gradient with two colors on a graphical Space Object
 * @param {string} layer - layer to apply the pattern
 * @param {string} Id - Id of the graphical object
 * @param {string} startColor - start color of gradient in hex form, for example: #FF0000
 * @param {string} endColor - end color of gradient in hex form, for example: #00DD00
 * @param {float} fillOpacity - fill opacity of pattern, value between 0 and 1
 */

function cvjs_ApplyRelativeRadialGradientStandard2ColorsOnSpaceObjectId(layer, Id, startColor, endColor, fillOpacity){

	var nodeId = cvjs_getSpaceObjectNodefromId(Id);
	cvjs_ApplyRelativeRadialGradientOnObject_layerSort(layer, nodeId, 0.5, 0.5, 0.5, startColor, "", endColor, fillOpacity, layer_vqrooms[cvjs_active_floorplan_div_nr]);
}




/**
 * Apply a standard radial gradient with two colors on a graphical Space Object
 * @param {string} layer - layer to apply the pattern
 * @param {string} nodeId - nodeId of the graphical object
 * @param {string} startColor - start color of gradient in hex form, for example: #FF0000
 * @param {string} endColor - end color of gradient in hex form, for example: #00DD00
 * @param {float} fillOpacity - fill opacity of pattern, value between 0 and 1
 */

function cvjs_ApplyRelativeRadialGradientStandard2ColorsOnSpaceObjectNode(layer, nodeId, startColor, endColor, fillOpacity){

	cvjs_ApplyRelativeRadialGradientOnObject_layerSort(layer, nodeId, 0.5, 0.5, 0.5, startColor, "", endColor, fillOpacity, layer_vqrooms[cvjs_active_floorplan_div_nr]);
}



/**
 * Apply a standard radial gradient with three colors on a graphical Space Object
 * @param {string} layer - layer to apply the pattern
 * @param {string} Id - Id of the graphical object
 * @param {string} startColor - start color of gradient in hex form, for example: #FF0000
 * @param {string} middleColor - middle color of gradient in hex form, for example: #AA00AA
 * @param {string} endColor - end color of gradient in hex form, for example: #00DD00
 * @param {float} fillOpacity - fill opacity of pattern, value between 0 and 1
 */

function cvjs_ApplyRelativeRadialGradientStandard3ColorsOnSpaceObjectId(layer, Id, startColor, middleColor, endColor, fillOpacity){

	var nodeId = cvjs_getSpaceObjectNodefromId(Id);
	cvjs_ApplyRelativeRadialGradientOnObject_layerSort(layer, nodeId, 0.5, 0.5, 0.5, startColor, middleColor, endColor, fillOpacity, layer_vqrooms[cvjs_active_floorplan_div_nr]);
}




/**
 * Apply a standard radial gradient with three colors on a graphical Space Object
 * @param {string} layer - layer to apply the pattern
 * @param {string} nodeId - nodeId of the graphical object
 * @param {string} startColor - start color of gradient in hex form, for example: #FF0000
 * @param {string} middleColor - middle color of gradient in hex form, for example: #AA00AA
 * @param {string} endColor - end color of gradient in hex form, for example: #00DD00
 * @param {float} fillOpacity - fill opacity of pattern, value between 0 and 1
 */

function cvjs_ApplyRelativeRadialGradientStandard3ColorsOnSpaceObjectNode(layer, nodeId, startColor, middleColor, endColor, fillOpacity){

	cvjs_ApplyRelativeRadialGradientOnObject_layerSort(layer, nodeId, 0.5, 0.5, 0.5, startColor, middleColor, endColor, fillOpacity, layer_vqrooms[cvjs_active_floorplan_div_nr]);
}




/**
 * Apply a radial gradient, with definition of gradient vector,  with three colors on a graphical Space Object
 * @param {string} layer - layer to apply the pattern
 * @param {string} nodeId - nodeId of the graphical object
 * @param {float} xC - gradient vector x start point, value between 0 and 1
 * @param {float} yC - gradient vector y start point, value between 0 and 1
 * @param {float} radius - gradient vector radius, value between 0 and 1
 * @param {string} startColor - start color of gradient in hex form, for example: #FF0000
 * @param {string} middleColor - middle color of gradient in hex form, for example: #AA00AA
 * @param {string} endColor - end color of gradient in hex form, for example: #00DD00
 * @param {float} fillOpacity - fill opacity of pattern, value between 0 and 1
 * @param {string} layer2 - layer which to prepend the gradient layer (typically the main Space Object layer)
 */


function cvjs_ApplyRelativeRadialGradientOnObject_layerSort(layer, nodeId, xC, yC, radius, startColor, middleColor, endColor, fillOpacity, layer2 )
{

	var graphicalObject;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("node") == nodeId ){
			graphicalObject = vqRooms[cvjs_active_floorplan_div_nr][spc];
		}
	}
	var strRoom = graphicalObject.toString();

	var path1;
	var path_flag = true;
	var cx;
	var cy;
	var r;

	if (strRoom.indexOf("path")>-1){
		path_flag = true;
		var pos1 = strRoom.indexOf(" d=");
		var pathStr1 = strRoom.substring(pos1+4);
		//console.log(pathStr1);
		var pos1A = pathStr1.indexOf("\" ");
		path1 = pathStr1.substring(0, pos1A);
	}

	if (strRoom.indexOf("circle")>-1){
		path_flag = false;

		var p_cx = strRoom.indexOf(" cx=");
		var s1_cx = strRoom.substring(p_cx+5);
		var p2_cx = s1_cx.indexOf("\"");
		cx = s1_cx.substring(0, p2_cx)

		var p_cy = strRoom.indexOf(" cy=");
		var s1_cy = strRoom.substring(p_cy+5);
		var p2_cy = s1_cy.indexOf("\"");
		cy = s1_cy.substring(0, p2_cy)


		var p_r = strRoom.indexOf(" r=");
		var s1_r = strRoom.substring(p_r+4);
		var p2_r = s1_r.indexOf("\"");
		r = s1_r.substring(0, p2_r)
	}

	if (middleColor=="")
		radial_gradient = cvjs_rPaper[cvjs_active_floorplan_div_nr].gradient("r("+xC+", "+yC+", "+radius+" )"+startColor+"-"+endColor);
	else
		radial_gradient = cvjs_rPaper[cvjs_active_floorplan_div_nr].gradient("r("+xC+", "+yC+", "+radius+" )"+startColor+"-"+middleColor+"-"+endColor);

	if (path_flag){
		var pathX = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(path1);
		pathX.attr({'fill': radial_gradient, 'fill-opacity': fillOpacity, 'stroke-opacity': fillOpacity });
		layer.add(pathX);
	}
	else{
		var circleX = cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(cx,cy,r,r);
		circleX.attr({'fill': radial_gradient, 'fill-opacity': fillOpacity, 'stroke-opacity': fillOpacity });
		layer.add(circleX);
	}

	try{
		layer2.prepend(layer);
		return 1;
	}
	catch (err){
		var iii = 0;
	}
	return -1;
}




// END Patterns and Gradients



// BEGIN Add text overlay to object

/* text style for adding text into Space Objects */
var text_style_arial_11pt_bold = {
			'stroke': "#00539B",
			'fill': "#00539B",
			'font-family': "Arial",
			'font-size': "11pt",
			'font-weight': "bold",
			'margin': 0,
			'cursor': "pointer",
			'text-align': "left",
			'z-index': 1980
		};

/* text style for adding text into Space Objects */
var text_style_arial_9pt_normal = {
			'stroke': "#00539B",
			'fill': "#00539B",
			'font-family': "Arial",
			'font-size': "9pt",
			'font-weight': "normal",
			'margin': 0,
			'margin-top': "-10px",
			'cursor': "pointer",
			'text-align': "left",
			'vertical-align': "top",
			'width': "128px",
			'z-index': 1980
		};

/* text style for adding text into Space Objects */
var text_style_dialog = {
			'text-font' : "Dialog",
			'font-family' : "Dialog",
			'font-size' : "7pt",
			'text-anchor' : "start",
			'font-weight': "normal",
			'font-style': "italic",
			stroke : "#88539B",
			fill : "#88539B"
		};




function setTextStyle(){

	var textStyle;

	textStyle = {   };

	return textStyle;

}


/**
 * Add three layers of text, individually formatted and styled, inside a Space Object
 * @param {string} txtLayer - layer to apply the text
 * @param {string} nodeId - nodeId of the graphical object in which to place the text
 * @param {float} leftScale - distance from the left border of Space Object, value between 0 and 1
 * @param {string} textString1 - first line of text
 * @param {object} textStyle1 - textstyle of text line 1, formattet as a java script object with css style elements, predefined is: text_style_arial_11pt_bold , text_style_arial_9pt_normal, text_style_dialog
 * @param {string} scaleText1 - relative scale of text line 1, value between 0 and 1
 * @param {string} hexColorText1 -color of text line 1 in hex form, for example: #AA00AA
 * @param {string} textString2 - second line of text
 * @param {object} textStyle2 - textstyle of text line 2, formattet as a java script object with css style elements
 * @param {string} scaleText2 - relative scale of text line 2, value between 0 and 1
 * @param {string} hexColorText2 -color of text line 2 in hex form, for example: #AA00AA
 * @param {string} textString3 - third line of text
 * @param {object} textStyle3 - textstyle of text line 3, formattet as a java script object with css style elements
 * @param {string} scaleText3 - relative scale of text line 3, value between 0 and 1
 * @param {string} hexColorText3 -color of text line 3 in hex form, for example: #AA00AA
 */

function cvjs_AddTextOnObject(txtLayer, nodeId, leftScale, textString1, textStyle1, scaleText1, hexColorText1, textString2, textStyle2, scaleText2, hexColorText2, textString3, textStyle3, scaleText3, hexColorText3){

// find bounding box


	var graphicalObject;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("node") == nodeId ){
			graphicalObject = vqRooms[cvjs_active_floorplan_div_nr][spc];
		}
	}


var boundingBoxElement = graphicalObject.getBBox();

var x = boundingBoxElement.x;
var y = boundingBoxElement.y;
var width = boundingBoxElement.width;
var height = boundingBoxElement.height;

var x1;
var y1;
var txt1;
var txt2;
var txt3;
var fontheight1;
var fontheight2;
var fontheight3;
var strokewidth;

	//console.log(x+" "+y+" "+" "+width+" "+height+" factor: "+height/width);

	// three lines of text
	x1 = x +width*leftScale;

	fontheight1 = height*scaleText1;
	y1 = y +fontheight1*1.05;
	txt1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(x1,y1, textString1).attr(textStyle1);
	txt1.attr({'font-size' : fontheight1});
	strokewidth = fontheight1/15;
	txt1.attr({'stroke-width' : strokewidth});
	txt1.attr({'stroke' : hexColorText1});
	txt1.attr({'fill' : hexColorText1});

/*
try{
	jQuery('#textstringId').val(textString1);
	var el = document.getElementsByTagName('textstringId');
	el.getComputedTextLength();
	console.log(el);
	console.log(textstringId.getComputedTextLength());
}
catch (e){ console.log(e);}
*/

	fontheight2 = height*scaleText2;
	y1 = y +fontheight2*1.05+fontheight1*1.05;
	txt2 = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(x1,y1, textString2).attr(textStyle2);
	txt2.attr({'font-size' : fontheight2});
	strokewidth = fontheight2/15;
	txt2.attr({'stroke-width' : strokewidth});
	txt2.attr({'stroke' : hexColorText2});
	txt2.attr({'fill' : hexColorText2});


	fontheight3 = height*scaleText3;
	y1 = y +fontheight3*1.05 +fontheight2*1.05+fontheight1*1.05;
	txt3 = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(x1,y1, textString3).attr(textStyle3);
	txt3.attr({'font-size' : fontheight3});
	strokewidth = fontheight3/15;
	txt3.attr({'stroke-width' : strokewidth});
	txt3.attr({'stroke' : hexColorText3});
	txt3.attr({'fill' : hexColorText3});

	txtLayer.add(txt1);
	txtLayer.add(txt2);
	txtLayer.add(txt3);

}






/**
 * Add three lines of text, individually formatted and styled, inside a Space Object
 * @param {string} txtLayer - layer to apply the text
 * @param {string} nodeId - nodeId of the graphical object in which to place the text
 * @param {string} tborderId - Text Border Id of the new graphical object in which to place the text, of type "TBORDER_xxx"
 * @param {float} leftScale - distance from the left border of Space Object, value between 0 and 1
 * @param {string} textId1 - Text Id of the first text object, of type "TEXT_xxx"
 * @param {string} textString1 - first line of text
 * @param {object} textStyle1 - textstyle of text line 1, formattet as a java script object with css style elements, predefined is: text_style_arial_11pt_bold , text_style_arial_9pt_normal, text_style_dialog
 * @param {string} scaleText1 - relative scale of text line 1, value between 0 and 1
 * @param {string} hexColorText1 -color of text line 1 in hex form, for example: #AA00AA
 * @param {string} textId2 - Text Id of the second text object, of type "TEXT_yyy"
 * @param {string} textString2 - second line of text
 * @param {object} textStyle2 - textstyle of text line 2, formattet as a java script object with css style elements
 * @param {string} scaleText2 - relative scale of text line 2, value between 0 and 1
 * @param {string} hexColorText2 -color of text line 2 in hex form, for example: #AA00AA
 * @param {string} textId3 - Text Id of the third text object, of type "TEXT_zzz"
 * @param {string} textString3 - third line of text
 * @param {object} textStyle3 - textstyle of text line 3, formattet as a java script object with css style elements
 * @param {string} scaleText3 - relative scale of text line 3, value between 0 and 1
 * @param {string} hexColorText3 -color of text line 3 in hex form, for example: #AA00AA
 */

function cvjs_AddTextAndTBorderOnSpaceObject3Lines(txtLayer, nodeId, tborderId, leftScale, textId1, textString1, textStyle1, scaleText1, hexColorText1, textId2, textString2, textStyle2, scaleText2, hexColorText2, textId3, textString3, textStyle3, scaleText3, hexColorText3){

	var graphicalObject;
	var spc=0;
	var nodeArrId = 0;
	var flag = false;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("node") == nodeId ){
			graphicalObject = vqRooms[cvjs_active_floorplan_div_nr][spc];
			nodeArrId = spc;
			flag = true;
		}
	}

	if (!flag) return;

	var strRoom = graphicalObject.toString();

	var path1;
	var path_flag = true;
	var cx;
	var cy;
	var r;

	if (strRoom.indexOf("path")>-1){
		path_flag = true;
		var pos1 = strRoom.indexOf(" d=");
		var pathStr1 = strRoom.substring(pos1+4);
		//console.log(pathStr1);
		var pos1A = pathStr1.indexOf("\" ");
		path1 = pathStr1.substring(0, pos1A);
	}

	if (strRoom.indexOf("circle")>-1){
		path_flag = false;

		var p_cx = strRoom.indexOf(" cx=");
		var s1_cx = strRoom.substring(p_cx+5);
		var p2_cx = s1_cx.indexOf("\"");
		cx = s1_cx.substring(0, p2_cx)

		var p_cy = strRoom.indexOf(" cy=");
		var s1_cy = strRoom.substring(p_cy+5);
		var p2_cy = s1_cy.indexOf("\"");
		cy = s1_cy.substring(0, p2_cy)


		var p_r = strRoom.indexOf(" r=");
		var s1_r = strRoom.substring(p_r+4);
		var p2_r = s1_r.indexOf("\"");
		r = s1_r.substring(0, p2_r)
	}

	var graphicStr = graphicalObject.toString();
	var boundingBoxElement = graphicalObject.getBBox();

	var x = boundingBoxElement.x;
	var y = boundingBoxElement.y;
	var width = boundingBoxElement.width;
	var height = boundingBoxElement.height;

	var x1;
	var y1;
	var txt1;
	var txt2;
	var txt3;
	var fontheight1;
	var fontheight2;
	var fontheight3;
	var strokewidth;

	//console.log(x+" "+y+" "+" "+width+" "+height+" factor: "+height/width);

	// three lines of text
	x1 = x +width*leftScale;

	fontheight1 = height*scaleText1;
	y1 = y +fontheight1*1.05;
	txt1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(x1,y1, textString1).attr(textStyle1);
	txt1.attr({'font-size' : fontheight1});
	strokewidth = fontheight1/15;
	txt1.attr({'stroke-width' : strokewidth, 'stroke-opacity': "1"});
	txt1.attr({'stroke' : hexColorText1});
	txt1.attr({'fill' : hexColorText1});

	vqText.push(txt1.data("node", textId1));
	var text = vqText.length;
	if (text>0) text--;
	vqText[text].data("name", textId1)
	vqText[text].data("id", textId1)
	vqText[text].data("layer", txtLayer)

	fontheight2 = height*scaleText2;
	y1 = y +fontheight2*1.05+fontheight1*1.05;
	txt2 = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(x1,y1, textString2).attr(textStyle2);
	txt2.attr({'font-size' : fontheight2});
	strokewidth = fontheight2/15;
	txt2.attr({'stroke-width' : strokewidth, 'stroke-opacity': "1"});
	txt2.attr({'stroke' : hexColorText2});
	txt2.attr({'fill' : hexColorText2});

	vqText.push(txt2.data("node", textId2));
	text = vqText.length;
	if (text>0) text--;
	vqText[text].data("name", textId2)
	vqText[text].data("id", textId2)
	vqText[text].data("layer", txtLayer)


	fontheight3 = height*scaleText3;
	y1 = y +fontheight3*1.05 +fontheight2*1.05+fontheight1*1.05;
	txt3 = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(x1,y1, textString3).attr(textStyle3);
	txt3.attr({'font-size' : fontheight3});
	strokewidth = fontheight3/15;
	txt3.attr({'stroke-width' : strokewidth, 'stroke-opacity': "1"});
	txt3.attr({'stroke' : hexColorText3});
	txt3.attr({'fill' : hexColorText3});

	vqText.push(txt3.data("node", textId3));
	text = vqText.length;
	if (text>0) text--;
	vqText[text].data("name", textId3)
	vqText[text].data("id", textId3)
	vqText[text].data("layer", txtLayer)

	var textArr = [];

	textArr[0]= textId1;
	textArr[1]= textId2;
	textArr[2]= textId3;

	// turn off layer with TBorder polygon

	if (path_flag){
		var pathX = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path(path1), txt1, txt2, txt3).data("node", tborderId);
		vqTBorder.push(pathX);

		var border = vqTBorder.length;
		if (border>0) border--;

		vqTBorder[border].data("name", tborderId)
		vqTBorder[border].data("id", tborderId)
		vqTBorder[border].data("layer", tborderId)
//		vqTBorder[border].attr(hide);

		vqTBorder[border].attr(show).attr({fill: 'none', "stoke-width": "0.01", stroke: '#000000', 'stroke-opacity': "0.01"});
	}
	else{
		return -1;
	}

	// add the TBorder to the Space Object tborder variable
	// add these 3 text object to the Space Object text array
	vqRooms[cvjs_active_floorplan_div_nr][nodeArrId].data("tborderId", tborderId)
	vqRooms[cvjs_active_floorplan_div_nr][nodeArrId].data("textId", textArr)


}


/**
 * Add multiple of text, individually formatted and styled, inside a Space Object
 * @param {string} txtLayer - layer to apply the text
 * @param {string} Id - Id of the graphical object in which to place the text
 * @param {float} leftScale - distance from the left border of Space Object, value between 0 and 1
 * @param {array} textStringArr - Array with the lines of text
 * @param {array} textStyleArr - Array with textstyle of text lines, formattet as a java script object with css style elements, predefined is: text_style_arial_11pt_bold , text_style_arial_9pt_normal, text_style_dialog
 * @param {array} scaleTextArr - Array with relative scale of text lines, value between 0 and 1, based on global height of drawing
 * @param {array} hexColorTextArr - Array of color of text lines in hex form, for example: #AA00AA
 * @param {boolean} clipping - true if clipping of text inside of Space Object, false if text to cross Space Object borders
 */

function cvjs_AddTextAndTBorderOnSpaceObjectId_GlobalHeight(txtLayer, Id, leftScale, textStringArr, textStyleArr, scaleTextArr, hexColorTextArr, clipping){

	var nodeId = cvjs_getSpaceObjectNodefromId(Id);

// find largest TBORDER_
//define new TBORDER_

	var border = vqTBorder.length;
	border++;
	var tborderId = "TBORDER_"+border;

// find largest TEXT_
// define an array with new TEXT_ array items

	var textIdArr = new Array();

	for (ii in textStringArr){
		textIdArr[ii] = "TEXT_"+tborderId+"_"+(ii+1);
	}

	cvjs_AddTextAndTBorderOnSpaceObject(txtLayer, nodeId, tborderId, leftScale, textIdArr, textStringArr, textStyleArr, scaleTextArr, hexColorTextArr, clipping, true);

}







/**
 * Add multiple of text, individually formatted and styled, inside a Space Object
 * @param {string} txtLayer - layer to apply the text
 * @param {string} Id - Id of the graphical object in which to place the text
 * @param {float} leftScale - distance from the left border of Space Object, value between 0 and 1
 * @param {array} textStringArr - Array with the lines of text
 * @param {array} textStyleArr - Array with textstyle of text lines, formattet as a java script object with css style elements, predefined is: text_style_arial_11pt_bold , text_style_arial_9pt_normal, text_style_dialog
 * @param {array} scaleTextArr - Array with relative scale of text lines, value between 0 and 1
 * @param {array} hexColorTextArr - Array of color of text lines in hex form, for example: #AA00AA
 * @param {boolean} clipping - true if clipping of text inside of Space Object, false if text to cross Space Object borders
 * @param {boolean} centering - true if centering of text inside of Space Object, false is default
 */

function cvjs_AddTextAndTBorderOnSpaceObjectId(txtLayer, Id, leftScale, textStringArr, textStyleArr, scaleTextArr, hexColorTextArr, clipping, centering){

	var nodeId = cvjs_getSpaceObjectNodefromId(Id);

	// 3.2.02c
	if (centering == undefined) centering=false;
	
// find largest TBORDER_
//define new TBORDER_

	var border = vqTBorder.length;
	border++;
	var tborderId = "TBORDER_"+border;

// find largest TEXT_
// define an array with new TEXT_ array items

	var textIdArr = new Array();

	for (ii in textStringArr){
		textIdArr[ii] = "TEXT_"+tborderId+"_"+(ii+1);
	}

	cvjs_AddTextAndTBorderOnSpaceObject(txtLayer, nodeId, tborderId, leftScale, textIdArr, textStringArr, textStyleArr, scaleTextArr, hexColorTextArr, clipping, centering, false);

}


/**
 * Add multiple of text, individually formatted and styled, inside a Space Object
 * @param {string} txtLayer - layer to apply the text
 * @param {string} nodeId - nodeId of the graphical object in which to place the text
 * @param {float} leftScale - distance from the left border of Space Object, value between 0 and 1
 * @param {array} textStringArr - Array with the lines of text
 * @param {array} textStyleArr - Array with textstyle of text lines, formattet as a java script object with css style elements, predefined is: text_style_arial_11pt_bold , text_style_arial_9pt_normal, text_style_dialog
 * @param {array} scaleTextArr - Array with relative scale of text lines, value between 0 and 1
 * @param {array} hexColorTextArr - Array of color of text lines in hex form, for example: #AA00AA
 * @param {boolean} clipping - true if clipping of text inside of Space Object, false if text to cross Space Object borders
 * @param {boolean} centering - true if centering of text inside of Space Object, false is default
 */

function cvjs_AddTextAndTBorderOnSpaceObjectNode(txtLayer, nodeId, leftScale, textStringArr, textStyleArr, scaleTextArr, hexColorTextArr, clipping, centering){

	var border = vqTBorder.length;
	border++;
	var tborderId = "TBORDER_"+border;

// find largest TEXT_
// define an array with new TEXT_ array items

	// 3.2.02c
	if (centering == undefined) centering=false;


	var textIdArr = new Array();

	for (ii in textStringArr){
		textIdArr[ii] = "TEXT_"+tborderId+"_"+(ii+1);
	}

//console.log("before SpaceObject");

	cvjs_AddTextAndTBorderOnSpaceObject(txtLayer, nodeId, tborderId, leftScale, textIdArr, textStringArr, textStyleArr, scaleTextArr, hexColorTextArr, clipping, centering, false);

}




function cvjs_AddTextAndTBorderOnSpaceObject(txtLayer, nodeId, tborderId, leftScale, textIdArr, textStringArr, textStyleArr, scaleTextArr, hexColorTextArr, clipping, centering, globalheightFlag){

	var graphicalObject;
	var spc=0;
	var nodeArrId = 0;
	var flag = false;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("node") == nodeId ){
			graphicalObject = vqRooms[cvjs_active_floorplan_div_nr][spc];
			nodeArrId = spc;
			flag = true;
		}
	}

	if (!flag) return;

	var strRoom = graphicalObject.toString();

	var path1;
	var path_flag = true;
	var cx;
	var cy;
	var r;

	var path2;

	if (strRoom.indexOf("path")>-1){
		path_flag = true;
		var pos1 = strRoom.indexOf(" d=");
		var pathStr1 = strRoom.substring(pos1+4);
		//console.log(pathStr1);
		var pos1A = pathStr1.indexOf("\" ");
		path1 = pathStr1.substring(0, pos1A);

		path2 = path1;
	}

	if (strRoom.indexOf("circle")>-1){
		path_flag = false;

		var p_cx = strRoom.indexOf(" cx=");
		var s1_cx = strRoom.substring(p_cx+5);
		var p2_cx = s1_cx.indexOf("\"");
		cx = s1_cx.substring(0, p2_cx)

		var p_cy = strRoom.indexOf(" cy=");
		var s1_cy = strRoom.substring(p_cy+5);
		var p2_cy = s1_cy.indexOf("\"");
		cy = s1_cy.substring(0, p2_cy)


		var p_r = strRoom.indexOf(" r=");
		var s1_r = strRoom.substring(p_r+4);
		var p2_r = s1_r.indexOf("\"");
		r = s1_r.substring(0, p2_r)
	}

	var graphicStr = graphicalObject.toString();
	var boundingBoxElement = graphicalObject.getBBox();

	var x = boundingBoxElement.x;
	var y = boundingBoxElement.y;
	var width = boundingBoxElement.width;
	var height; 

	//3.2.02c
	if (centering){	
		x = boundingBoxElement.x+boundingBoxElement.width/2;
		y = boundingBoxElement.y+boundingBoxElement.height/2;	
	}
	
	
	
	
	// 3.0.14e
	if (globalheightFlag)
		//height =  cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox().height;
		height = actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr];
	
	else
		height = boundingBoxElement.height;
	
	
	var txt;
	var txt2;
	var txt3;
	var fontheight = 0;;
	var fontheight2;
	var fontheight3;
	var strokewidth;

//	console.log(x+" "+y+" "+" "+width+" "+height+" factor: "+height/width);

//	var pathX = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path(path1), txt1, txt2, txt3).data("node", tborderId);

	var pathX = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path(path1)).data("node", tborderId);
	var x1 = x;
	var y1 = y;

	var i=0;  // 3.1.20h


	for	(i = 0; i < textIdArr.length; i++) {

//console.log("text i"+i);

		// we set the clipping mask
		var clipping_mask;

		// we define the clipping mask to text
		if (clipping){
			clipping_mask = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(path2);
			clipping_mask.attr({'fill' : "#FFFFFF", 'fill-opacity': "1"});
		}

		x1 = x +width*leftScale;

		fontheight = height*scaleTextArr[i];
		y1 += fontheight*1.05;
		txt = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(x1,y1, textStringArr[i]).attr(textStyleArr[i]);
		txt.attr({'font-size' : fontheight});
		strokewidth = fontheight/15;
	
		// 2017-11-21 supress values
	
	//	txt.attr({'stroke-width' : strokewidth, 'stroke-opacity': "1"});
	//	txt.attr({'stroke' : hexColorTextArr[i]});
	
		txt.attr({'fill' : hexColorTextArr[i]});

		// we apply the clipping mask to text
		if (clipping)
			txt.attr({'mask' : clipping_mask});

		// we make so that text cannot get any mouse-over interaction
		txt.attr({'pointer-events' : 'none'});


		vqText.push(txt.data("node", textIdArr[i]));
		var text = vqText.length;
		if (text>0) text--;
		vqText[text].data("name", textIdArr[i]);
		vqText[text].data("id", textIdArr[i]);
		vqText[text].data("layer", txtLayer);
		pathX.add(txt);
	}

	if (path_flag){

		vqTBorder.push(pathX);

		var border = vqTBorder.length;
		if (border>0) border--;

		vqTBorder[border].data("name", tborderId)
		vqTBorder[border].data("id", tborderId)
		vqTBorder[border].data("layer", tborderId)
//		vqTBorder[border].attr(hide);
		vqTBorder[border].attr(show).attr({fill: 'none', "stoke-width": "0.01", stroke: '#000000', 'stroke-opacity': "0.01"});
	}
	else{
		return -1;
	}

	// add the TBorder to the Space Object tborder variable
	// add these 3 text object to the Space Object text array
	vqRooms[cvjs_active_floorplan_div_nr][nodeArrId].data("tborderId", tborderId)
	vqRooms[cvjs_active_floorplan_div_nr][nodeArrId].data("textId", textIdArr)

}





function cvjs_AddTextOnObjectScaleText(graphicalObject, leftScale, textString1, textStyle1, scaleText1, textString2, textStyle2, scaleText2, textString3, textStyle3, scaleText3){

// find bounding box
var boundingBoxElement = graphicalObject.getBBox();

var x = boundingBoxElement.x;
var y = boundingBoxElement.y;
var width = boundingBoxElement.width;
var height = boundingBoxElement.height;

var x1;
var y1;
var txt1;
var txt2;
var txt3;
var fontheight1;
var fontheight2;
var fontheight3;
var strokewidth;

if (cvjs_debug)		console.log(x+" "+y+" "+" "+width+" "+height);

	// three lines of text
	x1 = x +width*leftScale;

	fontheight1 = height*scaleText1;
	y1 = y +fontheight1*1.05;
	txt1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(x1,y1, textString1).attr(textStyle1);
	txt1.attr({'font-size' : fontheight1});
	strokewidth = fontheight1/15;
	txt1.attr({'stroke-width' : strokewidth});



	fontheight2 = height*scaleText2;
	y1 = y +fontheight2*1.05+fontheight1*1.05;
	txt2 = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(x1,y1, textString2).attr(textStyle2);
	txt2.attr({'font-size' : fontheight2});
	strokewidth = fontheight2/15;
	txt2.attr({'stroke-width' : strokewidth});


	fontheight3 = height*scaleText3;
	y1 = y +fontheight3*1.05 +fontheight2*1.05+fontheight1*1.05;
	txt3 = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(x1,y1, textString3).attr(textStyle3);
	txt3.attr({'font-size' : fontheight3});
	strokewidth = fontheight3/15;
	txt3.attr({'stroke-width' : strokewidth});


}



// END Add text overlay to objects



// BEGIN - draw methods

var handleGroup;
var canvas_width;
var canvas_height;
var global_scale_X;
var global_scale_Y;
var global_scale;
var delta_x;
var delta_y;


var cvjs_supressHyperlinkColors = false,
cvjs_callbackForModalDisplayVar = false,
cvjs_standardHighLightColors = true,

cvjs_customModalPopUpBody,
cvjs_customModalPopUpBody,
cvjs_populateMyCustomPopUpBody;

/**
 * Space Object modals control for external retrieval of modal data.
 * @param {boolean} callbacForkModalDisplay - false: standard modal on Space Object click as defined through setup method: InitCADViewerJS_ , true: if attributesStatus in the data-field of object is "unpopulated" a call is made to external method cvjs_callbackForModalDisplay(), if attributeStatus is "populated", modal is displayed.
 * @param {function} customModalPopUpBody : method that defines the body of the popup model
 * @param {function} populateMyCustomModalPopUpBody : method that populates the body of the popup model, this method is called when a space is selected so the display of modal content will match the modal selected
 */
function cvjs_setCallbackForModalDisplay(callbackForModalDisplay, customModalPopUpBody, populateMyCustomPopUpBody){

	cvjs_callbackForModalDisplayVar = callbackForModalDisplay;

	cvjs_customModalPopUpBody = customModalPopUpBody;

	cvjs_populateMyCustomPopUpBody = populateMyCustomPopUpBody;
}




/**
 * Sets the display mode of Space Object modals
 * @param {boolean} cvjs_supressPopUp - false: PopUp Modal on Space Object click as defined through setup method: InitCADViewer_ , true: modal is supressed, tooltip is ID of object, color setting is defined through the "linked" database field of the object.
 * @param {boolean} cvjs_creationMode - false:  Activates creation mode colors in Space Object Creation 
 */
function cvjs_setCreationMode(cvjs_supressPopUp, cvjs_creationMode){

	cvjs_supressPopUpModal = cvjs_supressPopUp;

	if (cvjs_creationMode == true)
		cvjs_standardHighLightColors = false;
	else
		cvjs_standardHighLightColors = true;

	
	if (cvjs_supressPopUpModal == true){

		for (var room in vqRooms[cvjs_active_floorplan_div_nr]){

			jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: "", title: ""},
					style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
					position: {my: 'bottom center', at: 'top left'},  //   my: 'bottom center', at: 'top center'
					hideOnHTMLClick: 'true'});

			jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip('destroy');
		}
	
	}	
	else{

		// 3.2.02c
		textLayer1 = cvjs_clearTextLayer(textLayer1);
	
	
	
		for (var room in vqRooms[cvjs_active_floorplan_div_nr]){

			var htitle = "<table width=\"100%\"><tr><td class=\"cvjs_modal_header_1\" onclick=\"cvjs_popupTitleClick(\'"+vqRooms[cvjs_active_floorplan_div_nr][room].data("id")+"\');\">"+vqRooms[cvjs_active_floorplan_div_nr][room].data("name")+"</td>"+
				"<td class=\"cvjs_modal_header_info_1\" onclick=\"hideOnlyPop("+room+");\"><i class=\"fa fa-times\"></i></td></tr>"+
				"<tr><td cols=\"2\"><h4 id=\"cvjs_modal_header_info_2\">"+vqRooms[cvjs_active_floorplan_div_nr][room].data("type")+"</h4></td></tr></table>";

	//console.log("dual_hbody_flag "+dual_hbody_flag+"  floor.rooms[bRoom].id   "+floor.rooms[bRoom].id);

			if (dual_hbody_flag){
				if ( parseInt(cvjs_currentNode_id) >=-1){
					jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'}, //   my: 'bottom center', at: 'top center'
						hideOnHTMLClick: 'false'});
				}else{
					jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody_2, title: htitle},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'}, //   my: 'bottom center', at: 'top center'
						hideOnHTMLClick: 'false'});
				}
			}

			if (!dual_hbody_flag){
					jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'},
						hideOnHTMLClick: 'false'});
			}


		}
	}

	//console.log(" cvjs_supressPopUpModal "+cvjs_supressPopUpModal);
}



/**
 * Sets the display mode of Space Object modals
 * @param {boolean} cvjs_modalMode - false: standard modal on Space Object click as defined through setup method: InitCADViewerJS_ , true: modal is supressed, standard colors on highlight
 */

function cvjs_setNoModalMode(cvjs_modalMode){

	cvjs_supressPopUpModal = cvjs_modalMode;


	if (cvjs_modalMode == true)
		cvjs_standardHighLightColors = true;
	else
		cvjs_standardHighLightColors = true;


	if (cvjs_supressPopUpModal == true){
		for (var room in vqRooms[cvjs_active_floorplan_div_nr]){

			jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: "", title: ""},
					style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
					position: {my: 'bottom center', at: 'top left'},  //   my: 'bottom center', at: 'top center'
					hideOnHTMLClick: 'true'});

			jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip('destroy');
		}
	}
	else{

		for (var room in vqRooms[cvjs_active_floorplan_div_nr]){

			var htitle = "<table width=\"100%\"><tr><td class=\"cvjs_modal_header_1\" onclick=\"cvjs_popupTitleClick(\'"+vqRooms[cvjs_active_floorplan_div_nr][room].data("id")+"\');\">"+vqRooms[cvjs_active_floorplan_div_nr][room].data("name")+"</td>"+
				"<td class=\"cvjs_modal_header_info_1\" onclick=\"hideOnlyPop("+room+");\"><i class=\"fa fa-times\"></i></td></tr>"+
				"<tr><td cols=\"2\"><h4 id=\"cvjs_modal_header_info_2\">"+vqRooms[cvjs_active_floorplan_div_nr][room].data("type")+"</h4></td></tr></table>";

	//console.log("dual_hbody_flag "+dual_hbody_flag+"  floor.rooms[bRoom].id   "+floor.rooms[bRoom].id);

			if (dual_hbody_flag){
				if ( parseInt(cvjs_currentNode_id) >=-1){
					jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'}, //   my: 'bottom center', at: 'top center'
						hideOnHTMLClick: 'false'});
				}else{
					jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody_2, title: htitle},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'}, //   my: 'bottom center', at: 'top center'
						hideOnHTMLClick: 'false'});
				}
			}

			if (!dual_hbody_flag){
					jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'},
						hideOnHTMLClick: 'false'});
			}


		}
	}

	//console.log(" cvjs_supressPopUpModal "+cvjs_supressPopUpModal);
}




/**
 * Sets Space Object modals to custom type
 * @param {String} hbody -  String containing the body of the popUpModal
 * @param {boolean} dual_hbody_flag - false: flag for dual body popup
 * @param {String} hbody2 -  second hbody, when no active space object
 
 
 */

function cvjs_setCustomModalsContent(hbody, dual_body_flag, hbody2 ){

	cvjs_modalMode = false;

	cvjs_supressPopUpModal = cvjs_modalMode;
	

	if (cvjs_modalMode == true)
		cvjs_standardHighLightColors = true;
	else
		cvjs_standardHighLightColors = true;


	if (cvjs_supressPopUpModal == true){
		for (var room in vqRooms[cvjs_active_floorplan_div_nr]){

			jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: "", title: ""},
					style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
					position: {my: 'bottom center', at: 'top left'},  //   my: 'bottom center', at: 'top center'
					hideOnHTMLClick: 'true'});

			jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip('destroy');
		}
	}
	else{

		for (var room in vqRooms[cvjs_active_floorplan_div_nr]){

			var htitle = "<table width=\"100%\"><tr><td class=\"cvjs_modal_header_1\" onclick=\"cvjs_popupTitleClick(\'"+vqRooms[cvjs_active_floorplan_div_nr][room].data("id")+"\');\">"+vqRooms[cvjs_active_floorplan_div_nr][room].data("name")+"</td>"+
				"<td class=\"cvjs_modal_header_info_1\" onclick=\"hideOnlyPop("+room+");\"><i class=\"fa fa-times\"></i></td></tr>"+
				"<tr><td cols=\"2\"><h4 id=\"cvjs_modal_header_info_2\">"+vqRooms[cvjs_active_floorplan_div_nr][room].data("type")+"</h4></td></tr></table>";

	//console.log("dual_hbody_flag "+dual_hbody_flag+"  floor.rooms[bRoom].id   "+floor.rooms[bRoom].id);

	console.log(" "+room);
			if (dual_hbody_flag){
				if ( parseInt(cvjs_currentNode_id) >=-1){
					jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'}, //   my: 'bottom center', at: 'top center'
						hideOnHTMLClick: 'false'});
				}else{
					jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody_2, title: htitle},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'}, //   my: 'bottom center', at: 'top center'
						hideOnHTMLClick: 'false'});
				}
			}

			if (!dual_hbody_flag){
					jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'},
						hideOnHTMLClick: 'false'});
			}


		}
	}

	//console.log(" cvjs_supressPopUpModal "+cvjs_supressPopUpModal);
}








// DATA BASE STRUCTURE - SPACE OBJECTS
//					NODE_11: {
//						name: "3020B",                    name: "CSJ00000000001J020142900129",
//						id: 265,
//						layer: "Locations",
//						group: "1",
//						attributeStatus: "populated"
//						attributes: [{ name: "MyAttribute", value: "X"},{ name: "AttrB", value: "Y"}],
//						occupancy: "",
//						type: "Conference Room",
//						tags:  {  1: "projector", 2: " screen", 3: " flat panel", 4: " polycom", 5: " demo", 6: " white board"},
//						linked: true
//                      tborderId: "TBORDER_xxx"
//                      textId: {  1: "TEXT_xxx", 2: "TEXT_yyy", 3: "TEXT_zzz",...}
//						}


var cvjs_currentNode_underbar = "NODE_";
var cvjs_currentNode_name = "unassigned";
var cvjs_currentNode_id = "unassigned";
var cvjs_currentNode_layer = "unassigned";
var cvjs_currentNode_group = "unassigned";
var cvjs_currentNode_attributes = "unassigned";
var cvjs_currentNode_attributeStatus = "unpopulated";
var cvjs_currentNode_occupancy = "unassigned";
var cvjs_currentNode_type = "unassigned";
var cvjs_currentNode_tags = "unassigned";
var cvjs_currentNode_linked = false;   // internal flag for display in creation mode
var cvjs_currentNode_tborderId = "unassigned";
var cvjs_currentNode_textId = [];
// 6.2.32
var cvjs_currentNode_displaySpaceObject = "on";

// DATA BASE STRUCTURE - STICKYNOTES
//					SNOTE_11: {
//						name: "John Doe",
//						id: 1,
//						layer: "StickyNotes",
//						group: "1",
//						text: "This is the comment of this note, displayed when clicked upon",
//						userid: "USER01"
//						date: ""
//						linked: true
//						}

var cvjs_currentStickyNote_underbar = "SNOTE_";
var cvjs_currentStickyNote_name = "unassigned";
var cvjs_currentStickyNote_id = "unassigned";
var cvjs_currentStickyNote_layer = "RedlineLayer";
var cvjs_currentStickyNote_group = "unassigned";
var cvjs_currentStickyNote_text = "";    // text is always empty
var cvjs_currentStickyNote_userid = "unassigned";
var cvjs_currentStickyNote_date = "unassigned";
var cvjs_currentStickyNote_linked = true;   // internal flag for display in creation mode
var cvjs_currentStickyNote_transform = "none";   // current transformation of active object
var cvjs_currentStickyNote_currentPage= 1;   // current transformation of active object



// DATA BASE STRUCTURE - REDLINE
//					RED_11: {
//						name: "1",
//						id: 1,
//						layer: "Redline",
//						group: "1",
//						color: "'#FF0000",
//						strokeWidth: "3",
//						fill: "none",
//						fill-opacity:"0.01",
//						transform: "none"
//						userid: "none"
//						}


var cvjs_currentRedline_underbar = "RED_";
var cvjs_currentRedline_name = "unassigned";
var cvjs_currentRedline_id = "unassigned";
var cvjs_currentRedline_layer = "RedlineLayer";
var cvjs_currentRedline_group = "unassigned";
var cvjs_currentRedline_color = "#FF0000";
var cvjs_currentRedline_strokeWidth = 3;
var cvjs_currentRedline_fill = "none";
var cvjs_currentRedline_fill_opacity = "0.01";
var cvjs_currentRedline_transform = "none";
var cvjs_currentRedline_userid = "none";
var cvjs_currentRedline_currentPage = 1;
var cvjs_currentRedline_polypath_arrow = "none";
var cvjs_currentRedline_triangle_design = "none";
var cvjs_currentRedline_redline_text = "none";
var cvjs_currentRedline_username = "none";
var cvjs_currentRedline_drawingRotation = 0; 



// DATA CONTROL STRUCTURES REDLINES - STICKYNOTE
// ; separated value lis

var cvjs_hiddenUsersList = "";
var cvjs_lockedUsersList = "";



// DATA BASE STRUCTURE - TEXT BORDER
//					TBORDER_22: {
//						name: "TBORDER_22",
//						id: 22,
//						layer: "tborder22",
//						group: "22",
//						}


var cvjs_currentTBorder_underbar = "TBORDER_";
var cvjs_currentTBorder_name = "unassigned";
var cvjs_currentTBorder_id = "unassigned";
var cvjs_currentTBorder_layer = "unassigned";
var cvjs_currentTBorder_group = "unassigned";


// DATA BASE STRUCTURE - TEXT
//					TEXT_33: {
//						name: "TEXT_33",
//						id: 33,
//						layer: "text33",
//						group: "33",
//						}

var cvjs_currentText_underbar = "TEXT_";
var cvjs_currentText_name = "unassigned";
var cvjs_currentText_id = "unassigned";
var cvjs_currentText_layer = "unassigned";
var cvjs_currentText_group = "unassigned";


// DATA BASE STRUCTURE - HYPERLINK URL
//					URL_01: {
//						name: "urlshortname, if none, the url itself, popupwithcurserover",
//						id: "yy, if unknown then URL_01",
//						comment: "comment field as defined in AutoCAD file",
//						url: "http://linktomylocation or javascript call",
//						layer: "LayerOfUrl",
//						group: "myhyperlinkgroup",
//						linked: true
//						}

var cvjs_currentUrl_underbar = "URL_";
var cvjs_currentUrl_name = "unassigned";
var cvjs_currentUrl_id = "unassigned";
var cvjs_currentUrl_comment = "unassigned";
var cvjs_currentUrl_url = "unassigned";
var cvjs_currentUrl_layer = "unassigned";
var cvjs_currentUrl_group = "unassigned";
var cvjs_currentUrl_linked = true;







var cvjsStickyNoteBody = "<table id=\"note_table\">";
	cvjsStickyNoteBody +="<tr>";
	cvjsStickyNoteBody +="<td>";
	cvjsStickyNoteBody +="<div class=\"cvjs_stickynotes_text_1\" onclick=\"cvjs_edit_note();\">Text NOT initialized!</div>";
	cvjsStickyNoteBody +="</td>";
	cvjsStickyNoteBody +="</tr>";
	cvjsStickyNoteBody +="</table>";

function cvjs_setStickyNoteText(text){

	cvjsStickyNoteBody = "<table id=\"note_table\">";
	cvjsStickyNoteBody +="<tr>";
	cvjsStickyNoteBody +="<td>";
	cvjsStickyNoteBody +="<div class=\"cvjs_stickynotes_text_1\" onclick=\"cvjs_edit_note();\">"+text+"</div>";
	cvjsStickyNoteBody +="</td>";
	cvjsStickyNoteBody +="</tr>";
	cvjsStickyNoteBody +="</table>";

}

function cvjs_setStickyNoteEditText(text){


	cvjsStickyNoteBody = "<table id=\"note_table\">";
	cvjsStickyNoteBody +="<tr>";
	cvjsStickyNoteBody +="<td>";
	cvjsStickyNoteBody +="<textarea class=\"cvjs_stickynotes_edit_text_1\" id=\"sNote_text\" cols=\"33\" rows=\"3\">"+text+"</textarea>";
	cvjsStickyNoteBody +="</td>";
	cvjsStickyNoteBody +="</tr>";
	cvjsStickyNoteBody +="</table>";

//console.log(cvjsStickyNoteBody);

}



jQuery('#stickyNoteSelectIcon').mouseover(function()
	{

//S	  console.log("we are here");

//	   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft+20).css("top", e.clientY+document.body.scrollTop-20);
//	   tip[cvjs_active_floorplan_div_nr].css("left", e.screenX+20).css("top", e.screenY-20);


	var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
	var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
	if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
	//console.log("absolute");
	   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+20).css("top", e.clientY+document.documentElement.scrollTop-20);
	}
	else{  // we have placed CV-JS inside a div and we have to make a relative position

		//console.log("inside");
		//console.log(position.left+" "+position.top+"tipText="+tipText+" e.clientX "+e.clientX+" e.clientY "+e.clientY+" "+document.documentElement.scrollLeft+" "+document.documentElement.scrollTop);
		//console.log(e.clientX-position.left+document.documentElement.scrollLeft+10);
		//console.log(e.clientY-position.top+document.documentElement.scrollTop-25);
		tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+20).css("top", e.clientY-position.top+document.documentElement.scrollTop-20);
	}



	   tip[cvjs_active_floorplan_div_nr].html(tipText);
	   tip[cvjs_active_floorplan_div_nr].show();

	});


		
	
function cvjs_showIconnoteTip(tipText, icon, n_index){

		var iconPosition;

//		var nodePosition = jQuery(vqStickyNotes[n_index].node).position();

		var qtipdiv = "#cvjs_floorPlanInsertImageEncapsulate_"+floorplan_div_Array[cvjs_active_floorplan_div_nr];
		var nodePosition = jQuery(qtipdiv).position();

		var nodePosition_type = jQuery(qtipdiv).css('position');
		
			
if (cvjs_debug) console.log("qtip div "+nodePosition_type);			
if (cvjs_debug) console.log("we are here "+tipText+"  "+StickNoteQtipDiv+" "+qtipdiv+" "+nodePosition.left+" "+nodePosition.top);

		if (icon==1) iconPosition = jQuery('#imageNoteIcon1').position();
		if (icon==2) iconPosition = jQuery('#imageNoteIcon2').position();
		if (icon==3) iconPosition = jQuery('#imageNoteIcon3').position();

		
	var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
	var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');	


if (cvjs_debug) console.log("iconPosition "+iconPosition.left+"  "+iconPosition.top+"  "+floorplan_pos);
	
	// 3.1.21k
var	scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
var scrollTop = window.pageYOffset || document.documentElement.scrollTop;
	tip[cvjs_active_floorplan_div_nr].css({
		left:nodePosition.left+iconPosition.left-scrollLeft,//+floorplanPosition.left,
		top: nodePosition.top-25-scrollTop, //+floorplanPosition.top-25,
		position:'fixed'
	});
	
//	   tip[cvjs_active_floorplan_div_nr].css("left", nodePosition.left+iconPosition.left).css("top", nodePosition.top+iconPosition.top-35);
	   tip[cvjs_active_floorplan_div_nr].html(tipText);
	   tip[cvjs_active_floorplan_div_nr].show();

		
// set back to absolute
	
}
	
	
	
	
	
	

	
	
var StickNoteQtipDiv = "";

function cvjs_showStickynoteTip(tipText, icon, n_index){

		var iconPosition;

//		var nodePosition = jQuery(vqStickyNotes[n_index].node).position();

		var qtipdiv = "#"+StickNoteQtipDiv;
		var nodePosition = jQuery(qtipdiv).position();

		var nodePosition_type = jQuery(qtipdiv).css('position');
		
if (cvjs_debug) console.log("qtip div "+nodePosition_type);		
		
		
if (cvjs_debug) console.log("we are here "+tipText+"  "+StickNoteQtipDiv+" "+qtipdiv+" "+nodePosition.left+" "+nodePosition.top);

		if (icon==1) iconPosition = jQuery('#stickyNoteIcon1').position();
		if (icon==2) iconPosition = jQuery('#stickyNoteIcon2').position();
		if (icon==3) iconPosition = jQuery('#stickyNoteIcon3').position();
		if (icon==4) iconPosition = jQuery('#stickyNoteIcon4').position();

		
	var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
	var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');	


if (cvjs_debug) console.log("iconPosition "+iconPosition.left+"  "+iconPosition.top+"  "+floorplan_pos);


/****
	
	if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
	//console.log("absolute");
	   //tip[cvjs_active_floorplan_div_nr].css("left", nodePosition.left+iconPosition.left).css("top", nodePosition.top-25);

	   // 2018-04-20    same in absolute as in normal mode
	   tip[cvjs_active_floorplan_div_nr].css("left", nodePosition.left+iconPosition.left).css("top", nodePosition.top);

	console.log(nodePosition.left+iconPosition.left);
	console.log(nodePosition.top);

	console.log(floorplan_pos+" floorplan_pos "+position.left);
	console.log(position.top);
	

	}
	else{  // we have placed CV-JS inside a div and we have to make a relative position

		console.log(nodePosition.left+"  "+iconPosition.left+"  "+position.left);
		
//		tip[cvjs_active_floorplan_div_nr].css("left", nodePosition.left+iconPosition.left-position.left+document.documentElement.scrollLeft).css("top", nodePosition.top-position.top+document.documentElement.scrollTop-35);
		tip[cvjs_active_floorplan_div_nr].css("left", nodePosition.left+iconPosition.left-position.left).css("top", nodePosition.top-position.top-35);
	}

***/
	
	// 2018-04-20

	tip[cvjs_active_floorplan_div_nr].css({
		left:nodePosition.left+iconPosition.left,
		top: nodePosition.top-25,
		position:'fixed'
	});



	
		
//	   tip[cvjs_active_floorplan_div_nr].css("left", nodePosition.left+iconPosition.left).css("top", nodePosition.top+iconPosition.top-35);
	   tip[cvjs_active_floorplan_div_nr].html(tipText);
	   tip[cvjs_active_floorplan_div_nr].show();

	   if (icon==3 && tipText.indexOf("Inactive")==-1 ){
			//console.log("icon3 "+tipText);
		   //jQuery('#stickyNoteIcon3').css(".cvjs_modal_header_sticky_note_info_2_select");
		   jQuery('#stickyNoteIcon3').css("color", "#FB5300");
	}
	
	

// set back to absolute
	
}

function noteIconChangeHighlight(icon, iconcolor){

//console.log(icon+" "+iconcolor);

   if (icon==3){
	   jQuery('#stickyNoteIcon3').css("color", iconcolor);
	}
	tip[cvjs_active_floorplan_div_nr].hide();
}


var StickNoteEditMode = false;


function cvjs_edit_note(){

if (cvjs_debug_stickynotes) window.alert("edit note!");

	var id = cvjs_StickyNoteClicked();

	for (var snote in vqStickyNotes){
				if (id == vqStickyNotes[snote].data("node")){
					if (vqStickyNotes[snote].data("locked") == true){
if (cvjs_debug)							console.log("StickyNote locked for editing!");
						return;
					}
				}
	}


	// have to find out the current node number
	var n_index = cvjs_StickyNotes_arrayIndex(id);


	if (StickNoteEditMode == false){  // now we have to allow for edit!!

		var tString = vqStickyNotes[n_index].data("text");
		tString = tString.replace(/(<br>)/gm, '\n');

		// have to replace the body with the new body
		cvjs_setStickyNoteEditText(tString);

		var htitle = "<table width=\"100%\"><tr><td cols=\"3\"><div class=\"cvjs_modal_header_stickynote_info_2\">#"+vqStickyNotes[n_index].data("id")+"</div><td class=\"cvjs_modal_header_stickynote_info_2_background\"></td><td class=\"cvjs_modal_header_1\" >"+vqStickyNotes[n_index].data("name")+"</td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_1_nonselect\" id=\"stickyNoteIcon1\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+languageTable.languages[cvjs_currentLanguage].StickyNote.Inactive+"\',1,"+n_index+");\" ><i class=\"\"></i></td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_1_select\" id=\"stickyNoteIcon2\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onclick=\"cvjs_edit_note();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+languageTable.languages[cvjs_currentLanguage].StickyNote.SaveNote+"\',2,"+n_index+");\" ><i class=\"fa fa-edit\"></i></td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_1_nonselect\" id=\"stickyNoteIcon3\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+languageTable.languages[cvjs_currentLanguage].StickyNote.Inactive+"\',3,"+n_index+");\" ><i class=\"fa fa-trash-o\"></i></td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_2_select\" id=\"stickyNoteIcon4\" onclick=\"hideOnlyStickyNote("+n_index+");\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+languageTable.languages[cvjs_currentLanguage].StickyNote.Cancel+"\',4,"+n_index+");\" ><i class=\"fa fa-times\"></i></td></tr>"+
			"</table>";


		jQuery(vqStickyNotes[n_index].node).qtip({content: {text: cvjsStickyNoteBody, title: htitle},
				style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
				position: {my: 'bottom center', at: 'top left'},
				hideOnHTMLClick: 'false'});

if (cvjs_debug_stickynotes) console.log("2 stickynote show");

		jQuery(vqStickyNotes[n_index].node).qtip('show');
		StickNoteEditMode = true;

		var divs = document.getElementsByTagName("div");
		for(var i = 0; i < divs.length; i++){
		   //console.log(divs[i].id);
		   if ( ((divs[i].id).indexOf("qtip-")>-1) && ((divs[i].id).indexOf("-content")==-1) && ((divs[i].id).indexOf("-title")==-1)) StickNoteQtipDiv = divs[i].id;
		}

	}
	else{   // here we change back into a normal text box

	   	tip[cvjs_active_floorplan_div_nr].hide();

		var tString = jQuery('#sNote_text').val();
		tString = tString.replace(/(\r\n|\n|\r)/gm, "<br>");

/*

		while (tString.indexOf('\r')>-1){
			tString = tString.substring(0, tString.indexOf('\r'))+"<br>"+tString.substring(tString.indexOf('\r')+1);
		}
*/

		vqStickyNotes[n_index].data("text", tString);
		cvjs_setStickyNoteText(tString);

		var htitle = "<table width=\"100%\"><tr><td cols=\"3\"><div class=\"cvjs_modal_header_stickynote_info_2\">#"+vqStickyNotes[n_index].data("id")+"</div><td class=\"cvjs_modal_header_stickynote_info_2_background\"></td><td class=\"cvjs_modal_header_1\" >"+vqStickyNotes[n_index].data("name")+"</td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon1\" onclick=\"cvjs_move_note();\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+languageTable.languages[cvjs_currentLanguage].StickyNote.MoveNote+"\',1,"+n_index+");\" ><i class=\"fa fa-arrows\"></i></td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon2\" onclick=\"cvjs_edit_note();\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+languageTable.languages[cvjs_currentLanguage].StickyNote.EditNote+"\',2,"+n_index+");\" ><i class=\"fa fa-edit\"></i></td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon3\" onclick=\"cvjs_delete_note();\" onmouseout=\"javascript:noteIconChangeHighlight(3,\'#00539B\');\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+languageTable.languages[cvjs_currentLanguage].StickyNote.DeleteNote+"\',3,"+n_index+");\" ><i class=\"fa fa-trash-o\"></i></td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_2\" id=\"stickyNoteIcon4\" onclick=\"hideOnlyStickyNote("+n_index+");\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+languageTable.languages[cvjs_currentLanguage].StickyNote.MinimizeNote+"\',4,"+n_index+");\" ><i class=\"fa fa-times\"></i></td></tr>"+
			"</table>";



		jQuery(vqStickyNotes[n_index].node).qtip({content: {text: cvjsStickyNoteBody, title: htitle},
				style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
				position: {my: 'bottom center', at: 'top left'},
				hideOnHTMLClick: 'false'});
if (cvjs_debug_stickynotes) console.log("3 stickynote show");
		jQuery(vqStickyNotes[n_index].node).qtip('show');

		StickNoteEditMode = false;

		var divs = document.getElementsByTagName("div");
		for(var i = 0; i < divs.length; i++){
		   //console.log(divs[i].id);
		   if ( ((divs[i].id).indexOf("qtip-")>-1) && ((divs[i].id).indexOf("-content")==-1) && ((divs[i].id).indexOf("-title")==-1)) StickNoteQtipDiv = divs[i].id;
		}


	}

	//console.log("edit note on stickynote id="+id);
}


function cvjs_move_note(){
	var id = cvjs_StickyNoteClicked();

	//console.log("move note id "+id);
	for (var snote in vqStickyNotes){
				if (id == vqStickyNotes[snote].data("node")){
					if (vqStickyNotes[snote].data("locked") == true){
if (cvjs_debug)							console.log("StickyNote locked for editing!");
						return;
					}
				}
	}

	var n_index = cvjs_StickyNotes_arrayIndex(id);

if (cvjs_debug_stickynotes) console.log("2 stickynote hide");

if (cvjs_debug) console.log("2 stickynote move");


	jQuery(vqStickyNotes[n_index].node).qtip('hide');
	vqStickyNotes[n_index].attr({"fill-opacity": "0.1", 'stroke-opacity': "0.3" });

	tip[cvjs_active_floorplan_div_nr].hide();
	//hidePopStickyNotes();
	cvjs_addHandleFunc_MoveStickyNote();

	//console.log("move note on stickynote id="+id);
}


function cvjs_delete_note(){

	var note = cvjs_StickyNoteClicked();
	
if (cvjs_debug)		console.log("StickyNote delete "+note);

	
	for (var snote in vqStickyNotes){
				if (note == vqStickyNotes[snote].data("node")){
					if (vqStickyNotes[snote].data("locked") == true){
if (cvjs_debug)							console.log("StickyNote locked for editing!");
						return;
					}
				}
	}

	cvjs_setUpStickyNotes_deleteNode(note);
}




/**
 * Retrieves the current maximum Node Id for all Space Objects, retrieve and increment when creating new graphical objects
 * @return {string} maxNode - the current maximum node id
 * @deprecated
 */

function cvjs_currentMaxNodeId(){

var maxNode = 0;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		var vqid = vqRooms[cvjs_active_floorplan_div_nr][spc].data("node");
		var vqid = vqid.substring(5);  //  NODE_
		var node = parseInt(vqid);
		if (node>maxNode)
			maxNode = node;
	}
	return maxNode;
}


/**
 * Retrieves the current maximum Node Id for all Space Objects, retrieve and increment when creating new graphical objects
 * @return {string} maxNode - the current maximum node id
 */

function cvjs_currentMaxSpaceNodeId(){

var maxNode = 0;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		var vqid = vqRooms[cvjs_active_floorplan_div_nr][spc].data("node");
		var vqid = vqid.substring(5);  //  NODE_
		var node = parseInt(vqid);
		if (node>maxNode)
			maxNode = node;
	}
	return maxNode;
}



/**
 * Add userId to list of redline and stickyNote users to be hidden (on load)
 * @param {string} userId - the userId to be added to the hidden users list
 */

function cvjs_addUserIdToHiddenRedlineUsers(userId) {

	if (cvjs_hiddenUsersList == ""){
	 cvjs_hiddenUsersList+=userId;
	}
	else{
	 cvjs_hiddenUsersList+=";"+userId;
	}
}


/**
 * Add userId to list of redline and stickyNote users to be locked (on load)
 * @param {string} userId - the userId to be added to the hidden users list
 */

function cvjs_addUserIdToLockedRedlineUsers(userId) {

	if (cvjs_lockedUsersList == ""){
	 cvjs_lockedUsersList+=userId;
	}
	else{
	 cvjs_lockedUsersList+=";"+userId;
	}
}


/**
 * Clear all redline and stickyNote userId from hidden users list
 */

function cvjs_clearAllRedlineHiddenUsers() {

	 cvjs_hiddenUsersList="";

}

/**
 * Clear all redline and stickyNote userId from locked users list
 */

function cvjs_clearAllRedlineLockedUsers() {

	 cvjs_lockedUsersList="";

}


/**
 * Lists all redline and stickyNote userId from hidden users list
 * @return {String} value - Returns Id list
 */

function cvjs_getRedlineHiddenUsersList() {

	 return cvjs_hiddenUsersList;

}

/**
 * Lists all redline and stickyNote userId from locked users list
 * @return {String} value - Returns Id list
 */

function cvjs_getRedlineLockedUsersList() {

	 return cvjs_lockedUsersList;

}





/**
 * Generate list with all redlines users
  * @return {String} value - Returns Id list, separated by ;
*/

function cvjs_getAllRedlines_UserIdList() {

	var userList = "";
	for (var hideuser in userList){

//	if (cvjs_debug) console.log("loop "+hideuser+"  "+userList[hideuser]);

		for (var snote in vqStickyNotes){
			
//			if (cvjs_debug) console.log("snote "+snote);
			
			for (var redNote in cvjs_stickyNotesRedlines){

//					if (cvjs_debug) console.log("redNote "+redNote);

					if (cvjs_stickyNotesRedlines[redNote].node == vqStickyNotes[snote].data("node")){
					
							if ((userList.indexOf(cvjs_stickyNotesRedlines[redNote].userid)==-1)){

							console.log(" 1 "+cvjs_currentRedline_userid+"  "+cvjs_stickyNotesRedlines[redNote].userid);
							
									if (userList=="") 
										userList = cvjs_stickyNotesRedlines[redNote].userid ;
									else
										userList = userList+";"+cvjs_stickyNotesRedlines[redNote].userid ;
							}
					}
			}
		}

		for (var snote in vqRedlines){

			if (cvjs_debug) console.log("snote Red "+snote);

			for (var redNote in cvjs_stickyNotesRedlines){

				if (cvjs_debug) console.log("redNote "+redNote+"  vqRedlines[snote].data(node) "+vqRedlines[snote].data("node")+"  "+cvjs_stickyNotesRedlines[redNote].node);
							if (userList.indexOf(cvjs_stickyNotesRedlines[redNote].userid)==-1){

							console.log(" 2 "+cvjs_currentRedline_userid+"  "+cvjs_stickyNotesRedlines[redNote].userid);
							
									if (userList=="") 
										userList = cvjs_stickyNotesRedlines[redNote].userid 
									else
										userList = userList+";"+cvjs_stickyNotesRedlines[redNote].userid 
							}
					
			}
		}

	}
	
	return (userList);
}



/**
 * Generate list with all redline text and their corresponding userId
  * @return {String} value - Returns Id, redline text list; (userid,redlinetext);(userid,redlinetext)
*/

function cvjs_getAllRedlines_TextList() {

	var userList = "";

	//console.log("1");
	
	
if (cvjs_debug) console.log("loop "+hideuser+"  "+userList[hideuser]);

		
	
	for (var redNote in cvjs_stickyNotesRedlines){

			//console.log("redNote "+redNote+"  "+cvjs_stickyNotesRedlines[redNote].redline_text);

			
					try{
					if (cvjs_stickyNotesRedlines[redNote].text!=undefined  && ( cvjs_stickyNotesRedlines[redNote].text!="none" && cvjs_stickyNotesRedlines[redNote].text!=-1 ) ){

					//console.log(" 1  TEXT="+cvjs_stickyNotesRedlines[redNote].redline_text+"  "+cvjs_stickyNotesRedlines[redNote].userid);
					
							if (userList=="") 
								userList = "("+cvjs_stickyNotesRedlines[redNote].userid + ",\"" + userList.indexOf(cvjs_stickyNotesRedlines[redNote].redline_text) + "\")" ;
							else
								userList = userList+";"+"("+cvjs_stickyNotesRedlines[redNote].userid + ",\"" + userList.indexOf(cvjs_stickyNotesRedlines[redNote].redline_text) + "\")" ;
					}
					}catch (err) {console.log(err);}
	}

		
		
		
			
	for (var redNote in cvjs_stickyNotesRedlines){

			//console.log("QQredNote "+redNote+"  "+cvjs_stickyNotesRedlines[redNote].redline_text);

			
					try{
			
			
					if (cvjs_stickyNotesRedlines[redNote].redline_text!=undefined  && ( cvjs_stickyNotesRedlines[redNote].redline_text!="none" && cvjs_stickyNotesRedlines[redNote].redline_text!=-1)){

					//console.log("MMM 1 "+cvjs_currentRedline_userid+"  "+cvjs_stickyNotesRedlines[redNote].redline_text);
					
							if (userList=="") 
								userList = "("+cvjs_stickyNotesRedlines[redNote].userid + ",\"" + cvjs_stickyNotesRedlines[redNote].redline_text + "\")" ;
							else
								userList = userList+";"+"("+cvjs_stickyNotesRedlines[redNote].userid + ",\"" + cvjs_stickyNotesRedlines[redNote].redline_text + "\")" ;
					}
					}catch (err) {console.log(err);}
	}
	
	return (userList);
}


/**
 * Hide all redlines except named userId
 * @param {string} userId - the userId to be displayed, all other hidden
 
 */

function cvjs_hideAllRedlines_ExceptUser(userId) {


//	var i=0;
//	vqRedlines[i].attr(hide);
//	vqStickyNotes[i].attr(hide);
	//console.log(userList);

	cvjs_hiddenUsersList = "";
	var userList = "";


//	if (cvjs_debug) console.log("loop "+hideuser+"  "+userList[hideuser]);

		for (var snote in vqStickyNotes){
			
//			if (cvjs_debug) console.log("snote "+snote);
			
			for (var redNote in cvjs_stickyNotesRedlines){

//					if (cvjs_debug) console.log("redNote "+redNote);

					if (cvjs_stickyNotesRedlines[redNote].node == vqStickyNotes[snote].data("node")){
					
							if ((userList.indexOf(cvjs_stickyNotesRedlines[redNote].userid)==-1) && (cvjs_stickyNotesRedlines[redNote].userid!=userId) ){

							console.log(" 1 "+cvjs_currentRedline_userid+"  "+cvjs_stickyNotesRedlines[redNote].userid);
							
									if (userList=="") 
										userList = cvjs_stickyNotesRedlines[redNote].userid ;
									else
										userList = userList+";"+cvjs_stickyNotesRedlines[redNote].userid ;
							}
					}
			}
		}

		for (var snote in vqRedlines){

			if (cvjs_debug) console.log("snote Red "+snote);

			for (var redNote in cvjs_stickyNotesRedlines){

				if (cvjs_debug) console.log("redNote "+redNote+"  vqRedlines[snote].data(node) "+vqRedlines[snote].data("node")+"  "+cvjs_stickyNotesRedlines[redNote].node);
							if (userList.indexOf(cvjs_stickyNotesRedlines[redNote].userid)==-1 && cvjs_stickyNotesRedlines[redNote].userid!=userId ){

							console.log(" 2 "+cvjs_currentRedline_userid+"  "+cvjs_stickyNotesRedlines[redNote].userid);
							
									if (userList=="") 
										userList = cvjs_stickyNotesRedlines[redNote].userid 
									else
										userList = userList+";"+cvjs_stickyNotesRedlines[redNote].userid 
							}
					
			}
		}

	

	cvjs_hiddenUsersList = userList;
	console.log("USER LIST "+userList);
	cvjs_hideAllRedlines_HiddenUsersList();
}



/**
 * Lock all redlines except named userId
 * @param {string} userId - the userId to be editable, all other locked
 */

function cvjs_lockAllRedlines_ExceptUser(userId) {


//	var i=0;
//	vqRedlines[i].attr(hide);
//	vqStickyNotes[i].attr(hide);
	//console.log(userList);

	cvjs_lockedUsersList = "";
	var userList = "";


	if (cvjs_debug) console.log("loop "+hideuser+"  "+userList[hideuser]);

		for (var snote in vqStickyNotes){
			
//			if (cvjs_debug) console.log("snote "+snote);
			
			for (var redNote in cvjs_stickyNotesRedlines){

//					if (cvjs_debug) console.log("redNote "+redNote);

					if (cvjs_stickyNotesRedlines[redNote].node == vqStickyNotes[snote].data("node")){
					
							if ((userList.indexOf(cvjs_stickyNotesRedlines[redNote].userid)==-1) && (cvjs_stickyNotesRedlines[redNote].userid!=userId) ){

							console.log(" 1 "+cvjs_currentRedline_userid+"  "+cvjs_stickyNotesRedlines[redNote].userid);
							
									if (userList=="") 
										userList = cvjs_stickyNotesRedlines[redNote].userid ;
									else
										userList = userList+";"+cvjs_stickyNotesRedlines[redNote].userid ;
							}
					}
			}
		}

		for (var snote in vqRedlines){

			if (cvjs_debug) console.log("snote Red "+snote);

			for (var redNote in cvjs_stickyNotesRedlines){

				if (cvjs_debug) console.log("redNote "+redNote+"  vqRedlines[snote].data(node) "+vqRedlines[snote].data("node")+"  "+cvjs_stickyNotesRedlines[redNote].node);
							if (userList.indexOf(cvjs_stickyNotesRedlines[redNote].userid)==-1 && cvjs_stickyNotesRedlines[redNote].userid!=userId ){

							console.log(" 2 "+cvjs_currentRedline_userid+"  "+cvjs_stickyNotesRedlines[redNote].userid);
							
									if (userList=="") 
										userList = cvjs_stickyNotesRedlines[redNote].userid 
									else
										userList = userList+";"+cvjs_stickyNotesRedlines[redNote].userid 
							}
					
			}
		}

	
	
	cvjs_lockedUsersList = userList;
	console.log("USER LIST "+userList);
	cvjs_lockAllRedlines_LockedUsersList();
}




/**
 * Hide all redlines except current userId
 */

function cvjs_hideAllRedlines_ExceptCurrentUser() {


//	var i=0;
//	vqRedlines[i].attr(hide);
//	vqStickyNotes[i].attr(hide);
	//console.log(userList);

	cvjs_hiddenUsersList = "";
	var userList = "";

	for (var hideuser in userList){

//	if (cvjs_debug) console.log("loop "+hideuser+"  "+userList[hideuser]);

		for (var snote in vqStickyNotes){
			
//			if (cvjs_debug) console.log("snote "+snote);
			
			for (var redNote in cvjs_stickyNotesRedlines){

//					if (cvjs_debug) console.log("redNote "+redNote);

					if (cvjs_stickyNotesRedlines[redNote].node == vqStickyNotes[snote].data("node")){
					
							if ((userList.indexOf(cvjs_stickyNotesRedlines[redNote].userid)==-1) && (cvjs_stickyNotesRedlines[redNote].userid!=cvjs_currentRedline_userid) ){

							console.log(" 1 "+cvjs_currentRedline_userid+"  "+cvjs_stickyNotesRedlines[redNote].userid);
							
									if (userList=="") 
										userList = cvjs_stickyNotesRedlines[redNote].userid ;
									else
										userList = userList+";"+cvjs_stickyNotesRedlines[redNote].userid ;
							}
					}
			}
		}

		for (var snote in vqRedlines){

			if (cvjs_debug) console.log("snote Red "+snote);

			for (var redNote in cvjs_stickyNotesRedlines){

				if (cvjs_debug) console.log("redNote "+redNote+"  vqRedlines[snote].data(node) "+vqRedlines[snote].data("node")+"  "+cvjs_stickyNotesRedlines[redNote].node);
							if (userList.indexOf(cvjs_stickyNotesRedlines[redNote].userid)==-1 && cvjs_stickyNotesRedlines[redNote].userid!=cvjs_currentRedline_userid ){

							console.log(" 2 "+cvjs_currentRedline_userid+"  "+cvjs_stickyNotesRedlines[redNote].userid);
							
									if (userList=="") 
										userList = cvjs_stickyNotesRedlines[redNote].userid 
									else
										userList = userList+";"+cvjs_stickyNotesRedlines[redNote].userid 
							}
					
			}
		}

	}

	
	cvjs_hiddenUsersList = userList;

	console.log("USER LIST "+userList);

	cvjs_hideAllRedlines_HiddenUsersList();
	
}



/**
 * Lock all redlines except current userId
 */

function cvjs_lockAllRedlines_ExceptCurrentUser() {


//	var i=0;
//	vqRedlines[i].attr(hide);
//	vqStickyNotes[i].attr(hide);
	//console.log(userList);

	cvjs_lockedUsersList = "";
	var userList = "";

	for (var hideuser in userList){

//	if (cvjs_debug) console.log("loop "+hideuser+"  "+userList[hideuser]);

		for (var snote in vqStickyNotes){
			
//			if (cvjs_debug) console.log("snote "+snote);
			
			for (var redNote in cvjs_stickyNotesRedlines){

//					if (cvjs_debug) console.log("redNote "+redNote);

					if (cvjs_stickyNotesRedlines[redNote].node == vqStickyNotes[snote].data("node")){
					
							if ((userList.indexOf(cvjs_stickyNotesRedlines[redNote].userid)==-1) && (cvjs_stickyNotesRedlines[redNote].userid!=cvjs_currentRedline_userid) ){

							console.log(" 1 "+cvjs_currentRedline_userid+"  "+cvjs_stickyNotesRedlines[redNote].userid);
							
									if (userList=="") 
										userList = cvjs_stickyNotesRedlines[redNote].userid ;
									else
										userList = userList+";"+cvjs_stickyNotesRedlines[redNote].userid ;
							}
					}
			}
		}

		for (var snote in vqRedlines){

			if (cvjs_debug) console.log("snote Red "+snote);

			for (var redNote in cvjs_stickyNotesRedlines){

				if (cvjs_debug) console.log("redNote "+redNote+"  vqRedlines[snote].data(node) "+vqRedlines[snote].data("node")+"  "+cvjs_stickyNotesRedlines[redNote].node);
							if (userList.indexOf(cvjs_stickyNotesRedlines[redNote].userid)==-1 && cvjs_stickyNotesRedlines[redNote].userid!=cvjs_currentRedline_userid ){

							console.log(" 2 "+cvjs_currentRedline_userid+"  "+cvjs_stickyNotesRedlines[redNote].userid);
							
									if (userList=="") 
										userList = cvjs_stickyNotesRedlines[redNote].userid 
									else
										userList = userList+";"+cvjs_stickyNotesRedlines[redNote].userid 
							}
					
			}
		}

	}

	
	cvjs_lockedUsersList = userList;

	console.log("USER LIST "+userList);

	cvjs_lockAllRedlines_LockedUsersList();
	
}





/**
 * Hide all redlines with userId on the Hidden Users List
 */

function cvjs_hideAllRedlines_HiddenUsersList() {


//	var i=0;
//	vqRedlines[i].attr(hide);
//	vqStickyNotes[i].attr(hide);
	//console.log(userList);

	var userList = cvjs_hiddenUsersList.split(";");

	for (var hideuser in userList){

	if (cvjs_debug) console.log("loop "+hideuser+"  "+userList[hideuser]);

		for (var snote in vqStickyNotes){
			
			if (cvjs_debug) console.log("snote "+snote);
			
			for (var redNote in cvjs_stickyNotesRedlines){

						if (cvjs_debug) console.log("redNote "+redNote);

					if (cvjs_stickyNotesRedlines[redNote].node == vqStickyNotes[snote].data("node")){

	if (cvjs_debug) console.log("notes redNote"+redNote+" "+cvjs_stickyNotesRedlines[redNote].userid);
						if (cvjs_stickyNotesRedlines[redNote].userid == userList[hideuser])
							vqStickyNotes[snote].attr(hide);
					}
			}
		}

		for (var snote in vqRedlines){

			if (cvjs_debug) console.log("snote Red "+snote);

			for (var redNote in cvjs_stickyNotesRedlines){

				if (cvjs_debug) console.log("redNote "+redNote+"  vqRedlines[snote].data(node) "+vqRedlines[snote].data("node")+"  "+cvjs_stickyNotesRedlines[redNote].node);
						if (cvjs_stickyNotesRedlines[redNote].node == vqRedlines[snote].data("node")){
if (cvjs_debug) console.log("redlines redNote"+redNote+"  "+cvjs_stickyNotesRedlines[redNote].userid+" "+userList[hideuser]+"X"+"  "+snote+"  "+(cvjs_stickyNotesRedlines[redNote].userid == userList[hideuser]));
						if (cvjs_stickyNotesRedlines[redNote].userid == userList[hideuser])
							vqRedlines[snote].attr(hide);
					}
			}
		}

	}

}


/**
 * Lock all redlines with userId on the Lock Users List
 */

function cvjs_lockAllRedlines_LockedUsersList() {

	var userList = cvjs_lockedUsersList.split(";");

	for (var lockeduser in userList){

	if (cvjs_debug) console.log("loop "+lockeduser+"  "+userList[lockeduser]);

		for (var snote in vqStickyNotes){
			for (var redNote in cvjs_stickyNotesRedlines){
					if (cvjs_stickyNotesRedlines[redNote].node == vqStickyNotes[snote].data("node")){
						if (cvjs_stickyNotesRedlines[redNote].userid == userList[lockeduser]){
							vqStickyNotes[snote].data("locked",true);
							if (cvjs_debug) console.log("locked note "+redNote);
						}
					}
			}
		}

		for (var snote in vqRedlines){
			for (var redNote in cvjs_stickyNotesRedlines){
					if (cvjs_stickyNotesRedlines[redNote].node == vqRedlines[snote].data("node")){
						if (cvjs_stickyNotesRedlines[redNote].userid == userList[lockeduser]){
							vqRedlines[snote].data("locked",true);
							if (cvjs_debug) console.log("locked note "+redNote);
						}
					}
			}
		}
	}

}



/**
 * Sets the current Space Node values, these settings will be used to intialize space objects subsequently drawn with the draw methods
 * @param {string} currentNode_underbar - the NodeId linking data with graphical objects, of the form "NODE_xxx", where xxx is a number
 * @param {string} currentNode_name - name of the space object to be visualized at the modal header
 * @param {string} currentNode_id - id of the object, used for pop-up highlight in "non-modal display" and for linking Space Objects with database entries
 * @param {string} currentNode_layer - layer of the Space Object
 * @param {string} currentNode_group - group of the Space Object
 * @param {string} currentNode_attributes - a list of attributes for the Space Object
 * @param {string} currentNode_attributeStatus - status of attributes list, can be populated or unpopulated, controls if data is pulled externally
 * @param {string} currentNode_type - the type attribute of the Space Object, the type is displayed at the modal header
 * @param {string} currentNode_tags - list of tags assocated with the object, for retrieval at custom developed highlight
 * @param {string} currentNode_occupancy - tag to describe occupancy, for retrieval at custom developed highlight
 * @param {boolean} currentNode_linked - boolean variable to tell if object is associated with a database object or not. Depending on this flag highlight will differ.
 * deprecated
 */


function cvjs_setCurrentNodeValues( currentNode_underbar, currentNode_name, currentNode_id, currentNode_layer, currentNode_group, currentNode_attributes, currentNode_attributeStatus, currentNode_type, currentNode_tags, currentNode_occupancy, currentNode_linked) {

	cvjs_currentNode_underbar = currentNode_underbar;
	cvjs_currentNode_name = currentNode_name;
	cvjs_currentNode_id = currentNode_id;
	cvjs_currentNode_layer = currentNode_layer;
	cvjs_currentNode_group = currentNode_group;
	cvjs_currentNode_attributes = currentNode_attributes;
	cvjs_currentNode_attributeStatus = currentNode_attributeStatus;
	cvjs_currentNode_type = currentNode_type;
	cvjs_currentNode_tags = currentNode_tags;
	cvjs_currentNode_occupancy = currentNode_occupancy;
	cvjs_currentNode_linked = currentNode_linked;

	//console.log("all nodes set! id="+cvjs_currentNode_id+"    NODE_underbar "+cvjs_currentNode_underbar);
}



/**
 * Sets the current Space Node values, these settings will be used to intialize space objects subsequently drawn with the draw methods
 * @param {string} currentNode_underbar - the NodeId linking data with graphical obejcts, of the form "NODE_xxx", where xxx is a number
 * @param {string} currentNode_name - name of the space object to be visualized at the modal header
 * @param {string} currentNode_id - id of the object, used for pop-up highlight in "non-modal display" and for linking Space Objects with database entries
 * @param {string} currentNode_layer - layer of the Space Object
 * @param {string} currentNode_group - group of the Space Object
 * @param {string} currentNode_attributes - a list of attributes for the Space Object
 * @param {string} currentNode_attributeStatus - status of attributes list, can be populated or unpopulated, controls if data is pulled externally
 * @param {string} currentNode_type - the type attribute of the Space Object, the type is displayed at the modal header
 * @param {string} currentNode_tags - list of tags assocated with the object, for retrieval at custom developed highlight
 * @param {string} currentNode_occupancy - tag to describe occupancy, for retrieval at custom developed highlight
 * @param {boolean} currentNode_linked - boolean variable to tell if object is associated with a database object or not. Depending on this flag highlight will differ.
 */


function cvjs_setCurrentSpaceObjectNodeValues( currentNode_underbar, currentNode_name, currentNode_id, currentNode_layer, currentNode_group, currentNode_attributes, currentNode_attributeStatus, currentNode_type, currentNode_tags, currentNode_occupancy, currentNode_linked) {

	cvjs_currentNode_underbar = currentNode_underbar;
	cvjs_currentNode_name = currentNode_name;
	cvjs_currentNode_id = currentNode_id;
	cvjs_currentNode_layer = currentNode_layer;
	cvjs_currentNode_group = currentNode_group;
	cvjs_currentNode_attributes = currentNode_attributes;
	cvjs_currentNode_attributeStatus = currentNode_attributeStatus;
	cvjs_currentNode_type = currentNode_type;
	cvjs_currentNode_tags = currentNode_tags;
	cvjs_currentNode_occupancy = currentNode_occupancy;
	cvjs_currentNode_linked = currentNode_linked;

	//console.log("all nodes set! id="+cvjs_currentNode_id+"    NODE_underbar "+cvjs_currentNode_underbar);
}



/**
 * Sets the current Sticky Note values, these settings will be used to intialize Sticky Notes subsequently drawn with the draw methods
 * @param {string} currentStickyNote_underbar - the NodeId linking data with graphical objects, of the form "NOTE_xxx", where xxx is a number
 * @param {string} currentStickyNote_name - name of the Sticky Note  - user name displayed at StickyNote modal
 * @param {string} currentStickyNote_id - id of the Sticky Note object, used for pop-up highlight
 * @param {string} currentStickyNote_layer - layer of the Sticky Note
 * @param {string} currentStickyNote_group - group of the Sticky Note
 * @param {string} currentStickyNote_text - text in the Sticky Note textfield, typically this is initially empty as users interactively add text to StickyNotes.
 * @param {string} currentStickyNote_userid - UserID of StickyNotes.
 * @param {string} currentStickyNote_date - creation date of the StickyNotes.
 * @param {boolean} currentStickyNote_linked - boolean variable to tell if object is linked or not, internally controlled
 */

function cvjs_setCurrentStickyNoteValues(currentStickyNote_underbar, currentStickyNote_name, currentStickyNote_id, currentStickyNote_layer, currentStickyNote_group, currentStickyNote_text, currentStickyNote_userid, currentStickyNote_date, currentStickyNote_linked) {

	cvjs_currentStickyNote_underbar = currentStickyNote_underbar;
	cvjs_currentStickyNote_name = currentStickyNote_name;
	cvjs_currentStickyNote_id = currentStickyNote_id;
	cvjs_currentStickyNote_layer = currentStickyNote_layer;
	cvjs_currentStickyNote_group = currentStickyNote_group;
	cvjs_currentStickyNote_text = currentStickyNote_text;
	cvjs_currentStickyNote_userid = currentStickyNote_userid;
	cvjs_currentStickyNote_date = currentStickyNote_date;
	cvjs_currentStickyNote_linked = currentStickyNote_linked;   // internal flag for display in creation mode

	//console.log(currentStickyNote_date);
}




/**
 * Sets the current Sticky Note values, these settings will be used to intialize Sticky Notes subsequently drawn with the draw methods
 * @param {string} currentStickyNote_underbar - the NodeId linking data with graphical objects, of the form "NOTE_xxx", where xxx is a number
 * @param {string} currentStickyNote_name - name of the Sticky Note  - user name displayed at StickyNote modal
 * @param {string} currentStickyNote_id - id of the Sticky Note object, used for pop-up highlight
 * @param {string} currentStickyNote_layer - layer of the Sticky Note
 * @param {string} currentStickyNote_group - group of the Sticky Note
 * @param {string} currentStickyNote_text - text in the Sticky Note textfield, typically this is initially empty as users interactively add text to StickyNotes.
 * @param {string} currentStickyNote_userid - UserID of StickyNotes.
 * @param {string} currentStickyNote_date - creation date of the StickyNotes.
 * @param {boolean} currentStickyNote_linked - boolean variable to tell if object is linked or not, internally controlled
 * @param {boolean} currentStickyNote_transform - transformation of note
 * @param {string} currentStickyNote_currentPage - page on which the note is on
 * @param {int} currentStickyNote_drawingRotation - rotation of page on which the note is on
 */

function cvjs_setCurrentStickyNoteValues_All(currentStickyNote_underbar, currentStickyNote_name, currentStickyNote_id, currentStickyNote_layer, currentStickyNote_group, currentStickyNote_text, currentStickyNote_userid, currentStickyNote_date, currentStickyNote_linked, currentStickyNote_transform, currentStickyNote_currentPage, currentStickyNote_drawingRotation) {

	cvjs_currentStickyNote_underbar = currentStickyNote_underbar;
	cvjs_currentStickyNote_name = currentStickyNote_name;
	cvjs_currentStickyNote_id = currentStickyNote_id;
	cvjs_currentStickyNote_layer = currentStickyNote_layer;
	cvjs_currentStickyNote_group = currentStickyNote_group;
	cvjs_currentStickyNote_text = currentStickyNote_text;
	cvjs_currentStickyNote_userid = currentStickyNote_userid;
	cvjs_currentStickyNote_date = currentStickyNote_date;
	cvjs_currentStickyNote_linked = currentStickyNote_linked;   // internal flag for display in creation mode
	cvjs_currentStickyNote_transform = currentStickyNote_transform;
	cvjs_currentStickyNote_currentPage = currentStickyNote_currentPage;
	cvjs_currentStickyNote_drawingRotation = currentStickyNote_drawingRotation;
	//console.log(currentStickyNote_date);
}




/**
 * Sets the current Sticky Note values, these settings will be used to intialize Sticky Notes subsequently drawn with the draw methods
 * @param {string} currentStickyNote_name - name of the Sticky Note  - user name displayed at StickyNote modal
 * @param {string} currentStickyNote_userid - UserID of StickyNotes.
 */

function cvjs_setCurrentStickyNoteValues_NameUserId(currentStickyNote_name, currentStickyNote_userid ) {

	cvjs_currentStickyNote_name = currentStickyNote_name;
	cvjs_currentStickyNote_userid = currentStickyNote_userid;

	//console.log(cvjs_currentStickyNote_name);
}





/**
 * Sets the current Sticky Note values, these settings will be used to intialize Sticky Notes subsequently drawn with the draw methods
 * @param {string} currentStickyNote_name - name of the Sticky Note  - user name displayed at StickyNote modal
 * @param {string} currentStickyNote_userid - UserID of StickyNotes.
 * @param {string} currentStickyNote_date - creation date of the StickyNotes.
 */

function cvjs_setCurrentStickyNoteValues_NameUserIdDate(currentStickyNote_name, currentStickyNote_userid, currentStickyNote_date) {

	cvjs_currentStickyNote_name = currentStickyNote_name;
	cvjs_currentStickyNote_userid = currentStickyNote_userid;
	cvjs_currentStickyNote_date = currentStickyNote_date;

	//console.log(currentStickyNote_date);
}




/**
 * Sets the current Redlines name and userid values, these settings will be used to intialize redlines subsequently drawn with the draw methods
 * @param {string} currentRedline_userid - redline userid
 */

function cvjs_setCurrentRedlineValues_NameUserid(currentRedline_username, currentRedline_userid){

	cvjs_currentRedline_userid = currentRedline_userid;
	cvjs_currentRedline_username = currentRedline_username;

}



/**
 * Sets the current Redlines values, these settings will be used to intialize redlines subsequently drawn with the draw methods
 * @param {string} currentRedline_userid - redline userid
 */

function cvjs_setCurrentRedlineValues_Userid(currentRedline_userid){

	cvjs_currentRedline_userid = currentRedline_userid;

}






/**
 * Sets the current Redlines values, these settings will be used to intialize redlines subsequently drawn with the draw methods
 * @param {string} currentRedline_underbar - the NodeId linking data with graphical objects, of the form "RED_xxx", where xxx is a number
 * @param {string} currentRedline_name - id of the Redline, association to user producing markup
 * @param {string} currentRedline_id - id of the Redline
 * @param {string} currentRedline_layer - layer of the Redline
 * @param {string} currentRedline_group - group of the Redline
 * @param {string} currentRedline_color - color of the Redline as a hex values, for example "#FF0000".
 * @param {float} currentRedline_StrokeWidth - width of the Redline
 * @param {int} currentRedline_drawingRotation - rotation angle of drawing
 
 */


function cvjs_setCurrentRedlineValues(currentRedline_underbar, currentRedline_name, currentRedline_id, currentRedline_layer, currentRedline_group, currentRedline_color, currentRedline_strokeWidth,  currentRedline_drawingRotation) {

	cvjs_currentRedline_underbar = currentRedline_underbar;
	cvjs_currentRedline_name = currentRedline_name;
	cvjs_currentRedline_id = currentRedline_id;
	cvjs_currentRedline_layer = currentRedline_layer;
	cvjs_currentRedline_group = currentRedline_group;
 	cvjs_currentRedline_color = currentRedline_color;
	cvjs_currentRedline_strokeWidth = currentRedline_strokeWidth;
	cvjs_currentRedline_drawingRotation =  currentRedline_drawingRotation;

}



/**
 * Sets the current Redlines values, these settings will be used to intialize redlines subsequently drawn with the draw methods
 * @param {string} currentRedline_underbar - the NodeId linking data with graphical objects, of the form "RED_xxx", where xxx is a number
 * @param {string} currentRedline_name - id of the Redline, association to user producing markup
 * @param {string} currentRedline_id - id of the Redline
 * @param {string} currentRedline_layer - layer of the Redline
 * @param {string} currentRedline_group - group of the Redline
 * @param {string} currentRedline_color - color of the Redline as a hex values, for example "#FF0000".
 * @param {float} currentRedline_StrokeWidth - width of the Redline
 * @param {string} currentRedline_fill - color of the Redline fill values, for example "#FF0000".
 * @param {float} currentRedline_fill_opacity - fill opacity of filled redline
 * @param {string} currentRedline_transform - transform (redline arrow only)
 * @param {string} currentRedline_username - redline username
 * @param {string} currentRedline_userid - redline userid
 * @param {int} currentRedline_currentPage - page on which the redline is
 * @param {string} currentRedline_polypath_arrow - arrow redline geometry
 * @param {string} currentRedline_triangle_design - arrow redline geometry
 * @param {string} currentRedline_redline_text - text object in redline text
 * @param {string} currentRedline_drawingRotation - rotation of the page the redline is done on
 */


function cvjs_setCurrentRedlineValues_All(currentRedline_underbar, currentRedline_name, currentRedline_id, currentRedline_layer, currentRedline_group, currentRedline_color, currentRedline_strokeWidth, currentRedline_fill, currentRedline_fill_opacity, currentRedline_transform, currentRedline_username, currentRedline_userid, currentRedline_currentPage, currentRedline_polypath_arrow, currentRedline_triangle_design, currentRedline_redline_text, currentRedline_drawingRotation ) {

	cvjs_currentRedline_underbar = currentRedline_underbar;
	cvjs_currentRedline_name = currentRedline_name;
	cvjs_currentRedline_id = currentRedline_id;
	cvjs_currentRedline_layer = currentRedline_layer;
	cvjs_currentRedline_group = currentRedline_group;
 	cvjs_currentRedline_color = currentRedline_color;
	cvjs_currentRedline_strokeWidth = currentRedline_strokeWidth;
	cvjs_currentRedline_fill = currentRedline_fill;
	cvjs_currentRedline_fill_opacity = currentRedline_fill_opacity;
	cvjs_currentRedline_transform = currentRedline_transform;

	cvjs_currentRedline_username = currentRedline_username;
	cvjs_currentRedline_userid = currentRedline_userid;

	cvjs_currentRedline_currentPage = currentRedline_currentPage;

	cvjs_currentRedline_polypath_arrow = currentRedline_polypath_arrow;
	cvjs_currentRedline_triangle_design = currentRedline_triangle_design;

	cvjs_currentRedline_redline_text = currentRedline_redline_text;
	cvjs_currentRedline_drawingRotation = currentRedline_drawingRotation;
	
	//console.log("in _All "+cvjs_currentRedline_strokeWidth);
}




/**
 * Sets the current Redlines values, color, strokewidth only, these settings will be used to intialize redlines subsequently drawn with the draw methods
 * @param {string} currentRedline_color - color of the Redline as a hex values, for example "#FF0000".
 * @param {float} currentRedline_StrokeWidth - width of the Redline
 */


function cvjs_setCurrentRedlineValues_ColorStokeWidth(currentRedline_color, currentRedline_strokeWidth) {

 	cvjs_currentRedline_color = currentRedline_color;
	cvjs_currentRedline_strokeWidth = currentRedline_strokeWidth;

}


/**
 * Sets the current Redlines value
 * @param {string} currentRedline_color - color of the Redline as a hex values, for example "#FF0000".
 */


function cvjs_setCurrentRedlineValues_Color(currentRedline_color) {

 	cvjs_currentRedline_color = currentRedline_color;

}



function cvjs_setCurrentRedlineValues_StokeWidth(currentRedline_strokeWidth) {

	cvjs_currentRedline_strokeWidth = currentRedline_strokeWidth;

}



/**
 * Sets the current Redlines value
 * @param {float} currentRedline_StrokeWidth - width of the Redline
 */

function cvjs_setCurrentRedlineValues_StrokeWidth(currentRedline_strokeWidth) {

	cvjs_currentRedline_strokeWidth = currentRedline_strokeWidth;

}



function cvjs_setCurrentNodeValuesFromExistingNode( currentNode_underbar ) {

	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		var vqid = vqRooms[cvjs_active_floorplan_div_nr][spc].data("node");
		if (vqid == currentNode_underbar)
			{
				cvjs_currentNode_underbar = currentNode_underbar;
				cvjs_currentNode_name = vqRooms[cvjs_active_floorplan_div_nr][spc].data("name");
				cvjs_currentNode_id = vqRooms[cvjs_active_floorplan_div_nr][spc].data("id");
				cvjs_currentNode_layer = vqRooms[cvjs_active_floorplan_div_nr][spc].data("layer");
				cvjs_currentNode_group = vqRooms[cvjs_active_floorplan_div_nr][spc].data("group");
				cvjs_currentNode_attributes = vqRooms[cvjs_active_floorplan_div_nr][spc].data("attributes");
				cvjs_currentNode_attributeStatus = vqRooms[cvjs_active_floorplan_div_nr][spc].data("attributeStatus");
				cvjs_currentNode_type = vqRooms[cvjs_active_floorplan_div_nr][spc].data("type");
				cvjs_currentNode_tags = vqRooms[cvjs_active_floorplan_div_nr][spc].data("tags");
				cvjs_currentNode_occupancy = vqRooms[cvjs_active_floorplan_div_nr][spc].data("occupancy");
				cvjs_currentNode_linked = vqRooms[cvjs_active_floorplan_div_nr][spc].data("linked");
			}
	}

}


function cvjs_overwriteNodeValues(overwriteNode_underbar, overwriteNode_id, overwriteNode_name, overwriteNode_layer, overwriteNode_group, overwriteNode_attributes, overwriteNode_attributeStatus, overwriteNode_type, overwriteNode_tags, overwriteNode_occupancy, overwriteNode_linked) {

//console.log(overwriteNode_underbar+" "+ overwriteNode_id+" "+ overwriteNode_name+" "+ overwriteNode_layer+" "+ overwriteNode_group+" "+ overwriteNode_attributes+" "+ overwriteNode_attributeStatus+" "+ overwriteNode_type+" "+ overwriteNode_tags+" "+ overwriteNode_occupancy+" "+ overwriteNode_linked  );

	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		var vqid = vqRooms[cvjs_active_floorplan_div_nr][spc].data("node");
		if (vqid == overwriteNode_underbar)
			{
				vqRooms[cvjs_active_floorplan_div_nr][spc].removeData("id");
				vqRooms[cvjs_active_floorplan_div_nr][spc].removeData("name");
				vqRooms[cvjs_active_floorplan_div_nr][spc].removeData("layer");
				vqRooms[cvjs_active_floorplan_div_nr][spc].removeData("group");
				vqRooms[cvjs_active_floorplan_div_nr][spc].removeData("attributes");
				vqRooms[cvjs_active_floorplan_div_nr][spc].removeData("attributeStatus");
				vqRooms[cvjs_active_floorplan_div_nr][spc].removeData("type");
				vqRooms[cvjs_active_floorplan_div_nr][spc].removeData("tags");
				vqRooms[cvjs_active_floorplan_div_nr][spc].removeData("occupancy");
				vqRooms[cvjs_active_floorplan_div_nr][spc].removeData("linked");

				vqRooms[cvjs_active_floorplan_div_nr][spc].data("id", overwriteNode_id);
				vqRooms[cvjs_active_floorplan_div_nr][spc].data("name", overwriteNode_name);
				vqRooms[cvjs_active_floorplan_div_nr][spc].data("layer", overwriteNode_layer);
				vqRooms[cvjs_active_floorplan_div_nr][spc].data("group", overwriteNode_group);
				vqRooms[cvjs_active_floorplan_div_nr][spc].data("attributes", overwriteNode_attributes);
				vqRooms[cvjs_active_floorplan_div_nr][spc].data("attributeStatus", overwriteNode_attributeStatus);
				vqRooms[cvjs_active_floorplan_div_nr][spc].data("type", overwriteNode_type);

				// how do we handle these guys?
				vqRooms[cvjs_active_floorplan_div_nr][spc].data("tags", overwriteNode_tags);
				vqRooms[cvjs_active_floorplan_div_nr][spc].data("occupancy", overwriteNode_occupancy);
				vqRooms[cvjs_active_floorplan_div_nr][spc].data("linked", overwriteNode_linked);

				// 6.1.37
				vqRooms[cvjs_active_floorplan_div_nr][spc].data("defaultcolor", "undefined");


				// do not overwrite handle!! ("handle", floor.rooms[bRoom].handle);  // 3.2.02e
				
				

//console.log("linked "+vqRooms[cvjs_active_floorplan_div_nr][spc].data("linked"));

				if (cvjs_supressPopUpModal == true){

						jQuery(vqRooms[cvjs_active_floorplan_div_nr][spc].node).qtip({content: {text: "", title: ""},
								style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
								position: {my: 'bottom center', at: 'top left'},
								hideOnHTMLClick: 'true'});

						jQuery(vqRooms[cvjs_active_floorplan_div_nr][spc].node).qtip('destroy');
				}
				else{

					var htitle = "<table width=\"100%\"><tr><td class=\"cvjs_modal_header_1\" onclick=\"cvjs_popupTitleClick(\'"+overwriteNode_id+"\');\">"+overwriteNode_name+"</td>"+
						"<td class=\"cvjs_modal_header_info_1\" onclick=\"hideOnlyPop("+spc+");\"><i class=\"fa fa-times\"></i></td></tr>"+
						"<tr><td cols=\"2\"><h4 id=\"cvjs_modal_header_info_2\">"+overwriteNode_type+"</h4></td></tr></table>";
if (cvjs_debug)		console.log(htitle);
if (cvjs_debug)		console.log(vqRooms[cvjs_active_floorplan_div_nr][spc]);
			//console.log("dual_hbody_flag "+dual_hbody_flag+"  floor.rooms[bRoom].id   "+floor.rooms[bRoom].id);

					if (dual_hbody_flag){
						if ( parseInt(overwriteNode_id) >=-1){
							jQuery(vqRooms[cvjs_active_floorplan_div_nr][spc].node).qtip({content: {text: hbody, title: htitle},
								style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
								position: {my: 'bottom center', at: 'top left'},
								hideOnHTMLClick: 'false'});
						}else{
							jQuery(vqRooms[cvjs_active_floorplan_div_nr][spc].node).qtip({content: {text: hbody_2, title: htitle},
								style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
								position: {my: 'bottom center', at: 'top left'},
								hideOnHTMLClick: 'false'});
						}
					}

					if (!dual_hbody_flag){
							jQuery(vqRooms[cvjs_active_floorplan_div_nr][spc].node).qtip({content: {text: hbody, title: htitle},
								style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
								position: {my: 'bottom center', at: 'top left'},
								hideOnHTMLClick: 'false'});
					}

				}

			}
	}

}


// BEGIN - Setup NEW NODE - room graphics objects

// OBJECT DEFINITIONS - vqRooms
//	var cItem52= paper.path("M343.81,21.21V45.44H381.90V21.21H343.81Z ").attr({fill: "#fff", "fill-opacity":"0.01"})
//	.data("node", "NODE_11");
//	vqRooms.push(cItem52);


function cvjs_addVqRoomsGraphics_newNode_polygon(cvjs_currentNode_underbar, graphicsObject){

	var cItemX = graphicsObject.data("node", cvjs_currentNode_underbar);
	
	//vqRooms.push(cItemX);
	// 3.0.14e
	vqRooms[cvjs_active_floorplan_div_nr].push(cItemX);
	
}



function cvjs_addVqRoomsGraphics_newNode_circle(cvjs_currentNode_underbar, graphicsObject){

	var  circle= graphicsObject.toString();
	//console.log(circle);

	var tTransform_c = "S"+(0.001);
	graphicsObject.attr({'transform': tTransform_c , "opacity" : "1"});

	graphicsObject = cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(0, 0, 1, 1).attr({stroke: "#000000", "stroke-width" : "0.01", "fill" : "none", "fill-opacity" : "0.01", "opacity" : "0.01"});

	var p_cx = circle.indexOf(" cx=");
	var s1_cx = circle.substring(p_cx+5);
	var p2_cx = s1_cx.indexOf("\"");
	var cx = s1_cx.substring(0, p2_cx)

	var p_cy = circle.indexOf(" cy=");
	var s1_cy = circle.substring(p_cy+5);
	var p2_cy = s1_cy.indexOf("\"");
	var cy = s1_cy.substring(0, p2_cy)


	var p_r = circle.indexOf(" r=");
	var s1_r = circle.substring(p_r+4);
	var p2_r = s1_r.indexOf("\"");
	var r = s1_r.substring(0, p2_r)

	//console.log(cx+" "+cy+" "+r);

	var p_t = circle.indexOf("transform=");
	var s1_t = circle.substring(p_t+11);
	var p2_t = s1_t.indexOf("\"");
	var t = s1_t.substring(0, p2_t)

	//console.log(t);

	if (t.indexOf("matrix")>-1){

		//console.log("matrix");
		var p_m = circle.indexOf("(");
		var s1_m = circle.substring(p_m+1);
		var p2_m = s1_m.indexOf(",");
		var m = s1_m.substring(0, p2_m)
	//console.log(m);
		r=m;
		for (var i=0; i<4; i++){
	//console.log(i+" "+s1_m);
			p_m = s1_m.indexOf(",");
			s1_m = s1_m.substring(p_m+1);
		}

		p_m = s1_m.indexOf(",");
		cx = s1_m.substring(0, p_m);

		s1_m = s1_m.substring(p_m+1);

		p_m = s1_m.indexOf(")");
		cy = s1_m.substring(0, p_m);

		//console.log("after loop "+cx+" "+cy+" "+r)
	}
	
	//vqRooms.push(cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(cx, cy, r, r).attr({fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1"}).data("node", cvjs_currentNode_underbar));

	// 3.0.14e
	vqRooms[cvjs_active_floorplan_div_nr].push(cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(cx, cy, r, r).attr({fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1"}).data("node", cvjs_currentNode_underbar));
	
//	vqRooms.push(cvjs_rPaper[cvjs_active_floorplan_div_nr].path(path1).attr({fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1"}).data("node", cvjs_currentNode_underbar));
//	console.log("polygon "+path1);
}

// END - Setup NEW NODE - room graphics objects


// BEGIN - Setup NEW NODE - sticky notes graphics objects

function cvjs_addVqStickyNotesGraphics_newNode(cvjs_currentNode_underbar, graphicsObject){

	var cStickyNoteItemX = graphicsObject.data("node", cvjs_currentNode_underbar);
	vqStickyNotes.push(cStickyNoteItemX);

}

// END - Setup NEW NODE - sticky note graphics objects



// BEGIN - Setup NEW NODE - sticky notes graphics objects

function cvjs_addVqRedlinesGraphics_newNode(cvjs_currentRedline_underbar, graphicsObject){

	var cRedlineItemX = graphicsObject.data("node", cvjs_currentRedline_underbar);

	vqRedlines.push(cRedlineItemX);

	var redId = vqRedlines.length-1;

	if (redId >=0){

		vqRedlines[redId].data("name", cvjs_currentRedline_name);
		vqRedlines[redId].data("id", cvjs_currentRedline_id);
		vqRedlines[redId].data("layer", cvjs_currentRedline_layer);
		vqRedlines[redId].data("group", cvjs_currentRedline_group);
		vqRedlines[redId].data("color", cvjs_currentRedline_color);
		vqRedlines[redId].data("strokeWidth", cvjs_currentRedline_strokeWidth);
		vqRedlines[redId].data("fill", "#FFF");
		vqRedlines[redId].data("fill_opacity", "0.01");
		vqRedlines[redId].data("transform", "none");
		vqRedlines[redId].data("username", cvjs_currentRedline_username);
		vqRedlines[redId].data("userid", cvjs_currentRedline_userid);
		vqRedlines[redId].data("currentPage", multiPages[cvjs_active_floorplan_div_nr].currentPage);

		vqRedlines[redId].data("triangle_design", "none");
		vqRedlines[redId].data("polypath_arrow", "none");
		vqRedlines[redId].data("redline_text", "none");

		vqRedlines[redId].data("drawingRotation", cvjs_currentRedline_drawingRotation);
		
		vqRedlines[redId].mousedown(function (e){
			if (cvjs_deleteRedlineFlag ){
				cvjs_deleteRedlineFlag = false;
				// delete redline
				var rednode = this.data("node");
				//console.log(rednode);
				cvjs_setUpVqRedlines_deleteNode(rednode);
			}
		});


		vqRedlines[redId].mouseover(function (e){

				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});			
		
				var tipText = "UserName: "+this.data("username");
				tip[cvjs_active_floorplan_div_nr].html(tipText);
				tip[cvjs_active_floorplan_div_nr].show();
					
				var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
				var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
				if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
				//console.log("absolute");
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
				}
				else{  // we have placed CV-JS inside a div and we have to make a relative position
					//console.log("inside");
					tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
				}
				
						
/*				
								
				if (e.clientX > floorplan_width)
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft-tip_width-20).css("top", e.clientY+document.body.scrollTop-25);
//				   tip[cvjs_active_floorplan_div_nr].css("left", e.screenX-tip_width-20).css("top", e.screenY-20);
				else
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft+10).css("top", e.clientY+document.body.scrollTop-25);
*/

			   });


		vqRedlines[redId].mouseout(function (e){
				tip[cvjs_active_floorplan_div_nr].hide();
		});


	}

	//console.log(vqRedlines[redId]);
}


function cvjs_addVqRedlinesGraphics_newNodeFill(cvjs_currentRedline_underbar, graphicsObject, R_fill, R_opacity){

	var cRedlineItemX = graphicsObject.data("node", cvjs_currentRedline_underbar);
	vqRedlines.push(cRedlineItemX);

	var redId = vqRedlines.length-1;

	if (redId >=0){

		vqRedlines[redId].data("name", cvjs_currentRedline_name);
		vqRedlines[redId].data("id", cvjs_currentRedline_id);
		vqRedlines[redId].data("layer", cvjs_currentRedline_layer);
		vqRedlines[redId].data("group", cvjs_currentRedline_group);
		vqRedlines[redId].data("color", cvjs_currentRedline_color);
		vqRedlines[redId].data("strokeWidth", cvjs_currentRedline_strokeWidth);
		vqRedlines[redId].data("fill", R_fill);
		vqRedlines[redId].data("fill_opacity", R_opacity);
		vqRedlines[redId].data("transform", "none");
		vqRedlines[redId].data("username", cvjs_currentRedline_username);
		vqRedlines[redId].data("userid", cvjs_currentRedline_userid);
		vqRedlines[redId].data("currentPage", multiPages[cvjs_active_floorplan_div_nr].currentPage);

		vqRedlines[redId].data("triangle_design", "none");
		vqRedlines[redId].data("polypath_arrow", "none");
		vqRedlines[redId].data("redline_text", "none");

		vqRedlines[redId].data("drawingRotation", cvjs_currentRedline_drawingRotation);
		
		
		vqRedlines[redId].mousedown(function (e){
			if (cvjs_deleteRedlineFlag ){
				cvjs_deleteRedlineFlag = false;
				// delete redline
				var rednode = this.data("node");
				//console.log(rednode);
				cvjs_setUpVqRedlines_deleteNode(rednode);
			}

		});

		vqRedlines[redId].mouseover(function (e){

				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					
		
				var tipText = "UserName: "+this.data("username");
				tip[cvjs_active_floorplan_div_nr].html(tipText);
				tip[cvjs_active_floorplan_div_nr].show();
					
				var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
				var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
				if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
				//console.log("absolute");
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
				}
				else{  // we have placed CV-JS inside a div and we have to make a relative position
					//console.log("inside");
					tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
				}
				
/*				
				
				
				if (e.clientX > floorplan_width)
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft-tip_width-20).css("top", e.clientY+document.body.scrollTop-25);
				else
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft+10).css("top", e.clientY+document.body.scrollTop-25);
*/

			   });


		vqRedlines[redId].mouseout(function (e){
				tip[cvjs_active_floorplan_div_nr].hide();
		});

	}

}


function cvjs_addVqRedlinesGraphics_newNodeTrans(cvjs_currentRedline_underbar, graphicsObject, transform, triangle_design, polypath_arrow){

	var cRedlineItemX = graphicsObject.data("node", cvjs_currentRedline_underbar);

	vqRedlines.push(cRedlineItemX);

	var redId = vqRedlines.length-1;

	if (redId >=0){

//console.log("triangle design "+triangle_design);


		vqRedlines[redId].data("name", cvjs_currentRedline_name);
		vqRedlines[redId].data("id", cvjs_currentRedline_id);
		vqRedlines[redId].data("layer", cvjs_currentRedline_layer);
		vqRedlines[redId].data("group", cvjs_currentRedline_group);
		vqRedlines[redId].data("color", cvjs_currentRedline_color);
		vqRedlines[redId].data("strokeWidth", cvjs_currentRedline_strokeWidth);
		vqRedlines[redId].data("fill", "#FFF");
		vqRedlines[redId].data("fill_opacity", "0.01");
		vqRedlines[redId].data("transform", transform);
		vqRedlines[redId].data("username", cvjs_currentRedline_username);
		vqRedlines[redId].data("userid", cvjs_currentRedline_userid);
		vqRedlines[redId].data("currentPage", multiPages[cvjs_active_floorplan_div_nr].currentPage);

		vqRedlines[redId].data("triangle_design", triangle_design);
		vqRedlines[redId].data("polypath_arrow", polypath_arrow);
		vqRedlines[redId].data("redline_text", "none");

		vqRedlines[redId].data("drawingRotation", cvjs_currentRedline_drawingRotation);
		
		vqRedlines[redId].mousedown(function (e){
			if (cvjs_deleteRedlineFlag ){
				cvjs_deleteRedlineFlag = false;
				// delete redline
				var rednode = this.data("node");
				//console.log(rednode);
				cvjs_setUpVqRedlines_deleteNode(rednode);
			}

		});

		vqRedlines[redId].mouseover(function (e){

				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});	
		
				var tipText = "UserName: "+this.data("username");
				tip[cvjs_active_floorplan_div_nr].html(tipText);
				tip[cvjs_active_floorplan_div_nr].show();


				var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
				var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
				if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
				//console.log("absolute");
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
				}
				else{  // we have placed CV-JS inside a div and we have to make a relative position
					//console.log("inside");
					tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
				}
				

/*

				if (e.clientX > floorplan_width)
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft-tip_width-20).css("top", e.clientY+document.body.scrollTop-25);
				else
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft+10).css("top", e.clientY+document.body.scrollTop-25);
*/	


	});


		vqRedlines[redId].mouseout(function (e){
				tip[cvjs_active_floorplan_div_nr].hide();
		});

	}
	//console.log(vqRedlines[redId]);
}



function cvjs_addVqRedlinesGraphics_newNodeText(cvjs_currentRedline_underbar, graphicsObject, transform, textString){

	var cRedlineItemX = graphicsObject.data("node", cvjs_currentRedline_underbar);

	vqRedlines.push(cRedlineItemX);

	var redId = vqRedlines.length-1;

	if (redId >=0){

//console.log("triangle design "+triangle_design);


		vqRedlines[redId].data("name", cvjs_currentRedline_name);
		vqRedlines[redId].data("id", cvjs_currentRedline_id);
		vqRedlines[redId].data("layer", cvjs_currentRedline_layer);
		vqRedlines[redId].data("group", cvjs_currentRedline_group);
		vqRedlines[redId].data("color", cvjs_currentRedline_color);
		vqRedlines[redId].data("strokeWidth", cvjs_currentRedline_strokeWidth);
		vqRedlines[redId].data("fill", "#FFF");
		vqRedlines[redId].data("fill_opacity", "0.01");
		vqRedlines[redId].data("transform", transform);
		vqRedlines[redId].data("username", cvjs_currentRedline_username);
		vqRedlines[redId].data("userid", cvjs_currentRedline_userid);
		vqRedlines[redId].data("currentPage", multiPages[cvjs_active_floorplan_div_nr].currentPage);

		vqRedlines[redId].data("triangle_design", "none");
		vqRedlines[redId].data("polypath_arrow", "none");
		vqRedlines[redId].data("redline_text", textString);
		
		vqRedlines[redId].data("drawingRotation", cvjs_currentRedline_drawingRotation);
		
		vqRedlines[redId].mousedown(function (e){
			if (cvjs_deleteRedlineFlag ){
				cvjs_deleteRedlineFlag = false;
				// delete redline
				var rednode = this.data("node");
				//console.log(rednode);
				cvjs_setUpVqRedlines_deleteNode(rednode);
			}

		});



		vqRedlines[redId].mouseover(function (e){

				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});			
		
				var tipText = "UserName: "+this.data("username");
				tip[cvjs_active_floorplan_div_nr].html(tipText);
				tip[cvjs_active_floorplan_div_nr].show();
				

				var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
				var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
				if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
				//console.log("absolute");
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
				}
				else{  // we have placed CV-JS inside a div and we have to make a relative position
					//console.log("inside");
					tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
				}
									
/*				
				if (e.clientX > floorplan_width)
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft-tip_width-20).css("top", e.clientY+document.body.scrollTop-25);
				else
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft+10).css("top", e.clientY+document.body.scrollTop-25);
*/
			   });


		vqRedlines[redId].mouseout(function (e){
				tip[cvjs_active_floorplan_div_nr].hide();
		});


	}

	//console.log(vqRedlines[redId]);
}






// END - Setup NEW NODE - sticky note graphics objects





// BEGIN - Setup NEW NODE - room data objects

function cvjs_setUpVqRooms_currentNode(paper, cvjs_currentNode_underbar)
{

floorplan_height = jQuery(window).height()*.9;
floorplan_width = jQuery(window).width()*.9;
var current = null;
tip[cvjs_active_floorplan_div_nr] = jQuery("#tip"+"_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]);
tip[cvjs_active_floorplan_div_nr].hide().css("left", floorplan_width).css("top", floorplan_height);

// 3.2.01i
tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});	

var tipText = "";
var over = false;
var building = null;
var floor = null;

	try{
	jQuery.fn.qtip.defaults.show.event = 'click';
	jQuery.fn.qtip.defaults.hide.event = null;
	}
	catch(err){
		// 2016-01-30
		// console.log("err="+err);
	}

	// define layer_vqrooms[cvjs_active_floorplan_div_nr] if no data
	//console.log("layer_vqrooms[cvjs_active_floorplan_div_nr]="+layer_vqrooms[cvjs_active_floorplan_div_nr]);

	if (layer_vqrooms[cvjs_active_floorplan_div_nr] == "")
		layer_vqrooms[cvjs_active_floorplan_div_nr] = paper.g();

	var room;
	try {
		// room = vqRooms.length-1;
		// 3.0.14e
		room = vqRooms[cvjs_active_floorplan_div_nr].length-1;
	}
	catch (err){		
		console.log("vqRooms [cvjs_active_floorplan_div_nr] not defined! "+err);
	}	
	if (cvjs_debug) console.log(" room " +room);
	
	//console.log("number of rooms "+room);

	rid = vqRooms[cvjs_active_floorplan_div_nr][room].data("node");

//	console.log("rid="+rid+" "+vqRooms[cvjs_active_floorplan_div_nr][room]+" "+ (cvjs_currentNode_underbar == rid));

	if (cvjs_currentNode_underbar == rid)
	{
		// identify tags
		var allTags = cvjs_currentNode_tags;
		// loop over tags
		if (cvjs_currentNode_tags == "unassigned"){
			vqRooms[cvjs_active_floorplan_div_nr][room].data("tags", "unassigned");
		}
		else{
			var ii=1;
			for (var tags in allTags){
				var tagx = "tag"+ii;
				var tagData = allTags[tags];
				while (tagData.charAt(0) == ' ')
					tagData = tagData.substr(1);
				tagData = tagData.replace(/ /gi, "&nbsp;");
				vqRooms[cvjs_active_floorplan_div_nr][room].data( tagx, tagData);
			//	vqRooms[cvjs_active_floorplan_div_nr][room].attr( tagx, tagData);
				ii++;
			}
		}

		vqRooms[cvjs_active_floorplan_div_nr][room].data("occupancy", cvjs_currentNode_occupancy);
		vqRooms[cvjs_active_floorplan_div_nr][room].data("name", cvjs_currentNode_name );
		vqRooms[cvjs_active_floorplan_div_nr][room].data("type", cvjs_currentNode_type);
		vqRooms[cvjs_active_floorplan_div_nr][room].data("id", cvjs_currentNode_id);
//		vqRooms[cvjs_active_floorplan_div_nr][room].data("rmid", room);     /// NOTE - NOT USED   2015-9-3

		// 6.1.37
		vqRooms[cvjs_active_floorplan_div_nr][room].data("defaultcolor", "undefined");
		try{
			vqRooms[cvjs_active_floorplan_div_nr][room].data("layer", cvjs_currentNode_layer);
			vqRooms[cvjs_active_floorplan_div_nr][room].data("group", cvjs_currentNode_group);
			vqRooms[cvjs_active_floorplan_div_nr][room].data("linked", cvjs_currentNode_linked);

			// no handle known
			vqRooms[cvjs_active_floorplan_div_nr][room].data("handle", "");   // 3.2.02e				
			vqRooms[cvjs_active_floorplan_div_nr][room].data("attributes", cvjs_currentNode_attributes);
			vqRooms[cvjs_active_floorplan_div_nr][room].data("attributeStatus", cvjs_currentNode_attributeStatus);
		
			vqRooms[cvjs_active_floorplan_div_nr][room].data("displaySpaceObject", cvjs_currentNode_displaySpaceObject);
			
		}
		catch(err){
			console.log(err);
		}

		if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors){
			vqRooms[cvjs_active_floorplan_div_nr][room].attr(defaultColor);
		}
		else{
			if (vqRooms[cvjs_active_floorplan_div_nr][room].data("linked")){
				vqRooms[cvjs_active_floorplan_div_nr][room].attr(defaultColor_linked);
			}
			else{
				vqRooms[cvjs_active_floorplan_div_nr][room].attr(defaultColor_unlinked);
			}
		}
//		vqRooms[cvjs_active_floorplan_div_nr][room].attr(defaultColor);  // set colors ( note: change attribute name to something more applicable

		if (cvjs_supressPopUpModal == true){

				jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: "", title: ""},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'},
						hideOnHTMLClick: 'true'});

				jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip('destroy');
		}
		else{
	//console.log("after setting clear background "+vqRooms[cvjs_active_floorplan_div_nr][room]);

			var htitle = "<table width=\"100%\"><tr><td class=\"cvjs_modal_header_1\" onclick=\"cvjs_popupTitleClick(\'"+cvjs_currentNode_id+"\');\">"+cvjs_currentNode_name+"</td>"+
				"<td class=\"cvjs_modal_header_info_1\" onclick=\"hideOnlyPop("+room+");\"><i class=\"fa fa-times\"></i></td></tr>"+
				"<tr><td cols=\"2\"><h4 id=\"cvjs_modal_header_info_2\">"+cvjs_currentNode_type+"</h4></td></tr></table>";
	//console.log("dual_hbody_flag "+dual_hbody_flag+"  floor.rooms[bRoom].id   "+floor.rooms[bRoom].id);

			if (dual_hbody_flag){
				if ( parseInt(cvjs_currentNode_id) >=-1){
					jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'},
						hideOnHTMLClick: 'false'});
				}else{
					jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody_2, title: htitle},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'},
						hideOnHTMLClick: 'false'});
				}
			}

			if (!dual_hbody_flag){
					jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'},
						hideOnHTMLClick: 'false'});
			}
		}

		vqRooms[cvjs_active_floorplan_div_nr][room].mousedown(function(e){
			vqRoomMouseSelect = true;
			
if (cvjs_debug) console.log("A Domousedown");			
			
		DoMouseDown(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop, cvjs_active_floorplan_div_nr);	
					
		}).mouseout(function(e){  // 3.3.02a

				jQuery("#tip"+"_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
				var rm = findRoom(currentRoomId);				
				if (!vqRoomMouseSelect){

						if (!cvjs_supressPopUpModal  || cvjs_standardHighLightColors){
	
								if (cvjs_debug) console.log("room="+rm+" defaultcolor" );
								if (cvjs_debug) console.log(" "+vqRooms[cvjs_active_floorplan_div_nr][rm].data("defaultcolor")+" rm="+rm+"  "+vqRooms[cvjs_active_floorplan_div_nr][rm].data("name")+(e.clientX+document.body.scrollLeft)+" "+(e.clientY+document.body.scrollTop));
			//qqqq					
								// 6.1.40									
								if (vqRooms[cvjs_active_floorplan_div_nr][rm].data("defaultcolor").toString().indexOf("undefined")>-1){
								//	 console.log("standard");
									//standard
									vqRooms[cvjs_active_floorplan_div_nr][rm].attr(defaultColor);									
								}
								else{
								//	 console.log("highlight");
									// highlight
									vqRooms[cvjs_active_floorplan_div_nr][rm].attr(vqRooms[cvjs_active_floorplan_div_nr][rm].data("defaultcolor"));								
								}	
						}
						else{
							// we need to keep highlight in Space Management Edit mode
							
							/*
						if (cvjs_debug) console.log("room="+rm+" linked part" );
							if (vqRooms[active_floorplan_div_nr][rm].data("linked")){
								vqRooms[active_floorplan_div_nr][rm].attr(defaultColor_linked);
							}
							else{
								vqRooms[active_floorplan_div_nr][rm].attr(defaultColor_unlinked);
							}
							
							*/
						}
						// 3.2.02h  					
				}

				
			
			}).mousemove(function(e){

			currentRoomId = this.data("id");
			currentRoomName = this.data("name");

			//console.log("move");

			if ((bMouseDown) || (bTempMouseDown))
				DoMouseMove(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
			else {
				var rm = findRoom(currentRoomId);
				if (rm >= 0)
				{
					if (rm != lastObj[cvjs_active_floorplan_div_nr] && cvjs_location_flag ){      // only do this when in location mode

						if (tooltipLast[cvjs_active_floorplan_div_nr] != lastObj[cvjs_active_floorplan_div_nr] && tooltipLast[cvjs_active_floorplan_div_nr]!=-1){

							//vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[active_floorplan_div_nr]].attr(defaultColor);

							if (!cvjs_supressPopUpModal  || cvjs_standardHighLightColors){
									
									//vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[cvjs_active_floorplan_div_nr]].attr(defaultColor);
				
									// 6.1.40									
									if (vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[cvjs_active_floorplan_div_nr]].data("defaultcolor").toString().indexOf("undefined")>-1){
										// console.log("standard");
										//standard
										vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[cvjs_active_floorplan_div_nr]].attr(defaultColor);									
									}
									else{
										// console.log("highlight");
										// highlight
										vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[cvjs_active_floorplan_div_nr]].attr(vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[cvjs_active_floorplan_div_nr]].data("defaultcolor"));								
									}	
									



							}
							else{
								if (vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[cvjs_active_floorplan_div_nr]].data("linked")){
									vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[cvjs_active_floorplan_div_nr]].attr(defaultColor_linked);
								}
								else{
									
									vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[cvjs_active_floorplan_div_nr]].attr(defaultColor_unlinked);
								}
							}

						}

						//vqRooms[cvjs_active_floorplan_div_nr][rm].attr(highlight);
						if (!cvjs_supressPopUpModal  || cvjs_standardHighLightColors){
							vqRooms[cvjs_active_floorplan_div_nr][rm].attr(highlight);
						}
						else{
							if (vqRooms[cvjs_active_floorplan_div_nr][rm].data("linked")){
								vqRooms[cvjs_active_floorplan_div_nr][rm].attr(highlight_linked);
							}
							else{
								vqRooms[cvjs_active_floorplan_div_nr][rm].attr(highlight_unlinked);
							}
						}


						tooltipLast[cvjs_active_floorplan_div_nr] = rm;
					}
				}

				if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors)
					tipText = this.data("name");
				else
					tipText = this.data("id");

				if (cvjs_customToolTip)
					tipText = cvjs_displayCustomToolTip(this.data("id"));

				tip[cvjs_active_floorplan_div_nr].html(tipText);
				tip[cvjs_active_floorplan_div_nr].show();

					// 3.0.01i
					tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});	
				
					var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
					var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');		

					
					
										
					//console.log(floorplan_pos);
					
					if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
					//console.log("absolute");
					   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
					}
					else{  // we have placed CV-JS inside a div and we have to make a relative position
						//console.log("inside");
						tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
					}
					//*/
			   }
		}).mouseup(function(e){
			
			// 3.3.02a
			//vqRoomMouseSelect = false;
			
			
			
			
			if (bPan){

				DoMouseUp(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
//				tipText = this.data("name");

				if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors)
					tipText = this.data("name");
				else
					tipText = this.data("id");

				if (cvjs_customToolTip)
					tipText = cvjs_displayCustomToolTip(this.data("id"));

				tip[cvjs_active_floorplan_div_nr].html(tipText);
				bMouseDown = false;
				cvjs_clearDrawing();
				rid = this.data("id");
//console.log("1");
				change_space_fixed_location(rid, cvjs_active_floorplan_div_nr);
			}
			else{
				try{

					layer_vqrooms[cvjs_active_floorplan_div_nr].attr(show);
				}
				catch(err){
					//  allow the code to work with both version 1.1 and 1.2
					//console.log(err);
				}

//				tipText = this.data("name");

				if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors)
					tipText = this.data("name");
				else
					tipText = this.data("id");

				if (cvjs_customToolTip)
					tipText = cvjs_displayCustomToolTip(this.data("id"));

				tip[cvjs_active_floorplan_div_nr].html(tipText);
				bMouseDown = false;
				cvjs_clearDrawing();
				//CheckRoomOnScreen(this);
				rid = this.data("id");
				//change_space(rid);
//console.log("2");
				change_space_fixed_location(rid, cvjs_active_floorplan_div_nr);
			}
			bPan = false;
		}).touchstart(function(e) {
			DoTouchStart(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
		}).touchend(function(e) {
			if ((!bPan) && (!locked))
				{
				var rid = this.data("id");
				cvjs_change_space(rid);

				if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors)
					tipText = this.data("name");
				else
					tipText = this.data("id");

				if (cvjs_customToolTip)
					tipText = cvjs_displayCustomToolTip(this.data("id"));


//				tipText = this.data("name");
				tip[cvjs_active_floorplan_div_nr].html(tipText);
				}
			DoTouchEnd(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);


//			tipText = this.data("name");
			if (!cvjs_supressPopUpModal)
				tipText = this.data("name");
			else
				tipText = this.data("id");

			if (cvjs_customToolTip)
				tipText = cvjs_displayCustomToolTip(this.data("id"));

			tip[cvjs_active_floorplan_div_nr].html(tipText);
			bMouseDown = false;
			cvjs_clearDrawing();
			rid = this.data("id");
//console.log("3");
			change_space_fixed_location(rid, cvjs_active_floorplan_div_nr);

		}).touchmove(function(e) {
			if (!bPan)
			{
				
				
				
				var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
				var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
				if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
				//console.log("absolute");
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
				}
				else{  // we have placed CV-JS inside a div and we have to make a relative position
					//console.log("inside");
					tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
				}
							
				
		
				
				
//			tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft+20).css("top", e.clientY+document.body.scrollTop-20);
//			tip[cvjs_active_floorplan_div_nr].css("left", e.screenX+20).css("top", e.screenY-20);
			tip[cvjs_active_floorplan_div_nr].html(tipText);

			if (cvjs_customToolTip)
				tipText = cvjs_displayCustomToolTip(this.data("id"));

			}
			DoTouchMove(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
		}).dblclick(function(e) {
			event.preventDefault();
			event.stopPropagation();
		});
	}

   	layer_vqrooms[cvjs_active_floorplan_div_nr].add(vqRooms[cvjs_active_floorplan_div_nr][room]);
}

// END - Setup NEW NODE - room data objects




// BEGIN - Setup NEW NODE - stickynote data objects  based on array index

function cvjs_setUpVqStickyNotes_currentNode_vqIndex(paper, cvjs_currentNode_underbar, vqindex, passedoverInstance)
{

//window.alert("cvjs_setUpVqStickyNotes_currentNode_vqIndex rid");
//if (true) return;


floorplan_height = jQuery(window).height()*.9;
floorplan_width = jQuery(window).width()*.9;
var current = null;
tip[cvjs_active_floorplan_div_nr] = jQuery("#tip"+"_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]);
tip[cvjs_active_floorplan_div_nr].hide().css("left", floorplan_width).css("top", floorplan_height);
var tipText = "";
var over = false;
var building = null;
var floor = null;

	try{
	jQuery.fn.qtip.defaults.show.event = 'click';
	jQuery.fn.qtip.defaults.hide.event = null;
	}
	catch(err){
		//  2016-01-30
		// console.log("err="+err);
	}

	// define layer_vqrooms[cvjs_active_floorplan_div_nr] if no data
	//console.log("layer_vqrooms[cvjs_active_floorplan_div_nr]="+layer_vqrooms[cvjs_active_floorplan_div_nr]);

/*	2018-03-15
	
   if (layer_vqstickynotes == ""){
		layer_vqstickynotes = paper.g();
		layer_vqstickynotes.prepend(cvjs_masterBackground[cvjs_active_floorplan_div_nr]);
   }
	
*/	
	
	
	var stickynote = vqindex;

	// var rid = layer_vqstickynotes.data("node");
	// 2018-03-15 changing from layer_stickynotes to the stickynote itself
	
	var rid = vqStickyNotes[stickynote].data("node");
	
//console.log("rid "+rid);

//console.log("rid="+rid+" "+vqStickyNotes[stickynote]+" "+ (cvjs_currentNode_underbar == rid));


		//vqStickyNotes[stickynote].attr(defaultColor_StickyNotes);
		
	
	if (cvjs_currentNode_underbar == rid)
	{

		vqStickyNotes[stickynote].data("name", cvjs_currentStickyNote_name );
		vqStickyNotes[stickynote].data("id", cvjs_currentStickyNote_id);
		vqStickyNotes[stickynote].data("text", cvjs_currentStickyNote_text);
		

		try{

			vqStickyNotes[stickynote].data("layer", cvjs_currentStickyNote_layer);
			vqStickyNotes[stickynote].data("group", cvjs_currentStickyNote_group);
			vqStickyNotes[stickynote].data("linked", cvjs_currentStickyNote_linked);
						
			
			vqStickyNotes[stickynote].data("userid", cvjs_currentStickyNote_userid);
			vqStickyNotes[stickynote].data("date", cvjs_currentStickyNote_date);

			vqStickyNotes[stickynote].data("currentPage", cvjs_currentStickyNote_currentPage);

			vqStickyNotes[stickynote].data("transform", cvjs_currentStickyNote_transform);  // current transformation

			vqStickyNotes[stickynote].data("drawingRotation", cvjs_currentStickyNote_drawingRotation);
			
			
		}
		catch(err){
			console.log(err);
		}


		if (!cvjs_supressPopUpModal  || cvjs_standardHighLightColors){
			vqStickyNotes[stickynote].attr(defaultColor_StickyNotes);
		}
		else{
			if (vqStickyNotes[stickynote].data("linked")){
				vqStickyNotes[stickynote].attr(defaultColor_linked);
			}
			else{
				vqStickyNotes[stickynote].attr(defaultColor_unlinked);
			}
		}
//		vqRooms[cvjs_active_floorplan_div_nr][stickynote ].attr(defaultColor);  // set colors ( note: change attribute name to something more applicable

		// we see what happens

		if (cvjs_supressPopUpModal == true){

				jQuery(vqStickyNotes[stickynote].node).qtip({content: {text: "", title: ""},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'},
						hideOnHTMLClick: 'true'});

				jQuery(vqStickyNotes[stickynote].node).qtip('destroy');
		}
		else{


	var htitle = "<table width=\"100%\"><tr><td cols=\"3\"><div class=\"cvjs_modal_header_stickynote_info_2\">#"+cvjs_currentStickyNote_id+"</div><td class=\"cvjs_modal_header_stickynote_info_2_background\"></td><td class=\"cvjs_modal_header_1\" >"+cvjs_currentStickyNote_name+"</td>"+
		"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon1\" onclick=\"cvjs_move_note();\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+languageTable.languages[cvjs_currentLanguage].StickyNote.MoveNote+"\',1,"+stickynote+");\" ><i class=\"fa fa-arrows\"></i></td>"+
		"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon2\" onclick=\"cvjs_edit_note();\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+languageTable.languages[cvjs_currentLanguage].StickyNote.EditNote+"\',2,"+stickynote+");\" ><i class=\"fa fa-edit\"></i></td>"+
		"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon3\" onclick=\"cvjs_delete_note();\" onmouseout=\"javascript:noteIconChangeHighlight(3,\'#00539B\');\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+languageTable.languages[cvjs_currentLanguage].StickyNote.DeleteNote+"\',3,"+stickynote+");\" ><i class=\"fa fa-trash-o\"></i></td>"+
		"<td class=\"cvjs_modal_header_sticky_note_info_2\" id=\"stickyNoteIcon4\" onclick=\"hideOnlyStickyNote("+stickynote+");\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+languageTable.languages[cvjs_currentLanguage].StickyNote.MinimizeNote+"\',4,"+stickynote+");\" ><i class=\"fa fa-times\"></i></td></tr>"+
		"</table>";


		cvjs_setStickyNoteText(cvjs_currentStickyNote_text);

		jQuery(vqStickyNotes[stickynote ].node).qtip({content: {text: cvjsStickyNoteBody, title: htitle},
				style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
				position: {my: 'bottom center', at: 'top left'},
				hideOnHTMLClick: 'false'});

		var divs = document.getElementsByTagName("div");
		for(var i = 0; i < divs.length; i++){
		   //console.log(divs[i].id);
		   if ( ((divs[i].id).indexOf("qtip-")>-1) && ((divs[i].id).indexOf("-content")==-1) && ((divs[i].id).indexOf("-title")==-1)) StickNoteQtipDiv = divs[i].id;
		}



		}



		vqStickyNotes[stickynote].mousedown(function(e){
			vqRoomMouseSelect = true;
if (cvjs_debug) console.log("B Domousedown");			
			
			DoMouseDown(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop, cvjs_active_floorplan_div_nr);
		}).mousemove(function(e){

			currentStickyNoteId = this.data("id");
			currentStickyNoteName = this.data("name");

			if ((bMouseDown) || (bTempMouseDown))
				DoMouseMove(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
			else {
				var rm = findStickyNotes(currentStickyNoteId);

//console.log("rm "+rm+" currentStickyNoteId "+currentStickyNoteId+" lastObjStickyNote[cvjs_active_floorplan_div_nr] "+lastObjStickyNote[cvjs_active_floorplan_div_nr]+" cvjs_location_flag"+cvjs_location_flag);

				if (rm >= 0)
				{
					if (rm != lastObjStickyNote[cvjs_active_floorplan_div_nr] && cvjs_location_flag ){      // only do this when in location mode

						if (tooltipLastStickyNote != lastObjStickyNote[cvjs_active_floorplan_div_nr]){

							//vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[active_floorplan_div_nr]].attr(defaultColor);

							if (!cvjs_supressPopUpModal){
								vqStickyNotes[tooltipLastStickyNote].attr(defaultColor_StickyNotes);
							}
							else{
								if (vqStickyNotes[tooltipLastStickyNote].data("linked")){
									vqStickyNotes[tooltipLastStickyNote].attr(defaultColor_linked);
								}
								else{
									vqStickyNotes[tooltipLastStickyNote].attr(defaultColor_unlinked);
								}
							}

						}

						//vqRooms[cvjs_active_floorplan_div_nr][rm].attr(highlight);
						if (!cvjs_supressPopUpModal){
							vqStickyNotes[rm].attr(highlight_StickyNotes);
						}
						else{
							if (vqStickyNotes[rm].data("linked")){
								vqStickyNotes[rm].attr(highlight_linked);
							}
							else{
								vqStickyNotes[rm].attr(highlight_unlinked);
							}
						}
						tooltipLastStickyNote = rm;
					}
				}

				tipText = "Note #"+this.data("id");
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					
				
				tip[cvjs_active_floorplan_div_nr].html(tipText);
				tip[cvjs_active_floorplan_div_nr].show();

					var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
					var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
					if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
					//console.log("absolute");
					   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
					}
					else{  // we have placed CV-JS inside a div and we have to make a relative position

						//console.log("inside");
						tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
					}
					
			   }
		}).mouseup(function(e){
			vqRoomMouseSelect = false;
			if (bPan){

				DoMouseUp(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
//				tipText = this.data("name");

				tipText = "Note #"+this.data("id");
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					

				tip[cvjs_active_floorplan_div_nr].html(tipText);
				bMouseDown = false;
				cvjs_clearDrawingStickyNotes();
				rid = this.data("id");
console.log("stickynote 1");
				change_space_fixed_locationStickyNotes(rid);
			}
			else{
				try{
					layer_vqstickynotes.attr(show);
				}
				catch(err){
					//  allow the code to work with both version 1.1 and 1.2
					//console.log(err);
				}

				tipText = "Note #"+this.data("id");
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					

				tip[cvjs_active_floorplan_div_nr].html(tipText);
				bMouseDown = false;
				cvjs_clearDrawingStickyNotes();
				//CheckRoomOnScreen(this);
				rid = this.data("id");
				//change_space(rid);
console.log("stickynote 2x");
				change_space_fixed_locationStickyNotes(rid);
			}
			bPan = false;
		}).touchstart(function(e) {
			DoTouchStart(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
		}).touchend(function(e) {
			if ((!bPan) && (!locked))
				{
				rid = this.data("id");
				cvjs_change_space(rid);

				tipText = "Note #"+this.data("id");
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					

//				tipText = this.data("name");
				tip[cvjs_active_floorplan_div_nr].html(tipText);
				}
			DoTouchEnd(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);

			tipText = this.data("id");

			tip[cvjs_active_floorplan_div_nr].html(tipText);
			bMouseDown = false;
			cvjs_clearDrawingStickyNotes();
			rid = this.data("id");
console.log("stickynote 3x");
			change_space_fixed_locationStickyNotes(rid);

		}).touchmove(function(e) {
			if (!bPan)
			{
				
				var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
				var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
				if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
				//console.log("absolute");
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
				}
				else{  // we have placed CV-JS inside a div and we have to make a relative position
					//console.log("inside");
					tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
				}
									
//			tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft+20).css("top", e.clientY+document.body.scrollTop-20);
//			tip[cvjs_active_floorplan_div_nr].css("left", e.screenX+20).css("top", e.screenY-20);
			tip[cvjs_active_floorplan_div_nr].html(tipText);
			}
			DoTouchMove(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
		}).dblclick(function(e) {
			event.preventDefault();
			event.stopPropagation();
		});
	}

		//console.log(vqStickyNotes[stickynote ]);

//		cvjs_rPaper[cvjs_active_floorplan_div_nr].add(vqStickyNotes[stickynote ]);
//   	layer_vqstickynotes.add(vqStickyNotes[stickynote ]);
}





function cvjs_setUpVqStickyNotes_currentNode_vqIndex_passedInstance(paper, cvjs_currentNode_underbar, vqindex, passedoverInstance)
{

floorplan_height = jQuery(window).height()*.9;
floorplan_width = jQuery(window).width()*.9;
var current = null;
tip[cvjs_active_floorplan_div_nr] = jQuery("#tip"+"_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]);
tip[cvjs_active_floorplan_div_nr].hide().css("left", floorplan_width).css("top", floorplan_height);
var tipText = "";
var over = false;
var building = null;
var floor = null;

	try{
	jQuery.fn.qtip.defaults.show.event = 'click';
	jQuery.fn.qtip.defaults.hide.event = null;
	}
	catch(err){
		//  2016-01-30
		// console.log("err="+err);
	}

	// define layer_vqrooms[cvjs_active_floorplan_div_nr] if no data
	//console.log("layer_vqrooms[cvjs_active_floorplan_div_nr]="+layer_vqrooms[cvjs_active_floorplan_div_nr]);


	
   if (layer_vqstickynotes == ""){
		layer_vqstickynotes = paper.g();
		layer_vqstickynotes.prepend(cvjs_masterBackground[cvjs_active_floorplan_div_nr]);
   }
	
	
	var stickynote = vqindex;

	// var rid = layer_vqstickynotes.data("node");
	// 2018-03-15 changing from layer_stickynotes to the stickynote itself
	
	var rid = passedoverInstance.data("node");
	
console.log("cvjs_setUpVqStickyNotes_currentNode_vqIndex_passedInstance rid "+rid);

console.log("rid                       ="+rid+"              "+passedoverInstance+" "+ (cvjs_currentNode_underbar == rid));


		//passedoverInstance.attr(defaultColor_StickyNotes);

//		passedoverInstance.attr({"fill" : "#F0F0FF"});
		

		passedoverInstance.data("name", cvjs_currentStickyNote_name );
		passedoverInstance.data("id", cvjs_currentStickyNote_id);
		passedoverInstance.data("text", cvjs_currentStickyNote_text);
		passedoverInstance.data("layer", cvjs_currentStickyNote_layer);
		passedoverInstance.data("group", cvjs_currentStickyNote_group);
		passedoverInstance.data("linked", cvjs_currentStickyNote_linked);
		passedoverInstance.data("userid", cvjs_currentStickyNote_userid);
		passedoverInstance.data("date", cvjs_currentStickyNote_date);


		passedoverInstance.data("currentPage", cvjs_currentStickyNote_currentPage);
		passedoverInstance.data("transform", cvjs_currentStickyNote_transform);  // current transformation

		passedoverInstance.data("drawingRotation", cvjs_currentStickyNote_drawingRotation);  // current transformation
		
//		window.alert("y we return filled");

// THIS IS REALLY STRANGE, MAKING THIS ASSOCATION MAKES EVERYTHING WORK!

		if (true) return;

		
		
		
		passedoverInstance.data("name", cvjs_currentStickyNote_name );
		passedoverInstance.data("id", cvjs_currentStickyNote_id);
		passedoverInstance.data("text", cvjs_currentStickyNote_text);
		passedoverInstance.data("layer", cvjs_currentStickyNote_layer);
		passedoverInstance.data("group", cvjs_currentStickyNote_group);
		passedoverInstance.data("linked", cvjs_currentStickyNote_linked);
		passedoverInstance.data("userid", cvjs_currentStickyNote_userid);
		passedoverInstance.data("date", cvjs_currentStickyNote_date);

		passedoverInstance.data("currentPage", cvjs_currentStickyNote_currentPage);

		passedoverInstance.data("transform", cvjs_currentStickyNote_transform);  // current transformation

		




		passedoverInstance.attr({"fill" : "#FF00FF"});
		

//		window.alert("we return filled");

		if (true) return;
		
//		window.alert("we have returned?");



	if (cvjs_currentNode_underbar == rid)
	{

		passedoverInstance.data("name", cvjs_currentStickyNote_name );
		passedoverInstance.data("id", cvjs_currentStickyNote_id);
		passedoverInstance.data("text", cvjs_currentStickyNote_text);

		try{

			passedoverInstance.data("layer", cvjs_currentStickyNote_layer);
			passedoverInstance.data("group", cvjs_currentStickyNote_group);
			passedoverInstance.data("linked", cvjs_currentStickyNote_linked);
			passedoverInstance.data("userid", cvjs_currentStickyNote_userid);
			passedoverInstance.data("date", cvjs_currentStickyNote_date);

			passedoverInstance.data("currentPage", cvjs_currentStickyNote_currentPage);

			passedoverInstance.data("transform", cvjs_currentStickyNote_transform);  // current transformation

		}
		catch(err){
			console.log(err);
		}


		if (!cvjs_supressPopUpModal  || cvjs_standardHighLightColors){
			passedoverInstance.attr(defaultColor_StickyNotes);
		}
		else{
			if (passedoverInstance.data("linked")){
				passedoverInstance.attr(defaultColor_linked);
			}
			else{
				passedoverInstance.attr(defaultColor_unlinked);
			}
		}
//		vqRooms[cvjs_active_floorplan_div_nr][stickynote ].attr(defaultColor);  // set colors ( note: change attribute name to something more applicable

		// we see what happens

		if (cvjs_supressPopUpModal == true){

				jQuery(passedoverInstance.node).qtip({content: {text: "", title: ""},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'},
						hideOnHTMLClick: 'true'});

				jQuery(passedoverInstance.node).qtip('destroy');
		}
		else{


	var htitle = "<table width=\"100%\"><tr><td cols=\"3\"><div class=\"cvjs_modal_header_stickynote_info_2\">#"+cvjs_currentStickyNote_id+"</div><td class=\"cvjs_modal_header_stickynote_info_2_background\"></td><td class=\"cvjs_modal_header_1\" >"+cvjs_currentStickyNote_name+"</td>"+
		"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon1\" onclick=\"cvjs_move_note();\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+languageTable.languages[cvjs_currentLanguage].StickyNote.MoveNote+"\',1,"+stickynote+");\" ><i class=\"fa fa-arrows\"></i></td>"+
		"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon2\" onclick=\"cvjs_edit_note();\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+languageTable.languages[cvjs_currentLanguage].StickyNote.EditNote+"\',2,"+stickynote+");\" ><i class=\"fa fa-edit\"></i></td>"+
		"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon3\" onclick=\"cvjs_delete_note();\" onmouseout=\"javascript:noteIconChangeHighlight(3,\'#00539B\');\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+languageTable.languages[cvjs_currentLanguage].StickyNote.DeleteNote+"\',3,"+stickynote+");\" ><i class=\"fa fa-trash-o\"></i></td>"+
		"<td class=\"cvjs_modal_header_sticky_note_info_2\" id=\"stickyNoteIcon4\" onclick=\"hideOnlyStickyNote("+stickynote+");\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+languageTable.languages[cvjs_currentLanguage].StickyNote.MinimizeNote+"\',4,"+stickynote+");\" ><i class=\"fa fa-times\"></i></td></tr>"+
		"</table>";


		cvjs_setStickyNoteText(cvjs_currentStickyNote_text);

		jQuery(passedoverInstance.node).qtip({content: {text: cvjsStickyNoteBody, title: htitle},
				style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
				position: {my: 'bottom center', at: 'top left'},
				hideOnHTMLClick: 'false'});

		var divs = document.getElementsByTagName("div");
		for(var i = 0; i < divs.length; i++){
		   //console.log(divs[i].id);
		   if ( ((divs[i].id).indexOf("qtip-")>-1) && ((divs[i].id).indexOf("-content")==-1) && ((divs[i].id).indexOf("-title")==-1)) StickNoteQtipDiv = divs[i].id;
		}



		}



		passedoverInstance.mousedown(function(e){
			vqRoomMouseSelect = true;
if (cvjs_debug) console.log("B Domousedown");			
			
			DoMouseDown(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop, cvjs_active_floorplan_div_nr);
		}).mousemove(function(e){

			currentStickyNoteId = this.data("id");
			currentStickyNoteName = this.data("name");

			if ((bMouseDown) || (bTempMouseDown))
				DoMouseMove(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
			else {
				var rm = findStickyNotes(currentStickyNoteId);

//console.log("rm "+rm+" currentStickyNoteId "+currentStickyNoteId+" lastObjStickyNote[cvjs_active_floorplan_div_nr] "+lastObjStickyNote[cvjs_active_floorplan_div_nr]+" cvjs_location_flag"+cvjs_location_flag);

				if (rm >= 0)
				{
					if (rm != lastObjStickyNote[cvjs_active_floorplan_div_nr] && cvjs_location_flag ){      // only do this when in location mode

						if (tooltipLastStickyNote != lastObjStickyNote[cvjs_active_floorplan_div_nr]){

							//vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[active_floorplan_div_nr]].attr(defaultColor);

							if (!cvjs_supressPopUpModal){
								vqStickyNotes[tooltipLastStickyNote].attr(defaultColor_StickyNotes);
							}
							else{
								if (vqStickyNotes[tooltipLastStickyNote].data("linked")){
									vqStickyNotes[tooltipLastStickyNote].attr(defaultColor_linked);
								}
								else{
									vqStickyNotes[tooltipLastStickyNote].attr(defaultColor_unlinked);
								}
							}

						}

						//vqRooms[cvjs_active_floorplan_div_nr][rm].attr(highlight);
						if (!cvjs_supressPopUpModal){
							vqStickyNotes[rm].attr(highlight_StickyNotes);
						}
						else{
							if (vqStickyNotes[rm].data("linked")){
								vqStickyNotes[rm].attr(highlight_linked);
							}
							else{
								vqStickyNotes[rm].attr(highlight_unlinked);
							}
						}
						tooltipLastStickyNote = rm;
					}
				}

				tipText = "Note #"+this.data("id");
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					

				tip[cvjs_active_floorplan_div_nr].html(tipText);
				tip[cvjs_active_floorplan_div_nr].show();

					var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
					var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
					if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
					//console.log("absolute");
					   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
					}
					else{  // we have placed CV-JS inside a div and we have to make a relative position

						//console.log("inside");
						tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
					}
					
			   }
		}).mouseup(function(e){
			vqRoomMouseSelect = false;
			if (bPan){

				DoMouseUp(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
//				tipText = this.data("name");

				tipText = "Note #"+this.data("id");
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					

				tip[cvjs_active_floorplan_div_nr].html(tipText);
				bMouseDown = false;
				cvjs_clearDrawingStickyNotes();
				rid = this.data("id");
console.log("stickynote 1");
				change_space_fixed_locationStickyNotes(rid);
			}
			else{
				try{
					layer_vqstickynotes.attr(show);
				}
				catch(err){
					//  allow the code to work with both version 1.1 and 1.2
					//console.log(err);
				}

				tipText = "Note #"+this.data("id");
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					

				tip[cvjs_active_floorplan_div_nr].html(tipText);
				bMouseDown = false;
				cvjs_clearDrawingStickyNotes();
				//CheckRoomOnScreen(this);
				rid = this.data("id");
				//change_space(rid);
console.log("stickynote 2x");
				change_space_fixed_locationStickyNotes(rid);
			}
			bPan = false;
		}).touchstart(function(e) {
			DoTouchStart(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
		}).touchend(function(e) {
			if ((!bPan) && (!locked))
				{
				rid = this.data("id");
				cvjs_change_space(rid);

				tipText = "Note #"+this.data("id");
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					

//				tipText = this.data("name");
				tip[cvjs_active_floorplan_div_nr].html(tipText);
				}
			DoTouchEnd(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);

			tipText = this.data("id");

			tip[cvjs_active_floorplan_div_nr].html(tipText);
			bMouseDown = false;
			cvjs_clearDrawingStickyNotes();
			rid = this.data("id");
console.log("stickynote 3x");
			change_space_fixed_locationStickyNotes(rid);

		}).touchmove(function(e) {
			if (!bPan)
			{
				
				var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
				var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
				if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
				//console.log("absolute");
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
				}
				else{  // we have placed CV-JS inside a div and we have to make a relative position
					//console.log("inside");
					tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
				}
									
//			tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft+20).css("top", e.clientY+document.body.scrollTop-20);
//			tip[cvjs_active_floorplan_div_nr].css("left", e.screenX+20).css("top", e.screenY-20);
			tip[cvjs_active_floorplan_div_nr].html(tipText);
			}
			DoTouchMove(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
		}).dblclick(function(e) {
			event.preventDefault();
			event.stopPropagation();
		});
	}

		//console.log(passedoverInstance);

//		cvjs_rPaper[cvjs_active_floorplan_div_nr].add(passedoverInstance);
//   	layer_vqstickynotes.add(passedoverInstance);
}












// END - Setup NEW NODE - stickynote data objects based on array number


// BEGIN - Setup NEW NODE - stickynote data objects

function cvjs_setUpVqStickyNotes_currentNode(paper, cvjs_currentNode_underbar)
{

floorplan_height = jQuery(window).height()*.9;
floorplan_width = jQuery(window).width()*.9;
var current = null;
tip[cvjs_active_floorplan_div_nr] = jQuery("#tip"+"_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]);
tip[cvjs_active_floorplan_div_nr].hide().css("left", floorplan_width).css("top", floorplan_height);
var tipText = "";
var over = false;
var building = null;
var floor = null;

	try{
	jQuery.fn.qtip.defaults.show.event = 'click';
	jQuery.fn.qtip.defaults.hide.event = null;
	}
	catch(err){
		//  2016-01-30
		// console.log("err="+err);
	}

	// define layer_vqrooms[cvjs_active_floorplan_div_nr] if no data
	//console.log("layer_vqrooms[cvjs_active_floorplan_div_nr]="+layer_vqrooms[cvjs_active_floorplan_div_nr]);

   if (layer_vqstickynotes == ""){
		layer_vqstickynotes = paper.g();
		layer_vqstickynotes.prepend(cvjs_masterBackground[cvjs_active_floorplan_div_nr]);
	}
	

	var stickynote = vqStickyNotes.length-1;

	rid = vqStickyNotes[stickynote ].data("node");

//	console.log("rid="+rid+" "+vqRooms[cvjs_active_floorplan_div_nr][stickynote ]+" "+ (cvjs_currentNode_underbar == rid));

	if (cvjs_currentNode_underbar == rid)
	{

		vqStickyNotes[stickynote].data("name", cvjs_currentStickyNote_name );
		vqStickyNotes[stickynote].data("id", cvjs_currentStickyNote_id);
		vqStickyNotes[stickynote].data("text", cvjs_currentStickyNote_text);

		try{

			vqStickyNotes[stickynote].data("layer", cvjs_currentStickyNote_layer);
			vqStickyNotes[stickynote].data("group", cvjs_currentStickyNote_group);
			vqStickyNotes[stickynote].data("linked", cvjs_currentStickyNote_linked);
			vqStickyNotes[stickynote].data("userid", cvjs_currentStickyNote_userid);
			vqStickyNotes[stickynote].data("date", cvjs_currentStickyNote_date);

			vqStickyNotes[stickynote].data("currentPage", multiPages[cvjs_active_floorplan_div_nr].currentPage);

			vqStickyNotes[stickynote].data("transform", cvjs_currentStickyNote_transform);  // current transformation

			vqStickyNotes[stickynote].data("drawingRotation", cvjs_currentRotationAngle[cvjs_active_floorplan_div_nr]);  // current transformation
			
			
		}
		catch(err){
			console.log(err);
		}


		if (!cvjs_supressPopUpModal){
			vqStickyNotes[stickynote].attr(defaultColor_StickyNotes);
		}
		else{
			if (vqStickyNotes[stickynote].data("linked")){
				vqStickyNotes[stickynote].attr(defaultColor_linked);
			}
			else{
				vqStickyNotes[stickynote].attr(defaultColor_unlinked);
			}
		}
//		vqRooms[cvjs_active_floorplan_div_nr][stickynote ].attr(defaultColor);  // set colors ( note: change attribute name to something more applicable



		if (cvjs_supressPopUpModal == true){

				jQuery(vqStickyNotes[stickynote].node).qtip({content: {text: "", title: ""},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'},
						hideOnHTMLClick: 'true'});

				jQuery(vqStickyNotes[stickynote].node).qtip('destroy');
		}
		else{


	var htitle = "<table width=\"100%\"><tr><td cols=\"3\"><div class=\"cvjs_modal_header_stickynote_info_2\">#"+cvjs_currentStickyNote_id+"</div><td class=\"cvjs_modal_header_stickynote_info_2_background\"></td><td class=\"cvjs_modal_header_1\" >"+cvjs_currentStickyNote_name+"</td>"+
		"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon1\" onclick=\"javascript:cvjs_move_note();\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+languageTable.languages[cvjs_currentLanguage].StickyNote.MoveNote+"\',1,"+stickynote+");\" ><i class=\"fa fa-arrows\"></i></td>"+
		"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon2\" onclick=\"javascript:cvjs_edit_note();\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+languageTable.languages[cvjs_currentLanguage].StickyNote.EditNote+"\',2,"+stickynote+");\" ><i class=\"fa fa-edit\"></i></td>"+
		"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon3\" onclick=\"javascript:cvjs_delete_note();\" onmouseout=\"javascript:noteIconChangeHighlight(3,\'#00539B\');\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+languageTable.languages[cvjs_currentLanguage].StickyNote.DeleteNote+"\',3,"+stickynote+");\" ><i class=\"fa fa-trash-o\"></i></td>"+
		"<td class=\"cvjs_modal_header_sticky_note_info_2\" id=\"stickyNoteIcon4\" onclick=\"javascript:hideOnlyStickyNote("+stickynote+");\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+languageTable.languages[cvjs_currentLanguage].StickyNote.MinimizeNote+"\',4,"+stickynote+");\" ><i class=\"fa fa-times\"></i></td></tr>"+
		"</table>";


	if (isSmartPhoneOrTablet){  // removing mousemove reaction for devices

		htitle = "<table width=\"100%\"><tr><td cols=\"3\"><div class=\"cvjs_modal_header_stickynote_info_2\">#"+cvjs_currentStickyNote_id+"</div><td class=\"cvjs_modal_header_stickynote_info_2_background\"></td><td class=\"cvjs_modal_header_1\" >ZZ "+cvjs_currentStickyNote_name+"</td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon1\" ontap=\"cvjs_move_note();\" ><i class=\"fa fa-arrows\"></i></td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon2\" onclick=\"cvjs_edit_note();\"><i class=\"fa fa-edit\"></i></td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon3\" ontap=\"javascript:cvjs_delete_note();\" onclick=\"javascript:cvjs_delete_note();\" ><i class=\"fa fa-trash-o\"></i></td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_2\" id=\"stickyNoteIcon4\" ontap=\"javascript:hideOnlyStickyNote("+stickynote+");\" onclick=\"javascript:hideOnlyStickyNote("+stickynote+");\" ><i class=\"fa fa-times\"></i></td></tr>"+
			"</table>";


		htitle = "<table width=\"100%\"><tr><td cols=\"3\"><div class=\"cvjs_modal_header_stickynote_info_2\">#"+cvjs_currentStickyNote_id+"</div><td class=\"cvjs_modal_header_stickynote_info_2_background\"></td><td class=\"cvjs_modal_header_1\" >ZAZ "+cvjs_currentStickyNote_name+"</td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon1\" onclick=\"window.alert('1');\" ><i class=\"fa fa-arrows\"></i></td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon2\" onclick=\"cvjs_edit_note();\"><i class=\"fa fa-edit\"></i></td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon3\" onclick=\"window.alert('3');\" onclick=\"javascript:cvjs_delete_note();\" ><i class=\"fa fa-trash-o\"></i></td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_2\" id=\"stickyNoteIcon4\" onclick=\"hideOnlyStickyNote("+stickynote+");\" ><i class=\"fa fa-times\"></i></td></tr>"+
			"</table>";



	}



		cvjs_setStickyNoteText(cvjs_currentStickyNote_text);

		jQuery(vqStickyNotes[stickynote ].node).qtip({content: {text: cvjsStickyNoteBody, title: htitle},
				style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
				position: {my: 'bottom center', at: 'top left'},
				hideOnHTMLClick: 'false'});

		}

		vqStickyNotes[stickynote].mousedown(function(e){
			vqRoomMouseSelect = true;
if (cvjs_debug) console.log("C Domousedown");					
			DoMouseDown(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop, cvjs_active_floorplan_div_nr);
		}).mousemove(function(e){

			currentStickyNoteId = this.data("id");
			currentStickyNoteName = this.data("name");

			if ((bMouseDown) || (bTempMouseDown))
				DoMouseMove(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
			else {
				var rm = findStickyNotes(currentStickyNoteId);

//console.log("rm "+rm+" currentStickyNoteId "+currentStickyNoteId+" lastObjStickyNote[cvjs_active_floorplan_div_nr] "+lastObjStickyNote[cvjs_active_floorplan_div_nr]+" cvjs_location_flag"+cvjs_location_flag);

				if (rm >= 0)
				{
					if (rm != lastObjStickyNote[cvjs_active_floorplan_div_nr] && cvjs_location_flag ){      // only do this when in location mode

						if (tooltipLastStickyNote != lastObjStickyNote[cvjs_active_floorplan_div_nr]){

							//vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[active_floorplan_div_nr]].attr(defaultColor);

							if (!cvjs_supressPopUpModal){
								vqStickyNotes[tooltipLastStickyNote].attr(defaultColor_StickyNotes);
							}
							else{
								if (vqStickyNotes[tooltipLastStickyNote].data("linked")){
									vqStickyNotes[tooltipLastStickyNote].attr(defaultColor_linked);
								}
								else{
									vqStickyNotes[tooltipLastStickyNote].attr(defaultColor_unlinked);
								}
							}

						}

						//vqRooms[cvjs_active_floorplan_div_nr][rm].attr(highlight);
						if (!cvjs_supressPopUpModal){
							vqStickyNotes[rm].attr(highlight_StickyNotes);
						}
						else{
							if (vqStickyNotes[rm].data("linked")){
								vqStickyNotes[rm].attr(highlight_linked);
							}
							else{
								vqStickyNotes[rm].attr(highlight_unlinked);
							}
						}
						tooltipLastStickyNote = rm;
					}
				}

				tipText = "Note #"+this.data("id");
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					

						
				
				tip[cvjs_active_floorplan_div_nr].html(tipText);
				tip[cvjs_active_floorplan_div_nr].show();
					var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
					var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
					if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
					//console.log("absolute");
					   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
					}
					else{  // we have placed CV-JS inside a div and we have to make a relative position

						//console.log("inside");
						tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
					}
					
			   }
		}).mouseup(function(e){

			vqRoomMouseSelect = false;
			if (bPan){

				DoMouseUp(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
//				tipText = this.data("name");

				tipText = "Note #"+this.data("id");
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					

				tip[cvjs_active_floorplan_div_nr].html(tipText);
				bMouseDown = false;
				cvjs_clearDrawingStickyNotes();
				rid = this.data("id");
if (cvjs_debug_stickynotes) console.log("zzxz");

//console.log("mouse up stickynote  4x");
//			window.alert("mouse up bPan "+bPan);


				change_space_fixed_locationStickyNotes(rid);
			}
			else{
				try{
					layer_vqstickynotes.attr(show);

				}
				catch(err){
					//  allow the code to work with both version 1.1 and 1.2
					//console.log(err);
				}

				tipText = "Note #"+this.data("id");
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					

				tip[cvjs_active_floorplan_div_nr].html(tipText);
				bMouseDown = false;

// repeated in change_space_fixed_location  2017-09-28
//				cvjs_clearDrawingStickyNotes();

//			window.alert("mouse up bPan "+bPan);


				//CheckRoomOnScreen(this);
				rid = this.data("id");
				//change_space(rid);
console.log("stickynote 5x");
				change_space_fixed_locationStickyNotes(rid);
			}
			bPan = false;
		}).touchstart(function(e) {
			DoTouchStart(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
		}).touchend(function(e) {
			if ((!bPan) && (!locked))
				{
				rid = this.data("id");
				cvjs_change_space(rid);

				tipText = "Note #"+this.data("id");
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					

//				tipText = this.data("name");
				tip[cvjs_active_floorplan_div_nr].html(tipText);
				}
			DoTouchEnd(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);

/***   2017-09-29  , as we get a mouse up response, we do not call again for touch-end

			tipText = this.data("id");

			tip[cvjs_active_floorplan_div_nr].html(tipText);
			bMouseDown = false;
			cvjs_clearDrawingStickyNotes();
			rid = this.data("id");
console.log("stickynote 6x");
			change_space_fixed_locationStickyNotes(rid);

*****/


		}).touchmove(function(e) {
			if (!bPan)
			{
				

				var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
				var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
				if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
				//console.log("absolute");
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
				}
				else{  // we have placed CV-JS inside a div and we have to make a relative position
					//console.log("inside");
					tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
				}
									
				
				
//			tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft+20).css("top", e.clientY+document.body.scrollTop-20);
//			tip[cvjs_active_floorplan_div_nr].css("left", e.screenX+20).css("top", e.screenY-20);
			tip[cvjs_active_floorplan_div_nr].html(tipText);
			}
			DoTouchMove(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
		}).dblclick(function(e) {
			event.preventDefault();
			event.stopPropagation();
		});
	}

	//console.log();

	paper.add(vqStickyNotes[stickynote ]);
   	//layer_vqstickynotes.add(vqStickyNotes[stickynote ]);
}

// END - Setup NEW NODE - stickynote data objects









// BEGIN - Setup NODE - after pagechange
function cvjs_setUpVqStickyNotes_currentNode_PageChange(paper, cvjs_currentNode_underbar, vqindex)
{

floorplan_height = jQuery(window).height()*.9;
floorplan_width = jQuery(window).width()*.9;
var current = null;
tip[cvjs_active_floorplan_div_nr] = jQuery("#tip"+"_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]);
tip[cvjs_active_floorplan_div_nr].hide().css("left", floorplan_width).css("top", floorplan_height);
var tipText = "";
var over = false;
var building = null;
var floor = null;


	try{
	jQuery.fn.qtip.defaults.show.event = 'click';
	jQuery.fn.qtip.defaults.hide.event = null;
	}
	catch(err){
		//  2016-01-30
		// console.log("err="+err);
	}

	// define layer_vqrooms[cvjs_active_floorplan_div_nr] if no data
	//console.log("layer_vqrooms[cvjs_active_floorplan_div_nr]="+layer_vqrooms[cvjs_active_floorplan_div_nr]);

   if (layer_vqstickynotes == ""){
		layer_vqstickynotes = paper.g();
		layer_vqstickynotes.prepend(cvjs_masterBackground[cvjs_active_floorplan_div_nr]);
   }
	
	var stickynote = vqindex;

	var rid = vqStickyNotes[stickynote].data("node");

//console.log(cvjs_currentNode_underbar + "  " + rid);


	if (cvjs_currentNode_underbar == rid)
	{

		vqStickyNotes[stickynote].data("name", cvjs_currentStickyNote_name );
		vqStickyNotes[stickynote].data("id", cvjs_currentStickyNote_id);
		vqStickyNotes[stickynote].data("text", cvjs_currentStickyNote_text);

		try{

			vqStickyNotes[stickynote].data("layer", cvjs_currentStickyNote_layer);
			vqStickyNotes[stickynote].data("group", cvjs_currentStickyNote_group);
			vqStickyNotes[stickynote].data("linked", cvjs_currentStickyNote_linked);
			vqStickyNotes[stickynote].data("userid", cvjs_currentStickyNote_userid);
			vqStickyNotes[stickynote].data("date", cvjs_currentStickyNote_date);

			vqStickyNotes[stickynote].data("currentPage", cvjs_currentStickyNote_currentPage);

			vqStickyNotes[stickynote].data("transform", cvjs_currentStickyNote_transform);  // current transformation

			vqStickyNotes[stickynote].data("drawingRotation", cvjs_currentStickyNote_drawingRotation);  // current transformation

		}
		catch(err){
			console.log(err);
		}


		if (!cvjs_supressPopUpModal  || cvjs_standardHighLightColors){
			vqStickyNotes[stickynote].attr(defaultColor_StickyNotes);
		}
		else{
			if (vqStickyNotes[stickynote].data("linked")){
				vqStickyNotes[stickynote].attr(defaultColor_linked);
			}
			else{
				vqStickyNotes[stickynote].attr(defaultColor_unlinked);
			}
		}
//		vqRooms[cvjs_active_floorplan_div_nr][stickynote ].attr(defaultColor);  // set colors ( note: change attribute name to something more applicable



		if (cvjs_supressPopUpModal == true){

				jQuery(vqStickyNotes[stickynote].node).qtip({content: {text: "", title: ""},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'},
						hideOnHTMLClick: 'true'});

				jQuery(vqStickyNotes[stickynote].node).qtip('destroy');
		}
		else{


	var htitle = "<table width=\"100%\"><tr><td cols=\"3\"><div class=\"cvjs_modal_header_stickynote_info_2\">#"+cvjs_currentStickyNote_id+"</div><td class=\"cvjs_modal_header_stickynote_info_2_background\"></td><td class=\"cvjs_modal_header_1\" >"+cvjs_currentStickyNote_name+"</td>"+
		"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon1\" onclick=\"cvjs_move_note();\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+languageTable.languages[cvjs_currentLanguage].StickyNote.MoveNote+"\',1,"+stickynote+");\" ><i class=\"fa fa-arrows\"></i></td>"+
		"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon2\" onclick=\"cvjs_edit_note();\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+languageTable.languages[cvjs_currentLanguage].StickyNote.EditNote+"\',2,"+stickynote+");\" ><i class=\"fa fa-edit\"></i></td>"+
		"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon3\" onclick=\"cvjs_delete_note();\" onmouseout=\"javascript:noteIconChangeHighlight(3,\'#00539B\');\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+languageTable.languages[cvjs_currentLanguage].StickyNote.DeleteNote+"\',3,"+stickynote+");\" ><i class=\"fa fa-trash-o\"></i></td>"+
		"<td class=\"cvjs_modal_header_sticky_note_info_2\" id=\"stickyNoteIcon4\" onclick=\"hideOnlyStickyNote("+stickynote+");\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+languageTable.languages[cvjs_currentLanguage].StickyNote.MinimizeNote+"\',4,"+stickynote+");\" ><i class=\"fa fa-times\"></i></td></tr>"+
		"</table>";


		cvjs_setStickyNoteText(cvjs_currentStickyNote_text);

		jQuery(vqStickyNotes[stickynote ].node).qtip({content: {text: cvjsStickyNoteBody, title: htitle},
				style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
				position: {my: 'bottom center', at: 'top left'},
				hideOnHTMLClick: 'false'});

		var divs = document.getElementsByTagName("div");
		for(var i = 0; i < divs.length; i++){
		   //console.log(divs[i].id);
		   if ( ((divs[i].id).indexOf("qtip-")>-1) && ((divs[i].id).indexOf("-content")==-1) && ((divs[i].id).indexOf("-title")==-1)) StickNoteQtipDiv = divs[i].id;
		}



		}



		vqStickyNotes[stickynote].mousedown(function(e){
			vqRoomMouseSelect = true;
if (cvjs_debug) console.log("E Domousedown");					
			DoMouseDown(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop, cvjs_active_floorplan_div_nr);
		}).mousemove(function(e){

			currentStickyNoteId = this.data("id");
			currentStickyNoteName = this.data("name");

			if ((bMouseDown) || (bTempMouseDown))
				DoMouseMove(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
			else {
				var rm = findStickyNotes(currentStickyNoteId);

//console.log("rm "+rm+" currentStickyNoteId "+currentStickyNoteId+" lastObjStickyNote[cvjs_active_floorplan_div_nr] "+lastObjStickyNote[cvjs_active_floorplan_div_nr]+" cvjs_location_flag"+cvjs_location_flag);

				if (rm >= 0)
				{
					if (rm != lastObjStickyNote[cvjs_active_floorplan_div_nr] && cvjs_location_flag ){      // only do this when in location mode

						if (tooltipLastStickyNote != lastObjStickyNote[cvjs_active_floorplan_div_nr]){

							//vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[active_floorplan_div_nr]].attr(defaultColor);

							try{
								if (!cvjs_supressPopUpModal){
									vqStickyNotes[tooltipLastStickyNote].attr(defaultColor_StickyNotes);
								}
								else{
									if (vqStickyNotes[tooltipLastStickyNote].data("linked")){
										vqStickyNotes[tooltipLastStickyNote].attr(defaultColor_linked);
									}
									else{
										vqStickyNotes[tooltipLastStickyNote].attr(defaultColor_unlinked);
									}
								}

							}
							catch (err){
								// do nothing
							}

						}

						//vqRooms[cvjs_active_floorplan_div_nr][rm].attr(highlight);
						if (!cvjs_supressPopUpModal){
							vqStickyNotes[rm].attr(highlight_StickyNotes);
						}
						else{
							if (vqStickyNotes[rm].data("linked")){
								vqStickyNotes[rm].attr(highlight_linked);
							}
							else{
								vqStickyNotes[rm].attr(highlight_unlinked);
							}
						}
						tooltipLastStickyNote = rm;
					}
				}

				tipText = "Note #"+this.data("id");
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					

				tip[cvjs_active_floorplan_div_nr].html(tipText);
				tip[cvjs_active_floorplan_div_nr].show();

					var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
					var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
					if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
					//console.log("absolute");
					   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
					}
					else{  // we have placed CV-JS inside a div and we have to make a relative position

						//console.log("inside");
						tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
					}
					
			   }
		}).mouseup(function(e){
			vqRoomMouseSelect = false;
			if (bPan){

				DoMouseUp(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
//				tipText = this.data("name");

				tipText = "Note #"+this.data("id");
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					

				tip[cvjs_active_floorplan_div_nr].html(tipText);
				bMouseDown = false;
				cvjs_clearDrawingStickyNotes();
				rid = this.data("id");
console.log("sticky note up 7x");
				change_space_fixed_locationStickyNotes(rid);
			}
			else{
				try{
					layer_vqstickynotes.attr(show);
				}
				catch(err){
					//  allow the code to work with both version 1.1 and 1.2
					//console.log(err);
				}

				tipText = "Note #"+this.data("id");
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					

				tip[cvjs_active_floorplan_div_nr].html(tipText);
				bMouseDown = false;
				cvjs_clearDrawingStickyNotes();
				//CheckRoomOnScreen(this);
				rid = this.data("id");
				//change_space(rid);
console.log("2");
				change_space_fixed_locationStickyNotes(rid);
			}
			bPan = false;
		}).touchstart(function(e) {
			DoTouchStart(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
		}).touchend(function(e) {
			if ((!bPan) && (!locked))
				{
				rid = this.data("id");
				cvjs_change_space(rid);

				tipText = "Note #"+this.data("id");
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					

//				tipText = this.data("name");
				tip[cvjs_active_floorplan_div_nr].html(tipText);
				}
			DoTouchEnd(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);

			tipText = this.data("id");

			tip[cvjs_active_floorplan_div_nr].html(tipText);
			bMouseDown = false;
			cvjs_clearDrawingStickyNotes();
			rid = this.data("id");
console.log("3");
			change_space_fixed_locationStickyNotes(rid);

		}).touchmove(function(e) {
			if (!bPan)
			{
				

				var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
				var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
				if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
				//console.log("absolute");
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
				}
				else{  // we have placed CV-JS inside a div and we have to make a relative position
					//console.log("inside");
					tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
				}
								
				
//			tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft+20).css("top", e.clientY+document.body.scrollTop-20);
//			tip[cvjs_active_floorplan_div_nr].css("left", e.screenX+20).css("top", e.screenY-20);
			tip[cvjs_active_floorplan_div_nr].html(tipText);
			}
			DoTouchMove(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
		}).dblclick(function(e) {
			event.preventDefault();
			event.stopPropagation();
		});
	}

//console.log("before add layer");
 //  NOTE   NOTE 2016-08-25
 //  	layer_vqstickynotes.add(vqStickyNotes[stickynote ]);
}




// END - Setup NODE - after pagechange











// BEGIN - Delete node - room data objects

function cvjs_setUpVqRooms_deleteNode(node)
{
	var room_node;
	for (var room in vqRooms[cvjs_active_floorplan_div_nr]){
		room_node = vqRooms[cvjs_active_floorplan_div_nr][room].data("node");
		if (room_node == node){
			// we simply hide it by making it very small - remove the item when save

			vqRooms[cvjs_active_floorplan_div_nr][room].data("deleted", true);
			var dTransform = "S0.001";
			vqRooms[cvjs_active_floorplan_div_nr][room].attr({'transform': dTransform, "opacity" : "0.01"});

		}
	}
}

// END - Delete node - room data objects


// BEGIN - Delete node - stickynote objects

function cvjs_setUpStickyNotes_deleteNode(delete_note)
{
	var sticky_note;
	for (var note in vqStickyNotes){
		sticky_note = vqStickyNotes[note].data("node");

		console.log("delete "+delete_note+" "+sticky_note+"   "+note);

		//console.log("delete in arrary note="+note);
		if (sticky_note == delete_note){

			// we simply hide it by making it very small - remove the item when save
			vqStickyNotes[note].data("deleted", true);
			var dTransform = "S0.001";

if (cvjs_debug) console.log("DELETING "+note+ "  "+vqStickyNotes[note]);
	
			vqStickyNotes[note].attr({'transform': dTransform, "opacity" : "1"});

// test
			hideOnlyStickyNote(note);

			// we are simply removing the object

if (cvjs_debug) console.log("AFTER DELETING "+note+ "  "+vqStickyNotes[note]);
			
			
			
			jQuery(vqStickyNotes[note].node).qtip('destroy');
			vqStickyNotes.splice(note, 1);
		}


	}
}

// END - Delete node - stickynote data objects



function cvjs_StickyNotes_arrayIndex(noteUnderbar)
{
	var sticky_note;
	for (var note in vqStickyNotes){
		sticky_note = vqStickyNotes[note].data("node");
		if (sticky_note == noteUnderbar){
			return note;
		}
	}
	return -1;
}







// BEGIN - Draw Circle

var firstX_c = 0;
var firstY_c = 0;
var lastX_c = 0;
var lastY_c = 0;
var flag_c = false;

var tTransform_c = "";
var tRubberBand_c;

var myText;
var delta = 0;   // used in Circle and CopyCircle




/**
 * Draws interactively a circle. The data object of the circle is defined as a Space Object. Prior to calling this method, cvjs_setCurrentSpaceObjectNodeValues() should be called.
 */
function cvjs_drawSpaceObject_Circle() {
		cvjs_addHandleFunc_Circle();
}


function cvjs_addHandleFunc_Circle() {

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,60, '');

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;

	//console.log("svg canvas"+canvas_width+" "+canvas_height+" "+global_scale);
	//console.log("handle group"+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])+" "+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
	//console.log("viewBox"+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]);

	tRubberBand_c = cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(0, 0, 1, 1).attr({stroke: "#b00000", "stroke-width" : "0.01", "fill" : "none", "fill-opacity" : "0.01", "opacity" : "0.01"});
	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});




	handleGroup.drag(move_cvjs_create_circle,start_cvjs_create_circle,stop_cvjs_create_circle);
}

function cvjs_removeHandleFunc_Circle() {
		handleGroup.selectAll('handler').remove();
		handleGroup.remove();
	//console.log("handler removed");
}


var start_cvjs_create_circle = function() {
	flag_c = false;
	 tRubberBand_c.attr({stroke: "#b00000", "stroke-width" : "0.01", "fill" : "none", "fill-opacity" : "0.01", "opacity" : "0.01"});
}

var move_cvjs_create_circle = function(dx,dy,x,y) {

var text = x+" "+y+" dx="+dx+" dy="+dy+" viewbox "+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr];
//myText.attr({'text': text});

		if (!flag_c){
			firstX_c = x;
			firstY_c = y;
			lastX_c = dx;
			lastY_c = dy;
			flag_c = true;
		}
		else{
			lastX_c = dx;
			lastY_c = dy;

		}

	delta = Math.sqrt(dx*dx+dy*dy);

	// Move to Global_scale.

//	tTransform_c = "t" + firstX_c + "," + firstY_c;
	tTransform_c = "t" + (firstX_c-delta_x)/global_scale + "," + (firstY_c-delta_y)/global_scale;

	delta/=global_scale;

	tTransform_c += "S"+(delta);
	tRubberBand_c.attr({'transform': tTransform_c , "opacity" : "1"});
}

var stop_cvjs_create_circle = function() {

// selected unlinked red: #ff9999 : 255, 153, 153
// #5BBEF6
	tRubberBand_c.attr({fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1"});

	// remove handler
	cvjs_removeHandleFunc_Circle();
	cvjs_addVqRoomsGraphics_newNode_circle(cvjs_currentNode_underbar, tRubberBand_c);
	cvjs_setUpVqRooms_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentNode_underbar);

	cvjs_graphicalObjectCreated('Circle');
};
// END- Draw Circle





// BEGIN Draw Redline Circle




/**
 * Draws interactively a cloud. Prior to calling this method, cvjs_setCurrentRedlineValues() should be called.
 */
function cvjs_drawSpaceObject_RedlineCloud() {
		cvjs_addHandleFunc_RedlineCloud();
}


function cvjs_addHandleFunc_RedlineCloud() {


	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,60, '');

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;

	//console.log("svg canvas"+canvas_width+" "+canvas_height+" "+global_scale);
	//console.log("handle group"+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])+" "+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
	//console.log("viewBox"+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]);

	tRubberBand_c = cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(0, 0, 1, 1).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "none", "fill-opacity" : "0.01", "opacity" : "0.01"});
	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});



	handleGroup.drag(move_cvjs_create_redlinecircle,start_cvjs_create_redlinecircle,stop_cvjs_create_redlinecircle);
}

function cvjs_removeHandleFunc_RedlineCloud() {
		handleGroup.selectAll('handler').remove();
		handleGroup.remove();


	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;

	//console.log("handler removed");
	
	//ÅÖÄ   2018-05-09  we save the screen as a pdf  - this has problems if the user decide not to save redlines, part implementation, 
	
	try { // 3.1.21j
		if (FileName.indexOf(".pdf")>-1 && cvjs_customPdfFolderFlag ) savepageaspdf(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	}
	catch(err){ console.log("pdf 12: "+err);}
}


var start_cvjs_create_redlinecircle = function() {
	flag_c = false;
	 tRubberBand_c.attr({stroke: cvjs_currentRedline_color, "stroke-width": "0.01", fill: "none", "fill-opacity" : "0.01", "opacity" : "0.01"});
}

var move_cvjs_create_redlinecircle = function(dx,dy,x,y) {

var text = x+" "+y+" dx="+dx+" dy="+dy+" viewbox "+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr];
//myText.attr({'text': text});

		if (!flag_c){
			firstX_c = x;
			firstY_c = y;
			lastX_c = dx;
			lastY_c = dy;
			flag_c = true;
		}
		else{
			lastX_c = dx;
			lastY_c = dy;

		}
	delta = Math.sqrt(dx*dx+dy*dy);

	// Move to Global_scale.
//	tTransform_c = "t" + firstX_c + "," + firstY_c;
	tTransform_c = "t" + (firstX_c-delta_x)/global_scale + "," + (firstY_c-delta_y)/global_scale;

	delta/=global_scale;

	tTransform_c += "S"+(delta);
	tRubberBand_c.attr({'transform': tTransform_c , "opacity" : "1"});

}

var stop_cvjs_create_redlinecircle = function() {

	//console.log("delta="+delta);
	var scaled_stroke=cvjs_currentRedline_strokeWidth/delta*cvjs_redlineThickness_scaleFactor;
	tRubberBand_c.attr({"stroke-width": scaled_stroke});
	tRubberBand_c.attr({'transform': "S0" , "opacity" : "1"});

	var radius = delta;
	
	// we simply split this into two radius, one in x and one in y, and repeat the calculation
		
	var x = (firstX_c-delta_x)/global_scale;
	var y = (firstY_c-delta_y)/global_scale;

	var  _36degrees = 2*Math.PI/20;
	var   subRadius = Math.sin(_36degrees*.5)*radius;
	var incr = Math.PI/20;
    var radAngle = 0;
    var k=0;
    var x1;
    var x2;
    var cloud= "";
    var lastsegment="";
    var flag = true;
	for (var i=0;i<20;i++){
			radAngle = _36degrees*i+_36degrees*.5;
			x1 = x + (radius*Math.cos(radAngle));
			y1 = y + (radius*Math.sin(radAngle));
			var subAng = radAngle - Math.PI*.5;

			for(var j=0; j < 20; j++)
			{
				var x11 = x1 + subRadius*Math.cos(subAng);
				var y11 = y1 + subRadius*Math.sin(subAng);
				if (flag){
					flag = false;
					cloud+="M"+x11+","+y11;
					lastsegment = "L"+x11+","+y11;
				}
				else
					cloud+="L"+x11+","+y11;
				subAng += incr;
			}
		}
		cloud+=lastsegment;

		tRubberBand_r = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(cloud).attr({"stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, stroke: cvjs_currentRedline_color, fill: "#FFF", "fill-opacity": "0.01"});

//console.log(tRubberBand_r);

//console.log(cloud);

	cvjs_removeHandleFunc_RedlineCloud();
	cvjs_addVqRedlinesGraphics_newNode(cvjs_currentRedline_underbar, tRubberBand_r);
	cvjs_graphicalObjectCreated('RedlineCloud');
};




// END Redline Circle



// BEGIN - Draw Custom Rectangle



/**
 * Add a Space Object Custom Rectangle
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 * @param {string} svgImagePath - name of path containing wallpaper object
 * @param {string} spaceObjectId - Unique ID of the space object. NOTE!
 * @param {string} spaceObjectName - Name of the space object.
 * @param {string} spaceObjectType - Type of the object
 * @param {string} layer - the associated layer of the object
 */
  
function cvjs_addRectangleCustomSpaceObject(floorplan_div, svgImagePath, spaceObjectId, spaceObjectName, spaceObjectType, spaceObjectLayer){

	// 3.2.02b
	
	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	



	cvjs_hidePop();
	Node_id = cvjs_currentMaxNodeId();
	//console.log("xurrent Node_id="+Node_id);

	Node_id++;
	currentNode_underbar = Node_underbar+Node_id;
	currentNode_id = spaceObjectId;
	currentNode_name = spaceObjectName;
	currentNode_layer = spaceObjectLayer;
	currentNode_group = "none";
	currentNode_attributes = "none";
	currentNode_attributeStatus = "unpopulated";
	currentNode_type = spaceObjectType;
	currentNode_tags = "unassigned";
	currentNode_linked = false;
	
	cvjs_setCurrentNodeValues(currentNode_underbar, currentNode_name, currentNode_id, currentNode_layer, currentNode_group, currentNode_attributes, currentNode_attributeStatus, currentNode_type, currentNode_tags, currentNode_tags, currentNode_linked);
	cvjs_addHandleFunc_CustomRectangle(svgImagePath, spaceObjectId, spaceObjectName, spaceObjectType);

}



/**
 * Draws interactively a rectangle and add a custom wallpaper. The data object of the rectangle is defined as a Space Object. Prior to calling this method, cvjs_setCurrentSpaceObjectNodeValues() should be called.
 */
function cvjs_drawSpaceObject_CustomRectangle(svgImagePath, spaceObjectId, spaceObjectName, spaceObjectType) {
		cvjs_addHandleFunc_CustomRectangle(svgImagePath, spaceObjectId, spaceObjectName, spaceObjectType);
}

var cvjs_customSvgImagePath = "";
var cvjs_customSpaceObjectId = "";
var cvjs_customSpaceObjectType = "";
var cvjs_customSpaceObjectName = "";



function cvjs_addHandleFunc_CustomRectangle(svgImagePath, spaceObjectId, spaceObjectName, spaceObjectType) {

	cvjs_customSvgImagePath = svgImagePath;
	cvjs_customSpaceObjectId = spaceObjectId;
	cvjs_customSpaceObjectType = spaceObjectType;
	cvjs_customSpaceObjectName = spaceObjectName;
	
//window.alert("cvjs_svgImagePath" +cvjs_svgImagePath);	

	tPath_r = "M" + firstX_r + "," + firstY_r;
	tRubberBand_r = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_r).attr({stroke: "#b00000", fill : "none"});

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,90, '');

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


//	console.log("svg canvas"+canvas_width+" "+canvas_height+" "+global_scale);
//	console.log("handle group"+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])+" "+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
//	console.log("viewBox"+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]);

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});

		
	handleGroup.drag(move_cvjs_create_custom_rectangle,start_cvjs_create_custom_rectangle,stop_cvjs_create_custom_rectangle);
}


function cvjs_removeHandleFunc_CustomRectangle() {
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("handler removed");
}


var start_cvjs_create_custom_rectangle = function() {

	flag_rectangle= false;
	tRubberBand_r.attr({stroke: "#b00000", fill : "none"});
}

var move_cvjs_create_custom_rectangle = function(dx,dy,x,y) {

	var text = x+" "+y+" dx="+dx+" dy="+dy;


//	myText.attr({'text': text});

		if (!flag_rectangle){
			firstX_r = x;
			firstY_r = y;
			lastX_r = dx;
			lastY_r = dy;
			flag_rectangle = true;
		}
		else{
			lastX_r = dx;
			lastY_r = dy;

		}

	tPath_r = "M" + (firstX_r-delta_x)/global_scale + "," + (firstY_r-delta_y)/global_scale;
	tPath_r += "h" + lastX_r/global_scale + "v" + lastY_r/global_scale+"h"+(-lastX_r/global_scale)+"v"+(-lastY_r/global_scale+" Z");
	tRubberBand_r.attr({'path': tPath_r});

}

var stop_cvjs_create_custom_rectangle = function() {

	// 3.2.02b
	tRubberBand_r.remove();

	cvjs_removeHandleFunc_CustomRectangle();

	// we scale and draw the custom object   
	var icon = cvjs_rPaper[cvjs_active_floorplan_div_nr].image(cvjs_customSvgImagePath, (firstX_r-delta_x)/global_scale, (firstY_r-delta_y)/global_scale, Math.abs((lastX_r)/global_scale), Math.abs((lastY_r)/global_scale));
	var newPath = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_r).attr({stroke: "#b00000", fill : "none"});

	newPath.attr({'path': tPath_r});
	newPath.attr({fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1"});

	newPath.attr({'id': 'cv_'+cvjs_currentNode_underbar, 'cvjs:node': cvjs_currentNode_underbar, 'cvjs:roomId': cvjs_customSpaceObjectId, 'cvjs:name': cvjs_customSpaceObjectName, 'class': 'cvjs_nodes', 'cvjs:type' : cvjs_customSpaceObjectType });
	icon.attr({'id': 'cv_'+cvjs_currentNode_underbar+'_image' });

	// 6.1.42
	jQuery('#cv_'+cvjs_currentNode_underbar+'_image').css('pointer-events', 'none');

	
	cvjs_addVqRoomsGraphics_newNode_polygon(cvjs_currentNode_underbar, newPath);
	cvjs_setUpVqRooms_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentNode_underbar);
	cvjs_graphicalObjectCreated('Rectangle');
	
	// 3.2.02b  - find the highest cv_ in the drawing, and insert the image behind that.
	
	
//	window.alert("floorplan_div"+floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	var oArr = {};
	jQuery("*[id]").each(function() {
		try{
			var id = jQuery(this).attr('id');
//			var searchString = "[id^="+floorplan_div+"]";
			var searchString = "[id^="+floorplan_div_Array[cvjs_active_floorplan_div_nr]+"]";
			var svgID = jQuery("#"+id).parents(searchString).attr('id');
			
			if (svgID == floorplan_div_Array[cvjs_active_floorplan_div_nr]){
			   if (!oArr[id]) oArr[id] = true;
			}
		}
		catch (err) { 
		 	console.log(err+" XX"+id+"XX");
		}
	});
	
	var maxId = 0;
	
	for (var prop in oArr){
		try{
			var target = "#"+prop;
			var myID = jQuery(target).attr("id");
			if (myID.indexOf("cv_")==0  && myID.indexOf("cv_NODE")!=0){

// 3.3.02d    we strip off the 
			  var onlyvalue = 0;
			  if (myID.indexOf("cv_")==0) onlyvalue = myID.substring(3);
			  
			  var value = parseInt(onlyvalue);

				 //3.3.02d
//				if (jQuery(target).attr("id") > maxId){
				if (value> maxId){
					maxId = value; 
//					maxId = jQuery(target).attr("id"); 
//					console.log(maxId);
// 

				}			
			}
		}
		catch (err) { 
			console.log(err+" XX"+id+"XX");
		}
	};
	maxId = "cv_" + maxId;
	

	// 3.3.02d
//	jQuery('#cv_'+cvjs_currentNode_underbar+'_image').insertBefore('#cv_'+cvjs_currentNode_underbar);

	jQuery('#cv_'+cvjs_currentNode_underbar).insertBefore('#cv_'+cvjs_currentNode_underbar+'_image');

};
// END - Draw Custom Rectangle


// BEGIN - Draw Rectangle
var firstX_r = 0;
var firstY_r = 0;
var lastX_r = 0;
var lastY_r = 0;
var flag_rectangle = false;

var tPath_r;
var tRubberBand_r;


/**
 * Draws interactively a rectangle. The data object of the rectangle is defined as a Space Object. Prior to calling this method, cvjs_setCurrentSpaceObjectNodeValues() should be called.
 */
function cvjs_drawSpaceObject_Rectangle() {
		
		
		cvjs_addHandleFunc_Rectangle();
		
		
}

function cvjs_addHandleFunc_Rectangle() {


	tPath_r = "M" + firstX_r + "," + firstY_r;
	tRubberBand_r = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_r).attr({stroke: "#b00000", fill : "none"});

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,90, '');

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


//	console.log("svg canvas"+canvas_width+" "+canvas_height+" "+global_scale);
//	console.log("handle group"+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])+" "+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
//	console.log("viewBox"+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]);

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});

	
	
	handleGroup.drag(move_cvjs_create_rectangle,start_cvjs_create_rectangle,stop_cvjs_create_rectangle);
}


function cvjs_removeHandleFunc_Rectangle() {
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("handler removed");
}


var start_cvjs_create_rectangle = function() {

	flag_rectangle= false;
	tRubberBand_r.attr({stroke: "#b00000", fill : "none"});
}

var move_cvjs_create_rectangle = function(dx,dy,x,y) {

	var text = x+" "+y+" dx="+dx+" dy="+dy;


//	myText.attr({'text': text});

		if (!flag_rectangle){
			firstX_r = x;
			firstY_r = y;
			lastX_r = dx;
			lastY_r = dy;
			flag_rectangle = true;
		}
		else{
			lastX_r = dx;
			lastY_r = dy;

		}

	tPath_r = "M" + (firstX_r-delta_x)/global_scale + "," + (firstY_r-delta_y)/global_scale;
	tPath_r += "h" + lastX_r/global_scale + "v" + lastY_r/global_scale+"h"+(-lastX_r/global_scale)+"v"+(-lastY_r/global_scale+" Z");
	tRubberBand_r.attr({'path': tPath_r});

}

var stop_cvjs_create_rectangle = function() {

// selected unlinked red: #ff9999 : 255, 153, 153
// #5BBEF6
	tRubberBand_r.attr({fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1"});

	
	cvjs_removeHandleFunc_Rectangle();

	cvjs_addVqRoomsGraphics_newNode_polygon(cvjs_currentNode_underbar, tRubberBand_r);
	cvjs_setUpVqRooms_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentNode_underbar);

	cvjs_graphicalObjectCreated('Rectangle');

};
// END - Draw Rectangle






// BEGIN - Draw  Redline Rectangle

var firstX_r_redline = 0;
var firstY_r_redline = 0;
var lastX_r_redline = 0;
var lastY_r_redline = 0;
var flag_rectangle_redline = false;

var tPath_r_redline;
var tRubberBand_r_redline;


/**
 * Draws interactively a redline rectangle. Prior to calling this method, cvjs_setCurrentRedlineValues() should be called.
 */
function cvjs_drawSpaceObject_RedlineRectangle() {
		cvjs_addHandleFunc_RedlineRectangle();
}

function cvjs_addHandleFunc_RedlineRectangle() {

	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;


	tPath_r_redline = "M" + firstX_r_redline + "," + firstY_r_redline;
	tRubberBand_r_redline = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_r_redline).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "none"});

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,90, '');

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


//	console.log("svg canvas"+canvas_width+" "+canvas_height+" "+global_scale);
//	console.log("handle group"+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])+" "+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
//	console.log("viewBox"+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]);

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});




	handleGroup.drag(move_cvjs_create_rectangle_redline,start_cvjs_create_rectangle_redline,stop_cvjs_create_rectangle_redline);
}


function cvjs_removeHandleFunc_RedlineRectangle() {
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("handler removed");

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
	
	//ÅÖÄ   2018-05-09  we save the screen as a pdf  - this has problems if the user decide not to save redlines, part implementation, 
	try { // 3.1.21j
		if (FileName.indexOf(".pdf")>-1 && cvjs_customPdfFolderFlag ) savepageaspdf(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	}
	catch(err){ console.log("pdf 12: "+err);}
}


var start_cvjs_create_rectangle_redline = function() {

	flag_rectangle_redline= false;
	tRubberBand_r_redline.attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "none"});
}

var move_cvjs_create_rectangle_redline = function(dx,dy,x,y) {

	var text = x+" "+y+" dx="+dx+" dy="+dy;


//	myText.attr({'text': text});

		if (!flag_rectangle_redline){
			firstX_r_redline = x;
			firstY_r_redline = y;
			lastX_r_redline = dx;
			lastY_r_redline = dy;
			flag_rectangle_redline = true;
		}
		else{
			lastX_r_redline = dx;
			lastY_r_redline = dy;

		}

	tPath_r_redline = "M" + (firstX_r_redline-delta_x)/global_scale + "," + (firstY_r_redline-delta_y)/global_scale;
	tPath_r_redline += "h" + lastX_r_redline/global_scale + "v" + lastY_r_redline/global_scale+"h"+(-lastX_r_redline/global_scale)+"v"+(-lastY_r_redline/global_scale+" Z");
	tRubberBand_r_redline.attr({'path': tPath_r_redline});

}

var stop_cvjs_create_rectangle_redline = function() {

// selected unlinked red: #ff9999 : 255, 153, 153
// #5BBEF6

	tRubberBand_r_redline.attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "#FFF", "fill-opacity": "0.01"});

	cvjs_removeHandleFunc_RedlineRectangle();
	cvjs_addVqRedlinesGraphics_newNode(cvjs_currentRedline_underbar, tRubberBand_r_redline);
	cvjs_graphicalObjectCreated('RedlineRectangle');

};



// END - Draw REdline Rectangle




var cvjs_ellipseCloudFlag = false;


/**
 * Draws interactively a Redline Ellipse Cloud . Prior to calling this method, cvjs_setCurrentRedlineValues() should be called.
 */
function cvjs_drawSpaceObject_RedlineEllipseCloud() {
	
		cvjs_ellipseCloudFlag = true;
		cvjs_addHandleFunc_RedlineEllipse();
}

/**
 * Draws interactively a Redline Ellipse . Prior to calling this method, cvjs_setCurrentRedlineValues() should be called.
 */
function cvjs_drawSpaceObject_RedlineEllipse() {
	
		cvjs_ellipseCloudFlag = false;
		cvjs_addHandleFunc_RedlineEllipse();
}

function cvjs_addHandleFunc_RedlineEllipse() {

	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;


	tPath_r_redline = "M" + firstX_r_redline + "," + firstY_r_redline;
	tRubberBand_r_redline = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_r_redline).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "none"});

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,90, '');

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


//	console.log("svg canvas"+canvas_width+" "+canvas_height+" "+global_scale);
//	console.log("handle group"+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])+" "+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
//	console.log("viewBox"+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]);

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});

	handleGroup.drag(move_cvjs_create_ellipse_redline,start_cvjs_create_ellipse_redline,stop_cvjs_create_ellipse_redline);
}


function cvjs_removeHandleFunc_RedlineEllipse() {
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("handler removed");

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
	
	//ÅÖÄ   2018-05-09  we save the screen as a pdf  - this has problems if the user decide not to save redlines, part implementation, 
	try { // 3.1.21j
		if (FileName.indexOf(".pdf")>-1 && cvjs_customPdfFolderFlag ) savepageaspdf(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	}
	catch(err){ console.log("pdf 12: "+err);}
}


var start_cvjs_create_ellipse_redline = function() {

	flag_rectangle_redline= false;
//	tRubberBand_r_redline.attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "none"});
	tRubberBand_r_redline.attr({stroke: "#5D5D5D", "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "none"});
	
	tRubberBand_c = cvjs_rPaper[cvjs_active_floorplan_div_nr].ellipse(0,0,1,1).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "none", "fill-opacity" : "0.01", "opacity" : "0.01"});
	tRubberBand_c.attr({stroke: cvjs_currentRedline_color, "stroke-width": "0.01", fill: "none", "fill-opacity" : "0.01", "opacity" : "0.01"});	
}

var move_cvjs_create_ellipse_redline = function(dx,dy,x,y) {

	var text = x+" "+y+" dx="+dx+" dy="+dy;

//	myText.attr({'text': text});

		if (!flag_rectangle_redline){
			firstX_r_redline = x;
			firstY_r_redline = y;
			lastX_r_redline = dx;
			lastY_r_redline = dy;
			flag_rectangle_redline = true;
		}
		else{
			lastX_r_redline = dx;
			lastY_r_redline = dy;

		}

	tPath_r_redline = "M" + (firstX_r_redline-delta_x)/global_scale + "," + (firstY_r_redline-delta_y)/global_scale;
	tPath_r_redline += "h" + lastX_r_redline/global_scale + "v" + lastY_r_redline/global_scale+"h"+(-lastX_r_redline/global_scale)+"v"+(-lastY_r_redline/global_scale+" Z");
	tRubberBand_r_redline.attr({'path': tPath_r_redline});
	
	var ellipseTrans = "T"+((firstX_r_redline-delta_x)/global_scale+lastX_r_redline/global_scale/2)  + "," + ((firstY_r_redline-delta_y)/global_scale +lastY_r_redline/global_scale/2)+"S"+lastX_r_redline/global_scale/2+","+lastY_r_redline/global_scale/2;
	//console.log(ellipseTrans);	
//	tRubberBand_c.attr({'transform':  ellipseTrans,  "opacity" : "1"}); //.attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "none", "fill-opacity" : "0.01", "opacity" : "0.1"});	
	
	if (!cvjs_ellipseCloudFlag){  // ellipse
		tRubberBand_c.attr({'transform':  ellipseTrans,  "opacity" : "1"}); //.attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "none", "fill-opacity" : "0.01", "opacity" : "0.1"});
	}
	else{  // cloud

		var ellipseTrans = "T0,0S0";
//		tRubberBand_c.attr({'transform':  ellipseTrans,  "opacity" : "1"});

		// 3.1.21g  
		tRubberBand_c.remove();

		var  _36degrees = 2*Math.PI/20;		
		var radiusX = (lastX_r_redline/global_scale)/2*(1.0/(1.0+Math.sin(_36degrees*.5)));
		var radiusY = (lastY_r_redline/global_scale)/2*(1.0/(1.0+Math.sin(_36degrees*.5)));
		
		// we simply split this into two radius, one in x and one in y, and repeat the calculation
			
		var x = (firstX_r_redline-delta_x)/global_scale+(lastX_r_redline/global_scale)/2;
		var y = (firstY_r_redline-delta_y)/global_scale+(lastY_r_redline/global_scale)/2;

		//window.alert(radiusX+"  "+radiusY+"  "+x+"  "+y);
		
		var   subRadiusX = Math.sin(_36degrees*.5)*radiusX;
		var   subRadiusY = Math.sin(_36degrees*.5)*radiusY;
		
		var incr = Math.PI/20;
		var radAngle = 0;
		var k=0;
		var x1;
		var x2;
		var cloud= "";
		var lastsegment="";
		var flag = true;
		for (var i=0;i<20;i++){
				radAngle = _36degrees*i+_36degrees*.5;
				x1 = x + (radiusX*Math.cos(radAngle));
				y1 = y + (radiusY*Math.sin(radAngle));
				var subAng = radAngle - Math.PI*.5;

				for(var j=0; j < 20; j++)
				{
					var x11 = x1 + subRadiusX*Math.cos(subAng);
					var y11 = y1 + subRadiusY*Math.sin(subAng);
					if (flag){
						flag = false;
						cloud+="M"+x11+","+y11;
						lastsegment = "L"+x11+","+y11;
					}
					else
						cloud+="L"+x11+","+y11;
					subAng += incr;
				}
			}
			cloud+=lastsegment;

//console.log(cloud);			
					
		tRubberBand_c = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(cloud).attr({"stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, stroke: cvjs_currentRedline_color, fill: "#FFF", "fill-opacity": "0.01"});
	
	}	
	
	
	
	
	
	
		
}

var stop_cvjs_create_ellipse_redline = function() {

// Make a circle inside the Ellipse box......
	// 3.1.21e
	var ellipseTrans = "T0,0S0.001";
    tRubberBand_c.attr({'transform':  ellipseTrans,  "opacity" : "1"});
		
	// 3.1.21g  
	tRubberBand_c.remove();
	
	
	tPath_r_redline = "M" + 0 + "," + 0;
	tPath_r_redline += "h" + 0 + "v" + 0+"h"+0+"v"+0+" Z";		
	tRubberBand_r_redline.attr({'path': tPath_r_redline});

	// 3.1.21g  	
	tRubberBand_r_redline.remove();
	
	cvjs_removeHandleFunc_RedlineEllipse();

	if (!cvjs_ellipseCloudFlag){  // ellipse
		tRubberBand_c = cvjs_rPaper[cvjs_active_floorplan_div_nr].ellipse((firstX_r_redline-delta_x)/global_scale+(lastX_r_redline/global_scale)/2, (firstY_r_redline-delta_y)/global_scale+(lastY_r_redline/global_scale)/2, (lastX_r_redline/global_scale)/2, (lastY_r_redline/global_scale)/2).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "#FFF", "fill-opacity" : "0.01", "opacity" : "0.9"});
		cvjs_addVqRedlinesGraphics_newNode(cvjs_currentRedline_underbar, tRubberBand_c);
		cvjs_graphicalObjectCreated('RedlineCloud');
	}
	else{  // cloud

		var  _36degrees = 2*Math.PI/20;

		var radiusX = (lastX_r_redline/global_scale)/2*(1.0/(1.0+Math.sin(_36degrees*.5)));
		var radiusY = (lastY_r_redline/global_scale)/2*(1.0/(1.0+Math.sin(_36degrees*.5)));

	
		// we simply split this into two radius, one in x and one in y, and repeat the calculation
			
		var x = (firstX_r_redline-delta_x)/global_scale+(lastX_r_redline/global_scale)/2;
		var y = (firstY_r_redline-delta_y)/global_scale+(lastY_r_redline/global_scale)/2;

		//window.alert(radiusX+"  "+radiusY+"  "+x+"  "+y);
		
		var   subRadiusX = Math.sin(_36degrees*.5)*radiusX;
		var   subRadiusY = Math.sin(_36degrees*.5)*radiusY;
		var incr = Math.PI/20;
		var radAngle = 0;
		var k=0;
		var x1;
		var x2;
		var cloud= "";
		var lastsegment="";
		var flag = true;
		for (var i=0;i<20;i++){
				radAngle = _36degrees*i+_36degrees*.5;
				x1 = x + (radiusX*Math.cos(radAngle));
				y1 = y + (radiusY*Math.sin(radAngle));
				var subAng = radAngle - Math.PI*.5;

				for(var j=0; j < 20; j++)
				{
					var x11 = x1 + subRadiusX*Math.cos(subAng);
					var y11 = y1 + subRadiusY*Math.sin(subAng);
					if (flag){
						flag = false;
						cloud+="M"+x11+","+y11;
						lastsegment = "L"+x11+","+y11;
					}
					else
						cloud+="L"+x11+","+y11;
					subAng += incr;
				}
			}
			cloud+=lastsegment;

//window.alert(cloud);			
					
		tRubberBand_r = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(cloud).attr({"stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, stroke: cvjs_currentRedline_color, fill: "#FFF", "fill-opacity": "0.01"});
		cvjs_addVqRedlinesGraphics_newNode(cvjs_currentRedline_underbar, tRubberBand_r);
		cvjs_graphicalObjectCreated('RedlineEllipseCloud');
			
	}

};



// END - Draw REdline Ellipse













// BEGIN - Draw  Filled Redline Rectangle


/**
 * Draws interactively a filled redline rectangle. Prior to calling this method, cvjs_setCurrentRedlineValues() should be called.
 */
function cvjs_drawSpaceObject_FilledRedlineRectangle() {
		cvjs_addHandleFunc_FilledRedlineRectangle();
}

function cvjs_addHandleFunc_FilledRedlineRectangle() {

	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;

	tPath_r_redline = "M" + firstX_r_redline + "," + firstY_r_redline;
	tRubberBand_r_redline = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_r_redline).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: cvjs_currentRedline_color, "fill-opacity":"0.1"});

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,90, '');

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


//	console.log("svg canvas"+canvas_width+" "+canvas_height+" "+global_scale);
//	console.log("handle group"+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])+" "+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
//	console.log("viewBox"+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]);

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});




	handleGroup.drag(move_cvjs_create_filledrectangle_redline,start_cvjs_create_filledrectangle_redline,stop_cvjs_create_filledrectangle_redline);
}


function cvjs_removeHandleFunc_FilledRedlineRectangle() {
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("handler removed");

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
	
	//ÅÖÄ   2018-05-09  we save the screen as a pdf  - this has problems if the user decide not to save redlines, part implementation, 
	try { // 3.1.21j
		if (FileName.indexOf(".pdf")>-1 && cvjs_customPdfFolderFlag ) savepageaspdf(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	}
	catch(err){ console.log("pdf 12: "+err);}
}


var start_cvjs_create_filledrectangle_redline = function() {

	flag_rectangle_redline= false;
	tRubberBand_r_redline.attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: cvjs_currentRedline_color, "fill-opacity":"0.1"});
}

var move_cvjs_create_filledrectangle_redline = function(dx,dy,x,y) {

	var text = x+" "+y+" dx="+dx+" dy="+dy;


//	myText.attr({'text': text});

		if (!flag_rectangle_redline){
			firstX_r_redline = x;
			firstY_r_redline = y;
			lastX_r_redline = dx;
			lastY_r_redline = dy;
			flag_rectangle_redline = true;
		}
		else{
			lastX_r_redline = dx;
			lastY_r_redline = dy;

		}

	tPath_r_redline = "M" + (firstX_r_redline-delta_x)/global_scale + "," + (firstY_r_redline-delta_y)/global_scale;
	tPath_r_redline += "h" + lastX_r_redline/global_scale + "v" + lastY_r_redline/global_scale+"h"+(-lastX_r_redline/global_scale)+"v"+(-lastY_r_redline/global_scale+" Z");
	tRubberBand_r_redline.attr({'path': tPath_r_redline});

}

var stop_cvjs_create_filledrectangle_redline = function() {

// selected unlinked red: #ff9999 : 255, 153, 153
// #5BBEF6

	tRubberBand_r_redline.attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: cvjs_currentRedline_color, "fill-opacity":"0.1"});
	cvjs_removeHandleFunc_FilledRedlineRectangle();
	cvjs_addVqRedlinesGraphics_newNodeFill(cvjs_currentRedline_underbar, tRubberBand_r_redline, cvjs_currentRedline_color, 0.1);
	cvjs_graphicalObjectCreated('FilledRedlineRectangle');

};



// END - Draw Filled REdline Rectangle









// BEGIN - Modify Rectangle  //  Modify TBorder
var firstX_mr = 0;
var firstY_mr = 0;
var lastX_mr = 0;
var lastY_mr = 0;
var flag_mrectangle = false;

var tPath_mr;
var tRubberBand_mr;
var x_mr ;
var y_mr ;
var width_mr;
var height_mr;


function cvjs_addHandleFunc_ModifyRectangle(nodeUnderbar) {

	var graphicalObject;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("node") == nodeUnderbar ){
			graphicalObject = vqRooms[cvjs_active_floorplan_div_nr][spc];
		}
	}
	var strRoom = graphicalObject.toString();

	//console.log(nodeId+" "+strRoom);


	var boundingBoxElement = graphicalObject.getBBox();

	x_mr = boundingBoxElement.x;
	y_mr = boundingBoxElement.y;
	width_mr = boundingBoxElement.width;
	height_mr = boundingBoxElement.height;

	var path1;
	var path_flag = true;
	var cx;
	var cy;
	var r;

	if (strRoom.indexOf("path")>-1){
		path_flag = true;
		var pos1 = strRoom.indexOf(" d=");
		var pathStr1 = strRoom.substring(pos1+4);
		//console.log(pathStr1);
		var pos1A = pathStr1.indexOf("\" ");
		path1 = pathStr1.substring(0, pos1A);
	}

	if (strRoom.indexOf("circle")>-1){
		path_flag = false;

		var p_cx = strRoom.indexOf(" cx=");
		var s1_cx = strRoom.substring(p_cx+5);
		var p2_cx = s1_cx.indexOf("\"");
		cx = s1_cx.substring(0, p2_cx)

		var p_cy = strRoom.indexOf(" cy=");
		var s1_cy = strRoom.substring(p_cy+5);
		var p2_cy = s1_cy.indexOf("\"");
		cy = s1_cy.substring(0, p2_cy)


		var p_r = strRoom.indexOf(" r=");
		var s1_r = strRoom.substring(p_r+4);
		var p2_r = s1_r.indexOf("\"");
		r = s1_r.substring(0, p2_r)
	}


//console.log(path1);

	tPath_mr = path1;
	tRubberBand_mr = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_mr).attr({stroke: "#FF00AA", fill : "none", 'stroke-width': 4});

// get the current path, based on current node

// parse the current path and add it to the rubberband



//	myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(250,200, 'HELLO WORLD!!!');

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


//	console.log("svg canvas"+canvas_width+" "+canvas_height+" "+global_scale);
//	console.log("handle group"+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])+" "+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
//	console.log("viewBox"+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]);

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});



	

	handleGroup.drag(move_cvjs_modify_rectangle,start_cvjs_modify_rectangle,stop_cvjs_modify_rectangle);
}


function cvjs_removeHandleFunc_ModifyRectangle() {
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("handler removed");
}



var start_cvjs_modify_rectangle = function() {

	flag_mrectangle= false;
	tRubberBand_mr.attr({stroke: "#FF00AA", fill : "none",  'stroke-width': 4});

}

var move_cvjs_modify_rectangle = function(dx,dy,x,y) {

	// find out which corner is closest

	var x1 = (x-delta_x)/global_scale;
	var y1 = (y-delta_y)/global_scale;
	var h1 = height_mr/2;
	var w1 = width_mr/2;

//console.log(x_mr+" "+y_mr+" "+width_mr+" "+height_mr+" x1,y1 "+x1+" "+y1);
		if (x1<(x_mr+w1) && y1<(y_mr+h1)){
//			console.log("1");

			if (!flag_mrectangle){
				flag_mrectangle = true;
				firstX_mr = x_mr+width_mr;
				firstY_mr = y_mr+height_mr;
				lastX_mr = -width_mr;
				lastY_mr = -height_mr;
			}
			else{
				//lastX_mr+ = dx;
				//lastY_mr+ = dy;
			}
		}

		if (x1>=(x_mr+w1) && y1<(y_mr+h1)){
	//		console.log("2");

			if (!flag_mrectangle){
				flag_mrectangle = true;
				firstX_mr = x_mr;
				firstY_mr = y_mr+height_mr;
				lastX_mr =  width_mr;
				lastY_mr = -height_mr;
			}
			else{
				//lastX_mr+ = dx;
				//lastY_mr+ = dy;
			}
		}

		if (x1<(x_mr+w1) && y1>=(y_mr+h1)){
//		console.log("3");

			if (!flag_mrectangle){
				flag_mrectangle = true;
				firstX_mr = x_mr+width_mr;
				firstY_mr = y_mr;
				lastX_mr = -width_mr;
				lastY_mr = height_mr;
			}
			else{
				//lastX_mr+ = dx;
				//lastY_mr+ = dy;
			}
		}

		if (x1>=(x_mr+w1) && y1>=(y_mr+h1)){

//			console.log("4");
			if (!flag_mrectangle){
				flag_mrectangle = true;
				firstX_mr = x_mr;
				firstY_mr = y_mr;
				lastX_mr = width_mr;
				lastY_mr = height_mr;
			}
			else{
				//lastX_mr+ = dx;
				//lastY_mr+ = dy;
			}
		}

//console.log(tPath_mr);

	tPath_mr = "M" + firstX_mr + "," + firstY_mr;
	tPath_mr += "h" + (lastX_mr + (dx/global_scale)) + "v" + (lastY_mr + (dy/global_scale))+"h"+(-lastX_mr- (dx/global_scale))+"v"+(-lastY_mr - (dy/global_scale))+" Z";
	tRubberBand_mr.attr({'path': tPath_mr});
}

var stop_cvjs_modify_rectangle = function() {

// selected unlinked red: #ff9999 : 255, 153, 153
// #5BBEF6

//	tRubberBand_mr.attr({fill: 'none', "fill-opacity": "0.1", stroke: '#ff2222', 'stroke-opacity': "1"});

//	cvjs_removeHandleFunc_ModifyRectangle();

//console.log("before modify of polygon in object");
//	cvjs_addVqRoomsGraphics_currentNode_modify_polygon(cvjs_currentNode_underbar, tRubberBand_mr);



//	cvjs_setUpVqRooms_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentNode_underbar);

//	cvjs_graphicalObjectCreated('Modify Rectangle');

};
// END - Modify Rectangle






// BEGIN - Modify TBorder with Text

var tb_nodeUnderbarIndex = 0;
var tborderIndex = 0;
var quardrant = 0;
var tTransform_tb = "";
var tTransform_tborder = "";



/**
 * Dynamic resize and change location of text objects drawn on Space Object
 * @param {string} nodeUnderbar - the data node containing the Space Object to which the text is associated
 */

function cvjs_dynamicResizeTextOnSpaceObject(nodeUnderbar) {

	cvjs_addHandleFunc_ModifyTborderWithTextOnSpaceObject(nodeUnderbar);

}


/**
 * Dynamic resize and change location of text objects drawn on Space Object
 * @param {string} name - the name of the data node containing the Space Object to which the text is associated
 */

function cvjs_dynamicResizeTextOnSpaceObject_Name(name) {

	var nodeId = -1;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("name") == name ){
			nodeId = vqRooms[cvjs_active_floorplan_div_nr][spc].data("node");
		}
	}

	cvjs_addHandleFunc_ModifyTborderWithTextOnSpaceObject(nodeId);
}



/**
 * Dynamic resize and change location of text objects drawn on Space Object
 * @param {string} id - the id of the data node containing the Space Object to which the text is associated
 */

function cvjs_dynamicResizeTextOnSpaceObject_Id(id) {

	var nodeId = -1;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == id ){
			nodeId = vqRooms[cvjs_active_floorplan_div_nr][spc].data("node");
		}
	}

	cvjs_addHandleFunc_ModifyTborderWithTextOnSpaceObject(id);
}


var cvjs_addHandleFunc_ModifyTborderWithTextOnSpaceObject_started = false;
function cvjs_addHandleFunc_ModifyTborderWithTextOnSpaceObject(nodeUnderbar) {

	var borderId = 0;
	var textIdArray = [];
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("node") == nodeUnderbar ){
			borderId = vqRooms[cvjs_active_floorplan_div_nr][spc].data("tborderId")
			textIdArray = vqRooms[cvjs_active_floorplan_div_nr][spc].data("textId")
			vqRooms[cvjs_active_floorplan_div_nr][spc].attr(hide);
			tb_nodeUnderbarIndex = spc;
		}
	}


	cvjs_addHandleFunc_ModifyTborderWithTextOnSpaceObject_started = true;

//	console.log("borderID "+borderId+" textarrary "+textIdArray);

	var graphicalObject;

	for (bdr in vqTBorder)
	{
		if (vqTBorder[bdr].data("node") == borderId ){
			graphicalObject = vqTBorder[bdr];
			tborderIndex = bdr;
			vqTBorder[bdr].attr({fill: 'none', "stoke-width": "12.0", stroke: '#ff00dd', 'stroke-opacity': "1"});
			vqTBorder[bdr].attr(show);

//			console.log("show");
		}
	}

//	var strRoom = graphicalObject.toString();
//	console.log("border "+strRoom);

	tTransform_c = "";
	tTransform_tb="";

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});



	handleGroup.drag(move_cvjs_modify_tbordertext,start_cvjs_modify_tbordertext,stop_cvjs_modify_tbordertext);
	handleGroup.dblclick(finish_cvjs_modify_tbordertext);



	oldKeyDown = jQuery(document).keydown().bind({});
	jQuery(document).keydown(function(e) {

		if (e.keyCode == 27) {

			if (cvjs_addHandleFunc_ModifyTborderWithTextOnSpaceObject_started){
				cvjs_addHandleFunc_ModifyTborderWithTextOnSpaceObject_started = false;
				finish_cvjs_modify_tbordertext();

				jQuery(document).keydown() == oldKeyDown;
			}
		}
	});


}


function cvjs_removeHandleFunc_ModifyTBorderWithText() {
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("handler removed");
	cvjs_addHandleFunc_ModifyTborderWithTextOnSpaceObject_started = false;
}


var finish_cvjs_modify_tbordertext = function() {

	cvjs_removeHandleFunc_ModifyTBorderWithText();
	// update database
	vqRooms[cvjs_active_floorplan_div_nr][tb_nodeUnderbarIndex].attr(show);
	vqTBorder[tborderIndex].attr({fill: 'none', "stoke-width": "0.1", stroke: '#000000', 'stroke-opacity': "0.01"});


	//console.log("finish tbordertext bdr="+tborderIndex);

}


var start_cvjs_modify_tbordertext = function(x,y) {


	flag_mrectangle= false;
//	console.log(vqTBorder[tborderIndex].getBBox().vb+" XXXX "+vqTBorder[tborderIndex].getBBox().x+" "+vqTBorder[tborderIndex].getBBox().w );
//	var viewbox = vqTBorder[tborderIndex].getBBox().vb;

	x_mr = vqTBorder[tborderIndex].getBBox().x;
	y_mr = vqTBorder[tborderIndex].getBBox().y;
	width_mr = vqTBorder[tborderIndex].getBBox().w;
	height_mr = vqTBorder[tborderIndex].getBBox().h;

	var x1 = (x-delta_x)/global_scale;
	var y1 = (y-delta_y)/global_scale;
	var h1 = height_mr/2;
	var w1 = width_mr/2;

	if (x1<(x_mr+w1) && y1<(y_mr+h1)){

		if (!flag_mrectangle){
			flag_mrectangle = true;
			quardrant = 1;
		}
		else{
		}
	}

	if (x1>=(x_mr+w1) && y1<(y_mr+h1)){
		if (!flag_mrectangle){
			flag_mrectangle = true;
			quardrant = 2;
		}
		else{
		}
	}

	if (x1>=(x_mr+w1) && y1>=(y_mr+h1)){
		if (!flag_mrectangle){
			flag_mrectangle = true;
			quardrant = 3;

		}
		else{
		}
	}

	if (x1<(x_mr+w1) && y1>=(y_mr+h1)){
		if (!flag_mrectangle){
			flag_mrectangle = true;
			quardrant = 4;
		}
		else{
		}
	}

}


var move_cvjs_modify_tbordertext = function(dx,dy,x,y) {

	switch (quardrant)
	{
	   case 1:
				tTransform_c =tTransform_tb + "t" + ((+dx)/global_scale - (width_mr*0.5*(dy/global_scale)/(height_mr))) + "," + ((+dy)/global_scale - (height_mr*0.5*(dy/global_scale)/(height_mr)) );  // scale is based on center of rectangle
				tTransform_c += "S"+((height_mr-dy/global_scale)/(height_mr));

				tTransform_tborder = "t" + ((+dx)/global_scale - (width_mr*0.5*(dy/global_scale)/(height_mr))) + "," + ((+dy)/global_scale - (height_mr*0.5*(dy/global_scale)/(height_mr)) );  // scale is based on center of rectangle
				tTransform_tborder += "S"+((height_mr-dy/global_scale)/(height_mr));

				vqTBorder[tborderIndex].attr({'transform': tTransform_c , "opacity" : "1"});
		       break;
	   case 2:
				tTransform_c =tTransform_tb + "t" + ((+dx)/global_scale + (width_mr*0.5*(dy/global_scale)/(height_mr))) + "," + ((+dy)/global_scale - (height_mr*0.5*(dy/global_scale)/(height_mr)) );  // scale is based on center of rectangle
				tTransform_c += "S"+((height_mr-dy/global_scale)/(height_mr));

				tTransform_tborder ="t" + ((+dx)/global_scale + (width_mr*0.5*(dy/global_scale)/(height_mr))) + "," + ((+dy)/global_scale - (height_mr*0.5*(dy/global_scale)/(height_mr)) );  // scale is based on center of rectangle
				tTransform_tborder += "S"+((height_mr-dy/global_scale)/(height_mr));

				vqTBorder[tborderIndex].attr({'transform': tTransform_c , "opacity" : "1"});
			   break;
	   case 3:
				tTransform_c =tTransform_tb + "t" + ((+dx)/global_scale - (width_mr*0.5*(dy/global_scale)/(height_mr))) + "," + ((+dy)/global_scale - (height_mr*0.5*(dy/global_scale)/(height_mr)) );  // scale is based on center of rectangle
				tTransform_c += "S"+((height_mr+dy/global_scale)/(height_mr));

				tTransform_tborder ="t" + ((+dx)/global_scale - (width_mr*0.5*(dy/global_scale)/(height_mr))) + "," + ((+dy)/global_scale - (height_mr*0.5*(dy/global_scale)/(height_mr)) );  // scale is based on center of rectangle
				tTransform_tborder += "S"+((height_mr+dy/global_scale)/(height_mr));

				vqTBorder[tborderIndex].attr({'transform': tTransform_c , "opacity" : "1"});
			   break;
	   case 4:
				tTransform_c =tTransform_tb + "t" + ((+dx)/global_scale + (width_mr*0.5*(dy/global_scale)/(height_mr))) + "," + ((+dy)/global_scale - (height_mr*0.5*(dy/global_scale)/(height_mr)) );  // scale is based on center of rectangle
				tTransform_c += "S"+((height_mr+dy/global_scale)/(height_mr));

				tTransform_tborder ="t" + ((+dx)/global_scale + (width_mr*0.5*(dy/global_scale)/(height_mr))) + "," + ((+dy)/global_scale - (height_mr*0.5*(dy/global_scale)/(height_mr)) );  // scale is based on center of rectangle
				tTransform_tborder += "S"+((height_mr+dy/global_scale)/(height_mr));

				vqTBorder[tborderIndex].attr({'transform': tTransform_c , "opacity" : "1"});
			   break;
	   default:
	       console.log('Default quardrant move');
	}

}


var stop_cvjs_modify_tbordertext = function() {

	tTransform_tb = tTransform_tb + tTransform_tborder;

};
// END - Modify TBorder with Text


// BEGIN - Reset TBorder with Text

/**
 * Reset the location and size of text objects drawn on Space Object
 * @param {string} nodeUnderbar - the data node containing the Space Object to which the text is associated
 */

function cvjs_resetTextOnSpaceObject(nodeUnderbar) {

	var borderId = 0;
	var borderIndex = 0;
	var flag = false;

	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("node") == nodeUnderbar ){
			borderId = vqRooms[cvjs_active_floorplan_div_nr][spc].data("tborderId")
		}
	}

	for (bdr in vqTBorder)
	{
		if (vqTBorder[bdr].data("node") == borderId ){
			borderIndex = bdr;
			flag = true;
		}
	}
	if (flag)
		vqTBorder[borderIndex].attr({'transform': "T0,0S1.0" });
}

// END - Reset TBorder with Text

/**
 * Reset the location and size of text objects drawn on Space Object
 * @param {string} name- name of the data node containing the Space Object to which the text is associated, the first occurance of the name is selected
 */

function cvjs_resetTextOnSpaceObject_Name(name) {

	var borderId = 0;
	var borderIndex = 0;
	var flag = false;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("name") == name ){
			borderId = vqRooms[cvjs_active_floorplan_div_nr][spc].data("tborderId")
		}
	}

	for (bdr in vqTBorder)
	{
		if (vqTBorder[bdr].data("node") == borderId ){
			borderIndex = bdr;
			flag = true;
		}
	}

	if (flag)
		vqTBorder[borderIndex].attr({'transform': "T0,0S1.0" });
}

// END - Reset TBorder with Text



/**
 * Reset the location and size of text objects drawn on Space Object
 * @param {string} name- id of the data node containing the Space Object to which the text is associated
 */

function cvjs_resetTextOnSpaceObject_Id(id) {

	var flag = false;
	var borderId = 0;
	var borderIndex = 0;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == id ){
			borderId = vqRooms[cvjs_active_floorplan_div_nr][spc].data("tborderId")
		}
	}

	for (bdr in vqTBorder)
	{
		if (vqTBorder[bdr].data("node") == borderId ){
			borderIndex = bdr;
			flag = true;
		}
	}

	if (flag)
		vqTBorder[borderIndex].attr({'transform': "T0,0S1.0" });
}

// END - Reset TBorder with Text





// BEGIN - Draw Polygon
var originX_poly = 0;
var originY_poly = 0;
var firstX_poly = 0;
var firstY_poly = 0;
var lastX_poly = 400;
var lastY_poly = 300;

var tPath_poly;
var tRubberBand_poly;
var polyPath;
var tPolygon;
var draw_poly = false;
var first_point_poly = true;

/**
 * Draws interactively a polygon. The data object of the polygon is defined as a Space Object. Prior to calling this method, cvjs_setCurrentSpaceObjectNodeValues() should be called.
 */
function cvjs_drawSpaceObject_Polygon() {
		cvjs_addHandleFunc_Polygon();
}

var cvjs_addHandleFunc_Polygon_started = false;

function cvjs_addHandleFunc_Polygon(){

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,120, '');

	cvjs_addHandleFunc_Polygon_started = true;


	tPath_poly = "M" + firstX_poly + "," + firstY_poly;
	tRubberBand_poly = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_poly).attr({stroke: "#b00000"});
	polyPath = "M" + firstX_poly + "," + firstY_poly;
	tPolygon = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polyPath).attr({stroke: "#b00000", fill: "none"});

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


//	console.log("svg canvas"+canvas_width+" "+canvas_height+" "+global_scale);
//	console.log("handle group"+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])+" "+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
//	console.log("viewBox"+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]);
	draw_poly = false;
	first_point_poly = true;

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});



	handleGroup.mousedown(mousedown_polygon);
	handleGroup.mousemove(mousemove_polygon);
	handleGroup.dblclick( polygon_finish );

	oldKeyDown = jQuery(document).keydown().bind({});
	jQuery(document).keydown(function(e) {

		if (e.keyCode == 27) {

			if (cvjs_addHandleFunc_Polygon_started){

				cvjs_addHandleFunc_Polygon_started = false;
				 polygon_finish();

				jQuery(document).keydown() == oldKeyDown;
			}
		}
	});

}


function cvjs_removeHandleFunc_Polygon(){
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("removed handler");
}


var polygon_finish = function() {

	polyPath += "L" + (lastX_poly-delta_x)/global_scale + "," + (lastY_poly-delta_y)/global_scale+"L" + (originX_poly-delta_x)/global_scale + "," + (originY_poly-delta_y)/global_scale;
	tPolygon.attr({'path': polyPath});

// selected unlinked red: #ff9999 : 255, 153, 153

	tPolygon.attr({fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1"});
	cvjs_removeHandleFunc_Polygon();


	
	//console.log("update database!! "+tPolygon);

	tRubberBand_poly.attr({'path': "M0,0"});

	draw_poly = false;
	first_point_poly = true;

	cvjs_addVqRoomsGraphics_newNode_polygon(cvjs_currentNode_underbar, tPolygon);
	cvjs_setUpVqRooms_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentNode_underbar);

	cvjs_graphicalObjectCreated('Polygon');

}



var mousedown_polygon = function() {

	//console.log("mousedown draw_poly="+draw_poly);
		 if (draw_poly){
		 	polyPath += "L" + (lastX_poly-delta_x)/global_scale + "," + (lastY_poly-delta_y)/global_scale;
			tPolygon.attr({'path': polyPath});
			firstX_poly = lastX_poly;
			firstY_poly = lastY_poly;

			//console.log("firstX_poly="+firstX_poly);
		 }
		 else{

			polyPath = "M" + (firstX_poly-delta_x)/global_scale + "," +(firstY_poly-delta_y)/global_scale;
		 	tPolygon.attr({'path': polyPath});
		 	tPolygon.attr({stroke: "#b00000", fill: "none"});

			//tPolygon.attr({fill: "none", "fill-opacity": "0.01", stroke: '#0b0000', 'stroke-opacity': "1"});
			 draw_poly = true;
		 }

}

var mousemove_polygon = function(e,x,y) {

	if (draw_poly){

		//console.log("mousemove");

		//var text = x+" "+y+" dx="+dx+" dy="+dy;
//		var text = e+" "+x+" "+y;
//		myText.attr({'text': text});

				if (first_point_poly){
					first_point_poly = false;
					firstX_poly = x;
					firstY_poly = y;
					lastX_poly = x;
					lastY_poly = y;
					originX_poly = x;
					originY_poly = y;

					polyPath = "M" + (firstX_poly-delta_x)/global_scale + "," + (firstY_poly-delta_y)/global_scale;
				}
				else{
					lastX_poly = x;
					lastY_poly = y;
				}
			tPath_poly = "M" + (firstX_poly-delta_x)/global_scale + "," + (firstY_poly-delta_y)/global_scale;
			tPath_poly += "L" + (lastX_poly-delta_x)/global_scale + "," + (lastY_poly-delta_y)/global_scale;
			tRubberBand_poly.attr({'path': tPath_poly});
	}
}

// END - Draw Polygon




//BEGIN REDLINE Polyline point to point


var originX_poly_redline1 = 0;
var originY_poly_redline1 = 0;
var firstX_poly_redline1 = 0;
var firstY_poly_redline1 = 0;
var lastX_poly_redline1 = 400;
var lastY_poly_redline1 = 300;

var tPath_poly_redline1;
var tRubberBand_poly_redline1;
var polyPath_redline1;
var tPolygon_redline1;
var draw_poly_redline1 = false;
var first_point_poly_redline1 = true;

/**
 * Draws interactively a redline polyline. Prior to calling this method, cvjs_setCurrentRedlineValues() should be called.
 */
function cvjs_drawSpaceObject_RedlinePolyline() {
		cvjs_addHandleFunc_RedlinePolyline();
}

var cvjs_addHandleFunc_RedlinePolyline_started = false;

function cvjs_addHandleFunc_RedlinePolyline(){


	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;


	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,120, '');

	cvjs_addHandleFunc_RedlinePolyline_started = true;

	tPath_poly_redline1 = "M" + firstX_poly_redline1 + "," + firstY_poly_redline1;
		
	tRubberBand_poly_redline1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_poly_redline1).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "#FFF", "fill-opacity": "0.01"});
	polyPath_redline1 = "M" + firstX_poly_redline1 + "," + firstY_poly_redline1;
	tPolygon_redline1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polyPath_redline1).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "#FFF", "fill-opacity": "0.01"});

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


//	console.log("svg canvas"+canvas_width+" "+canvas_height+" "+global_scale);
//	console.log("handle group"+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])+" "+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
//	console.log("viewBox"+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]);
	draw_poly_redline1 = false;
	first_point_poly_redline1 = true;

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});



	handleGroup.mousedown(mousedown_polygon_redline1);
	handleGroup.mousemove(mousemove_polygon_redline1);
	handleGroup.dblclick( polygon_finish_redline1 );


	oldKeyDown = jQuery(document).keydown().bind({});
	jQuery(document).keydown(function(e) {

		if (e.keyCode == 27) {

			if (cvjs_addHandleFunc_RedlinePolyline_started){

				cvjs_addHandleFunc_RedlinePolyline_started = false;
				polygon_finish_redline1();

				jQuery(document).keydown() == oldKeyDown;
			}
		}
	});

}


function cvjs_removeHandleFunc_RedlinePolyline(){
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("removed handler");

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
	
		
	//ÅÖÄ   2018-05-09  we save the screen as a pdf  - this has problems if the user decide not to save redlines, part implementation, 
	try { // 3.1.21j
		if (FileName.indexOf(".pdf")>-1 && cvjs_customPdfFolderFlag ) savepageaspdf(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	}
	catch(err){ console.log("pdf 12: "+err);}

}


var polygon_finish_redline1 = function() {

//	polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale+"L" + (originX_poly_redline1-delta_x)/global_scale + "," + (originY_poly_redline1-delta_y)/global_scale;
	polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
	tPolygon_redline1.attr({'path': polyPath_redline1});

	cvjs_removeHandleFunc_RedlinePolyline();

	//console.log("update database!! "+tPolygon);
	tRubberBand_poly_redline1.attr({'path': "M0,0"});

	draw_poly_redline1 = false;
	first_point_poly_redline1 = true;
	//console.log(tPolygon_redline1);

	cvjs_addVqRedlinesGraphics_newNode(cvjs_currentRedline_underbar, tPolygon_redline1);
	cvjs_graphicalObjectCreated('RedlinePolyline');
}



var mousedown_polygon_redline1 = function() {

	//console.log("mousedown draw_poly="+draw_poly);
		 if (draw_poly_redline1){
		 	polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
			tPolygon_redline1.attr({'path': polyPath_redline1});
			firstX_poly_redline1 = lastX_poly_redline1;
			firstY_poly_redline1 = lastY_poly_redline1;

			//console.log("firstX_poly="+firstX_poly);
		 }
		 else{

			polyPath_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," +(firstY_poly_redline1-delta_y)/global_scale;
		 	tPolygon_redline1.attr({'path': polyPath_redline1});
		 	tPolygon_redline1.attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "#FFF", "fill-opacity" : "0.01"});

			//tPolygon.attr({fill: "none", "fill-opacity": "0.01", stroke: '#0b0000', 'stroke-opacity': "1"});
			 draw_poly_redline1 = true;
		 }

}

var mousemove_polygon_redline1 = function(e,x,y) {

	if (draw_poly_redline1){

		//console.log("mousemove");

		//var text = x+" "+y+" dx="+dx+" dy="+dy;
//		var text = e+" "+x+" "+y;
//		myText.attr({'text': text});

				if (first_point_poly_redline1){
					first_point_poly_redline1 = false;
					firstX_poly_redline1 = x;
					firstY_poly_redline1 = y;
					lastX_poly_redline1 = x;
					lastY_poly_redline1 = y;
					originX_poly_redline1 = x;
					originY_poly_redline1 = y;

					polyPath_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," + (firstY_poly_redline1-delta_y)/global_scale;
				}
				else{
					lastX_poly_redline1 = x;
					lastY_poly_redline1 = y;
				}
			tPath_poly_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," + (firstY_poly_redline1-delta_y)/global_scale;
			tPath_poly_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
			tRubberBand_poly_redline1.attr({'path': tPath_poly_redline1});
	}
}

//END REDLINE Polygon point to point




//BEGIN REDLINE Polyline point to point with arrow



var lastX_poly_redline_pre;
var lastY_poly_redline_pre;



/**
 * Draws interactively a redline polyline with arrow. Prior to calling this method, cvjs_setCurrentRedlineValues() should be called.
 */
function cvjs_drawSpaceObject_RedlineArrowPolyline() {
		cvjs_addHandleFunc_RedlineArrowPolyline();
}

var cvjs_addHandleFunc_RedlineArrowPolyline_started = false;

function cvjs_addHandleFunc_RedlineArrowPolyline(){

	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;


	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,120, '');
	cvjs_addHandleFunc_RedlineArrowPolyline_started = true;


	tPath_poly_redline1 = "M" + firstX_poly_redline1 + "," + firstY_poly_redline1;
	tRubberBand_poly_redline1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_poly_redline1).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "none"});
	polyPath_redline1 = "M" + firstX_poly_redline1 + "," + firstY_poly_redline1;
	tPolygon_redline1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polyPath_redline1).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "#FFF", "fill-opacity": "0.01"});

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


//	console.log("svg canvas"+canvas_width+" "+canvas_height+" "+global_scale);
//	console.log("handle group"+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])+" "+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
//	console.log("viewBox"+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]);
	draw_poly_redline1 = false;
	first_point_poly_redline1 = true;

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});


	handleGroup.mousedown(mousedown_polygon_redline3);
	handleGroup.mousemove(mousemove_polygon_redline3);
	handleGroup.dblclick( polygon_finish_redline3 );


	oldKeyDown = jQuery(document).keydown().bind({});
	jQuery(document).keydown(function(e) {

		if (e.keyCode == 27) {

			if (cvjs_addHandleFunc_RedlineArrowPolyline_started){

				cvjs_addHandleFunc_RedlineArrowPolyline_started = false;
				polygon_finish_redline3();
				jQuery(document).keydown() == oldKeyDown;
			}
		}
	});


}


function cvjs_removeHandleFunc_RedlineArrowPolyline(){
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;

	//console.log("removed handler");
	
	//ÅÖÄ   2018-05-09  we save the screen as a pdf  - this has problems if the user decide not to save redlines, part implementation, 
	try { // 3.1.21j
		if (FileName.indexOf(".pdf")>-1 && cvjs_customPdfFolderFlag ) savepageaspdf(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	}
	catch(err){ console.log("pdf 12: "+err);}
}


var polygon_finish_redline3 = function() {

	var mycoordinate = polyPath_redline1.substring(0, polyPath_redline1.lastIndexOf("L"));
	//console.log(mycoordinate);
	mycoordinate = mycoordinate.substring(0, mycoordinate.lastIndexOf("L"));
	//console.log(mycoordinate);
	mycoordinate = mycoordinate.substring(mycoordinate.lastIndexOf("L")+1);

	if (mycoordinate.indexOf("M")>-1)   // only one line in arrow
		mycoordinate = mycoordinate.substring(mycoordinate.lastIndexOf("M")+1);

	//console.log(mycoordinate);
	var res = mycoordinate.split(",");

	var xCor = Number(res[0]);
	var yCor = Number(res[1]);

	var scaleTriangle = cvjs_currentRedline_strokeWidth;

	if (cvjs_currentRedline_strokeWidth>3)
		scaleTriangle = 3 + (cvjs_currentRedline_strokeWidth-3)/2;

	scaleTriangle = scaleTriangle*cvjs_redlineThickness_scaleFactor;

  	var triangle_design= -4.5*scaleTriangle+","+5.5*scaleTriangle+" "+0.5*scaleTriangle+","+-4.5*scaleTriangle+" "+5.5*scaleTriangle+","+5.5*scaleTriangle;

    var dX = (lastX_poly_redline1-delta_x)/global_scale - xCor;
	var dY = (lastY_poly_redline1-delta_y)/global_scale - yCor;

    //console.log(dX+" "+dY);
    var angleInDegrees = ( Math.atan2(dY,dX) / Math.PI * 180.0);


	//console.log(triangle_design+" degrees "+angleInDegrees);

//
//	  Triangle.transform('T' + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale + 'r' + (angleInDegrees - 270));

	  var Ttrans = 'T' + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale + 'r' + (angleInDegrees - 270);

//	console.log(Ttrans)

	  var Triangle = cvjs_rPaper[cvjs_active_floorplan_div_nr].polyline(triangle_design);
	  Triangle.attr({
		fill: cvjs_currentRedline_color,
		transform: Ttrans
	  });

//	  var triangleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].g( Triangle ); // Group polyline
	//  triangleGroup.transform('t' + parseInt(movePoint.x) + ',' + parseInt(movePoint.y) + 'r' + (movePoint.alpha - 90));
	//triangleGroup.transform('T' + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale + 'r' + (angleInDegrees - 270));


//	polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale+"L" + (originX_poly_redline1-delta_x)/global_scale + "," + (originY_poly_redline1-delta_y)/global_scale;
	polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
	tPolygon_redline1.attr({'path': polyPath_redline1});


	cvjs_removeHandleFunc_RedlineArrowPolyline();
	//console.log("update database!! "+tPolygon);
	tRubberBand_poly_redline1.attr({'path': "M0,0"});

	var triangleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].g( Triangle, tPolygon_redline1 ); // Group polyline


	draw_poly_redline1 = false;
	first_point_poly_redline1 = true;


	//console.log(triangleGroup);

//	cvjs_addVqRedlinesGraphics_newNode(cvjs_currentRedline_underbar, tPolygon_redline1);
	cvjs_addVqRedlinesGraphics_newNodeTrans(cvjs_currentRedline_underbar, triangleGroup, Ttrans, triangle_design, polyPath_redline1);

	cvjs_graphicalObjectCreated('RedlineArrowPolyline');

}


var mousedown_polygon_redline3 = function() {

	//console.log("mousedown draw_poly="+draw_poly);
		 if (draw_poly_redline1){

			if (firstX_poly_redline1 != lastX_poly_redline1){

				lastX_poly_redline_pre = lastX_poly_redline1;
				lastY_poly_redline_pre = lastY_poly_redline1;
			}else{
			//	console.log("here");

			}


		 	polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
			tPolygon_redline1.attr({'path': polyPath_redline1});

			//console.log(polyPath_redline1);


			firstX_poly_redline1 = lastX_poly_redline1;
			firstY_poly_redline1 = lastY_poly_redline1;

			//console.log("firstX_poly="+firstX_poly);
		 }
		 else{

			polyPath_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," +(firstY_poly_redline1-delta_y)/global_scale;
		 	tPolygon_redline1.attr({'path': polyPath_redline1});
		 	tPolygon_redline1.attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "#FFF", "fill-opacity" : "0.01"});

			//tPolygon.attr({fill: "none", "fill-opacity": "0.01", stroke: '#0b0000', 'stroke-opacity': "1"});
			 draw_poly_redline1 = true;
		 }

}

var mousemove_polygon_redline3 = function(e,x,y) {

	if (draw_poly_redline1){

		//console.log("mousemove");

		//var text = x+" "+y+" dx="+dx+" dy="+dy;
//		var text = e+" "+x+" "+y;
//		myText.attr({'text': text});

				if (first_point_poly_redline1){
					first_point_poly_redline1 = false;
					firstX_poly_redline1 = x;
					firstY_poly_redline1 = y;
					lastX_poly_redline1 = x;
					lastY_poly_redline1 = y;
					originX_poly_redline1 = x;
					originY_poly_redline1 = y;

					polyPath_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," + (firstY_poly_redline1-delta_y)/global_scale;
				}
				else{

					lastX_poly_redline1 = x;
					lastY_poly_redline1 = y;
				}
			tPath_poly_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," + (firstY_poly_redline1-delta_y)/global_scale;
			tPath_poly_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
			tRubberBand_poly_redline1.attr({'path': tPath_poly_redline1});
	}
}

//END REDLINE Polyline point to point with arrow






//BEGIN REDLINE Filled Polygon

/**
 * Draws interactively a redline polygon. Prior to calling this method, cvjs_setCurrentRedlineValues() should be called.
 */
function cvjs_drawSpaceObject_RedlineFilledPolygon() {
		cvjs_addHandleFunc_RedlineFilledPolygon();
}

var cvjs_addHandleFunc_RedlineFilledPolygon_started = false;

function cvjs_addHandleFunc_RedlineFilledPolygon(){

	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;


	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,120, '');
	cvjs_addHandleFunc_RedlineFilledPolygon_started = true;

	tPath_poly_redline1 = "M" + firstX_poly_redline1 + "," + firstY_poly_redline1;
	tRubberBand_poly_redline1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_poly_redline1).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor,  fill: cvjs_currentRedline_color, "fill-opacity":"0.1"});
	polyPath_redline1 = "M" + firstX_poly_redline1 + "," + firstY_poly_redline1;
	tPolygon_redline1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polyPath_redline1).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor,  fill: cvjs_currentRedline_color, "fill-opacity":"0.1"});

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


//	console.log("svg canvas"+canvas_width+" "+canvas_height+" "+global_scale);
//	console.log("handle group"+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])+" "+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
//	console.log("viewBox"+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]);
	draw_poly_redline1 = false;
	first_point_poly_redline1 = true;

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});



	handleGroup.mousedown(mousedown_polygon_redline2);
	handleGroup.mousemove(mousemove_polygon_redline2);
	handleGroup.dblclick( polygon_finish_redline2 );

	oldKeyDown = jQuery(document).keydown().bind({});
	jQuery(document).keydown(function(e) {

		if (e.keyCode == 27) {

			if (cvjs_addHandleFunc_RedlineFilledPolygon_started){

				cvjs_addHandleFunc_RedlineFilledPolygon_started = false;
				polygon_finish_redline2();
				jQuery(document).keydown() == oldKeyDown;
			}
		}
	});





}


function cvjs_removeHandleFunc_RedlineFilledPolygon(){
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("removed handler");


	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
	
	
	//ÅÖÄ   2018-05-09  we save the screen as a pdf  - this has problems if the user decide not to save redlines, part implementation, 
	try { // 3.1.21j
		if (FileName.indexOf(".pdf")>-1 && cvjs_customPdfFolderFlag ) savepageaspdf(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	}
	catch(err){ console.log("pdf 12: "+err);}

}


var polygon_finish_redline2 = function() {


	polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale+"L" + (originX_poly_redline1-delta_x)/global_scale + "," + (originY_poly_redline1-delta_y)/global_scale+"Z";   // end polygon
//	polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
	tPolygon_redline1.attr({'path': polyPath_redline1});


	cvjs_removeHandleFunc_RedlineFilledPolygon();

	//console.log("update database!! "+tPolygon);

	tRubberBand_poly_redline1.attr({'path': "M0,0"});

	draw_poly_redline1 = false;
	first_point_poly_redline1 = true;

	cvjs_addVqRedlinesGraphics_newNodeFill(cvjs_currentRedline_underbar, tPolygon_redline1, cvjs_currentRedline_color, 0.1);

	cvjs_graphicalObjectCreated('RedlineFilledPolygon');

}


var mousedown_polygon_redline2 = function() {

	//console.log("mousedown draw_poly="+draw_poly);
		 if (draw_poly_redline1){
		 	polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
			tPolygon_redline1.attr({'path': polyPath_redline1});
			firstX_poly_redline1 = lastX_poly_redline1;
			firstY_poly_redline1 = lastY_poly_redline1;

			//console.log("firstX_poly="+firstX_poly);
		 }
		 else{

			polyPath_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," +(firstY_poly_redline1-delta_y)/global_scale;
		 	tPolygon_redline1.attr({'path': polyPath_redline1});
		 	tPolygon_redline1.attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: cvjs_currentRedline_color, "fill-opacity":"0.1"});

			//tPolygon.attr({fill: "none", "fill-opacity": "0.01", stroke: '#0b0000', 'stroke-opacity': "1"});
			 draw_poly_redline1 = true;
		 }

}

var mousemove_polygon_redline2 = function(e,x,y) {

	if (draw_poly_redline1){

		//console.log("mousemove");

		//var text = x+" "+y+" dx="+dx+" dy="+dy;
//		var text = e+" "+x+" "+y;
//		myText.attr({'text': text});

				if (first_point_poly_redline1){
					first_point_poly_redline1 = false;
					firstX_poly_redline1 = x;
					firstY_poly_redline1 = y;
					lastX_poly_redline1 = x;
					lastY_poly_redline1 = y;
					originX_poly_redline1 = x;
					originY_poly_redline1 = y;

					polyPath_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," + (firstY_poly_redline1-delta_y)/global_scale;
				}
				else{
					lastX_poly_redline1 = x;
					lastY_poly_redline1 = y;
				}
			tPath_poly_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," + (firstY_poly_redline1-delta_y)/global_scale;
			tPath_poly_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
			tRubberBand_poly_redline1.attr({'path': tPath_poly_redline1});
	}
}

//END REDLINE Filled Polygon









// BEGIN - Draw REDLINE Freehand Polygon
var originX_poly_red = 0;
var originY_poly_red = 0;
var firstX_poly_red = 0;
var firstY_poly_red = 0;
var lastX_poly_red = 400;
var lastY_poly_red = 300;

var tPath_poly_red;
var tRubberBand_poly_red;
var polyPath_red;
var tPolygon_red;
var draw_poly_red = false;
var first_point_poly_red = true;

var scaleRedline_LineSize = 1;
var scaleFactor_RedlineLineSize = 200;



function cvjs_addHandleFunc_RedlinePolygonFreehand(){

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,120, '');

	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;


	 if ( (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])> (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr]))
	 	scaleRedline_LineSize = (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr])/scaleFactor_RedlineLineSize;
	 else
	 	scaleRedline_LineSize = (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])/scaleFactor_RedlineLineSize;


	tPath_poly_red = "M" + firstX_poly_red + "," + firstY_poly_red;
	tRubberBand_poly_red = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_poly_red).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "none"});
	polyPath_red = "M" + firstX_poly_red + "," + firstY_poly_red;
	tPolygon_red = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polyPath_red).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "#FFF", "fill-opacity": "0.01" });

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


//	console.log("svg canvas"+canvas_width+" "+canvas_height+" "+global_scale);
//	console.log("handle group"+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])+" "+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
//	console.log("viewBox"+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]);
	draw_poly_red = false;
	first_point_poly_red = true;

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});


	handleGroup.mousedown(mousedown_redlinepolygon);
	handleGroup.mousemove(mousemove_redlinepolygon);
	handleGroup.mouseup( redlinepolygon_finish );
}


function cvjs_removeHandleFunc_RedlinePolygonFreehand(){
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("removed handler");

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
	
	
	//ÅÖÄ   2018-05-09  we save the screen as a pdf  - this has problems if the user decide not to save redlines, part implementation, 
	try { // 3.1.21j
		if (FileName.indexOf(".pdf")>-1 && cvjs_customPdfFolderFlag ) savepageaspdf(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	}
	catch(err){ console.log("pdf 12: "+err);}

}


var redlinepolygon_finish = function() {

	polyPath_red += "L" + (lastX_poly_red-delta_x)/global_scale + "," + (lastY_poly_red-delta_y)/global_scale+"L" + (originX_poly_red-delta_x)/global_scale + "," + (originY_poly_red-delta_y)/global_scale;
	tPolygon_red.attr({'path': polyPath_red});

	cvjs_removeHandleFunc_RedlinePolygonFreehand();

	tRubberBand_poly_red.attr({'path': "M0,0"});


	draw_poly_red = false;
	first_point_poly_red = true;


	cvjs_addVqRedlinesGraphics_newNode(cvjs_currentRedline_underbar, tPolygon_red);

//console.log("before setting up redline data object"); variables set in _newNode
	// cvjs_setUpVqRedlines_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentRedline_underbar);

	cvjs_graphicalObjectCreated('RedlineFreehand');

}


function cvjs_setUpVqRedlines_currentNode(rPaper, cvjs_currentRedline_underbar){


	for (var redl in vqRedlines){
		redline_node = vqRedlines[redl].data("node");

		if (redline_node == cvjs_currentRedline_underbar){

			vqRedlines[redl].data("name", cvjs_currentRedline_name);
			vqRedlines[redl].data("id", cvjs_currentRedline_id);
			vqRedlines[redl].data("layer", cvjs_currentRedline_layer);
			vqRedlines[redl].data("group", cvjs_currentRedline_group);
			vqRedlines[redl].data("color", cvjs_currentRedline_color);
			vqRedlines[redl].data("strokeWidth", cvjs_currentRedline_strokeWidth);
			vqRedlines[redl].data("fill", cvjs_currentRedline_fill);
			vqRedlines[redl].data("fill_opacity", cvjs_currentRedline_fill_opacity);
			vqRedlines[redl].data("transform", cvjs_currentRedline_transform);
			vqRedlines[redl].data("username", cvjs_currentRedline_username);
			vqRedlines[redl].data("userid", cvjs_currentRedline_userid);
			vqRedlines[redl].data("currentPage", cvjs_currentRedline_currentPage);

			vqRedlines[redl].data("triangle_design",  cvjs_currentRedline_triangle_design);
			vqRedlines[redl].data("polypath_arrow",  cvjs_currentRedline_polypath_arrow);
			vqRedlines[redl].data("redline_text", cvjs_currentRedline_redline_text);
			vqRedlines[redl].data("drawingRotation", cvjs_currentRedline_drawingRotation);

			
		}

	}

}


function cvjs_setUpVqRedlines_deleteNode(delete_redline){
	var redline_node;
	
		
	for (var redl in vqRedlines){
		redline_node = vqRedlines[redl].data("node");

		//console.log(redline_node+" "+delete_redline);
		var locked = vqRedlines[redl].data("locked");
		
		
		
//		if (cvjs_debug) console.log(redline_node+" "+locked+" delete_redline "+delete_redline);

		if (locked){
			if (redline_node == delete_redline){

				var status = languageTable.languages[cvjs_currentLanguage].InfoMessageModal.RedlinesLocked+vqRedlines[redl].data("username");
				jQuery('#cvjs_informationModalText').html(status);
				jQuery('#info_messageModal').modal('show');
			}

		}
		else{
			if (redline_node == delete_redline){
				// we simply hide it by making it very small - remove the item when save
				vqRedlines[redl].data("deleted", true);
				var dTransform = "S0.001";
				vqRedlines[redl].attr({'transform': dTransform, "opacity" : "0.01"});
//				var dTransform = "S2.001";
//				vqRedlines[redl].attr({'transform': dTransform, "opacity" : "1.00"});
				
				
				console.log(vqRedlines[redl].data("polypath_arrow"));
				
		if (cvjs_debug) console.log("We transform SMALL: "+delete_redline);
		
		
		
		
				
				
			}
		}
	}
	// cvjs_setUpVqRedlines_currentNode not implemented
	//console.log("remove current redline");
	

	//ÅÖÄ   2018-05-09  we save the screen as a pdf  - this has problems if the user decide not to save redlines, part implementation, 
	try { // 3.1.21j
		if (FileName.indexOf(".pdf")>-1 && cvjs_customPdfFolderFlag ) savepageaspdf(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	}
	catch(err){ console.log("pdf 12: "+err);}
	
	
}







var mousedown_redlinepolygon = function(e,x,y) {


	x = x+document.body.scrollLeft;
	y = y+document.body.scrollTop;

	 if (draw_poly_red){
	 }
	 else{
		polyPath_red = "M" + (x-delta_x)/global_scale + "," +(y-delta_y)/global_scale;
		 draw_poly_red = true;
	 }
}

var mousemove_redlinepolygon = function(e,x,y) {


	x = x+document.body.scrollLeft;
	y = y+document.body.scrollTop;


	if (draw_poly_red){

			if (first_point_poly_red){
				first_point_poly_red = false;
				firstX_poly_red = x;
				firstY_poly_red = y;
				lastX_poly_red = x;
				lastY_poly_red = y;
				originX_poly_red = x;
				originY_poly_red = y;

			}
			else{
				lastX_poly_red = x;
				lastY_poly_red = y;
			}
			tPath_poly_red = "M" + (firstX_poly_red-delta_x)/global_scale + "," + (firstY_poly_red-delta_y)/global_scale;
			tPath_poly_red += "L" + (lastX_poly_red-delta_x)/global_scale + "," + (lastY_poly_red-delta_y)/global_scale;
			tRubberBand_poly_red.attr({'path': tPath_poly_red});

			var fac1 = Math.pow((firstX_poly_red-delta_x)/global_scale - (lastX_poly_red-delta_x)/global_scale, 2);
			var fac2 = Math.pow((firstY_poly_red-delta_y)/global_scale - (lastY_poly_red-delta_y)/global_scale, 2);

			var relativeLineLength = Math.sqrt(fac1 + fac2);

			if (relativeLineLength >scaleRedline_LineSize){

//console.log(polyPath_red);
				polyPath_red += "L" + (lastX_poly_red-delta_x)/global_scale + "," + (lastY_poly_red-delta_y)/global_scale;
				tPolygon_red.attr({'path': polyPath_red});
				first_point_poly_red = true;

			}
	}
}

// END - Draw REDLINE Polygon




// BEGIN - CopyCircle

/**
 * Draws interactively a copy of a previously defined cicle object. The data object of the circle is defined as a SpaceObject. Prior to calling this method, cvjs_setCurrentSpaceObjectNodeValues() should be called.
 */

function cvjs_drawSpaceObject_CopyCircle(){

	cvjs_addHandleFunc_CopyCircle();

}



function cvjs_addHandleFunc_CopyCircle(){

//console.log("1 ");

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;



	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});



	handleGroup.mousedown(mousedown_copycircle);
}

function cvjs_removeHandleFunc_CopyCircle(){
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("removed handler");
}


var mousedown_copycircle = function(e,x,y) {


//console.log(e+" "+x+" "+y);

	tRubberBand_c = cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(0, 0, 1, 1).attr({stroke: "#b00000", "stroke-width" : "0.01", "fill" : "none", "fill-opacity" : "0.01", "opacity" : "0.01"});
//	tTransform_c = "t" + x + "," + y;
	tTransform_c = "t" + (x-delta_x)/global_scale + "," + (y-delta_y)/global_scale;
	tTransform_c += "S"+(delta);

//console.log(tTransform_c);

	tRubberBand_c.attr({'transform': tTransform_c , "opacity" : "1"});

	tRubberBand_c.attr({	fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1" });

	cvjs_removeHandleFunc_CopyCircle();

	cvjs_addVqRoomsGraphics_newNode_circle(cvjs_currentNode_underbar, tRubberBand_c);
	cvjs_setUpVqRooms_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentNode_underbar);

	cvjs_graphicalObjectCreated('CopyCircle');


}

// END - CopyCircle




// BEGIN - StickyNote

var mouseMoveStickyNote = false;
var tRubberBand_sn;


/**
 * Draws interactively a stickynote. The data object of the sticky note is defined as a StickyNote. Prior to calling this method, cvjs_setCurrentStickyNoteValues() should be called.
 */
function cvjs_drawStickyNoteDirect(){
		
	cvjs_addHandleFunc_StickyNote();
}


function cvjs_addHandleFunc_StickyNote(){

//console.log("1 ");

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	
	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});

//window.alert("make stickynote");	
	
	// we change to mouse UP, so same as for sticky note implementation
//	handleGroup.mousedown(mousedown_stickynote);
	handleGroup.mouseup(mouseup_stickynote);


	mouseMoveStickyNote = false;
	handleGroup.mousemove(mousemove_stickynote);

}

function cvjs_removeHandleFunc_StickyNote(){
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("removed handler");

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
	
	
	//ÅÖÄ   2018-05-09  we save the screen as a pdf  - this has problems if the user decide not to save redlines, part implementation, 
	try { // 3.1.21j
		if (FileName.indexOf(".pdf")>-1 && cvjs_customPdfFolderFlag ) savepageaspdf(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	}
	catch(err){ console.log("pdf 12: "+err);}

}

var scaleNote = 1;
var scaleFactorNotes = 600; //300

var mousemove_stickynote = function(e,x,y) {


	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;

	console.log(delta_x+"  "+delta_y);


	if (mouseMoveStickyNote == false){


		// 3.1.21k

		var rightadjustment = 0;
		if (cvjs_currentStickyNote_id<10) rightadjustment = 3;   // 30

// this is it								  
		tRubberBand_sn = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0.01,0.01h20.0v20.0h-20.0v-20.0Z").attr({stroke: "#000000", "stroke-width" : "1.0","fill" : "none"}),cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M7.0,12.0h1.3M9.5,12.0h3.5M11.25,12v5M9.75,12v1.75M12.75,12v1.75M10.5,17h1.5M7,13.5h1.3M7,15.25h3M7,17.0h2.2").attr({stroke: "#000000", "stroke-width" : "0.5", "fill" : "none"}),
								  cvjs_rPaper[cvjs_active_floorplan_div_nr].text(3+rightadjustment,9,"#"+cvjs_currentStickyNote_id).attr({"font-size": "8px", "font-style": "italic", stroke: "#000000", "stroke-width" : ".2", "fill" : "#000000"})
								  )   ;

//
//		tRubberBand_sn = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0.0,0.0h200.0v200.0h-200.0v-200.0Z").attr({stroke: "#000000", "stroke-width" : "10.0","fill" : "none"}),cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M70.0,120.0h13.0M95.0,120.0h35.0M112.5,120.0v50.0M97.5,120.0v17.5M127.5,120.0v17.5M105.0,170.0h15.0M70.0,135.0h13.0M70.0,152.5h30.0M70.0,170.0h22.0").attr({stroke: "#000000", "stroke-width" : "5.0", "fill" : "none"}),
//								  cvjs_rPaper[cvjs_active_floorplan_div_nr].text(30+rightadjustment,90,"#"+cvjs_currentStickyNote_id).attr({"font-size": "80px", "font-style": "italic", stroke: "#000000", "stroke-width" : ".2", "fill" : "#000000"})
//								  )   ;


								  
		mouseMoveStickyNote = true;
	}

	x = x+document.body.scrollLeft;  // test - moving click outside of note, cannot make note appear behind handleGroup, therefore translate
	y = y+document.body.scrollTop;   // test 
			
	scaleNote = 1;
	scaleFactorNotes = 600.0; //300

	 if ( (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])> (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr]))
	 	scaleNote = (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	 else
	 	scaleNote = (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	
//	console.log(" x "+ x+"  x-delta_x "+ (x-delta_x)+"  "+scaleNote+"  "+global_scale);
	
	tTransform_c = "T" + ((x-delta_x)/global_scale + scaleNote*10.0)  + "," + ((y+scaleNote*0*global_scale-delta_y)/global_scale + (scaleNote*10.0));
	tTransform_c += "S"+(scaleNote);               
	
//console.log(tTransform_c);	
		
//	var ellipseTrans = "T"+((firstX_r_redline-delta_x)/global_scale+lastX_r_redline/global_scale/2)  + "," + ((firstY_r_redline-delta_y)/global_scale +lastY_r_redline/global_scale/2)+"S"+lastX_r_redline/global_scale/2+","+lastY_r_redline/global_scale/2;
		
		
	tRubberBand_sn.attr({'transform': tTransform_c});	
}


//var mousedown_stickynote = function(e,x,y) {   // 2016-09-29
var mouseup_stickynote = function(e,x,y) {

//window.alert("mouse_up scaleNote "+scaleNote+"mouseMoveStickyNote "+mouseMoveStickyNote+" x"+x+" x "+e.pageX);

	if (mouseMoveStickyNote){

		tTransform_c = "t0,0S"+(scaleNote/100);
		tRubberBand_sn.attr({'transform': tTransform_c , "opacity" : "0.0"});
		tRubberBand_sn.attr({fill: 'none', "fill-opacity": "0.0", stroke: '#000', 'stroke-opacity': "0.0" });
		
		// 3.1.21j
		tRubberBand_sn.remove();
	}

	var rightadjustment = 0;
	if (cvjs_currentStickyNote_id<10) rightadjustment = 3;
		
	
	tRubberBand_c = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0.01,0.01h20.0v20.0h-20.0v-20.0Z").attr({stroke: "#000000", "stroke-width" : "1.0"}),cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M7,12h1.3M9.5,12h3.5M11.25,12v5M9.75,12v1.75M12.75,12v1.75M10.5,17h1.5M7,13.5h1.3M7,15.25h3M7,17.0h2.2").attr({stroke: "#000000", "stroke-width" : "0.5"}),
								  cvjs_rPaper[cvjs_active_floorplan_div_nr].text(3+rightadjustment,9,"#"+cvjs_currentStickyNote_id).attr({"font-size": "8px", "font-style": "italic", stroke: "#000000", "stroke-width" : "0.3", "fill" : "#000000", "fill-opacity" : 1.0})							  
								);
								  
	x = x+document.body.scrollLeft;  // test - moving click outside of note, cannot make note appear behind handleGroup, therefore translate
	y = y+document.body.scrollTop;   // test 
			
	scaleNote = 1;
	scaleFactorNotes = 600; //300

	 if ( (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])> (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr]))
	 	scaleNote = (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	 else
	 	scaleNote = (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	
//	console.log(" x "+ x+"  x-delta_x "+ (x-delta_x)+"  "+scaleNote+"  "+global_scale);
	
	tTransform_c = "T" + ((x-delta_x)/global_scale + scaleNote*10.0)  + "," + ((y+-delta_y)/global_scale + (scaleNote*10.0));
		
	tTransform_c += "S"+(scaleNote);
	tRubberBand_c.attr({'transform': tTransform_c , "opacity" : "1"});
	tRubberBand_c.attr({	fill: '#FFF', "fill-opacity": "0.8", stroke: '#000', 'stroke-opacity': "1" });

	
	
	
	cvjs_currentStickyNote_transform = tTransform_c;
	cvjs_removeHandleFunc_StickyNote();	
	cvjs_addVqStickyNotesGraphics_newNode(cvjs_currentStickyNote_underbar, tRubberBand_c);
	cvjs_setUpVqStickyNotes_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentStickyNote_underbar);
	cvjs_graphicalObjectCreated('StickyNote');
}

// END - StickyNote


// BEGIN - Move StickyNote

var mouseMoveFlagStickyNote = false;

function cvjs_addHandleFunc_MoveStickyNote(){

//console.log("1 ");

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});



	mouseMoveFlagStickyNote = false;
	handleGroup.mousemove(mousemove_movestickynote);
	handleGroup.mousedown(mousedown_movestickynote);

}

function cvjs_removeHandleFunc_MoveStickyNote(){
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("removed handler");
	
	
	//ÅÖÄ   2018-05-09  we save the screen as a pdf  - this has problems if the user decide not to save redlines, part implementation, 
	try { // 3.1.21j
		if (FileName.indexOf(".pdf")>-1 && cvjs_customPdfFolderFlag ) savepageaspdf(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	}
	catch(err){ console.log("pdf 12: "+err);}
}


var mousemove_movestickynote = function(e,x,y) {


	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


	if (mouseMoveFlagStickyNote == false){

	
		var sticky_note  = cvjs_StickyNoteClicked();
		var id = 0;

		for (var note in vqStickyNotes){
			var noteUnderbar = vqStickyNotes[note].data("node");
			if (sticky_note == noteUnderbar){
				id = vqStickyNotes[note].data("id")
			}
		}

		// 3.1.21k

		var rightadjustment = 0;
		if (cvjs_currentStickyNote_id<10) rightadjustment = 3;

// this is it								  
		tRubberBand_c = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0,0h20v20h-20v-20Z").attr({stroke: "#000000", "stroke-width" : "1.0","fill" : "none"}),cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M7,12h1.3M9.5,12h3.5M11.25,12v5M9.75,12v1.75M12.75,12v1.75M10.5,17h1.5M7,13.5h1.3M7,15.25h3M7,17.0h2.2").attr({stroke: "#000000", "stroke-width" : "0.5", "fill" : "none"}),
								  cvjs_rPaper[cvjs_active_floorplan_div_nr].text(3+rightadjustment,9,"#"+cvjs_currentStickyNote_id).attr({"font-size": "8px", "font-style": "italic", stroke: "#000000", "stroke-width" : ".2", "fill" : "#000000"})
								  )   ;

		mouseMoveFlagStickyNote = true;
	}


	x = x+document.body.scrollLeft;  // test - moving click outside of note, cannot make note appear behind handleGroup, therefore translate
	y = y+document.body.scrollTop;   // test 
			
	scaleNote = 1;
	scaleFactorNotes = 600; //300

	 if ( (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])> (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr]))
	 	scaleNote = (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	 else
	 	scaleNote = (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	
//	console.log(" x "+ x+"  x-delta_x "+ (x-delta_x)+"  "+scaleNote+"  "+global_scale);
	
	tTransform_c = "T" + ((x-delta_x)/global_scale + scaleNote*10.0)  + "," + ((y+scaleNote*0*global_scale-delta_y)/global_scale + (scaleNote*10.0));	
	tTransform_c += "S"+(scaleNote);
	tRubberBand_c.attr({'transform': tTransform_c});	


}


var mousedown_movestickynote = function(e,x,y) {


	// 3.1.21k
	x = x+document.body.scrollLeft;  // test - moving click outside of note, cannot make note appear behind handleGroup, therefore translate
	y = y+document.body.scrollTop;   // test 
			
	scaleNote = 1;
	scaleFactorNotes = 600; //300

	 if ( (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])> (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr]))
	 	scaleNote = (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	 else
	 	scaleNote = (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	
//	console.log(" x "+ x+"  x-delta_x "+ (x-delta_x)+"  "+scaleNote+"  "+global_scale);	
	tTransform_c = "T" + ((x-delta_x)/global_scale + scaleNote*10.0)  + "," + ((y+scaleNote*0*global_scale-delta_y)/global_scale + (scaleNote*10.0));
	tTransform_c += "S"+(scaleNote);	
	

	var id = cvjs_StickyNoteClicked();
	var n_index = cvjs_StickyNotes_arrayIndex(id);

	vqStickyNotes[n_index].attr({'transform': tTransform_c, "fill-opacity": "0.8", 'stroke-opacity': "1" });
	vqStickyNotes[n_index].data("transform", tTransform_c );

	cvjs_removeHandleFunc_MoveStickyNote();


	tTransform_c += "t0,0S"+(scaleNote/100);
	tRubberBand_c.attr({'transform': tTransform_c , "opacity" : "0.0"});
	tRubberBand_c.attr({	fill: '#FFF', "fill-opacity": "0.0", stroke: '#000', 'stroke-opacity': "0.0" });
	tRubberBand_c.remove(); // 3.1.21j


}

// END - Move StickyNote







// END - draw methods



function AbsDiff(a ,b)
{
	return Math.abs(a-b)
}

function DoMouseDown(x, y, active_floorplan_div_nr)
{

	cvjs_active_floorplan_div_nr = active_floorplan_div_nr;

	pdx = 0;
	pdy = 0;
	basex = 0;
	basey = 0;
	firstx = x;
	firsty = y;
	dx = 0;
	dy = 0;
//	vbx = viewBox[cvjs_active_floorplan_div_nr].X;
//	vby = viewBox[cvjs_active_floorplan_div_nr].Y;
	bMouseDown = true;
	bTempMouseDown = false;
	bPan = false;
	thumbsMode = true;

if (cvjs_debug) console.log("DoMouseDown - setup"+x+" "+y+" firstx "+firstx+"  firsty "+firsty+ "  active "+cvjs_active_floorplan_div_nr);



	var svg = document.getElementsByTagName('svg')[0];
	var box = svg.getAttribute('viewBox');
	var vbox = box.split(" ");

	vbx = parseInt(vbox[0]);
	vby = parseInt(vbox[1]);



	if (!thumb_loaded){
		thumb_loaded = true;
		try{
//			drawThumb(cvjs_rPaper[cvjs_active_floorplan_div_nr]);
		}
		catch(err){
			//  allow the code to work with both version 1.1 and 1.2
			//console.log(err);
		}
	}

//console.log("bMouseDown="+bMouseDown);

	//lastObj[cvjs_active_floorplan_div_nr] = null;  // 1x

}


function DoMouseOut(mx, my)
{



	if (bMouseDown)
		{
		if (bPan)
			{
			dx = mx - firstx;
			dy = my - firsty;

			pdx = dx*zoomScale;
			pdy = dy*zoomScale;
			basex = dx;
			basey = dy;

			viewBox[cvjs_active_floorplan_div_nr].X = vbx - pdx;
			viewBox[cvjs_active_floorplan_div_nr].Y = vby - pdy;

			var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
			//console.log("attr_2="+attr_2);
			var json_obj = jQuery.parseJSON(attr_2);
			cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);

			// NNN setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], vbx - pdx, vby - pdy,viewBoxWidth[cvjs_active_floorplan_div_nr],viewBoxHeight[cvjs_active_floorplan_div_nr]);

			bTempMouseDown = true;
			}
		}



}

function DoMouseOver(mx, my)
{
	if ((bTempMouseDown) || (bMouseDown))
		{
		bTempMouseDown = false;
		bMouseDown = true;
		}
}

function DoMouseUp(x, y)
{

	bMouseDown = false;
	bTempMouseDown = false;


	if (bPan)
		{
		viewBox[cvjs_active_floorplan_div_nr].X = vbx - pdx;
		viewBox[cvjs_active_floorplan_div_nr].Y = vby - pdy;

		var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
		//console.log("attr_2="+attr_2);
		var json_obj = jQuery.parseJSON(attr_2);
		cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);

		//NNN setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], vbx - pdx, vby - pdy, viewBoxWidth[cvjs_active_floorplan_div_nr],viewBoxHeight[cvjs_active_floorplan_div_nr]);
		}


	if (bPan){

		try{

//			layer_thumb.hide();
//			layers_all.show();
//			layer_vqrooms[cvjs_active_floorplan_div_nr].show();

			if (panWithThumb){
				layers_all.attr(show);
				layer_thumb.attr(hide);
			}

			layer_vqrooms[cvjs_active_floorplan_div_nr].attr(show);


		}
		catch(err){
			//  allow the code to work with both version 1.1 and 1.2
			console.log("txx "+err);
		}

	}
	else{
		tip[cvjs_active_floorplan_div_nr].show();                    // only show tooltip if no panning

	}


		preventDrag = true;

		try{
				if (totalDragStart == 2){

					e.preventDefault();
					e.stopPropagation();

				}

		}

		catch(err){
			bPan = false;
		}



			try{

				if (totalDragStart == 2 ){


					viewBox[cvjs_active_floorplan_div_nr].X = viewBox_initX[cvjs_active_floorplan_div_nr];
					viewBox[cvjs_active_floorplan_div_nr].Y = viewBox_initY[cvjs_active_floorplan_div_nr];
					vBHo = viewBoxHeight_init[cvjs_active_floorplan_div_nr];
					vBWo = viewBoxWidth_init[cvjs_active_floorplan_div_nr];
					viewBoxWidth[cvjs_active_floorplan_div_nr] = viewBoxWidth_init[cvjs_active_floorplan_div_nr];
					viewBoxHeight[cvjs_active_floorplan_div_nr] = viewBoxHeight_init[cvjs_active_floorplan_div_nr];
					viewBoxWidth[cvjs_active_floorplan_div_nr] /= deltaDynamic/deltaBase;
					viewBoxHeight[cvjs_active_floorplan_div_nr]/= deltaDynamic/deltaBase;

					viewBox[cvjs_active_floorplan_div_nr].X -= (viewBoxWidth[cvjs_active_floorplan_div_nr] - vBWo) / 2;
					viewBox[cvjs_active_floorplan_div_nr].Y -= (viewBoxHeight[cvjs_active_floorplan_div_nr] - vBHo) / 2;


					//viewBox[cvjs_active_floorplan_div_nr].X -= (firstFingerX-firstFingerX_init);
					//viewBox[cvjs_active_floorplan_div_nr].Y -= (firstFingerY-firstFingerY_init);

					//viewBox[cvjs_active_floorplan_div_nr].X -= (firstFingerX-firstFingerX_init)*(deltaDynamic/deltaBase);
					//viewBox[cvjs_active_floorplan_div_nr].Y -= (firstFingerY-firstFingerY_init)*(deltaDynamic/deltaBase);

//NNN					zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/cvjs_rPaper[cvjs_active_floorplan_div_nr].width;

//console.log("x viewBoxWidth[cvjs_active_floorplan_div_nr] "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" rpWidth[cvjs_active_floorplan_div_nr] "+rpWidth[cvjs_active_floorplan_div_nr]);

					zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/rpWidth[cvjs_active_floorplan_div_nr];

					var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
					//console.log("attr_2="+attr_2);
					var json_obj = jQuery.parseJSON(attr_2);
					cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);


					//setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], viewBox[cvjs_active_floorplan_div_nr].X, viewBox[cvjs_active_floorplan_div_nr].Y, viewBoxWidth[cvjs_active_floorplan_div_nr], viewBoxHeight[cvjs_active_floorplan_div_nr]);
//NNN					cvjs_rPaper[cvjs_active_floorplan_div_nr].setViewBox(viewBox[cvjs_active_floorplan_div_nr].X, viewBox[cvjs_active_floorplan_div_nr].Y, viewBoxWidth[cvjs_active_floorplan_div_nr], viewBoxHeight[cvjs_active_floorplan_div_nr]);

//var string_X = " viewBox[cvjs_active_floorplan_div_nr].X="+viewBox[cvjs_active_floorplan_div_nr].X+" viewBox[cvjs_active_floorplan_div_nr].Y="+viewBox[cvjs_active_floorplan_div_nr].Y+"secondFingerX="+secondFingerX+" secondFingerY="+secondFingerY+" deltaDynamic="+deltaDynamic+" cvjs_rPaper[cvjs_active_floorplan_div_nr].width="+cvjs_rPaper[cvjs_active_floorplan_div_nr].width+" viewBoxWidth[cvjs_active_floorplan_div_nr]="+viewBoxWidth[cvjs_active_floorplan_div_nr]+" vBWo="+vBWo+" firstFingerX-firstFingerX1="+(firstFingerX-firstFingerX1);
//jQuery('#temperature').css('color', '#F000FF');
//jQuery("#temperature").html(string_X);


				}

			}
			catch(err){
				//  allow the code to work with both version 1.1 and 1.2
				//console.log(err);
			}




			try{



				if (panWithThumb){
					layers_all.attr(show);
					layer_thumb.attr(hide);
				}

//				layer_thumb.hide();
//				layers_all.show();
//				layer_vqrooms[cvjs_active_floorplan_div_nr].show();

				layer_vqrooms[cvjs_active_floorplan_div_nr].attr(show);

			}
			catch(err){
				//  allow the code to work with both version 1.1 and 1.2
				console.log(err);
			}

	//console.log("ping! mouse up");	// moving this up breaks pan on ipad
	bPan = false;




}

var basemx=0;
var basemy=0;

function DoMouseMove(mx, my)
{




//console.log("are we here! 1 mx "+mx+" my "+my);


//console.log("bMouseDown="+bMouseDown+" mx="+mx+" bpan"+bPan);
//console.log(" totalDragStart="+totalDragStart+"  mx="+mx+" my="+my);


//string_X = "start mousemove "+totalDragStart+" mx="+mx+" my="+my;
//jQuery('#location').css('color', '#FF00FF');
//jQuery("#location").html(string_X);

	if (!bPan){
		basemx=mx;
		basemy=my;
	}


	if (thumbsMode && bPan && ((basemx-mx) != 0) && ((basemy-my) != 0)){

		try{
			thumbsMode = false;

//			layer_thumb.show();
//			layers_all.hide();
//			layer_vqrooms[cvjs_active_floorplan_div_nr].hide();

			if (panWithThumb){
//				layers_all.hide();
//				layer_thumb.show();
				layers_all.attr(hide);
				layer_thumb.attr(show);
				// this is for SVG files created with TMS   2017-09-04
				all_layer_off_thumb_on();

			}
			
			// NOTE!!!
			// 2018-01-15 removed this statement, may obstruct panning
			//layer_vqrooms[cvjs_active_floorplan_div_nr].attr(hide);

			
		}
		catch(err){
			//  allow the code to work with both version 1.1 and 1.2
			console.log("t1 "+err);
		}
	}


//console.log("are we here! 2");
	
	
	if (bMouseDown && !bPan){

	
	
//	console.log("are we here! 3");

		bPan = true;

		dragInsidePolygon = true;

		try{
//			thumbsMode = false;   2016-01-11

//			layer_thumb.show();
//			layers_all.hide();
//			layer_vqrooms[cvjs_active_floorplan_div_nr].hide();

/*

			if (panWithThumb){
//				layers_all.show();
//				layer_thumb.hide();
				layers_all.attr(hide);
				layer_thumb.attr(show);
			}

			layer_vqrooms[cvjs_active_floorplan_div_nr].attr(hide);
*/

		}
		catch(err){
			//  allow the code to work with both version 1.1 and 1.2
			console.log(err);
		}


	}


		try{

//if (bMouseDown == false || totalDragStart !=0) console.log("bMouseDown="+bMouseDown+" totalDragStart="+totalDragStart);


//string_X = "before if mmove "+totalDragStart+" mx="+mx+" my="+my;
//jQuery('#location').css('color', '#F0F0F0');
//jQuery("#location").html(string_X);


	if (bMouseDown && totalDragStart < 2)
		{


//string_X = "if 1 mmove "+totalDragStart+" mx="+mx+" my="+my;
//jQuery('#location').css('color', '#FF00F0');
//jQuery("#location").html(string_X);


		dx = mx - firstx;
		dy = my - firsty;


//string_X = "if 2 mmove "+totalDragStart+" dx="+dx+" dy="+dy+" basex="+basex+" basey="+basey;
//jQuery('#location').css('color', '#FF00FC');
//jQuery("#location").html(string_X);


//console.log("are we here! 4 "+dx+" "+dy+ "  basex= "+basex+"  basey="+basey);

//console.log("dx="+dx+" dy="+dy+" basex="+basex+" basey="+basey);

		if ((Math.abs(basex-dx)>4) || (Math.abs(basey-dy)>4))
			{

//string_X = "before setView "+totalDragStart+" mx="+mx+" my="+my;
//jQuery('#location').css('color', '#00FFF0');
//jQuery("#location").html(string_X);

//console.log("1");

			hideOnlyPop();
//console.log("2");
			tip[cvjs_active_floorplan_div_nr].hide();
			cvjs_clearDrawing();
//console.log("3");

			hideOnlyStickyNote();
//console.log("4");
			cvjs_clearDrawingStickyNotes();
//console.log("5");

//console.log("qqq1");

			bPan = true;

//			console.log("inside drag viewBoxWidth[cvjs_active_floorplan_div_nr] "+viewBoxWidth[cvjs_active_floorplan_div_nr]+"  "+" viewBoxHeight[cvjs_active_floorplan_div_nr] "+viewBoxHeight[cvjs_active_floorplan_div_nr]);


		//	pdx = dx*zoomScale;
		//	pdy = dy*zoomScale;

			var xscale = viewBoxWidth[cvjs_active_floorplan_div_nr]/jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
			var yscale = viewBoxHeight[cvjs_active_floorplan_div_nr]/jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();
			var scale = 1;
			if (xscale>yscale) {
				scale = xscale
			}
			else{
				scale = yscale;
			}
			pdx = dx*scale;
			pdy = dy*scale;


			basex = dx;
			basey = dy;

			viewBox[cvjs_active_floorplan_div_nr].X = vbx - pdx;
			viewBox[cvjs_active_floorplan_div_nr].Y = vby - pdy;

			//console.log("vbx="+vbx+" vby="+vby+" pdx="+pdx+" pdy="+pdy);
			var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
			//console.log("attr_2="+attr_2);
			var json_obj = jQuery.parseJSON(attr_2);

			//console.log("json_obj="+json_obj);
			cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);


			// NNN setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], vbx - pdx, vby - pdy,viewBoxWidth[cvjs_active_floorplan_div_nr],viewBoxHeight[cvjs_active_floorplan_div_nr]);

//string_X = "after setView "+totalDragStart+" mx="+mx+" my="+my;
//jQuery('#location').css('color', '#00FFF0');
//jQuery("#location").html(string_X);

			}
		}


		}
		catch(err){
			//  allow the code to work with both version 1.1 and 1.2
			console.log(err);
		}


//string_X = "last in mousemove "+totalDragStart+" mx="+mx+" my="+my;
//jQuery('#location').css('color', '#00DDEE');
//jQuery("#location").html(string_X);


}






function DoTouchMove(event, x, y)
{


// deprecated 2014-08-05
		try{
//			layer_thumb.show();
//			layers_all.hide();


			if (panWithThumb){
//				layers_all.hide();
//				layer_thumb.show();
				layers_all.attr(hide);
				layer_thumb.attr(show);
			}





		}
		catch(err){
			//  allow the code to work with both version 1.1 and 1.2
			console.log("t2 "+err);
		}





			 if (preventDrag){
			 	event.stopPropagation();
				event.preventDefault();
			 }

			// disable drag move
			if (totalDragStart == 2){
				event.stopPropagation();
				event.preventDefault();
				tip[cvjs_active_floorplan_div_nr].hide();
				hideOnlyPop();
				hideOnlyStickyNote();

			}


//string_X = "touchmove "+totalDragStart+" preventDrag="+preventDrag;
//jQuery('#temperature').css('color', '#FF00FF');
//jQuery("#temperature").html(string_X);



			if (totalDragStart == 2){


				try{


					firstFingerX = event.touches[0].pageX;
					firstFingerY = event.touches[0].pageY;

					//console.log("event.touches[0].pageX="+event.touches[0].pageX+" event.touches[0].pageY="+event.touches[0].pageY);
					totalDragStart = 1;
					preventDrag = false;

					//console.log("event.touches[1].pageX="+event.touches[1].pageX+" event.touches[1].pageY="+event.touches[1].pageY);
					secondFingerX = event.touches[1].pageX;
					secondFingerY = event.touches[1].pageY;
					totalDragStart = 2;
					preventDrag = true;


					allowPinchWithNoPolygons = false;


					deltaX= secondFingerX - firstFingerX;
					deltaY= secondFingerY - firstFingerY;

					// zoom the difference between fingers

					//
					//deltaDynamic = Math.sqrt(deltaX*deltaX + deltaY*deltaY)/deltaBase;
					deltaDynamic = Math.sqrt(deltaX*deltaX + deltaY*deltaY);


					// if deltaDynamic > 1 zoom in
					// if deltaDynamic < 1 zoom out

//var string_X = " allowPinchWithNoPolygons="+allowPinchWithNoPolygons;
//var string_X = " deltaDynamic="+deltaDynamic+" deltaDynamicPre="+deltaDynamicPre;
//	jQuery('#temperature').css('color', '#FF0000');
//	jQuery("#temperature").html(string_X);
//string_X = " deltaDynamic-deltaDynamicPre="+(deltaDynamic-deltaDynamicPre)+" flagOK="+flagOK;
//
//	jQuery('#location').css('color', '#F00F0F');
//	jQuery("#location").html(string_X);


	if ((deltaDynamic-deltaDynamicPre > 4 || deltaDynamic-deltaDynamicPre < -4 ) && flagOK){

						flagOK = false;

						deltaDynamicPre = deltaDynamic;

//console.log(" in setview loop");

	//jQuery('#location').css('color', '#F00F00');
	//jQuery("#location").html("in setview loop");


						viewBox[cvjs_active_floorplan_div_nr].X = viewBox_initX[cvjs_active_floorplan_div_nr];
						viewBox[cvjs_active_floorplan_div_nr].Y = viewBox_initY[cvjs_active_floorplan_div_nr];
	//jQuery('#location').css('color', '#F00F00');
	//jQuery("#location").html("2");

						vBHo = viewBoxHeight_init[cvjs_active_floorplan_div_nr];
						vBWo = viewBoxWidth_init[cvjs_active_floorplan_div_nr];

	//jQuery('#location').css('color', '#F00F00');
	//jQuery("#location").html("3");
						viewBoxWidth[cvjs_active_floorplan_div_nr] = viewBoxWidth_init[cvjs_active_floorplan_div_nr];
						viewBoxHeight[cvjs_active_floorplan_div_nr] = viewBoxHeight_init[cvjs_active_floorplan_div_nr];
						viewBoxWidth[cvjs_active_floorplan_div_nr] /= deltaDynamic/deltaBase;
						viewBoxHeight[cvjs_active_floorplan_div_nr]/= deltaDynamic/deltaBase;

						viewBox[cvjs_active_floorplan_div_nr].X -= (viewBoxWidth[cvjs_active_floorplan_div_nr] - vBWo) / 2;
						viewBox[cvjs_active_floorplan_div_nr].Y -= (viewBoxHeight[cvjs_active_floorplan_div_nr] - vBHo) / 2;


						//viewBox[cvjs_active_floorplan_div_nr].X -= (firstFingerX-firstFingerX_init);
						//viewBox[cvjs_active_floorplan_div_nr].Y -= (firstFingerY-firstFingerY_init);

						//viewBox[cvjs_active_floorplan_div_nr].X -= (firstFingerX-firstFingerX_init)*(deltaDynamic/deltaBase);
						//viewBox[cvjs_active_floorplan_div_nr].Y -= (firstFingerY-firstFingerY_init)*(deltaDynamic/deltaBase);

	//jQuery('#location').css('color', '#F00F00');
	//jQuery("#location").html("4");

						//setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], viewBox[cvjs_active_floorplan_div_nr].X,viewBox[cvjs_active_floorplan_div_nr].Y,viewBoxWidth[cvjs_active_floorplan_div_nr],viewBoxHeight[cvjs_active_floorplan_div_nr]);

//NNN						zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/cvjs_rPaper[cvjs_active_floorplan_div_nr].width;

//console.log("x2 viewBoxWidth[cvjs_active_floorplan_div_nr] "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" rpWidth[cvjs_active_floorplan_div_nr] "+rpWidth[cvjs_active_floorplan_div_nr]);

						zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/rpWidth[cvjs_active_floorplan_div_nr];


						var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
						//console.log("attr_2="+attr_2);
						var json_obj = jQuery.parseJSON(attr_2);
						cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);

//NNN						setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], viewBox[cvjs_active_floorplan_div_nr].X, viewBox[cvjs_active_floorplan_div_nr].Y, viewBoxWidth[cvjs_active_floorplan_div_nr], viewBoxHeight[cvjs_active_floorplan_div_nr]);
						//cvjs_rPaper[cvjs_active_floorplan_div_nr].setViewBox(viewBox[cvjs_active_floorplan_div_nr].X, viewBox[cvjs_active_floorplan_div_nr].Y, viewBoxWidth[cvjs_active_floorplan_div_nr], viewBoxHeight[cvjs_active_floorplan_div_nr]);



//	var string_X = " viewBox[cvjs_active_floorplan_div_nr].X="+viewBox[cvjs_active_floorplan_div_nr].X+" viewBox[cvjs_active_floorplan_div_nr].Y="+viewBox[cvjs_active_floorplan_div_nr].Y+"secondFingerX="+secondFingerX+" secondFingerY="+secondFingerY+" deltaDynamic="+deltaDynamic+" cvjs_rPaper[cvjs_active_floorplan_div_nr].width="+cvjs_rPaper[cvjs_active_floorplan_div_nr].width+" viewBoxWidth[cvjs_active_floorplan_div_nr]="+viewBoxWidth[cvjs_active_floorplan_div_nr]+" vBWo="+vBWo+" firstFingerX-firstFingerX1="+(firstFingerX-firstFingerX1);

//	jQuery('#temperature').css('color', '#FF0000');
//	jQuery("#temperature").html(string_X);


//	jQuery('#location').css('color', '#F00F00');
//s	jQuery("#location").html("end of setview loop");


						var vb1X = viewBox[cvjs_active_floorplan_div_nr].X;
						var vb1Y = viewBox[cvjs_active_floorplan_div_nr].Y;


						firstFingerX1 = firstFingerX;
						firstFingerY1 = firstFingerY;

						flagOK = true;


				}




				}
				catch(err){
					//console.log("setuprooms_37 1 : " +err);
					var dummy5 = 1;
				}



			}







//	jQuery("#motion").html("Touch Move");
//	jQuery("#x").html(x);
//	jQuery("#y").html(y);



//console.log("rooms touch move!");


}






function DoTouchStart(event, x, y)
{

//string_X = "DoTouchStart ";
//jQuery('#temperature').css('color', '#0F000F');
//jQuery("#temperature").html(string_X);



		preventDrag = true;

if (cvjs_debug) console.log("touch start");

ttest=0;
		event.preventDefault();
		event.stopPropagation();

		if (!thumb_loaded){
			thumb_loaded = true;
			try{

			// console.log("before drawThumb touchstart");

//				drawThumb(cvjs_rPaper[cvjs_active_floorplan_div_nr]);
			}
			catch(err){
				//  allow the code to work with both version 1.1 and 1.2
				console.log("t3 "+err);
			}
//console.log("drawThumb");
		}







			try{

				firstFingerX = event.touches[0].pageX;
				firstFingerY = event.touches[0].pageY;

				//console.log("event.touches[0].pageX="+event.touches[0].pageX+" event.touches[0].pageY="+event.touches[0].pageY);
				totalDragStart = 1;
				preventDrag = false;


				//console.log("event.touches[1].pageX="+event.touches[1].pageX+" event.touches[1].pageY="+event.touches[1].pageY);
				secondFingerX = event.touches[1].pageX;
				secondFingerY = event.touches[1].pageY;
				totalDragStart = 2;
				preventDrag = true;

				allowPinchWithNoPolygons = false;


				deltaXinit= secondFingerX - firstFingerX;
				deltaYinit= secondFingerY - firstFingerY;

				// the difference between two fingers
				deltaBase = Math.sqrt(deltaXinit*deltaXinit + deltaYinit*deltaYinit);

				deltaDynamicPre = deltaBase;

				viewBoxWidthPre = viewBoxWidth[cvjs_active_floorplan_div_nr];
				viewBoxheightPre = viewBoxHeight[cvjs_active_floorplan_div_nr];

				firstFingerX1 = firstFingerX;
				firstFingerY1 = firstFingerY;
				firstFingerX_init = firstFingerX;
				firstFingerY_init = firstFingerY;


				viewBox_initX[cvjs_active_floorplan_div_nr] = viewBox[cvjs_active_floorplan_div_nr].X;
				viewBox_initY[cvjs_active_floorplan_div_nr] = viewBox[cvjs_active_floorplan_div_nr].Y;

				viewBoxWidth_init[cvjs_active_floorplan_div_nr] = viewBoxWidth[cvjs_active_floorplan_div_nr];
				viewBoxHeight_init[cvjs_active_floorplan_div_nr] = viewBoxHeight[cvjs_active_floorplan_div_nr];

				flagOK = true;





				//viewBoxWidth[cvjs_active_floorplan_div_nr]  = cvjs_rPaper[cvjs_active_floorplan_div_nr].width;
				//viewBoxHeight[cvjs_active_floorplan_div_nr] = cvjs_rPaper[cvjs_active_floorplan_div_nr].height;



			}
			catch(err){
				//console.log(err);

				//console.log("setuprooms_38 2 : " +err);

				var dummy4 = 1;


			}


//console.log("touch start totalDragStart="+totalDragStart);



//console.log("x touch start event="+event);

//string_X = "touchstart "+totalDragStart;

//string_X = "allowPinchWithNoPolygons="+allowPinchWithNoPolygons;
//jQuery('#temperature').css('color', '#FF00FF');
//jQuery("#temperature").html(string_X);


}






function DoTouchEnd(event, x, y)
{

//string_X = "DoTouchEnd ";
//jQuery('#temperature').css('color', '#0F000F');
//jQuery("#temperature").html(string_X);



				preventDrag = true;


				if (totalDragStart == 2){

					event.preventDefault();
					event.stopPropagation();
					tip[cvjs_active_floorplan_div_nr].hide();
					hideOnlyPop();
					hideOnlyStickyNote();

				}




				try{


					if (totalDragStart == 2){


						viewBox[cvjs_active_floorplan_div_nr].X = viewBox_initX[cvjs_active_floorplan_div_nr];
						viewBox[cvjs_active_floorplan_div_nr].Y = viewBox_initY[cvjs_active_floorplan_div_nr];
						vBHo = viewBoxHeight_init[cvjs_active_floorplan_div_nr];
						vBWo = viewBoxWidth_init[cvjs_active_floorplan_div_nr];
						viewBoxWidth[cvjs_active_floorplan_div_nr] = viewBoxWidth_init[cvjs_active_floorplan_div_nr];
						viewBoxHeight[cvjs_active_floorplan_div_nr] = viewBoxHeight_init[cvjs_active_floorplan_div_nr];
						viewBoxWidth[cvjs_active_floorplan_div_nr] /= deltaDynamic/deltaBase;
						viewBoxHeight[cvjs_active_floorplan_div_nr]/= deltaDynamic/deltaBase;

						viewBox[cvjs_active_floorplan_div_nr].X -= (viewBoxWidth[cvjs_active_floorplan_div_nr] - vBWo) / 2;
						viewBox[cvjs_active_floorplan_div_nr].Y -= (viewBoxHeight[cvjs_active_floorplan_div_nr] - vBHo) / 2;


						//viewBox[cvjs_active_floorplan_div_nr].X -= (firstFingerX-firstFingerX_init);
						//viewBox[cvjs_active_floorplan_div_nr].Y -= (firstFingerY-firstFingerY_init);

						//viewBox[cvjs_active_floorplan_div_nr].X -= (firstFingerX-firstFingerX_init)*(deltaDynamic/deltaBase);
						//viewBox[cvjs_active_floorplan_div_nr].Y -= (firstFingerY-firstFingerY_init)*(deltaDynamic/deltaBase);

	//jQuery('#location').css('color', '#F00F00');
	//jQuery("#location").html("4");

//NNN						zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/cvjs_rPaper[cvjs_active_floorplan_div_nr].width;

//console.log("x3 viewBoxWidth[cvjs_active_floorplan_div_nr] "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" rpWidth[cvjs_active_floorplan_div_nr] "+rpWidth[cvjs_active_floorplan_div_nr]);

						zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/rpWidth[cvjs_active_floorplan_div_nr];

						var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
						//console.log("attr_2="+attr_2);
						var json_obj = jQuery.parseJSON(attr_2);
						cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);



						//setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], viewBox[cvjs_active_floorplan_div_nr].X, viewBox[cvjs_active_floorplan_div_nr].Y, viewBoxWidth[cvjs_active_floorplan_div_nr], viewBoxHeight[cvjs_active_floorplan_div_nr]);
//NNN						cvjs_rPaper[cvjs_active_floorplan_div_nr].setViewBox(viewBox[cvjs_active_floorplan_div_nr].X, viewBox[cvjs_active_floorplan_div_nr].Y, viewBoxWidth[cvjs_active_floorplan_div_nr], viewBoxHeight[cvjs_active_floorplan_div_nr]);

//	var string_X = " viewBox[cvjs_active_floorplan_div_nr].X="+viewBox[cvjs_active_floorplan_div_nr].X+" viewBox[cvjs_active_floorplan_div_nr].Y="+viewBox[cvjs_active_floorplan_div_nr].Y+"secondFingerX="+secondFingerX+" secondFingerY="+secondFingerY+" deltaDynamic="+deltaDynamic+" cvjs_rPaper[cvjs_active_floorplan_div_nr].width="+cvjs_rPaper[cvjs_active_floorplan_div_nr].width+" viewBoxWidth[cvjs_active_floorplan_div_nr]="+viewBoxWidth[cvjs_active_floorplan_div_nr]+" vBWo="+vBWo+" firstFingerX-firstFingerX1="+(firstFingerX-firstFingerX1);
//	jQuery('#temperature').css('color', '#F000FF');
//	jQuery("#temperature").html(string_X);


					}



					var attr_1 = "{\"display\" : \"none\" }";
					var hide = jQuery.parseJSON(attr_1);
					var attr_2 = "{\"display\" : \"inline\" }";
					var show = jQuery.parseJSON(attr_2);

					if (panWithThumb){
						layers_all.attr(show);
						layer_thumb.attr(hide);
					}

					layer_vqrooms[cvjs_active_floorplan_div_nr].attr(show);


					//totalDragStart = 0;

				}
				catch(err){
					//  allow the code to work with both version 1.1 and 1.2
					console.log("t4 "+err);
				}

}



var currentRoomId;
var currentRoomName;

//var tooltipLast[active_floorplan_div_nr] = -1;
var tooltipLast = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1];


var currentStickyNoteId;
var currentStickyNoteName;
var tooltipLastStickyNote = -1;



var tooltipLastHyperlink = -1;


var currentUrlId;
var currentUrlName;




function setRoomAfterPanPC(){

	tip[cvjs_active_floorplan_div_nr].html(currentRoomName);
	bMouseDown = false;
	cvjs_clearDrawing();
//console.log("4");
	change_space_fixed_location(currentRoomId);
}


function setUpVqRooms(paper, active_floorplan_div_nr)
{

var floorplan_div = "";
// 
if (active_floorplan_div_nr != undefined){

	paper = cvjs_rPaper[active_floorplan_div_nr];
	cvjs_active_floorplan_div_nr = active_floorplan_div_nr;
	floorplan_div = floorplan_div_Array[cvjs_active_floorplan_div_nr];
}


//console.log("vqBuilding paper="+paper);
if (cvjs_debug) console.log("vqBuilding active nr="+cvjs_active_floorplan_div_nr+"  "+paper.toString().substring(0,100));



floorplan_height = jQuery(window).height()*.9;
floorplan_width = jQuery(window).width()*.9;

var current = null;
tip[active_floorplan_div_nr] = jQuery("#tip"+"_"+floorplan_div);
tip[active_floorplan_div_nr].hide().css("left", floorplan_width).css("top", floorplan_height);

var tipText = "";
var over = false;

var building = null;
var floor = null;





//console.log("vqBuilding ="+vqBuilding+" vqFloor="+vqFloor);

try{

jQuery.fn.qtip.defaults.show.event = 'click';
jQuery.fn.qtip.defaults.hide.event = null;

}
catch(err){
	// 2016-01-30
	// console.log("err="+err);
}
//console.log("vq2");


	if (vqBuilding in buildings)

//console.log("1");

		{
		building = buildings[vqBuilding];
		if (vqFloor in building.floors)
			{
			floor = building.floors[vqFloor];
			}
		}

if (cvjs_debug) console.log("vqBuilding ="+vqBuilding+" vqFloor="+vqFloor +" floor= "+floor);


// 2014-08-25
// NNN removed
// layer_vqrooms[cvjs_active_floorplan_div_nr] = paper.set();

//  the layer is defined as a group element
   layer_vqrooms[active_floorplan_div_nr] = paper.g();

   if (cvjs_debug) console.log("layer_vqrooms["+active_floorplan_div_nr+" is part of  "+paper.toString().substring(0,100));

//console.log("after paper.g() vqRooms="+vqRooms+" vqRooms[cvjs_active_floorplan_div_nr][0]="+vqRooms[cvjs_active_floorplan_div_nr][0]+" XX 1 "+vqRooms[cvjs_active_floorplan_div_nr][1]);
//console.log("after paper.g() vqRooms[cvjs_active_floorplan_div_nr][0]="+vqRooms[cvjs_active_floorplan_div_nr][0]+" XX 1 "+vqRooms[cvjs_active_floorplan_div_nr][1]);

//window.alert("vqrooms "+vqRooms[cvjs_active_floorplan_div_nr]+" "+floor.rooms);


for (var room in vqRooms[cvjs_active_floorplan_div_nr])
	{
	var bFound = 0;

if (cvjs_debug) console.log("first loop room=" + room);

	for (bRoom in floor.rooms)
	{
		rid = vqRooms[cvjs_active_floorplan_div_nr][room].data("node");

//if (cvjs_debug) console.log("bRoom=" + bRoom);
		
		
		if (bRoom == rid)
		{

//console.log("bRoom:" + bRoom+ " room="+room);
//console.log("rid:   vqRooms["+cvjs_active_floorplan_div_nr+"  " + rid);
	
	
	
//console.log("in assignment loop ");

			bFound = 1;

			// identify tags
			var allTags = floor.rooms[bRoom].tags;
			// loop over tags
			var ii=1;
			for (var tags in allTags){
				var tagx = "tag"+ii;
				var tagData = allTags[tags];
				while (tagData.charAt(0) == ' ')
					tagData = tagData.substr(1);
				tagData = tagData.replace(/ /gi, "&nbsp;");
				vqRooms[cvjs_active_floorplan_div_nr][room].data( tagx, tagData);
			//	vqRooms[cvjs_active_floorplan_div_nr][room].attr( tagx, tagData);
				ii++;
			}

			vqRooms[active_floorplan_div_nr][room].data("occupancy", floor.rooms[bRoom].occupancy);
			vqRooms[active_floorplan_div_nr][room].data("name", floor.rooms[bRoom].name);
			vqRooms[active_floorplan_div_nr][room].data("type", floor.rooms[bRoom].type);

			if (floor.rooms[bRoom].id == -1)
				vqRooms[active_floorplan_div_nr][room].data("id", rid);
			else
				vqRooms[active_floorplan_div_nr][room].data("id", floor.rooms[bRoom].id);

			// 6.1.37
			vqRooms[cvjs_active_floorplan_div_nr][room].data("defaultcolor", "undefined");


//			vqRooms[cvjs_active_floorplan_div_nr][room].data("rmid", room);    /// NOTE - NOT USED   2015-9-3

			try{

				// 2.4_40
				vqRooms[active_floorplan_div_nr][room].data("layer", floor.rooms[bRoom].layer);
				vqRooms[active_floorplan_div_nr][room].data("group", floor.rooms[bRoom].group);
				// 2.4_42
				vqRooms[active_floorplan_div_nr][room].data("attributes", floor.rooms[bRoom].attributes);
				vqRooms[active_floorplan_div_nr][room].data("attributeStatus", floor.rooms[bRoom].attributeStatus);

				if (floor.rooms[bRoom].linked != undefined){
	//console.log(bRoom+" floor.rooms[bRoom].linked "+floor.rooms[bRoom].linked);
					vqRooms[active_floorplan_div_nr][room].data("linked", floor.rooms[bRoom].linked);
					vqRooms[active_floorplan_div_nr][room].data("handle", floor.rooms[bRoom].handle);  // 3.2.02e
				}
				else{
					vqRooms[active_floorplan_div_nr][room].data("linked", false);
					vqRooms[active_floorplan_div_nr][room].data("handle", floor.rooms[bRoom].handle); // 3.2.02e
				}
				
				// 6.2.32
				vqRooms[cvjs_active_floorplan_div_nr][room].data("displaySpaceObject", floor.rooms[bRoom].displaySpaceObject);
			}
			catch(err){
				console.log(err);
			}

//			vqRooms[cvjs_active_floorplan_div_nr][room].attr(defaultColor);  // set colors ( note: change attribute name to something more applicable

			if (!cvjs_supressPopUpModal  || cvjs_standardHighLightColors){

//				vqRooms[active_floorplan_div_nr][room].attr(defaultColor);
				// 6.1.41
				if (vqRooms[cvjs_active_floorplan_div_nr][room].data("defaultcolor").toString().indexOf("undefined")>-1){
	//				 console.log("standard");
					//standard
					vqRooms[cvjs_active_floorplan_div_nr][room].attr(defaultColor);									
				}
				else{
	//				 console.log("highlight");
					// highlight
					vqRooms[cvjs_active_floorplan_div_nr][room].attr(vqRooms[cvjs_active_floorplan_div_nr][room].data("defaultcolor"));								
				}					
			}
			else{
				if (vqRooms[active_floorplan_div_nr][room].data("linked")){
					vqRooms[active_floorplan_div_nr][room].attr(defaultColor_linked);
				}
				else{
					vqRooms[active_floorplan_div_nr][room].attr(defaultColor_unlinked);
				}
			}

			var htitle = "<table width=\"100%\"><tr><td class=\"cvjs_modal_header_1\" onclick=\"cvjs_popupTitleClick(\'"+floor.rooms[bRoom].id+"\');\">"+floor.rooms[bRoom].name+"</td>"+
				"<td class=\"cvjs_modal_header_info_1\" onclick=\"hideOnlyPop("+room+");\"><i class=\"fa fa-times\"></i></td></tr>"+
				"<tr><td cols=\"2\"><h4 id=\"cvjs_modal_header_info_2\">"+floor.rooms[bRoom].type+"</h4></td></tr></table>";

//console.log("dual_hbody_flag "+dual_hbody_flag+"  floor.rooms[bRoom].id   "+floor.rooms[bRoom].id);

			if (dual_hbody_flag){
				if ( parseInt(floor.rooms[bRoom].id) >=-1){
					jQuery(vqRooms[active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'},
						hideOnHTMLClick: 'false'});
				}else{
					jQuery(vqRooms[active_floorplan_div_nr][room].node).qtip({content: {text: hbody_2, title: htitle},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'},
						hideOnHTMLClick: 'false'});
				}
			}

			if (!dual_hbody_flag){
					jQuery(vqRooms[active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'},
						hideOnHTMLClick: 'false'});
			}

//console.log("before vqRoom mousedown");
			vqRooms[active_floorplan_div_nr][room].mousedown(function(e){

//console.log(this.data("id"));
//string_X = "mousedown 1";
//jQuery('#cvjs_display_tip').css('color', '#FF0F0F');
//jQuery("#cvjs_display_tip").html(string_X);

if (cvjs_debug) console.log("G Domousedown"+e.clientX+"  "+document.body.scrollLeft+" "+e.clientY+" "+document.body.scrollTop);		

				vqRoomMouseSelect = true;
				DoMouseDown(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop, active_floorplan_div_nr);
			}).mouseout(function(e){			

			
				jQuery("#tip"+"_"+floorplan_div_Array[active_floorplan_div_nr]).hide();
				
				//if (cvjs_debug) console.log("ÅÅÅ out with mouse");	
				// 3.2.02h  
				//  we have to set to default color when leaving the Space
				var rm = findRoom(currentRoomId);				

				// 3.3.01c
				if (!vqRoomMouseSelect){
					

						if (!cvjs_supressPopUpModal  || cvjs_standardHighLightColors){
						if (cvjs_debug) console.log("room="+rm+" defaultcolor" );

							// 6.1.41
							//vqRooms[active_floorplan_div_nr][rm].attr(defaultColor);
							
							
							if (vqRooms[cvjs_active_floorplan_div_nr][rm].data("defaultcolor").toString().indexOf("undefined")>-1){
							//	 console.log("standard");
								//standard
								vqRooms[cvjs_active_floorplan_div_nr][rm].attr(defaultColor);									
							}
							else{
							//	 console.log("highlight");
								// highlight
								vqRooms[cvjs_active_floorplan_div_nr][rm].attr(vqRooms[cvjs_active_floorplan_div_nr][rm].data("defaultcolor"));								
							}	
													
						}
						else{
							// we need to keep highlight in Space Management Edit mode
							
							/*
						if (cvjs_debug) console.log("room="+rm+" linked part" );
							if (vqRooms[active_floorplan_div_nr][rm].data("linked")){
								vqRooms[active_floorplan_div_nr][rm].attr(defaultColor_linked);
							}
							else{
								vqRooms[active_floorplan_div_nr][rm].attr(defaultColor_unlinked);
							}
							
							*/
						}
						// 3.2.02h  					
				}
			
			}).mousemove(function(e){


//console.log("in mousemove");

currentRoomId = this.data("id");
currentRoomName = this.data("name");

//string_X = "mousemove 1"+currentRoomId+" "+currentRoomName;
//jQuery('#tip').css('color', '#FF0F0F');
//jQuery("#tip").html(string_X);


//if (cvjs_debug)console.log("mousemove bMouseDown ="+bMouseDown+" "+currentRoomId+" "+currentRoomName+"  "+active_floorplan_div_nr);

				if ((bMouseDown) || (bTempMouseDown))
					DoMouseMove(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
				else {
//console.log("1Q");

					var rm = findRoom(currentRoomId);

//console.log("tip[cvjs_active_floorplan_div_nr].css vqRoom vqRoomMouseSelect="+vqRoomMouseSelect+" before tip rm="+rm+" lastObj="+lastObj+" tooltipLast="+tooltipLast+ "cvjs_location_flag="+cvjs_location_flag);

//string_X = "tip[cvjs_active_floorplan_div_nr].css vqRoom vqRoomMouseSelect="+vqRoomMouseSelect+" before tip rm="+rm+" lastObj="+lastObj+" tooltipLast="+tooltipLast;
//jQuery('#cvjs_display_tip').css('color', '#FF0F0F');
//jQuery("#cvjs_display_tip").html(string_X);

//if (cvjs_debug) console.log(rm+"   "+lastObj[active_floorplan_div_nr]+" cvjs_location_flag="+cvjs_location_flag+"  "+tooltipLast[active_floorplan_div_nr]);

					if (rm >= 0)
					{
						if (rm != lastObj[cvjs_active_floorplan_div_nr] && cvjs_location_flag ){      // only do this when in location mode

//console.log("NOTE before attributes conditional statement "+tooltipLast[active_floorplan_div_nr]);
							if (tooltipLast[active_floorplan_div_nr] != lastObj[cvjs_active_floorplan_div_nr] && tooltipLast[active_floorplan_div_nr]!=-1){
								// vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[active_floorplan_div_nr]].attr(defaultColor);

								if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors){

//									vqRooms[active_floorplan_div_nr][tooltipLast[active_floorplan_div_nr]].attr(defaultColor);								
									// 6.1.41
									if (vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[active_floorplan_div_nr]].data("defaultcolor").toString().indexOf("undefined")>-1){
									//	 console.log("standard");
										//standard
										vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[active_floorplan_div_nr]].attr(defaultColor);									
									}
									else{
									//	 console.log("highlight");
										// highlight
										vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[active_floorplan_div_nr]].attr(vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[active_floorplan_div_nr]].data("defaultcolor"));								
									}										
											
								}
								else{
									if (vqRooms[active_floorplan_div_nr][tooltipLast[active_floorplan_div_nr]].data("linked")){
										vqRooms[active_floorplan_div_nr][tooltipLast[active_floorplan_div_nr]].attr(defaultColor_linked);
									}
									else{
										vqRooms[active_floorplan_div_nr][tooltipLast[active_floorplan_div_nr]].attr(defaultColor_unlinked);
									}
								}

							}

//console.log("before highlight "+cvjs_supressPopUpModal+"  "+cvjs_standardHighLightColors);

							//vqRooms[cvjs_active_floorplan_div_nr][rm].attr(highlight);

							if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors){
								vqRooms[active_floorplan_div_nr][rm].attr(highlight);
							}
							else{
								if (vqRooms[active_floorplan_div_nr][rm].data("linked")){
									vqRooms[active_floorplan_div_nr][rm].attr(highlight_linked);
								}
								else{
									vqRooms[active_floorplan_div_nr][rm].attr(highlight_unlinked);
								}
							}

							tooltipLast[active_floorplan_div_nr] = rm;
						}
					}

//					tipText = this.data("name");

					if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors)
						tipText = this.data("name");
					else
						tipText = this.data("id");

				if (cvjs_customToolTip)
					tipText = cvjs_displayCustomToolTip(this.data("id"));

					tip[active_floorplan_div_nr].html(tipText);
					tip[active_floorplan_div_nr].show();
					
					var position = jQuery('#'+floorplan_div).position();
					var floorplan_pos = jQuery('#'+floorplan_div).css('position');	


					// 3.2.01e
					tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});
					//XXYYZZ
					
					if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
		//				if (cvjs_debug) console.log("absolute "+active_floorplan_div_nr);
					   tip[active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
					}
					else{  // we have placed CV-JS inside a div and we have to make a relative position

//							if (cvjs_debug) console.log("inside "+active_floorplan_div_nr);
						
						tip[active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
					}
					
				   }

				   }).mouseup(function(e){

				// 3.3.01c
				//vqRoomMouseSelect = false;

//string_X = "bPan="+bPan;
//jQuery('#temperature').css('color', '#FF0F0F');
//jQuery("#temperature").html(string_X);


//console.log("XXXmouse up bPan="+bPan)

				if (bPan){

					DoMouseUp(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);

					if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors)
						tipText = this.data("name");
					else
						tipText = this.data("id");


					if (cvjs_customToolTip)
						tipText = cvjs_displayCustomToolTip(this.data("id"));


					//tipText = this.data("name");
					tip[cvjs_active_floorplan_div_nr].html(tipText);
					bMouseDown = false;
//console.log("m1")
					cvjs_clearDrawing();
//console.log("m2")
					//CheckRoomOnScreen(this);
					rid = this.data("id");
//console.log("m3")
					change_space_fixed_location(rid, cvjs_active_floorplan_div_nr);
				}
				else{
//console.log("XXX")
					try{

						layer_vqrooms[active_floorplan_div_nr].attr(show);


						if (panWithThumb){
							layers_all.attr(show);
							layer_thumb.attr(hide);
						}

						//layers_all.show();
						//layer_vqrooms[cvjs_active_floorplan_div_nr].show();
						//layer_thumb.hide();

					}
					catch(err){
						//  allow the code to work with both version 1.1 and 1.2
						console.log("t5 "+ err);
					}

//					tipText = this.data("name");

					if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors)
						tipText = this.data("name");
					else
						tipText = this.data("id");

					if (cvjs_customToolTip)
						tipText = cvjs_displayCustomToolTip(this.data("id"));

					tip[cvjs_active_floorplan_div_nr].html(tipText);
					bMouseDown = false;
					cvjs_clearDrawing();
					//CheckRoomOnScreen(this);
					rid = this.data("id");
					//change_space(rid);
//console.log("m4");
					change_space_fixed_location(rid, cvjs_active_floorplan_div_nr);

				}
				bPan = false;

			}).touchstart(function(e) {

//console.log("in touchstart");

//string_X = "touchstart 1";
//jQuery('#location').css('color', '#FFFF0F');
//jQuery("#location").html(string_X);


				DoTouchStart(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
			}).touchend(function(e) {


//console.log("in touchend");

//string_X = "touchend 2";
//jQuery('#location').css('color', '#FFFF0F');
//jQuery("#location").html(string_X);



//console.log("3Q");
				if ((!bPan) && (!locked))
					{
					rid = this.data("id");
					cvjs_change_space(rid);

					if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors)
						tipText = this.data("name");
					else
						tipText = this.data("id");
					//tipText = this.data("name");

					if (cvjs_customToolTip)
						tipText = cvjs_displayCustomToolTip(this.data("id"));

					tip[cvjs_active_floorplan_div_nr].html(tipText);
					}
				DoTouchEnd(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);

				if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors)
					tipText = this.data("name");
				else
					tipText = this.data("id");

//				tipText = this.data("name");
				tip[cvjs_active_floorplan_div_nr].html(tipText);
				bMouseDown = false;
//console.log("m1")
				cvjs_clearDrawing();
//console.log("m2")
				//CheckRoomOnScreen(this);
				rid = this.data("id");
//console.log("touch m3")
//console.log("m6");
				change_space_fixed_location(rid, cvjs_active_floorplan_div_nr);


			}).touchmove(function(e) {

//console.log("in touchmove");

//string_X = "touchmove 1";
//jQuery('#location').css('color', '#FF0F0F');
//jQuery("#location").html(string_X);

//console.log("touch move");
				if (!bPan)
				{
					
					
				var position = jQuery('#'+floorplan_div).position();
				var floorplan_pos = jQuery('#'+floorplan_div).css('position');				

				// 3.2.01e
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});


				if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
				//console.log("absolute");
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
				}
				else{  // we have placed CV-JS inside a div and we have to make a relative position
					//console.log("inside");
					tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
				}
						
					
//				tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft+20).css("top", e.clientY+document.body.scrollTop-20);
//				tip[cvjs_active_floorplan_div_nr].css("left", e.screenX+20).css("top", e.screenY-20);
				tip[cvjs_active_floorplan_div_nr].html(tipText);


				if (cvjs_customToolTip)
					tipText = cvjs_displayCustomToolTip(this.data("id"));


				}
				DoTouchMove(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
			}).dblclick(function(e) {
				event.preventDefault();
				event.stopPropagation();
			});
		}
	}

//console.log("before bFound== 0 bFound="+bFound);
	if (bFound == 0)
		{
		var node_vq = vqRooms[cvjs_active_floorplan_div_nr][room].data("node");

if (cvjs_debug)	console.log("room not found "+node_vq);
		vqRooms[active_floorplan_div_nr][room].data("occupancy", "undefined");
		vqRooms[active_floorplan_div_nr][room].data("name", "undefined");
		vqRooms[active_floorplan_div_nr][room].data("type", "undefined");
		vqRooms[active_floorplan_div_nr][room].data("id", node_vq);
		jQuery(vqRooms[active_floorplan_div_nr][room].node).qtip({title: "Undefined", content: "", placement: 'top'});

		// 2.4_40
		vqRooms[active_floorplan_div_nr][room].data("layer", "undefined");
		vqRooms[active_floorplan_div_nr][room].data("group", "undefined");
		vqRooms[active_floorplan_div_nr][room].data("attributes", "undefined");
		vqRooms[active_floorplan_div_nr][room].data("attributeStatus", "undefined");
		vqRooms[active_floorplan_div_nr][room].data("linked", false);
		vqRooms[active_floorplan_div_nr][room].data("handle", "");  // 3.2.02e
		
		
		// 6.1.37
		vqRooms[cvjs_active_floorplan_div_nr][spc].data("defaultcolor", "undefined");
		
		// 6.2.32
		vqRooms[cvjs_active_floorplan_div_nr][rm].data("displaySpaceObject", "on");		// on or off?
		
		}
//	console.log("adding: "+active_floorplan_div_nr+" "+room+" "+vqRooms[active_floorplan_div_nr][room]);
//	console.log("adding: "+active_floorplan_div_nr+" "+room+" ");
	
	layer_vqrooms[active_floorplan_div_nr].add(vqRooms[active_floorplan_div_nr][room]);
	}

	
	if (cvjs_debug) console.log("  LAYER VQROOMS We have active "+ cvjs_active_floorplan_div_nr);

	
	
//layer_vqrooms[cvjs_active_floorplan_div_nr].attr(show);	

 //  	layer_vqrooms[active_floorplan_div_nr].attr(hide);
	
//cvjs_LayerOn_AllOff("Sensors");
//cvjs_GroupOn_AllOff("3");

}



function setUpVqStickyNotes(paper){

//console.log("setup vqStickyNotes on load not yet implemented");

}


function setUpVqRedlines(paper){

//console.log("setup vqRedlines on load not yet implemented");

}


function setUpVqURLs(paper){

//console.log("setup vqURLs on load not yet FULLY implemented");


var current = null;
tip[cvjs_active_floorplan_div_nr] = jQuery("#tip"+"_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]);
tip[cvjs_active_floorplan_div_nr].hide().css("left", floorplan_width).css("top", floorplan_height);

var tipText = "";
var over = false;

var building = null;
var floor = null;

try{

jQuery.fn.qtip.defaults.show.event = 'click';
jQuery.fn.qtip.defaults.hide.event = null;

}
catch(err){
	// 2016-01-30
	//console.log("err="+err);
}

	if (vqBuilding in buildings)
		{
		building = buildings[vqBuilding];
		if (vqFloor in building.floors)
			{
			floor = building.floors[vqFloor];
			}
		}

   layer_hyperlinks = paper.g();


for (var jsurl in vqURLs)
	{
	var bFound = 0;

//console.log("first loop room=" + room);

	for (bRoom in floor.rooms)
	{
//console.log("bRoom:" + bRoom+ " room="+room);
		rid = vqURLs[jsurl].data("node");

		if (bRoom == rid)
		{

//console.log("in assignment loop ");

			bFound = 1;

			vqURLs[jsurl].data("name", floor.rooms[bRoom].name);

			if (floor.rooms[bRoom].id == -1)
				vqURLs[jsurl].data("id", rid);
			else
				vqURLs[jsurl].data("id", floor.rooms[bRoom].id);

			try{
				vqURLs[jsurl].data("layer", floor.rooms[bRoom].layer);
				vqURLs[jsurl].data("group", floor.rooms[bRoom].group);
				vqURLs[jsurl].data("url", floor.rooms[bRoom].url);

			if (floor.rooms[bRoom].linked != undefined){
				vqURLs[jsurl].data("linked", floor.rooms[bRoom].linked);
				vqRooms[active_floorplan_div_nr][room].data("handle", floor.rooms[bRoom].handle);  // 3.2.02e
			}
			else
				vqURLs[jsurl].data("linked", false);
				vqRooms[active_floorplan_div_nr][room].data("handle", floor.rooms[bRoom].handle);  // 3.2.02e

			}
			catch(err){
				console.log(err);
			}

			vqURLs[jsurl].attr(defaultColor_Hyperlinks);  // set colors ( note: change attribute name to something more applicable



			if (!cvjs_supressHyperlinkColors){
				vqURLs[jsurl].attr(defaultColor_Hyperlinks);  // set colors ( note: change attribute name to something more applicable
			}
			else{
				vqURLs[jsurl].attr(defaultColor_Hyperlinks_blank);  // set colors ( note: change attribute name to something more applicable
			}


//console.log("before vqRoom mousedown");
			vqURLs[jsurl].mousedown(function(e){

			if (cvjs_debug) console.log("H Domousedown");		
			
				vqRoomMouseSelect = true;
				DoMouseDown(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop, active_floorplan_div_nr);
			}).mouseout(function(e){			

				jQuery("#tip"+"_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
				
			}).mousemove(function(e){


//console.log("in mousemove");

currentUrlId = this.data("id");
currentUrlName = this.data("name");

//string_X = "mousemove 1"+currentRoomId+" "+currentRoomName;
//jQuery('#tip').css('color', '#FF0F0F');
//jQuery("#tip").html(string_X);


//console.log("mousemove bMouseDown ="+bMouseDown+" "+currentRoomId+" "+currentRoomName);
				if ((bMouseDown) || (bTempMouseDown))
					DoMouseMove(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
				else {
//console.log("1Q");

					var rm = findUrl(currentUrlId);

//console.log("tip[cvjs_active_floorplan_div_nr].css vqRoom vqRoomMouseSelect="+vqRoomMouseSelect+" before tip rm="+rm+" lastObj="+lastObj+" tooltipLast="+tooltipLast+ "cvjs_location_flag="+cvjs_location_flag);

//string_X = "tip[cvjs_active_floorplan_div_nr].css vqRoom vqRoomMouseSelect="+vqRoomMouseSelect+" before tip rm="+rm+" lastObj="+lastObj+" tooltipLast="+tooltipLast;
//jQuery('#cvjs_display_tip').css('color', '#FF0F0F');
//jQuery("#cvjs_display_tip").html(string_X);

					if (rm >= 0)
					{
						if (rm != lastObjHyperlink[cvjs_active_floorplan_div_nr] && cvjs_location_flag ){      // only do this when in location mode

//console.log("before attributes conditional statement "+tooltipLast+"  "+attributes+" "+highlight);
							if (tooltipLastHyperlink != lastObjHyperlink[cvjs_active_floorplan_div_nr]){

								if (!cvjs_supressHyperlinkColors){
									vqURLs[tooltipLastHyperlink].attr(defaultColor_Hyperlinks);
								}
								else{
									vqURLs[tooltipLastHyperlink].attr(defaultColor_Hyperlinks_blank);  // set colors ( note: change attribute name to something more applicable
								}
							}


							if (!cvjs_supressHyperlinkColors){
								vqURLs[rm].attr(highlight_Hyperlinks);
							}
							else{
								vqURLs[rm].attr(defaultColor_Hyperlinks_blank);
							}
							tooltipLastHyperlink = rm;
						}
					}

//					tipText = this.data("name");

					if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors)
						tipText = this.data("name");
					else
						tipText = this.data("id");


					tip[cvjs_active_floorplan_div_nr].html(tipText);
					tip[cvjs_active_floorplan_div_nr].show();

					// 3.2.01e
					tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});
					
					
								
					var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
					var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
					if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
					//console.log("absolute");
					   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
					}
					else{  // we have placed CV-JS inside a div and we have to make a relative position

						//console.log("inside");
						//console.log(position.left+" "+position.top+"tipText="+tipText+" e.clientX "+e.clientX+" e.clientY "+e.clientY+" "+document.documentElement.scrollLeft+" "+document.documentElement.scrollTop);
						//console.log(e.clientX-position.left+document.documentElement.scrollLeft+10);
						//console.log(e.clientY-position.top+document.documentElement.scrollTop-25);
						tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
					}
					
				}
			}).mouseup(function(e){


//console.log("in mouseup");

//string_X = "mouseup 1";
//jQuery('#cvjs_display_tip').css('color', '#FF0F0F');
//jQuery("#cvjs_display_tip").html(string_X);



//console.log("mouse up");
				vqRoomMouseSelect = false;



//string_X = "bPan="+bPan;
//jQuery('#temperature').css('color', '#FF0F0F');
//jQuery("#temperature").html(string_X);


//console.log("XXXmouse up bPan="+bPan)

				if (bPan){

					DoMouseUp(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);

					if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors)
						tipText = this.data("name");
					else
						tipText = this.data("id");

					//tipText = this.data("name");
					tip[cvjs_active_floorplan_div_nr].html(tipText);
					bMouseDown = false;
//console.log("m1")
					cvjs_clearDrawingHyperlinks();
//console.log("m2")
					//CheckRoomOnScreen(this);
					rid = this.data("id");
//console.log("m3")
//					change_space_fixed_locationHyperlink(rid);
				}
				else{
//console.log("XXX")
					try{

						layer_hyperlinks.attr(show);

						if (panWithThumb){
							layers_all.attr(show);
							layer_thumb.attr(hide);
						}


						//layers_all.show();
						//layer_vqrooms[cvjs_active_floorplan_div_nr].show();
						//layer_thumb.hide();

					}
					catch(err){
						//  allow the code to work with both version 1.1 and 1.2
						console.log("t6 "+err);
					}

//					tipText = this.data("name");

					if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors)
						tipText = this.data("name");
					else
						tipText = this.data("id");


					tip[cvjs_active_floorplan_div_nr].html(tipText);
					bMouseDown = false;


					cvjs_clearDrawingHyperlinks();
					//CheckRoomOnScreen(this);
					rid = this.data("id");
					//change_space(rid);
//console.log("m4");
//					change_space_fixed_locationHyperlink(rid);

				}
				bPan = false;

			}).touchstart(function(e) {

//console.log("in touchstart");

//string_X = "touchstart 1";
//jQuery('#location').css('color', '#FFFF0F');
//jQuery("#location").html(string_X);


				DoTouchStart(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
			}).touchend(function(e) {


//console.log("in touchend");

//string_X = "touchend 2";
//jQuery('#location').css('color', '#FFFF0F');
//jQuery("#location").html(string_X);
//try{
//console.log("1 here.........."+bPan+"  "+locked);
//}catch(err){console.log(err);}
				if ((!bPan) && (!locked))
					{
					rid = this.data("id");
					try{
						cvjs_change_space(rid);
					}catch(err){var i=0;}

					if (!cvjs_supressHyperlinkColors)
						tipText = this.data("name");
					else
						tipText = this.data("name");    // we only let the "name" appear

					//tipText = this.data("name");

					tip[cvjs_active_floorplan_div_nr].html(tipText);
					}

				DoTouchEnd(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);

				if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors)
					tipText = this.data("name");
				else
					tipText = this.data("id");

//				tipText = this.data("name");
				tip[cvjs_active_floorplan_div_nr].html(tipText);
				bMouseDown = false;


// need to work through a general case to detect a threshold for move
/// ENCAPSULATED URLs


//console.log("3Q");


//console.log("1");

				// for touch devices where there is no move...

//console.log("1");

				rid = this.data("id");

				var rm = findUrl(rid);


//console.log(rm);


//console.log(totalDragStart);

				if (totalDragStart == 1){

					if (rm.indexOf("http://")==-1){

						if (cvjs_Url_encapsulate_callback){

							cvjs_Url_callback(vqURLs[rm].data("url"));

							change_space_fixed_locationHyperlink(rid);
						}
						else{


							change_space_fixed_locationHyperlink(rid);

	//						if (openHyperlinkInNewWindow)
	//							window.open( current_FileNamePath + vqURLs[rm].data("url"), "CADViewerJS", "width="+hyperlinkNewWindowWidth+", height="+hyperlinkNewWindowHeight);
	//						else
	//							document.location.href = current_FileNamePath + vqURLs[rm].data("url");
						}
					}
					else{
						if (cvjs_Url_encapsulate_callback){

							cvjs_Url_callback(vqURLs[rm].data("url"));

							change_space_fixed_locationHyperlink(rid);

						}
						else{

							change_space_fixed_locationHyperlink(rid);

	//						if (openHyperlinkInNewWindow)
	//							window.open( vqURLs[rm].data("url"), "CADViewerJS","width="+hyperlinkNewWindowWidth+", height="+hyperlinkNewWindowHeight);
	//						else
	//							document.location.href = vqURLs[rm].data("url");
						}

					}

			 	}

			//console.log("m1")
//						cvjs_clearDrawingHyperlinks();
		//console.log("m2")
						//CheckRoomOnScreen(this);
//						rid = this.data("id");
		//console.log("touch m3")
		//console.log("m6");
//						change_space_fixed_locationHyperlink(rid);





			}).touchmove(function(e) {

//console.log("in touchmove");

//string_X = "touchmove 1";
//jQuery('#location').css('color', '#FF0F0F');
//jQuery("#location").html(string_X);

//console.log("touch move");
				if (!bPan)
				{
	

					// 3.2.01e
					tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});

	
				var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
				var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
				if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
				//console.log("absolute");
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
				}
				else{  // we have placed CV-JS inside a div and we have to make a relative position
					//console.log("inside");
					tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
				}
						
					
					
//				tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft+20).css("top", e.clientY+document.body.scrollTop-20);
//				tip[cvjs_active_floorplan_div_nr].css("left", e.screenX+20).css("top", e.screenY-20);
				tip[cvjs_active_floorplan_div_nr].html(tipText);
				}
				DoTouchMove(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
			}).dblclick(function(e) {


// parse depending om method call or external URL

				if (cvjs_Url_click_control==2){
					// for touch devices where there is no move...
					currentUrlId = this.data("id");
					currentUrlName = this.data("name");

					var rm = findUrl(currentUrlId);

					if (rm.indexOf("http://")==-1){

						if (cvjs_Url_encapsulate_callback){

							cvjs_Url_callback(vqURLs[rm].data("url"));

						}
						else{

							if (openHyperlinkInNewWindow)
								window.open( current_FileNamePath + vqURLs[rm].data("url"), "CADViewerJS", "width="+hyperlinkNewWindowWidth+", height="+hyperlinkNewWindowHeight);
							else
								document.location.href = current_FileNamePath + vqURLs[rm].data("url");
						}
					}
					else{
						if (cvjs_Url_encapsulate_callback){

							cvjs_Url_callback(vqURLs[rm].data("url"));

						}
						else{

							if (openHyperlinkInNewWindow)
								window.open( vqURLs[rm].data("url"), "CADViewerJS","width="+hyperlinkNewWindowWidth+", height="+hyperlinkNewWindowHeight);
							else
								document.location.href = vqURLs[rm].data("url");
						}

					}



		//console.log("m1")
						cvjs_clearDrawingHyperlinks();
		//console.log("m2")
						//CheckRoomOnScreen(this);
						rid = this.data("id");
		//console.log("touch m3")
		//console.log("m6");
						change_space_fixed_locationHyperlink(rid);

					//console.log("here we follow the hyperlink!");
				}
				vqRoomMouseSelect = false;

//				event.preventDefault();
//				event.stopPropagation();
			}).click(function(e) {

				if (cvjs_Url_click_control==1){

					// for touch devices where there is no move...
					currentUrlId = this.data("id");
					currentUrlName = this.data("name");

					var rm = findUrl(currentUrlId);

					if (rm.indexOf("http://")==-1){

						if (cvjs_Url_encapsulate_callback){

							cvjs_Url_callback(vqURLs[rm].data("url"));

						}
						else{

							if (openHyperlinkInNewWindow)
								window.open( current_FileNamePath + vqURLs[rm].data("url"), "CADViewerJS", "width="+hyperlinkNewWindowWidth+", height="+hyperlinkNewWindowHeight);
							else
								document.location.href = current_FileNamePath + vqURLs[rm].data("url");
						}
					}
					else{
						if (cvjs_Url_encapsulate_callback){

							cvjs_Url_callback(vqURLs[rm].data("url"));

						}
						else{

							if (openHyperlinkInNewWindow)
								window.open( vqURLs[rm].data("url"), "CADViewerJS","width="+hyperlinkNewWindowWidth+", height="+hyperlinkNewWindowHeight);
							else
								document.location.href = vqURLs[rm].data("url");
						}

					}


		//console.log("m1")
						cvjs_clearDrawingHyperlinks();
		//console.log("m2")
						//CheckRoomOnScreen(this);
						rid = this.data("id");
		//console.log("touch m3")
		//console.log("m6");
						change_space_fixed_locationHyperlink(rid);




					//console.log("here we follow the hyperlink!");

				}
				vqRoomMouseSelect = false;


				//console.log("URL click");

//				event.preventDefault();
//				event.stopPropagation();
			});
		}
	}

//console.log("before bFound== 0 bFound="+bFound);
	if (bFound == 0){
		var node_vq = vqURLs[jsurl].data("node");
if (cvjs_debug)	console.log("room not found "+node_vq);
		vqURLs[jsurl].data("name", "undefined");
		vqURLs[jsurl].data("id", node_vq);
		vqRooms[cvjs_active_floorplan_div_nr][jsurl].data("layer", "undefined");
		vqRooms[cvjs_active_floorplan_div_nr][jsurl].data("group", "undefined");
		vqRooms[cvjs_active_floorplan_div_nr][jsurl].data("url", "undefined");
		vqRooms[cvjs_active_floorplan_div_nr][jsurl].data("linked", false);
		vqRooms[active_floorplan_div_nr][room].data("handle", "");  // 3.2.02e
		}

   	layer_hyperlinks.add(vqURLs[jsurl]);
	}

}






/**
 * Sets measurements to be echoed through method cvjs_measurementCallback(cvjs_currentMeasurementLength, cvjs_units[cvjs_active_floorplan_div_nr]);
 * @param {boolean} callbackMode - false is default, true if measurement shall be echoed through method
 */

function cvjs_setCallbackMeasurement(callbackMode){

	cvjs_callbackMeasurement = callbackMode;
	
}






///BEGIN METHOD TO DRAW REDLINE TEXT

var tRubberBand_text1;
var text_move1;
var text_move1_noscale;
var tText_redline1;
var cvjs_text_redline;
var cvjs_text_redline_size;

var cvjs_text_insert_x1;
var cvjs_text_insert_y1;

var tArr;
var cvjs_redline_boundingBoxElement;
var cvjs_redline_Boxwidth;
var cvjs_redline_Boxheight;

var cvjs_reference_font_size = 40;
var global_textString


var cvjs_current_font_size = 40;


function cvjs_insertRedlineText(textString, fontSize){
		
	cvjs_current_font_size = cvjs_reference_font_size*fontSize/11.0;

//window.alert(fontSize+"   "+cvjs_current_font_size);	
	
	//textString = textString.replace(/(\n)/gm, '<br>');
	global_textString = textString;

	tArr = textString.split('\n');
	//console.log(tArr[0]+"  "+tArr[1]);
	//tArr = new Array()
	//tArr[0] = textString;

	// console.log(textString);

	cvjs_text_redline = textString;

	//cvjs_redlineThickness_scaleFactor = 0.25;

//	tArr[0]="<tspan>tspan line 1</tspan><tspan dy=\"10\">tspan line 2</tspan>";


	try{

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,120, '');


	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;

	tRubberBand_text1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(0,0, tArr).attr({stroke: cvjs_currentRedline_color, fill: cvjs_currentRedline_color, 'font-size': cvjs_current_font_size });

	for (var i=1; i<tArr.length; i++){
		var eml = i+"em";
		tRubberBand_text1.selectAll("tspan")[i].attr({ x:0 , dy: '1em' });
	}


	cvjs_redline_boundingBoxElement = tRubberBand_text1.getBBox();

	var x = cvjs_redline_boundingBoxElement.x;
	var y = cvjs_redline_boundingBoxElement.y;
	cvjs_redline_Boxwidth = cvjs_redline_boundingBoxElement.width;
	cvjs_redline_Boxheight = cvjs_redline_boundingBoxElement.height;

//	console.log(cvjs_redline_Boxwidth +"  "+cvjs_redline_Boxheight);

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});



	handleGroup.mousedown(mousedown_redline_text);
	handleGroup.mousemove(mousemove_redline_text);

	}
	catch(err){ console.log(err);}
}


function cvjs_removeHandleFunc_RedlineText(){
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("removed handler");

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
	
	
	//ÅÖÄ   2018-05-09  we save the screen as a pdf  - this has problems if the user decide not to save redlines, part implementation, 
	try { // 3.1.21j
		if (FileName.indexOf(".pdf")>-1 && cvjs_customPdfFolderFlag ) savepageaspdf(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	}
	catch(err){ console.log("pdf 12: "+err);}
}




var mousedown_redline_text = function() {

	console.log("tRubberBand_text1 "+tRubberBand_text1+" text_move1  "+text_move1+"  ");

	var minimize_rubberband = "M0,0S0";
	
//	console.log("remove rubberband!");
	
//	tRubberBand_text1.attr({'transform': minimize_rubberband});
	// 3.0.13f 	
	tRubberBand_text1.remove();

	
	trans = text_move1;
	// we split Text Move next
	
	

//	tText_redline1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(0,0, tArr).attr({stroke: cvjs_currentRedline_color, fill: cvjs_currentRedline_color, 'font-size': reference_font_size, 'aligment-baseline' : 'text-before-edge'});

	tText_redline1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(0,0, tArr).attr({stroke: cvjs_currentRedline_color, fill: cvjs_currentRedline_color, 'font-size': cvjs_current_font_size });

	for (var i=1; i<tArr.length; i++){
		var eml = i+"em";
		tText_redline1.selectAll("tspan")[i].attr({ x:0 , dy: '1em' });
	}

	tText_redline1.attr({'transform': text_move1});
	cvjs_removeHandleFunc_RedlineText();

	cvjs_redline++;
	cvjs_setCurrentRedlineValues("RED_"+cvjs_redline, "redline"+cvjs_redline, cvjs_redline, "RedLineLayer", "unassigned", cvjs_currentRedline_color, cvjs_currentRedline_strokeWidth, cvjs_currentRotationAngle[cvjs_active_floorplan_div_nr]);

//	console.log("tText_redline1 "+tText_redline1);

	var textString = global_textString.replace(/(\n)/gm, '<br>');

	//console.log("textString: " +textString);

	cvjs_addVqRedlinesGraphics_newNodeText(cvjs_currentRedline_underbar, tText_redline1, text_move1, textString );
	cvjs_graphicalObjectCreated('RedlineText');

}

var mousemove_redline_text = function(e,x,y) {

try{

	//cvjs_redlineThickness_scaleFactor=1;

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();
	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];
	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;
	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;



//	var factor =  1.0/tArr.length;
	var tx;
	var ty;

	tx = - cvjs_redline_Boxwidth/2*(1-cvjs_redlineThickness_scaleFactor);
	ty = + cvjs_redline_Boxheight/2*(1-cvjs_redlineThickness_scaleFactor)

	tx=0;
	ty=0;

	var transx,transy;
	transx = ((x-delta_x)/global_scale )+tx;
	transy = ((y-delta_y)/global_scale )+ty;

	//text_move1 = "T" + transx + "," + transy +"S"+cvjs_redlineThickness_scaleFactor+","+transx+","+transy;
	// 3.0.1f
	text_move1 = "T" + transx + "," + transy +"S"+cvjs_redlineThickness_scaleFactor;

	//console.log("m "+text_move1);
	
	

	text_move1_noscale = "T" + (((x-delta_x)/global_scale )+tx) + "," + (((y-delta_y)/global_scale)+ty);


//jQuery("#mark1").html(factor);	//console.log(text_move1);
//jQuery("#mark2").html(cvjs_redline_Boxwidth);	//console.log(text_move1);
//jQuery("#mark3").html(cvjs_redline_Boxheight);	//console.log(text_move1);
//jQuery("#mark4").html(tArr.length );	//console.log(text_move1);
//jQuery("#mark5").html(tx);	//console.log(text_move1);
//jQuery("#mark6").html(ty);	//console.log(text_move1);

	cvjs_text_insert_x1 = (x-delta_x)/global_scale;
	cvjs_text_insert_y1 = (y-delta_y)/global_scale;

	tRubberBand_text1.attr({'transform': text_move1});

}
catch(err){ console.log(err);}


}

///END METHOD TO DRAW REDLINE TEXT



var cvjs_currentIconPage = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];
var cvjs_MaxIconPages = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2];
var cvjs_userControlled_MaxIconPages = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3];


function cvjs_changeNextIconPage(floorplan_div){


	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

	cvjs_currentIconPage[cvjs_active_floorplan_div_nr]++;

//	console.log("change page "+floorplan_div);
	
	
	if (cvjs_currentIconPage[cvjs_active_floorplan_div_nr]>cvjs_userControlled_MaxIconPages[cvjs_active_floorplan_div_nr])
		cvjs_currentIconPage[cvjs_active_floorplan_div_nr] = 1;

	var iconmap;
	var imagemap;

	if (pageChangeInterface){
		if (cvjs_version_3_2_modal){  // modal with line thickness
			iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_8.png";
			imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_8"+"_"+floorplan_div;
		}
		else{
			iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_3.png";
			imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_3"+"_"+floorplan_div;
		}
		jQuery('#gMenu_'+floorplan_div).html("<img src=\""+iconmap+"\" style=\"margin-left: 10px; margin-top: 10px;\" usemap=\""+imagemap+"\" border=\"0\" height=\"276\" width=\"62\" class=\"map\" hidefocus=\"true\">");
	}
	else{
		if (!pageChangeInterfaceFalse_noIconNavigation){ // we want to use the icon menu with navigation buttons now pageChange is disables
			iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_2.png";
			imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_"+floorplan_div;
			jQuery('#gMenu_'+floorplan_div).html("<img src=\""+iconmap+"\" style=\"margin-left: 10px; margin-top: 10px;\" usemap=\""+imagemap+"\" border=\"0\" height=\"303\" width=\"62\" class=\"map\" hidefocus=\"true\">");
		}
		else{  // we have single page drawings, so we wont need the navigation buttons in the icon menu

				if (cvjs_version_3_2_modal){  // modal with line thickness
					iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_8.png";
					imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_8"+"_"+floorplan_div;
				}
				else{
					iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_3.png";
					imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_3"+"_"+floorplan_div;
				}
				jQuery('#gMenu_'+floorplan_div).html("<img src=\""+iconmap+"\" style=\"margin-left: 10px; margin-top: 10px;\" usemap=\""+imagemap+"\" border=\"0\" height=\"276\" width=\"62\" class=\"map\" hidefocus=\"true\">");
		}

	}

	
	console.log('#gMenu_'+floorplan_div+"  "+jQuery('#gMenu_'+floorplan_div).html());
	
}


function cvjs_changePreviousIconPage(floorplan_div){


	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

	cvjs_currentIconPage[cvjs_active_floorplan_div_nr]--;

	if (cvjs_currentIconPage[cvjs_active_floorplan_div_nr]<1)
		cvjs_currentIconPage[cvjs_active_floorplan_div_nr] = cvjs_userControlled_MaxIconPages[cvjs_active_floorplan_div_nr];

	
	console.log("change page "+floorplan_div);
	
	
	var iconmap;
	var imagemap;

	
	if (pageChangeInterface){
		if (cvjs_version_3_2_modal){  // modal with line thickness
			iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_8.png";
			imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_8"+"_"+floorplan_div;
		}
		else{
			iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_3.png";
			imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_3"+"_"+floorplan_div;
		}
		jQuery('#gMenu_'+floorplan_div).html("<img src=\""+iconmap+"\" style=\"margin-left: 10px; margin-top: 10px;\" usemap=\""+imagemap+"\" border=\"0\" height=\"276\" width=\"62\" class=\"map\" hidefocus=\"true\">");
	}
	else{
		if (!pageChangeInterfaceFalse_noIconNavigation){ // we want to use the icon menu with navigation buttons now pageChange is disables
			iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_2.png";
			imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_"+floorplan_div;
			jQuery('#gMenu_'+floorplan_div).html("<img src=\""+iconmap+"\" style=\"margin-left: 10px; margin-top: 10px;\" usemap=\""+imagemap+"\" border=\"0\" height=\"303\" width=\"62\" class=\"map\" hidefocus=\"true\">");
		}
		else{  // we have single page drawings, so we wont need the navigation buttons in the icon menu

				if (cvjs_version_3_2_modal){  // modal with line thickness
					iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_8.png";
					imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_8"+"_"+floorplan_div;
				}
				else{
					iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_3.png";
					imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_3"+"_"+floorplan_div;
				}
				jQuery('#gMenu_'+floorplan_div).html("<img src=\""+iconmap+"\" style=\"margin-left: 10px; margin-top: 10px;\" usemap=\""+imagemap+"\" border=\"0\" height=\"276\" width=\"62\" class=\"map\" hidefocus=\"true\">");
		}

	}

	
	console.log('#gMenu_'+floorplan_div+"  "+jQuery('#gMenu_'+floorplan_div).html());

	
	
	/*
	
	
	if (pageChangeInterface){
		if (cvjs_version_3_2_modal){  // modal with line thickness
			iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_8.png";
			imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_8";
		}
		else{
			iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_3.png";
			imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_3";
		}
		jQuery('#gMenu').html("<img src=\""+iconmap+"\" style=\"margin-left: 10px; margin-top: 10px;\" usemap=\""+imagemap+"\" border=\"0\" height=\"276\" width=\"62\" class=\"map\" hidefocus=\"true\">");
	}
	else{
		if (!pageChangeInterfaceFalse_noIconNavigation){ // we want to use the icon menu with navigation buttons now pageChange is disables
			iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_2.png";
			imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr];
			jQuery('#gMenu').html("<img src=\""+iconmap+"\" style=\"margin-left: 10px; margin-top: 10px;\" usemap=\""+imagemap+"\" border=\"0\" height=\"303\" width=\"62\" class=\"map\" hidefocus=\"true\">");
		}
		else{  // we have single page drawings, so we wont need the navigation buttons in the icon menu
			if (cvjs_version_3_2_modal){  // modal with line thickness
				iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_8.png";
				imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_8";
			}
			else{
				iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_3.png";
				imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_3";
			}
			jQuery('#gMenu').html("<img src=\""+iconmap+"\" style=\"margin-left: 10px; margin-top: 10px;\" usemap=\""+imagemap+"\" border=\"0\" height=\"276\" width=\"62\" class=\"map\" hidefocus=\"true\">");
		}
	}
*/

}


function cvjs_changeToIconPage(pageNr, floorplan_div){


	if (floorplan_div == undefined){
		
		cvjs_active_floorplan_div_nr = 0;
	}
	else{
		if (!floorplan_div.endsWith("_svg")) floorplan_div = floorplan_div +"_svg";
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	}

	cvjs_currentIconPage[cvjs_active_floorplan_div_nr] = pageNr;


	
	var iconmap;
	var imagemap;

	
	if (pageChangeInterface){
		if (cvjs_version_3_2_modal){  // modal with line thickness
			iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_8.png";
			imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_8"+"_"+floorplan_div;
		}
		else{
			iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_3.png";
			imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_3"+"_"+floorplan_div;
		}
		jQuery('#gMenu_'+floorplan_div).html("<img src=\""+iconmap+"\" style=\"margin-left: 10px; margin-top: 10px;\" usemap=\""+imagemap+"\" border=\"0\" height=\"276\" width=\"62\" class=\"map\" hidefocus=\"true\">");
	}
	else{
		if (!pageChangeInterfaceFalse_noIconNavigation){ // we want to use the icon menu with navigation buttons now pageChange is disables
			iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_2.png";
			imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_"+floorplan_div;
			jQuery('#gMenu_'+floorplan_div).html("<img src=\""+iconmap+"\" style=\"margin-left: 10px; margin-top: 10px;\" usemap=\""+imagemap+"\" border=\"0\" height=\"303\" width=\"62\" class=\"map\" hidefocus=\"true\">");
		}
		else{  // we have single page drawings, so we wont need the navigation buttons in the icon menu

				if (cvjs_version_3_2_modal){  // modal with line thickness
					iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_8.png";
					imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_8"+"_"+floorplan_div;
				}
				else{
					iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_3.png";
					imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_3"+"_"+floorplan_div;
				}
				jQuery('#gMenu_'+floorplan_div).html("<img src=\""+iconmap+"\" style=\"margin-left: 10px; margin-top: 10px;\" usemap=\""+imagemap+"\" border=\"0\" height=\"276\" width=\"62\" class=\"map\" hidefocus=\"true\">");
		}

	}

	console.log('page change  #gMenu_'+floorplan_div+"  "+jQuery('#gMenu_'+floorplan_div).html());

}






/**
 * Sets the icon interface for viewing, layerhanding, measurement, etc. only
  * @param {string} floorplan_div - name of div containing CADViewer canvas
*/
function cvjs_setIconInterfaceControls_ViewingOnly(floorplan_div){


	if (floorplan_div == undefined){
		
		cvjs_active_floorplan_div_nr = 0;
	}
	else {
		floorplan_div = floorplan_div +"_svg";
		
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
		
	}

	cvjs_userControlled_MaxIconPages[cvjs_active_floorplan_div_nr] = 1;

}


/**
 * Sets the icon interface for enabling space management
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */
function cvjs_setIconInterfaceControls_SpaceManagement(floorplan_div){

	if (floorplan_div == undefined){
		
		cvjs_active_floorplan_div_nr = 0;
	}
	else {
		floorplan_div = floorplan_div +"_svg";
		
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
		
	}

	cvjs_userControlled_MaxIconPages[cvjs_active_floorplan_div_nr] = 5;

	// HERE WE ALSO MAKE SURE THAT WE HAVE THE DRAWING JS AS A STRING DOCUMENT FOR PUBLISHING

	cvjs_loadCurrentLoadedDrawingAsString = true;

//	window.alert("max pages "+cvjs_userControlled_MaxIconPages[cvjs_active_floorplan_div_nr]);
	
}


/**
 * Sets the icon interface for enabling image insert
 */
function cvjs_setIconInterfaceControls_ImageInsert(){

	cvjs_userControlled_MaxIconPages[cvjs_active_floorplan_div_nr] = 4;

}







function cvjs_initiateInsertRedlineText(floorplan_div){

	var text = jQuery('#redline_text').val();
	var fontSize = jQuery('#cvjs_redlineFontSizeInput_'+floorplan_div).val();

//	window.alert(text+"   and fontSize      "+fontSize+"XXX");
	
	//console.log(text);
	jQuery("#redlinetextModal_"+floorplan_div).hide();
	cvjs_insertRedlineText(text, fontSize);

}

var image_encapsulate_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];






var cvjs_currentImageLink_id = 0;
var cvjs_currentImageLink_underbar = 0;
var currentImageNoteId;


var defaultColor_ImageNotes = {
            fill: '#DCCCFF' //,
        }

var highlightColor_ImageNotes = {
            fill: '#DC05FF' //,
        }


/**
 * Insert image link
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

function cvjs_insertImageLink(floorplan_div){


	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	



//	cvjs_currentStickyNote_name = "Bob Hope";
//	cvjs_currentStickyNote_id = "N1";

	cvjs_currentImageLink_id = vqImageNotes.length-1;

	if (isNaN(cvjs_currentImageLink_id) || cvjs_currentImageLink_id<0 ) cvjs_currentImageLink_id = 0;

	//console.log(cvjs_currentImageLink_id)

	cvjs_currentImageLink_id = cvjs_currentImageLink_underbar +1;

	//console.log(" before _ImageLink "+cvjs_currentImageLink_id+"  "+cvjs_currentImageLink_underbar);

	cvjs_addHandleFunc_ImageLink();
}


function cvjs_addHandleFunc_ImageLink(){

//console.log("1 ");

	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;


	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});



	handleGroup.mousedown(mousedown_imagelink);
	mouseMoveStickyNote = false;
	handleGroup.mousemove(mousemove_imagelink);

}

function cvjs_removeHandleFunc_ImageLink(){
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("removed handler");

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
	
	
	//ÅÖÄ   2018-05-09  we save the screen as a pdf  - this has problems if the user decide not to save redlines, part implementation, 
	try { // 3.1.21j
		if (FileName.indexOf(".pdf")>-1 && cvjs_customPdfFolderFlag ) savepageaspdf(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	}
	catch(err){ console.log("pdf 12: "+err);}

}


var mousemove_imagelink = function(e,x,y) {

	if (mouseMoveStickyNote == false){

		var rightadjustment = 0;
		if (cvjs_currentImageLink_id<10) rightadjustment = 3;

		tRubberBand_sn = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0.01,0.01h20v20h-20v-20Z").attr({stroke: "#000000", "stroke-width" : "1.0","fill" : "none"}),cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M4,11h11v8h-11v-8h2 M4,19 8,14 10,16 12.5,15 15,19").attr({stroke: "#000000", "stroke-width" : "0.5", "fill" : "none"}),
								  cvjs_rPaper[cvjs_active_floorplan_div_nr].text(3+rightadjustment,9,"#"+cvjs_currentImageLink_id).attr({"font-size": "8px", "font-style": "italic", stroke: "#000000", "stroke-width" : "0.3", "fill" : "#000000"}))   ;

								  
//		tRubberBand_sn = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M-24,-24h24v24h-24v-24Z").attr({stroke: "#FFF", "stroke-width" : "0.01","fill" : "none", 'stroke-opacity': "0.01" }), cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0,0h20v20h-20v-20Z").attr({stroke: "#000000", "stroke-width" : "1.0","fill" : "none"}),cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M4,11h11v8h-11v-8h2 M4,19 8,14 10,16 12.5,15 15,19").attr({stroke: "#000000", "stroke-width" : "0.5", "fill" : "none"}),
//								  cvjs_rPaper[cvjs_active_floorplan_div_nr].text(3+rightadjustment,9,"#"+cvjs_currentImageLink_id).attr({"font-size": "8px", "font-style": "italic", stroke: "#000000", "stroke-width" : "0.3", "fill" : "#000000"}))   ;

								  
								  
		mouseMoveStickyNote = true;
	}

//console.log("check");

	// 2016-04-11
	x = x+document.body.scrollLeft;
	y = y+document.body.scrollTop;

	// 3.1.21k
	var scaleNote = 1;
	var scaleFactorNotes = 600; //300

	 if ( (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])> (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr]))
	 	scaleNote = (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	 else
	 	scaleNote = (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	
	tTransform_c = "T" + ((x-delta_x)/global_scale + scaleNote*10.0)  + "," + ((y-delta_y)/global_scale + (scaleNote*10.0));
			
	tTransform_c += "S"+(scaleNote);
	tRubberBand_sn.attr({'transform': tTransform_c});
//	tRubberBand_sn.attr({'transform': tTransform_c , "opacity" : "0.5"});
}


var mousedown_imagelink = function(e,x,y) {

	var floorplan_div = floorplan_div_Array[cvjs_active_floorplan_div_nr];

	tTransform_c = "t0,0S"+(scaleNote/100);
	tRubberBand_sn.attr({'transform': tTransform_c , "opacity" : "0.0"});
	tRubberBand_sn.attr({fill: 'none', "fill-opacity": "0.0", stroke: '#000', 'stroke-opacity': "0.0" });
	tRubberBand_sn.remove();  // 3.1.21j
	
	
	var rightadjustment = 0;
	if (cvjs_currentImageLink_id<10) rightadjustment = 3;

	tRubberBand_c = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0.01,0.01h20v20h-20v-20Z").attr({stroke: "#000000", "stroke-width" : "1.0"}),cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M4,11h11v8h-11v-8h2").attr({stroke: "#000000", "stroke-width" : "0.5"}),
								  cvjs_rPaper[cvjs_active_floorplan_div_nr].text(3+rightadjustment,9,"#"+cvjs_currentImageLink_id).attr({"font-size": "8px", "font-style": "italic", stroke: "#000000", "stroke-width" : "0.3", "fill" : "#000000", "fill-opacity" : 1.0}),cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M4,19 8,14 10,16 12.5,15 15,19").attr({stroke: "#000000", "stroke-width" : "0.5", "fill": "#000000"}))   ;

	// 2016-04-11
	x = x+document.body.scrollLeft;
	y = y+document.body.scrollTop;


	var scaleNote = 1;
	var scaleFactorNotes = 600; // 300

	 if ( (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])> (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr]))
	 	scaleNote = (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	 else
	 	scaleNote = (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])/scaleFactorNotes;

	tTransform_c = "T" + ((x-delta_x)/global_scale + scaleNote*10.0)  + "," + ((y-delta_y)/global_scale + (scaleNote*10.0));
		
	
	tTransform_c += "S"+(scaleNote);
	tRubberBand_c.attr({'transform': tTransform_c , "opacity" : "1"});

//console.log("tTransform_c"+tTransform_c);

	tRubberBand_c.attr({	fill: '#DCCCFF', "fill-opacity": "0.8", stroke: '#000', 'stroke-opacity': "1" });

	cvjs_currentStickyNote_transform = tTransform_c;
	cvjs_removeHandleFunc_ImageLink();

	var cImageNoteItemX = tRubberBand_c.data("node", cvjs_currentImageLink_underbar);
	vqImageNotes.push(cImageNoteItemX);


	currentImageNoteId = vqImageNotes.length-1;

	//console.log("after push"+currentImageNoteId);

	vqImageNotes[currentImageNoteId].data("id", currentImageNoteId+1);
	vqImageNotes[currentImageNoteId].data("name", "object"+(currentImageNoteId+1));
	vqImageNotes[currentImageNoteId].data("layer", "objectLayer");
	vqImageNotes[currentImageNoteId].data("group", "unassigned");
	vqImageNotes[currentImageNoteId].data("username", cvjs_currentRedline_username);
	vqImageNotes[currentImageNoteId].data("userid", cvjs_currentRedline_userid);
	vqImageNotes[currentImageNoteId].data("currentPage", multiPages[cvjs_active_floorplan_div_nr].currentPage);
	vqImageNotes[currentImageNoteId].data("imageObject", "");
	vqImageNotes[currentImageNoteId].data("imageHeight", 450);
	vqImageNotes[currentImageNoteId].data("imageWidth", 600);
	vqImageNotes[currentImageNoteId].data("transform", tTransform_c);


	jQuery('#cvjs_floorPlanInsertImage').html("");


/*
					OBJECT_1: {
						name: "object1",
						id: "1",
						layer: "ObjectLayer",
						group: "unassigned",
						username: "James Smith",
						userid: "user_01",
						currentPage: 1,
						insertX: 200,
						insertY: 300,
						imageObject: "",
						imageHeight: 450,
						imageWidth: 600
					}
*/



	vqImageNotes[cvjs_currentImageLink_underbar].mousedown(function(e){
		var currentImageNoteId = this.data("node");

		jQuery('#cvjs_imageObject').html("<b>"+languageTable.languages[cvjs_currentLanguage].ImageObjectModal.Header+(currentImageNoteId+1)+"</b>");

		if (vqImageNotes[currentImageNoteId].data("imageObject")=="" ){
			jQuery('#cvjs_floorPlanInsertImage').html("");
		}else{			
			// 3.1.21l
			if (cvjs_buildFolderTree_crossDomain)
				jQuery('#cvjs_floorPlanInsertImage').html("<img src='"+cvjs_serverHandlersPath+cvjs_serverLoadFileController+"?file="+cvjs_insertImagesRelativePath+"/"+vqImageNotes[currentImageNoteId].data("imageObject")+"' height='"+vqImageNotes[currentImageNoteId].data("imageHeight")+"' />");
			else
				jQuery('#cvjs_floorPlanInsertImage').html("<img src='"+cvjs_insertImagesRelativePath+"/"+vqImageNotes[currentImageNoteId].data("imageObject")+"' height='"+vqImageNotes[currentImageNoteId].data("imageHeight")+"' />");	
			//jQuery('#cvjs_floorPlanInsertImage').html("<img src='"+cvjs_insertImagesRelativePath+"/"+vqImageNotes[currentImageNoteId].data("imageObject")+"' height='"+vqImageNotes[imageNoteId].data("imageHeight")+"' />");		
//			jQuery('#cvjs_floorPlanInsertImage').html("<img src='"+cvjs_insertImagesRelativePath+"/"+vqImageNotes[currentImageNoteId].data("imageObject")+"' height='"+vqImageNotes[currentImageNoteId].data("imageHeight")+"' />");


			jQuery('#cvjs_floorPlanInsertImageEncapsulate_'+floorplan_div).css("width", vqImageNotes[currentImageNoteId].data("imageWidth")+8);
			jQuery('#cvjs_floorPlanInsertImage').css("width", vqImageNotes[currentImageNoteId].data("imageWidth"));
			jQuery('#cvjs_floorPlanInsertImageTop').css("width", vqImageNotes[currentImageNoteId].data("imageWidth"));
		}

		//console.log("mousedown "+currentImageNoteId );

/***  this is for generating the data arrays based on loaded data

		for (var imageObject in cvjs_insertImageObjects){
//			console.log(imageObject+"  "+ cvjs_insertImageObjects[imageObject].id+"  "+currentImageNoteId);
				if (cvjs_insertImageObjects[imageObject].id == (currentImageNoteId+1)){
					if (cvjs_insertImageObjects[imageObject].imageObject=="" ){
						jQuery('#cvjs_floorPlanInsertImage').html("");
					}else{
						jQuery('#cvjs_floorPlanInsertImage').html("<img src='"+cvjs_insertImagesRelativePath+"/"+cvjs_insertImageObjects[imageObject].imageObject+"' height='"+cvjs_insertImageObjects[imageObject].imageHeight+"' />");
						jQuery('#cvjs_floorPlanInsertImageEncapsulate').css("width", cvjs_insertImageObjects[imageObject].imageWidth+8);
						jQuery('#cvjs_floorPlanInsertImage').css("width", cvjs_insertImageObjects[imageObject].imageWidth);
						jQuery('#cvjs_floorPlanInsertImageTop').css("width", cvjs_insertImageObjects[imageObject].imageWidth);
					}
				}
		}

*****/

		// 3.1.21k
		
		
		
		if (image_encapsulate_offset_flag[cvjs_active_floorplan_div_nr]){
			image_encapsulate_offset_flag[cvjs_active_floorplan_div_nr] = false;
			// 3.1.21j .appendTo('body');
			jQuery("#cvjs_floorPlanInsertImageEncapsulate_"+floorplan_div).css({position: "fixed"});
//			window.alert("here"+jQuery('#'+floorplan_div).position().left+"  "+jQuery('#'+floorplan_div).position().top);
			jQuery("#cvjs_floorPlanInsertImageEncapsulate_"+floorplan_div).offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});  //.offset({left:150, top: 50});
		}
		
		jQuery( "#cvjs_floorPlanInsertImageEncapsulate_"+floorplan_div ).show();
	
	}).mousemove(function(e){
		//console.log(cvjs_currentImageLink_underbar);
		currentImageNoteId = this.data("node");
		vqImageNotes[currentImageNoteId].attr(highlightColor_ImageNotes);
	}).mouseout(function(e){
		currentImageNoteId = this.data("node");
		vqImageNotes[currentImageNoteId].attr(defaultColor_ImageNotes);
	}).mouseup(function(e){


	}).touchstart(function(e){
	}).touchmove(function(e){
	}).touchend(function(e){
	}).dblclick(function(e){
	});

	cvjs_currentImageLink_underbar++;

//	cvjs_addVqStickyNotesGraphics_newNode(cvjs_currentStickyNote_underbar, tRubberBand_c);
//	cvjs_setUpVqImageLink_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentStickyNote_underbar);
//	cvjs_graphicalObjectCreated('StickyNote');


}

// END - ImageLink


var cvjs_quickCountCounter = 0;
var vqQuickCount = new Array();

var cvjs_callbackQuickCount = false;


/**
 * Sets quickcounts to be echoed through method cvjs_QuickCountCallback(cvjs_quickCountCounter);
 * @param {boolean} callbackMode - false is default, true if Quick Counts shall be echoed through method
 */

function cvjs_setCallbackQuickCount(callbackMode){

	cvjs_callbackQuickCount = callbackMode;

}




/**
 * Show number of quick counts 
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */
 

function cvjs_showMeCounts(floorplan_div){


 	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	


//window.alert("show me counts "+floorplan_div);


	var status = "";
	
	if (cvjs_quickCountCounter == 0 || cvjs_quickCountCounter == 1)
		status =languageTable.languages[cvjs_currentLanguage].InfoMessageModal.QuickCountSingle+cvjs_quickCountCounter;  //
	else
		status =languageTable.languages[cvjs_currentLanguage].InfoMessageModal.QuickCountMultiple+cvjs_quickCountCounter;

	cvjs_displayInformationModal(floorplan_div, status);

	
/*		
window.alert(status);
	
	
	jQuery('#cvjs_informationModalText_2_'+floorplan_div).html(status);

window.alert("1");

	jQuery('#info_messageModal_2_'+floorplan_div).modal('show');

	
window.alert("2");
*/
	
}


/**
 * Clear the quick counts counter 
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */
 
function cvjs_clearQuickCounts(floorplan_div){

 	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	



	if (vqQuickCount.length>0){
		for (var i=0; i<vqQuickCount.length; i++){
					//console.log("delete "+i);
			vqQuickCount[i].data("deleted", true);
			var dTransform = "S0.001";
			vqQuickCount[i].attr({'transform': dTransform, "opacity" : "0.01"});
		}
		vqQuickCount.length = 0;
	}
	cvjs_quickCountCounter = 0;

}


/*
function cvjs_quickCount(){

	cvjs_quickCountCounter = 0;

	if (vqQuickCount.length>0){
		for (var i=0; i<vqQuickCount.length; i++){
					//console.log("delete "+i);
			vqQuickCount[i].data("deleted", true);
			var dTransform = "S0.001";
			vqQuickCount[i].attr({'transform': dTransform, "opacity" : "0.01"});
		}
		vqQuickCount.length = 0;
	}
	cvjs_quickCountCounter = 0;
	cvjs_addHandleFunc_QuickCount();
}
*/




/**
 * Activate quick count, 
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */
 
function cvjs_quickCount(floorplan_div){

 	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	


	cvjs_quickCountCounter = 0;

		if (vqQuickCount.length>0){
			for (var i=0; i<vqQuickCount.length; i++){
						//console.log("delete "+i);
				vqQuickCount[i].data("deleted", true);
				var dTransform = "S0.001";
				vqQuickCount[i].attr({'transform': dTransform, "opacity" : "0.01"});
			}
			vqQuickCount.length = 0;
		}
		cvjs_currentImageLink_id =0;
		cvjs_currentImageLink_underbar =0;


	cvjs_quickCountCounter = 0;
	cvjs_addHandleFunc_QuickCount();
}

var oldKeyDown;
var cvjs_quickCount_started = false;

function cvjs_addHandleFunc_QuickCount(){

//console.log("1 ");

	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;


	mouseMoveStickyNote = false;

	cvjs_quickCount_started = true;

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});




	handleGroup.dblclick(dblclick_quickcount);
	handleGroup.mousedown(mousedown_quickcount);
	handleGroup.mousemove(mousemove_quickcount);

	handleGroup.mouseup(mouseup_quickcount);
	
	
	
	oldKeyDown = jQuery(document).keydown().bind({});
	jQuery(document).keydown(function(e) {

		if (e.keyCode == 27) {

			if (cvjs_quickCount_started){
				var scaleNote = 1;
				tTransform_c = "t0,0S"+(scaleNote/100);
				tRubberBand_sn.attr({'transform': tTransform_c , "opacity" : "0.0"});
				tRubberBand_sn.attr({fill: 'none', "fill-opacity": "0.0", stroke: '#000', 'stroke-opacity': "0.0" });
				cvjs_removeHandleFunc_QuickCount();
				
				//cvjs_quickCountCounter--;

				jQuery(document).keydown() == oldKeyDown;
			}
		}
		//console.log("X key pressed document");
	});

}

/**
 * Exit quick count, alternative method to double click or Esc 
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

function cvjs_exitQuickCount(floorplan_div){

	var scaleNote = 1;
	tTransform_c = "t0,0S"+(scaleNote/100);
	tRubberBand_sn.attr({'transform': tTransform_c , "opacity" : "0.0"});
	tRubberBand_sn.attr({fill: 'none', "fill-opacity": "0.0", stroke: '#000', 'stroke-opacity': "0.0" });
	cvjs_removeHandleFunc_QuickCount();

}




function cvjs_removeHandleFunc_QuickCount(){
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	cvjs_quickCount_started = false;
	//console.log("removed handler");

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;

	try{
		if (cvjs_callbackQuickCount) 
			cvjs_QuickCountCallback(cvjs_quickCountCounter);
	
	}
	catch(err){
		console.log(err);
	}
	
	
	
}


var mousemove_quickcount = function(e,x,y) {

	x_quickcount_move = x;
	y_quickcount_move = y;

	if (mouseMoveStickyNote == false){
	
//		tRubberBand_sn = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0,-4 4,0 12,-8 11,-9 4,-2 1,-5 0,-4 4,0").attr({stroke: "#FF7F27", "stroke-width" : "0.5", "fill" : "#FF7F27"}))   ;
//		tRubberBand_sn = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0,-24 4,-20 12,-28 11,-29 4,-22 1,-25 0,-24 4,-20").attr({stroke: "#FF7F27", "stroke-width" : "0.5", "fill" : "#FF7F27"}))   ;
// 3.0.13g
// 3.0.13g
		tRubberBand_sn = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0,-14 4,-10 12,-18 11,-19 4,-12 1,-15 0,-14 4,-10").attr({stroke: "#FF7F27", "stroke-width" : "0.5", "fill" : "#FF7F27"}))   ;
//		tRubberBand_sn = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0,-9 4,-5 12,-13 11,-14 4,-7 1,-10 0,-9 4,-5").attr({stroke: "#FF7F27", "stroke-width" : "0.5", "fill" : "#FF7F27"}))   ;
		mouseMoveStickyNote = true;
	}

//console.log("check");

	// 2016-04-11
	x = x+document.body.scrollLeft;
	y = y+document.body.scrollTop;

	tTransform_c = "t" + (x-delta_x)/global_scale + "," + (y-delta_y)/global_scale;
	var scaleNote = 1;
	var scaleFactorNotes = 600; //300

	 if ( (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])> (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr]))
	 	scaleNote = (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	 else
	 	scaleNote = (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])/scaleFactorNotes;

	tTransform_c += "S"+(scaleNote);
	tRubberBand_sn.attr({'transform': tTransform_c});
//	tRubberBand_sn.attr({'transform': tTransform_c , "opacity" : "0.5"});
}


var dblclick_quickcount = function(e,x,y) {

//console.log("doubleclick");

	var scaleNote = 1;
	tTransform_c = "t0,0S"+(scaleNote/100);
	tRubberBand_sn.attr({'transform': tTransform_c , "opacity" : "0.0"});
	tRubberBand_sn.attr({fill: 'none', "fill-opacity": "0.0", stroke: '#000', 'stroke-opacity': "0.0" });
	cvjs_removeHandleFunc_QuickCount();
	
	//3.2.02f
	//cvjs_quickCountCounter--;

}

// 3.1.20i
var mousedown_quickcount = function(e,x,y) {

//	console.log("mousedown ");

}

var x_quickcount_last = 0; 
var y_quickcount_last = 0;


var mouseup_quickcount = function(e,x,y) {

//	console.log("mouseup ");

	// 3.1.20i
	if ((Math.abs(x-x_quickcount_last)<3) && (Math.abs(y-y_quickcount_last)<3)){	
		//console.log("on top of other note");
		return;
	}
	

	//console.log(e.which);

	if (e.which == 3){  // right click so we leave the method

		tRubberBand_sn.attr({'transform': tTransform_c , "opacity" : "0.0"});
		tRubberBand_sn.attr({fill: 'none', "fill-opacity": "0.0", stroke: '#000', 'stroke-opacity': "0.0" });
		cvjs_removeHandleFunc_QuickCount();
		return;

	}

	//tTransform_c = "t0,0S"+(scaleNote/100);

	//tRubberBand_sn.attr({'transform': tTransform_c , "opacity" : "0.0"});
	//tRubberBand_sn.attr({fill: 'none', "fill-opacity": "0.0", stroke: '#000', 'stroke-opacity': "0.0" });

//	tRubberBand_c = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0,-24 4,-20 12,-28 11,-29 4,-22 1,-25 0,-24 4,-20").attr({stroke: "#FF7F27", "stroke-width" : "0.5", "fill" : "#FF7F27"}))   ;

	//tRubberBand_c = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0,-4 4,0 12,-8 11,-9 4,-2 1,-5 0,-4 4,0").attr({stroke: "#FF7F27", "stroke-width" : "0.5", "fill" : "#FF7F27"}))   ;

	
// 3.0.13g
		tRubberBand_c = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0,-14 4,-10 12,-18 11,-19 4,-12 1,-15 0,-14 4,-10").attr({stroke: "#FF7F27", "stroke-width" : "0.5", "fill" : "#FF7F27"}))   ;
//		tRubberBand_c = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0,-9 4,-5 12,-13 11,-14 4,-7 1,-10 0,-9 4,-5").attr({stroke: "#FF7F27", "stroke-width" : "0.5", "fill" : "#FF7F27"}))   ;
	
	
	
	// 2016-04-11
	x = x+document.body.scrollLeft;
	y = y+document.body.scrollTop;

	// 2016-04-11 translating 6 "pixels" only
	tTransform_c = "t" + (x+global_scale-delta_x)/global_scale + "," + (y+global_scale-delta_y)/global_scale;    // 2*global_scale, adjusting for location change in mousemove


//console.log(tTransform_c);

	var scaleNote = 1;
	var scaleFactorNotes = 600; // 300

	 if ( (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])> (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr]))
	 	scaleNote = (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	 else
	 	scaleNote = (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])/scaleFactorNotes;

	tTransform_c += "S"+(scaleNote);
	tRubberBand_c.attr({'transform': tTransform_c , "opacity" : "1"});

	tRubberBand_c.attr({	fill: '#DCCCFF', "fill-opacity": "0.8", stroke: '#000', 'stroke-opacity': "1" });

	cvjs_currentStickyNote_transform = tTransform_c;

	//cvjs_removeHandleFunc_ImageLink();

	var cImageNoteItemX = tRubberBand_c.data("node", cvjs_currentImageLink_underbar);
	vqQuickCount.push(cImageNoteItemX);
	cvjs_quickCountCounter++;

	
	x_quickcount_last = x; 
	y_quickcount_last = y;
	
	
	
//	console.log("cvjs_quickCountCounter"+cvjs_quickCountCounter);
	
}



/**
 * On the Room Layer designated by the Space Management list, it searches for the encapsulating polygon at the location of mouse-click. If polygon is found
 * a room object is created.
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */
 
function cvjs_setSpacePolygonOnLayer(floorPlan_div){


	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	



	cvjs_findSVGcoordinate_setPolygonOnLayer();
}


function cvjs_findSVGcoordinate_setPolygonOnLayer() {

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});


	handleGroup.mousedown(mousedown_cvjs_svgCoord_polygonfind);
}



// A C++ program to check if a given point lies inside a given polygon
// Refer http://www.geeksforgeeks.org/check-if-two-given-line-segments-intersect/
// for explanation of functions onSegment(), orientation() and doIntersect()
//struct Point
//{
//    int x;
//    int y;
//};

// Given three colinear points p, q, r, the function checks if
// point q lies on line segment 'pr'
function onSegment(p_x, p_y, q_x, q_y, r_x, r_y)
{
    if (q_x <= Math.max(p_x, r_x) && q_x >= Math.min(p_x, r_x) &&
            q_y <= Math.max(p_y, r_y) && q_y >= Math.min(p_y, r_y))
        return true;
    return false;
}

// To find orientation of ordered triplet (p, q, r).
// The function returns following values
// 0 --> p, q and r are colinear
// 1 --> Clockwise
// 2 --> Counterclockwise
function orientation(p_x, p_y, q_x, q_y, r_x, r_y)
{
    var val = (q_y - p_y) * (r_x - q_x) -
              (q_x - p_x) * (r_y - q_y);

    if (val == 0) return 0;  // colinear
    return (val > 0)? 1: 2; // clock or counterclock wise
}

// The function that returns true if line segment 'p1q1'
// and 'p2q2' intersect.
function doIntersect(p1_x, p1_y, q1_x, q1_y, p2_x, p2_y, q2_x, q2_y)
{
    // Find the four orientations needed for general and
    // special cases
    var o1 = orientation(p1_x, p1_y, q1_x, q1_y, p2_x, p2_y);
    var o2 = orientation(p1_x, p1_y, q1_x, q1_y, q2_x, q2_y);
    var o3 = orientation(p2_x, p2_y, q2_x, q2_y, p1_x, p1_y);
    var o4 = orientation(p2_x, p2_y, q2_x, q2_y, q1_x, q1_y);

    // General case
    if (o1 != o2 && o3 != o4)
        return true;

    // Special Cases
    // p1, q1 and p2 are colinear and p2 lies on segment p1q1
    if (o1 == 0 && onSegment(p1_x, p1_y, p2_x, p2_y, q1_x, q1_y)) return true;

    // p1, q1 and p2 are colinear and q2 lies on segment p1q1
    if (o2 == 0 && onSegment(p1_x, p1_y, q2_x, q2_y, q1_x, q1_y)) return true;

    // p2, q2 and p1 are colinear and p1 lies on segment p2q2
    if (o3 == 0 && onSegment(p2_x, p2_y, p1_x, p1_y, q2_x, q2_y)) return true;

     // p2, q2 and q1 are colinear and q1 lies on segment p2q2
    if (o4 == 0 && onSegment(p2_x, p2_y, q1_x, q1_y, q2_x, q2_y)) return true;

    return false; // Doesn't fall in any of the above cases
}

// Returns true if the point p lies inside the polygon[] with n vertices
function isInside(X, Y, n, p_x, p_y)
{
    // There must be at least 3 vertices in polygon[]
    if (n < 3)  return false;

    // Create a point for line segment from p to infinite
    p_extreme_x = 100000;
    p_extreme_y = p_y;

    // Count intersections of the above line with sides of polygon
    var count = 0, i = 0;
    do
    {
        var next = (i+1)%n;

        // Check if the line segment from 'p' to 'extreme' intersects
        // with the line segment from 'polygon[i]' to 'polygon[next]'
        if (doIntersect(X[i], Y[i], X[next], Y[next], p_x, p_y, p_extreme_x, p_extreme_y))
        {
            // If the point 'p' is colinear with line segment 'i-next',
            // then check if it lies on segment. If it lies, return true,
            // otherwise false
            if (orientation(X[i], Y[i], p_x, p_y, X[next], Y[next]) == 0)
               return onSegment(X[i], Y[i], p_x, p_y, X[next], Y[next]);

            count++;
        }
        i = next;
    } while (i != 0);

    // Return true if count is odd, false otherwise
    return count&1;  // Same as (count%2 == 1)
}







var mousedown_cvjs_svgCoord_polygonfind = function(e,x,y) {

	var svg_x = (x - delta_x)/global_scale;
	var svg_y = (y - delta_y)/global_scale;

if (cvjs_debug)		console.log("SVG coordinates: " + svg_x+"  "+svg_y+" RoomLayer "+cvjs_convertRoomLayer);

	handleGroup.selectAll('handler').remove();
	handleGroup.remove();

	//window.alert("now we have to find the polygon");

	var pathString = "";

	for (i=0; i<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; i++){
		// console.log(i+"  "+layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName+"  "+cvjs_convertRoomLayer);

		if ((layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName).indexOf(cvjs_convertRoomLayer) > -1 && (layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName).length == cvjs_convertRoomLayer.length ){
			//window.alert("setting Pathstring "+layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName);
			pathString = layerTable[cvjs_active_floorplan_div_nr].layers[i].layer.toString();

			//console.log("in pathString loop XXXX"+pathString+"XXXX");
			// SVG file
			if (pathString.indexOf("layer_") == 0){
				// the actual layer is the layer name and not the layer content itself, therefore it is an SVG file
				pathString = jQuery("#"+layerTable[cvjs_active_floorplan_div_nr].layers[i].layer).html();
			}
			//checkFlag = true;
		}
		// no roomlayer selected message needs to be given
	}

	//console.log(cvjs_convertRoomLayer+" after loop "+pathString+" "+layerTable[cvjs_active_floorplan_div_nr].numberOfLayers);

	pathString = pathString.substring( pathString.indexOf("<path"));
	pathString = pathString.substring(0, pathString.indexOf(">"));
	//console.log("1 pathString "+ pathString);

	//pathString = pathString.substring(pathString.indexOf("d=")+3);
	pathString = pathString.substring(pathString.indexOf(" d=")+4);   // 2017-08-15, for SVG where there is an id=" , we change to get the d=
	pathString = pathString.substring(0, pathString.indexOf('"'));

	//console.log("2 pathString "+ pathString);

	var i=0;
	var loopFlag=true;

	// test of insertion point
	cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(svg_x, svg_y, 0.1).attr({"stroke-width" : "0.06"}).attr({"fill" : "none"}).attr({"stroke" : "rgb(255,0,0)"});


	while (pathString.indexOf("M")>-1 && loopFlag){

		// test
		//loopFlag = false;

		if (pathString.indexOf("M")==0){
			pathString = pathString.substring(1);

			var tempString  =  pathString;
			var polygonPath = "M"+tempString.substring(0, tempString.indexOf("M")); //+"Z";

			//if (polygonPath.indexOf("Z")==-1)
			//	polygonPath = polygonPath + "Z";

			var myPath = polygonPath.substring(1);

			var coord = myPath.split('l');
			var X = new Array();
			var Y = new Array();

			//console.log("coord split l "+coord.length);

			for (var j=0; j<coord.length; j++){
				var point = coord[j].split(',');
				//console.log(coord[j]+" point "+point[0]+" "+point[1]);

				if(j==0){
					X[j] = Number(point[0]);
					Y[j] = Number(point[1]);
				}
				else{

					X[j] = X[j-1] + Number(point[0]);
					Y[j] = Y[j-1] + Number(point[1]);

				}
				cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(X[j], Y[j], 0.1).attr({"stroke-width" : "0.06"}).attr({"fill" : "none"}).attr({"stroke" : "rgb(0,255,0)"});
			}
			cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polygonPath).attr({"stroke-width" : "0.01"}).attr({"fill" : "none"}).attr({"stroke" : "rgb(255,0,0)"});

			var polyFlag = false;
			var flag_inside = isInside(X, Y, X.length, svg_x, svg_y)

			if (flag_inside != 0){ if (cvjs_debug)	console.log("FLAG="+flag_inside); polyFlag = true;}

			pathString = pathString.substring(pathString.indexOf("M"));

			//window.alert("pathString "+pathString);
//			var polyFlag = Snap.path.isPointInside(polygonPath, svg_x, svg_y);

			//console.log(i+" "+polyFlag+" ");

			if (polyFlag) console.log("polyFlag IS NOW TRUE");

			//try{
			//tPolygon = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polygonPath).attr({fill: '#ff9999', "fill-opacity": "0.8", stroke: '#009900', 'stroke-opacity': "0.8", "stroke-width" : 0.1 });
			//}
			//catch (err){
			//	console.log("err"+i+" "+polygonPath);
			//}


			if (polyFlag){
//				window.alert("we got it  "+i+"  "+polygonPath);

				//cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polygonPath).attr({fill:"rgb(255,124,165)", "fill-opacity":"0.7", stroke:"rgb(255,124,165)", "stroke-width" : 4 });

				Node_id = cvjs_currentMaxNodeId();
				//console.log("xurrent Node_id="+Node_id);

				Node_id++;
				currentNode_underbar = Node_underbar+Node_id;
				currentNode_id = "NODE_"+Node_id;
				currentNode_name = "unassigned";
				currentNode_layer = "unassigned";
				currentNode_group = "unassigned";
				currentNode_attributes = "unassigned";
				currentNode_attributeStatus = "unpopulated";  // 3.2.02b
				currentNode_type = "unassigned";
				currentNode_tags = "unassigned";
				currentNode_tags = "unassigned";
				currentNode_linked = false;

				cvjs_setCurrentNodeValues(currentNode_underbar, currentNode_name, currentNode_id, currentNode_layer, currentNode_group, currentNode_attributes, currentNode_attributeStatus, currentNode_type, currentNode_tags, currentNode_tags, currentNode_linked);

				var tPolygon = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polygonPath).attr({fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1"});

				cvjs_addVqRoomsGraphics_newNode_polygon(cvjs_currentNode_underbar, tPolygon);
				cvjs_setUpVqRooms_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentNode_underbar);

				cvjs_graphicalObjectCreated('Polygon');
				loopflag = false;

			}
		}
		i++;

	}
}







function cvjs_combineRoomTextlayer() {

	var svg_x = 500;
	var svg_y = 500;

if (cvjs_debug)		console.log("SVG coordinates: " + svg_x+"  "+svg_y+" RoomLayer "+cvjs_convertRoomLayer+" "+cvjs_convertTextLayer);

	//window.alert("now we have to find the polygon");

	var pathString = "";

	var textLayerName = "";

	for (i=0; i<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; i++){
		if ((layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName).indexOf(cvjs_convertTextLayer) > -1 && (layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName).length == cvjs_convertTextLayer.length ){
			textLayerName = layerTable[cvjs_active_floorplan_div_nr].layers[i].layer.toString();
		}
	}

if (cvjs_debug)		console.log(textLayerName);


	for (i=0; i<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; i++){
		if ((layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName).indexOf(cvjs_convertRoomLayer) > -1 && (layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName).length == cvjs_convertRoomLayer.length ){
			pathString = layerTable[cvjs_active_floorplan_div_nr].layers[i].layer.toString();
			if (pathString.indexOf("layer_") == 0){
				pathString = jQuery("#"+layerTable[cvjs_active_floorplan_div_nr].layers[i].layer).html();
			}
		}
	}




	//console.log(cvjs_convertRoomLayer+" after loop "+pathString+" "+layerTable[cvjs_active_floorplan_div_nr].numberOfLayers);

	pathString = pathString.substring( pathString.indexOf("<path"));
	pathString = pathString.substring(0, pathString.indexOf(">"));
	//console.log("1 pathString "+ pathString);

	//pathString = pathString.substring(pathString.indexOf("d=")+3);
	pathString = pathString.substring(pathString.indexOf(" d=")+4);   // 2017-08-15, for SVG where there is an id=" , we change to get the d=
	pathString = pathString.substring(0, pathString.indexOf('"'));

	//console.log("2 pathString "+ pathString);

	var i=0;
	var loopFlag=true;

	// test of insertion point
	cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(svg_x, svg_y, 0.1).attr({"stroke-width" : "0.06"}).attr({"fill" : "none"}).attr({"stroke" : "rgb(255,0,0)"});

	//textLayerName = "#"+textLayerName;
	//console.log(textLayerName);

var writeflag = true;

	while (pathString.indexOf("M")>-1 && loopFlag){

// for test, only one polygons is processed
//loopFlag=false;

		// test
		//loopFlag = false;

		if (pathString.indexOf("M")==0){
			pathString = pathString.substring(1);

			var tempString  =  pathString;
			var polygonPath = "M"+tempString.substring(0, tempString.indexOf("M")); //+"Z";

			//if (polygonPath.indexOf("Z")==-1)
			//	polygonPath = polygonPath + "Z";

			var myPath = polygonPath.substring(1);

			var coord = myPath.split('l');
			var X = new Array();
			var Y = new Array();

			//console.log("coord split l "+coord.length);

			for (var j=0; j<coord.length; j++){
				var point = coord[j].split(',');
				//console.log(coord[j]+" point "+point[0]+" "+point[1]);

				if(j==0){
					X[j] = Number(point[0]);
					Y[j] = Number(point[1]);
				}
				else{

					X[j] = X[j-1] + Number(point[0]);
					Y[j] = Y[j-1] + Number(point[1]);

				}
				//cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(X[j], Y[j], 0.1).attr({"stroke-width" : "0.06"}).attr({"fill" : "none"}).attr({"stroke" : "rgb(0,255,0)"});
			}
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polygonPath).attr({"stroke-width" : "0.01"}).attr({"fill" : "none"}).attr({"stroke" : "rgb(255,0,0)"});

			// here we loop over all text objects in the cvjs_convertTextLayer

			var polyFlag = false;
			jQuery("text").each(function( index ) {

			  if (!polyFlag){   // if we have a match we do not search anymore
//				var parentLayer = jQuery(this).parents().find('#layer_Level_33').eq(0).attr('id');
				var textLayerN = "#"+textLayerName;
				var parentLayer = "";
				parentLayer = jQuery(this).parents().find(textLayerN).eq(0).attr('id');


				var parentEls = jQuery( this ).parents()
				  .map(function() {
				    return ( this.tagName+" "+this.id);
				  })
				  .get()
  				.join( ", " );
				// if the text is inside a block, we do not want to match against the RoomLayer
  				if (parentEls.indexOf("Block_")>-1) {
					parentLayer = "NONE";
				}

				if (writeflag) console.log("TEXT:"+jQuery( this ).text()+" parent layer "+parentLayer +"  all parents "+parentEls);


				//console.log(jQuery( this ).text()+": "+parentEls+" XXXX");
				if (parentLayer == undefined) parentLayer = "NONE";

				if (parentLayer.indexOf(textLayerName)==0 && (jQuery( this ).text().indexOf("1W")==0  || jQuery( this ).text().indexOf("1Z")==0 || jQuery( this ).text().indexOf("1U")==0 || jQuery( this ).text().indexOf("6E")==0 || jQuery( this ).text().indexOf("6T")==0 )){

					var xx = jQuery( this ).attr('x');
					var yy = jQuery( this ).attr('y')

					polyFlag = isInside(X, Y, X.length, xx, yy);

					if (polyFlag){
		//				console.log("polyFlag IS NOW TRUE "+jQuery(this).text()+"  parentLayer "+parentLayer+" "+"#"+textLayerName);


		//				window.alert("we got it  "+i+"  "+polygonPath);

						//cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polygonPath).attr({fill:"rgb(255,124,165)", "fill-opacity":"0.7", stroke:"rgb(255,124,165)", "stroke-width" : 4 });

						Node_id = cvjs_currentMaxNodeId();
						//console.log("xurrent Node_id="+Node_id);

						Node_id++;
						currentNode_underbar = Node_underbar+Node_id;
						currentNode_id = "NODE_"+Node_id;
						currentNode_name = jQuery(this).text();
						currentNode_layer = "Y";
						currentNode_group = "X";
						currentNode_attributes = "1";
						currentNode_attributeStatus = "populated";  // 3.2.02b
						currentNode_type = "Door Box";
						currentNode_tags = "Door Box";
						currentNode_linked = false;

						cvjs_setCurrentNodeValues(currentNode_underbar, currentNode_name, currentNode_id, currentNode_layer, currentNode_group, currentNode_attributes, currentNode_attributeStatus, currentNode_type, currentNode_tags, currentNode_tags, currentNode_linked);

						var tPolygon = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polygonPath).attr({fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1"});

						cvjs_addVqRoomsGraphics_newNode_polygon(cvjs_currentNode_underbar, tPolygon);
						cvjs_setUpVqRooms_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentNode_underbar);

						cvjs_graphicalObjectCreated('Polygon');
						loopflag = false;

					}

				  }
			    }
			});



			pathString = pathString.substring(pathString.indexOf("M"));


			writeflag = false;
			//window.alert("pathString "+pathString);
//			var polyFlag = Snap.path.isPointInside(polygonPath, svg_x, svg_y);

			//console.log(i+" "+polyFlag+" ");


			//try{
			//tPolygon = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polygonPath).attr({fill: '#ff9999', "fill-opacity": "0.8", stroke: '#009900', 'stroke-opacity': "0.8", "stroke-width" : 0.1 });
			//}
			//catch (err){
			//	console.log("err"+i+" "+polygonPath);
			//}

		}

	}
}














// 	Variables for setting up space management
//  ZZZ

var icon_command_active = 0;  // CH
var currentLinkId = -1; // CH



var load_waitflag_files = 0;
var load_waitflag_overlay = 0;
var load_waitflag_cluster = 0;
var load_waitflag_linklist = 0;

var edit_cancel_flag = false;







var fArr_Name = new Array();  // CH
var fArr_Id = new Array();  // CH
var fArr_PolygonNr = new Array();  // CH
var fArr_PolygonLayerName = new Array();  // CH
var fArr_Occupancy = new Array();  // CH
var fArr_Tags = new Array();  // CH
var fArr_Type = new Array();  // CH
var fArr_Layer = new Array();  // CH

var fArr_Maximo_Datafield1 = new Array();  // CH
var fArr_Maximo_Datafield2 = new Array();  // CH
var fArr_Maximo_Datafield3 = new Array();  // CH

var fArr_Name_fixtures = new Array();  // CH
var fArr_Id_fixtures = new Array();  // CH
var fArr_PolygonNr_fixtures = new Array();  // CH
var fArr_PolygonLayerName_fixtures = new Array();  // CH
var fArr_Occupancy_fixtures = new Array();  // CH
var fArr_Tags_fixtures = new Array();  // CH
var fArr_Type_fixtures = new Array();  // CH
var fArr_Layer_fixtures = new Array();  // CH


var overlay_flag = 0;
var save_drawing_flag = 0;

var fnArr_FileName = new Array();  // load from .rw file
var fnArr_ShortName = new Array();  // load from .rw file
var fnArr_listdirectory_FileName = new Array();   // generate from list directory at load time of Add/Edit
var fnArr_listdirectory_ShortName = new Array();  // generate from list directory at load time of Add/Edit


var searchListType = new Array();  // CH
var searchListOccupancy = new Array();  // CH
var searchListTags = new Array();  // CH

var new_linkList = "";




function cvjs_getSizeOfLinkedObjects(){

	return (vqRooms[cvjs_active_floorplan_div_nr].length);

}





function generate_new_linkList_fixtures(){

//window.alert("generate_new_linkList_fixtures fArr_Name_fixtures.length ="+fArr_Name_fixtures.length);

	var k=0;
	new_linkList_fixtures = "";


	for (var i=0;i<fArr_Name_fixtures.length;i++)
	{

		if (fArr_PolygonNr_fixtures[i] == -1){
			// there is no association between a space and a polygon, therefore the space
			// is selectable and part of the list

			var fixtureName = "";

			if (fArr_Name_fixtures[i] == "")
				fixtureName = fArr_Id_fixtures[i];
			else
				fixtureName = fArr_Name_fixtures[i];

			new_linkList_fixtures = new_linkList_fixtures + "<li><a href=\"javascript:change_link_fixtures('"+fArr_Id_fixtures[i]+"')\">"+fixtureName+"</a></li>";

		}
		else{

		// window.alert("we have something different from -1 "+fArr_PolygonNr_fixtures[i]);

		}

	}

//window.alert("new_linkList_fixtures :"+new_linkList_fixtures);

	jQuery("#fixtures_drawing").html(new_linkList_fixtures);  // CH


// autocomplete on lists is not done


}



function generate_new_linkList()     // list of spaces that are unoccupied and can be linked
{

//window.alert("generate_new_linkList ");

	var k=0;

	new_linkList = "";
	//window.alert("generate_new_linkList "+fArr_Name.length);


if (cvjs_debug)		console.log("generate_new_linklist ");


	for (var i=0;i<fArr_Name.length;i++)
	{

		if (fArr_PolygonNr[i] == -1){
			// there is no association between a space and a polygon, therefore the space
			// is selectable and part of the list

			//console.log(i+" no association ");

			new_linkList = new_linkList + "<li><a href=\"javascript:change_link_space('"+fArr_Id[i]+"')\">"+fArr_Name[i]+"</a></li>";

		}
		else{
			//window.alert(i+" this space is occupied and is not included in the list");
			// this space is occupied, so we need to use this for the Type, Occupancy and Tags autocomplete lists


			// have to figure out if the item is already in the autocomplete list or not

if (cvjs_debug)				console.log(i+" association! ");


			var flag = true;
			for (var j=0;j<searchListType.length;j++){
				if (searchListType[j] == fArr_Type[i]){ flag = false;}
			}
			if (flag == true) { searchListType.push(fArr_Type[i]);  }

			flag = true;
			for (var j=0;j<searchListOccupancy.length;j++){
				if (searchListOccupancy[j] == fArr_Occupancy[i]){ flag = false;}
			}
			if (flag == true) { searchListOccupancy.push(fArr_Occupancy[i]);  }


			flag = true;
			for (var j=0;j<searchListTags.length;j++){
				if (searchListTags[j] == fArr_Tags[i]){ flag = false;}
			}
			if (flag == true) { searchListTags.push(fArr_Tags[i]);  }


		}

	}


	searchListType.sort();
	searchListOccupancy.sort();
	searchListTags.sort();


// we do this in the modal
//	jQuery("#spaces_drawing").html(new_linkList);  // CH


//windows.alert("linklist 1");

	load_waitflag_linklist = 1;
	if ( load_waitflag_files == 1 && load_waitflag_cluster == 1 && load_waitflag_overlay == 1 && load_waitflag_linklist == 1)
		jQuery("#loadpane_small").hide();



//window.alert("spaces_drawing is updated!");

// 2017-05-30
// generate the pulldown menu
//		window.alert("new_linkList "+new_linkList);

		jQuery("#spaces_drawing").html(new_linkList);  // CH




}






// void legacy method
function reset_color_on_selected_space()
{
	var j = -1;
	if (selectedLinkUnlinkLayer.indexOf("NODE_")>=0){

		for (var i=0;i<fArr_Name.length;i++)		{
			if (fArr_PolygonLayerName[i].indexOf(selectedLinkUnlinkLayer)>=0){
				j = i;  // bingo, the layer is actually linked
			}
		}

		for (var i=0;i<fArr_Name_fixtures.length;i++)		{
			if (fArr_PolygonLayerName_fixtures[i].indexOf(selectedLinkUnlinkLayer)>=0){
				j = i;  // bingo, the layer is actually linked
			}
		}

	}

	if (j>-1){
		// the layer is linked therefore it must be colored in blue

	}
	else{
		// the layer is unlinked therefore it must be colored in gray
		if (selectedLinkUnlinkLayer.indexOf("NODE_")>=0){
		}
	}
}



function cvjs_createSpaceLocationArrays(nameArray, idArray){

	var j=0;
	//window.alert("length="+data.length);

//	for (i=0; i < data.length; i++){
	for (i=0; i < nameArray.length; i++){
			//		for (i=0; i < 6; i++){
//		fArr_Name[j] = data[i].LOCATION;  // name of space
//		fArr_Id[j] = data[i].LOCATIONSID;     // if of space
		fArr_Name[j] = nameArray[i];  // name of space
		fArr_Id[j] = idArray[i];     // if of space


		fArr_PolygonNr[j] = -1;    // no association with room polygons yet
		fArr_PolygonLayerName[j] = "none"; // no association with room polygons yet
		fArr_Type[j] = -1;
		fArr_Occupancy[j] = -1;
		fArr_Tags[j] = -1;

		//window.alert(i+" "+data[i].LOCATION+" "+data[i].LOCATIONSID+" "+fArr_Name[j]+"  "+fArr_Id[j]+"  "+data[i][maximo_includecols1]);
		j++;
	}


		// do the sort alphabetically

		var t1 = "";
		var t2 = "";

		var t3 = "";
		var t4 = "";
		var t5 = "";



		for (var k=0; k < fArr_Name.length-1; k++){

			for (var l=k+1; l < fArr_Name.length; l++){

				if ( fArr_Name[k].toLowerCase() > fArr_Name[l].toLowerCase() ){

					t1 = fArr_Name[l];
					t2 = fArr_Id[l];


					fArr_Name[l] = fArr_Name[k];  // name of space
					fArr_Id[l] =  fArr_Id[k];     // if of space

					fArr_Name[k] = t1;   // name of space
					fArr_Id[k] =  t2;    // if of space


					// fArr_PolygonNr[j] = -1;        // no association with room polygons yet
					// fArr_PolygonLayerName[j] = ""; // no association with room polygons yet

				}

			}
		}



//window.alert("length of vqRooms ="+vqRooms.length);

		for (var k=0; k < fArr_Name.length; k++){

			fArr_PolygonNr[k] = -1;    // no association with room polygons yet
			fArr_PolygonLayerName[k] = "none"; // no association with room polygons yet
			fArr_Type[k] = -1;
			fArr_Occupancy[k] = -1;
			fArr_Tags[k] = -1;

			var l=0;

// we have changed the loop to be based on vqRooms information, rather than what is in the fArr arrays

			for (spc in vqRooms[cvjs_active_floorplan_div_nr]){

				//if (k==5) window.alert(vqRooms[cvjs_active_floorplan_div_nr][spc].data("id")+" "+fArr_Id[k]);

				if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == fArr_Id[k]){

//window.alert(vqRooms[cvjs_active_floorplan_div_nr][spc].data("node")+"   "+vqRooms[cvjs_active_floorplan_div_nr][spc].data("id")+" "+fArr_Id[k]);

						fArr_PolygonNr[k] = vqRooms[cvjs_active_floorplan_div_nr][spc].data("name");
						fArr_PolygonLayerName[k] = vqRooms[cvjs_active_floorplan_div_nr][spc].data("node");
						fArr_Layer[k] = vqRooms[cvjs_active_floorplan_div_nr][spc].data("layer");

						if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("type").indexOf("undefined")>=0){
							// do nothing
						}
						else{

							fArr_Type[k] = vqRooms[cvjs_active_floorplan_div_nr][spc].data("type");
						}
						if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("occupancy").indexOf("undefined")>=0){
							// do nothing
						}
						else{

							fArr_Occupancy[k] = vqRooms[cvjs_active_floorplan_div_nr][spc].data("occupancy");
						}
// we dont know how to read in tags properly at this time....
						fArr_Tags[k] = "";
//								if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("tags").indexOf("tags")>=0){
//									// do nothing
//								}
//								else{
//									fArr_Tags[k] = vqRooms[cvjs_active_floorplan_div_nr][spc].data("tags");
//								}


				}


			}


		}

if (cvjs_debug)			console.log("generate_new_linkList");

		generate_new_linkList();

}



function change_link_space(rmid)
{

//window.alert("change link space "+rmid);

	currentLinkId = rmid;
	for (var i=0;i<fArr_Name.length;i++)
	{
		if (fArr_Id[i] == rmid){
			// this is the room id selected
			jQuery("#drop_link_spaces").html(fArr_Name[i]+'<b class="caret"></b>');

		}
	}
}



function change_objects_generic(object){

	window.alert("I have selected this from the list "+object);

//	jQuery("#drop_locations_sensors").html(languageTable.languages[cvjs_currentLanguage].HeaderObjectLayers.ObjectLayer[object]+' <span class="caret"></span>');

}

var cvjs_dataMapsHeaderArray = null;

function cvjs_createDataMapsHeaders(headerArray){

	cvjs_dataMapsHeaderArray = headerArray;

if (cvjs_debug)		console.log("cvjs_dataMapsHeaderArray "+cvjs_dataMapsHeaderArray);


	var new_datamap_forms = "<div class=\"dropdown-content\">";
	for (var i=0; i<4; i++){
		new_datamap_forms = new_datamap_forms  + "<li><a href=\"javascript:cvjs_change_datamaps('"+i+"')\">"+headerArray[i]+"</a></li>";

	}
	new_datamap_forms = new_datamap_forms  + "</div>"
	 jQuery("#select_datamaps").html(new_datamap_forms);


}

/////   DRAWINGS OVERLAY METHODS START


function allocateLayer(layer){

	layers_all_overlay = layer;

}

function allocateLayer2(layer){

	layers_all_overlay2 = layer;

}



var cvjs_fileOverlay = false;

var cvjs_firstInLineDrawingContent = "";


var secondLoading = false;

function cvjs_OnLoadEndCompareDrawings(){



	if (cvjs_debug) console.log("XXXXXXXXXXXX  Compare       "+cvjs_loadCompareDrawingSwitch+"  "+cvjs_fileOverlay+" second drawing "+cvjs_compareDrawingsSecondDrawing+"  first drawing"+cvjs_compareDrawingsFirstDrawing);

	

if (cvjs_loadSecondCompareDrawing){
	cvjs_loadSecondCompareDrawing = false;
	cvjs_compareDrawingsSecondDrawing = current_jsFloorNames;
	cvjs_compareDrawingsSecondDrawing = cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ];
	
	
	// 4.1.01b
	var secondfile = cvjs_compareDrawingsSecondDrawing
	if (secondfile.lastIndexOf("/")>-1) secondfile = secondfile.substring(secondfile.lastIndexOf("/")+1);
	
	//4.1.01e
	if (secondfile.lastIndexOf("&filename=")>-1) secondfile = secondfile.substring(secondfile.lastIndexOf("&filename=")+10);
	

	//4.1.01f
/**	
	var my_custom_modal_dir_listing = [
		{ filenameText: "Version 1 - hq17-1.dwg", filename: "hq17-1.dwg" ,   url: "http://localhost/cadviewer_4_1_0/content_dev/hq17-1.dwg", path: ""  },
		{ filenameText: "Version 2 - hq17-1.dwg", filename: "hq17-1.dwg" ,   url: "http://localhost/cadviewer_4_1_0/content_dev/hq17-2.dwg", path: ""  },
		{ filenameText: "Version 2 - hq17-1.dwg", filename: "hq17-1.dwg" ,   url: "http://localhost/cadviewer_4_1_0/content_dev/hq17-2.dwg", path: ""  },
	];			
**/	
	//window.alert("here!"+cvjs_CompareFiles_CustomFileModalContent_flag);
	if (cvjs_CompareFiles_CustomFileModalContent_flag){
		for (jj=0; jj<cvjs_CompareFiles_CustomFileModalContent.length; jj++){
			//window.alert(cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ]+" "+cvjs_CompareFiles_CustomFileModalContent[jj].url)
			if (cvjs_CompareFiles_CustomFileModalContent[jj].url.indexOf(cvjs_compareDrawingsSecondDrawing)>-1)
				secondfile = cvjs_CompareFiles_CustomFileModalContent[jj].filenameText;
		}
	}

	
	jQuery("#compareDrawingMenuText2_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(secondfile);  
	

	if (cvjs_debug)		console.log(current_jsFloorNames+"PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP   cvjs_compareDrawingsSecondDrawing="+cvjs_compareDrawingsSecondDrawing);
}

if (cvjs_debug)	console.log("YYYYYYYYYYYY cvjs_loadSecondCompareDrawing "+cvjs_loadSecondCompareDrawing+" cvjs_OnLoadEndCompareDrawings "+cvjs_fileOverlay);

	//4.1.02c
	try{

		cvjs_changeToIconPage(3);

	}
	catch(err){
		
		console.log("Page change fails "+err);
	
	}
	
	// change to third icon page
	//cvjs_changeNextIconPage();
	//cvjs_changeNextIconPage();

	

//		for (var j=0; j<1; j++){
			if (cvjs_fileOverlay){
				
				var searchPart = "";
				if (!secondLoading){
					searchPart= "#main_master_"+floorplan_div_Array[cvjs_active_floorplan_div_nr];
				}
				else{
					searchPart= "#main_master_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]+"_secondfile";	
					secondLoading = false;   // we have to reset the parameter so that coloring of masterground is set back to the main one
				}


console.log(searchPart);
				
//				jQuery("body").find("g").each(function (){
				jQuery(searchPart).find("g").each(function (){
					
				
	//				console.log(jQuery(this).hasClass('firstOverlayCompareFile'));

					for (var i=0; i<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; i++){

	//						console.log(layerTable[cvjs_active_floorplan_div_nr].layers[i].layerClass);

							if (jQuery(this).hasClass(layerTable[cvjs_active_floorplan_div_nr].layers[i].layerClass)){

							//console.log(firstOverlayCompareFile+" parsing second file  ");

									// make an overlay file
									if (firstOverlayCompareFile)
										jQuery(this).addClass('firstOverlayCompareFile').removeClass(layerTable[cvjs_active_floorplan_div_nr].layers[i].layerClass);

									//console.log(layerTable[cvjs_active_floorplan_div_nr].layers[i].layerClass);

									jQuery(this).find("path").each(function (){

										//console.log("path "+jQuery(this));
										if (colorFlag){
											jQuery(this).css("stroke","#f00");
											if (!(jQuery(this).css("fill")=="none")) jQuery(this).css("fill","#f00");
											jQuery(this).css("opacity","1.0");
											//flag = !flag;
										}
										else {
											jQuery(this).css("stroke","#00f");
											if (!(jQuery(this).css("fill")=="none")) jQuery(this).css("fill","#00f");
											jQuery(this).css("opacity","1.0");
											//flag = !flag;

										}
									});


									jQuery(this).find("text").each(function (){

										//console.log("path "+jQuery(this));
										if (colorFlag){
											jQuery(this).css("stroke","#f00");
											if (!(jQuery(this).css("fill")=="none")) jQuery(this).css("fill","#f00");
											jQuery(this).css("opacity","1.0");
											//flag = !flag;
										}
										else {
											jQuery(this).css("stroke","#00f");
											if (!(jQuery(this).css("fill")=="none")) jQuery(this).css("fill","#00f");
											jQuery(this).css("opacity","1.0");
											//flag = !flag;

										}
									});


									jQuery(this).find("circle").each(function (){

										//console.log("path "+jQuery(this));
										if (colorFlag){
											jQuery(this).css("stroke","#f00");
											if (!(jQuery(this).css("fill")=="none")) jQuery(this).css("fill","#f00");
											jQuery(this).css("opacity","1.0");
											//flag = !flag;
										}
										else {
											jQuery(this).css("stroke","#00f");
											if (!(jQuery(this).css("fill")=="none")) jQuery(this).css("fill","#00f");
											jQuery(this).css("opacity","1.0");
											//flag = !flag;

										}
									});


									jQuery(this).find("ellipse").each(function (){

										//console.log("path "+jQuery(this));
										if (colorFlag){
											jQuery(this).css("stroke","#f00");
											if (!(jQuery(this).css("fill")=="none")) jQuery(this).css("fill","#f00");
											jQuery(this).css("opacity","1.0");
											//flag = !flag;
										}
										else {
											jQuery(this).css("stroke","#00f");
											if (!(jQuery(this).css("fill")=="none")) jQuery(this).css("fill","#00f");
											jQuery(this).css("opacity","1.0");
											//flag = !flag;

										}
									});





							}
					}

				});
			}

if (cvjs_debug)			console.log("TRY AGAIN");

//		}


	if (!firstOverlayCompareFile && fileOverlay){

if (cvjs_debug)			console.log("add layers_all_overlay");
//		cvjs_masterBackground[cvjs_active_floorplan_div_nr] = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
//		cvjs_rPaper[cvjs_active_floorplan_div_nr].add(layers_all_overlay);

//window.alert("now we try to massage the content");
//		layers_all.before(layers_all_overlay);

//		cvjs_masterBackground[cvjs_active_floorplan_div_nr].add(layers_all_overlay);
//		cvjs_masterBackground[cvjs_active_floorplan_div_nr].add(layers_all);

	//	cvjs_masterBackground[cvjs_active_floorplan_div_nr].attr({fill: "#fff", "fill-opacity":"0.01", "stroke-width": 0});

		fileOverlay = false;
	}


	if (cvjs_loadCompareDrawingSwitch==1){


		fileOverlay = true;
		allocateLayer(layers_all);
if (cvjs_debug)			console.log(layers_all_overlay);
		cvjs_setInitMasterBackgroundMode(false);



		colorFlag = false;
		firstOverlayCompareFile = false;

if (cvjs_debug)	console.log("XXX1 cvjs_loadCompareDrawingSwitch="+cvjs_loadCompareDrawingSwitch+" cvjs_compareDrawingsSecondDrawing="+cvjs_compareDrawingsSecondDrawing);


		cvjs_loadCompareDrawingSwitch = 0;
		
		//window.alert("we just load the first drawing");
		secondLoading = true;
		cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_compareDrawingsSecondDrawing );
	}
 

	if (cvjs_loadCompareDrawingSwitch==2){

		fileOverlay = true;
		allocateLayer(layers_all);
if (cvjs_debug)			console.log(layers_all_overlay);
		cvjs_setInitMasterBackgroundMode(false);

		colorFlag = true;
		firstOverlayCompareFile = false;

if (cvjs_debug)	console.log("XXXX2 cvjs_loadCompareDrawingSwitch="+cvjs_loadCompareDrawingSwitch+" cvjs_compareDrawingsFirstDrawing="+cvjs_compareDrawingsFirstDrawing);

		cvjs_loadCompareDrawingSwitch = 0;
		secondLoading = true;
		cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_compareDrawingsFirstDrawing );
	}


	if (cvjs_drawingLoadCounter == 1){
		cvjs_drawingLoadCounter = 0;

		//cvjs_compareDrawingsFirstDrawing = currentLoadedDrawingFullName;

if (cvjs_debug)			console.log("LLLLLLLLLLLL we have loaded the first file again as js cvjs_compareDrawingsFirstDrawing "+cvjs_compareDrawingsFirstDrawing);


		colorFlag = false;
		cvjs_openFileLoadToServer(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
		cvjs_loadSecondCompareDrawing = true;
		//console.log("here we colour the current drawing blue, have to store the name of current drawing and load in a new drawing, that drawing is colored red");


	}






//if (cvjs_debug)		console.log("OnLoadEnd compare drawings rpaper "+cvjs_rPaper[cvjs_active_floorplan_div_nr]);
if (cvjs_debug)		console.log("OnLoadEnd compare drawings rpaper ");

}

var cvjs_loadSecondCompareDrawing = false;

var cvjs_drawingLoadCounter = 0;



// 3.3.04d
var cvjs_loadSecondCompareDrawingDirect = false;
var cvjs_loadSecondCompareDrawingDirect_fileName = "../content/drawings/dwg_compare_drawings/hq17-2.dwg";


// 3.3.04b
// make method to set SecondCompare§DrawingDirect_fileName
/**
 * Sets the name of the second drawing for compare load, bypassing load modal  
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 * @param {string} fileName - name of drawing
 */
function cvjs_setCompareDrawings_LoadSecondDrawingDirect(floorplan_div, fileName){

	cvjs_loadSecondCompareDrawingDirect = true;
	cvjs_loadSecondCompareDrawingDirect_fileName = fileName;
	
	
	//4.1.01b
	jQuery("#floatCompareDrawingMenu"+"_"+floorplan_div).show();	
	
	
	
}

/**
 * Second drawing in compare files are set to be loaded via modal - default action  
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */
function cvjs_setCompareDrawings_StandardModal(floorplan_div){

	cvjs_loadSecondCompareDrawingDirect = false;
	
}




/**
 * Loads the second drawing for compare with drawing currently loaded 
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

function cvjs_compareDrawings_LoadSecondDrawing(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

	
	if (cvjs_debug) console.log("cvjs_compareDrawings_LoadSecondDrawing(");
	
	//4.1.01b
	//window.alert("#floatCompareDrawingMenu"+"_"+floorplan_div);
	jQuery("#floatCompareDrawingMenu"+"_"+floorplan_div).show();	
	var floorplan = floorplan_div;
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
		floorplan = floorplan_div.substring(0, floorplan_div.length-4);
	}
	// 4.1.01b
	var pos = jQuery("#"+floorplan).position();
	var posmenu_x = pos.top+jQuery("#"+floorplan_div).height()-75
	var posmenu_y = pos.left+jQuery("#"+floorplan_div).width()-325;	
	jQuery("#floatCompareDrawingMenu"+"_"+floorplan_div).offset({ top: posmenu_x, left: posmenu_y});  
	
	var firstfile = cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ];
	if (firstfile.lastIndexOf("/")>-1) firstfile = firstfile.substring(firstfile.lastIndexOf("/")+1);
	
	//4.1.01e
	if (firstfile.lastIndexOf("&filename=")>-1) firstfile = firstfile.substring(firstfile.lastIndexOf("&filename=")+10);
	
	//4.1.01f
/**	
	var my_custom_modal_dir_listing = [
		{ filenameText: "Version 1 - hq17-1.dwg", filename: "hq17-1.dwg" ,   url: "http://localhost/cadviewer_4_1_0/content_dev/hq17-1.dwg", path: ""  },
		{ filenameText: "Version 2 - hq17-1.dwg", filename: "hq17-1.dwg" ,   url: "http://localhost/cadviewer_4_1_0/content_dev/hq17-2.dwg", path: ""  },
		{ filenameText: "Version 2 - hq17-1.dwg", filename: "hq17-1.dwg" ,   url: "http://localhost/cadviewer_4_1_0/content_dev/hq17-2.dwg", path: ""  },
	];			
**/	



	if (cvjs_debug) console.log("cvjs_CompareFiles_CustomFileModalContent_flag ="+cvjs_CompareFiles_CustomFileModalContent_flag);


//	window.alert("here!"+cvjs_CompareFiles_CustomFileModalContent_flag);
	if (cvjs_CompareFiles_CustomFileModalContent_flag){
		for (jj=0; jj<cvjs_CompareFiles_CustomFileModalContent.length; jj++){
			
			if (cvjs_debug){
				console.log(jj+" originating file "+cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ]);
				console.log(jj+" Content[jj].url "+cvjs_CompareFiles_CustomFileModalContent[jj].url);
				console.log(jj+" Content[jj].text "+cvjs_CompareFiles_CustomFileModalContent[jj].filenameText);	
			}	

			var orig_first_chunk = cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ].indexOf("/wopi/files");
			if ( orig_first_chunk>0){				
				var new_first = cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ].substring(0,orig_first_chunk+1);
				var custom_file_content =  cvjs_CompareFiles_CustomFileModalContent[jj].url.substring(cvjs_CompareFiles_CustomFileModalContent[jj].url.indexOf("/wopi/files")+1);
				cvjs_CompareFiles_CustomFileModalContent[jj].url = new_first + custom_file_content;
			}
			
			if (cvjs_debug){
				console.log(jj+"NEW NEW Content[jj].url "+cvjs_CompareFiles_CustomFileModalContent[jj].url);
			}	
	
			if (cvjs_CompareFiles_CustomFileModalContent[jj].url.indexOf(cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ])>-1)
				firstfile = cvjs_CompareFiles_CustomFileModalContent[jj].filenameText;
		}
	}

// 5.1.03k      

// we check out the difference between source and the table entry and simply modify the table entry to the initial port + url

//0 originating file https://nginx:9999/wopi/files/ce616683-14dd-48c0-ac91-e912cae204f5/contents?access_token=5f8e5ab2-9e61-4b24-ba51-28dea391e30f12c1dea2-1f7e-497b-9c7f-1f287e14fb1b:999999999999999&filename=hq17-1.dwg
//0 Content[jj].url http://192.168.1.4:8080/wopi/files/ce616683-14dd-48c0-ac91-e912cae204f5/contents?access_token=5f8e5ab2-9e61-4b24-ba51-28dea391e30f12c1dea2-1f7e-497b-9c7f-1f287e14fb1b:1579859385926&filename=hq17-1.dwg
	
	
	
	
if (cvjs_debug) console.log("We have firstFile "+firstfile+"  here before setting cvjs_compareDrawings="+cvjs_compareDrawings);

	jQuery("#compareDrawingMenuText1_"+floorplan_div).html(firstfile);  
	jQuery("#compareDrawingMenuText2_"+floorplan_div).html("");  

	// 4.4.01b
	
	if (cvjs_compareDrawings) {if (cvjs_debug)	console.log("exit! currentLoadedDrawingFullName="+currentLoadedDrawingFullName); return;}



	// we store the first drawing on file
	cvjs_compareDrawingsFirstDrawing = currentLoadedDrawingFullName; // this is the converted .js name or .svg name
	
	cvjs_compareDrawingsFirstDrawing =	cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ];   // 2018-05-05
	
	cvjs_compareDrawings = true;
	cvjs_fileOverlay = true;

	cvjs_toggleFlag = false;
	// we color the first drawing red
	colorFlag = true;

	// we load the first file again in red - convert it to js on the server
	// cvjs_loadCompareDrawingSwitch = 1;
	cvjs_drawingLoadCounter = 0;

	if (cvjs_debug)	console.log(currentLoadedDrawingFullName);

//	if (currentLoadedDrawingFullName.indexOf(".js")>-1){  // 2018-05-06
	// we have a .js file that we just use
	cvjs_OnLoadEndCompareDrawings();
	colorFlag = false;
	// open the modal to fetch the second drawing
	cvjs_loadSecondCompareDrawing = true;

	
if (cvjs_debug) console.log("Here we load the drawing "+cvjs_loadSecondCompareDrawingDirect_fileName);

	
	
	// 3.3.04d
	if(!cvjs_loadSecondCompareDrawingDirect)  // this is the standard modal menu generated	
		cvjs_openFileLoadToServer(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	else									  // this is the direct load of second drawing
		cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_loadSecondCompareDrawingDirect_fileName );
	
	
	if (cvjs_debug)			console.log("here we colour the current drawing blue, have to store the name of current drawing and load in a new drawing, that drawing is colored red");

}


var cvjs_toggleFlag = false;
var cvjs_toggeDrawings = false;
var cvjs_loadCompareDrawingSwitch = 0;




/**
 * Toggles the overlaid drawings
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

function cvjs_compareDrawings_ToggleDrawingOverlay(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);


			cvjs_toggleFlag = !cvjs_toggleFlag;

	


	//4.1.01c
	var firstfile = cvjs_compareDrawingsFirstDrawing
	if (firstfile.lastIndexOf("/")>-1) firstfile = firstfile.substring(firstfile.lastIndexOf("/")+1);
	//4.1.01e
	if (firstfile.lastIndexOf("&filename=")>-1) firstfile = firstfile.substring(firstfile.lastIndexOf("&filename=")+10);
	

	var secondfile = cvjs_compareDrawingsSecondDrawing
	if (secondfile.lastIndexOf("/")>-1) secondfile = secondfile.substring(secondfile.lastIndexOf("/")+1);
	//4.1.01e
	if (secondfile.lastIndexOf("&filename=")>-1) secondfile = secondfile.substring(secondfile.lastIndexOf("&filename=")+10);


	//4.1.01f
/**	
	var my_custom_modal_dir_listing = [
		{ filenameText: "Version 1 - hq17-1.dwg", filename: "hq17-1.dwg" ,   url: "http://localhost/cadviewer_4_1_0/content_dev/hq17-1.dwg", path: ""  },
		{ filenameText: "Version 2 - hq17-1.dwg", filename: "hq17-1.dwg" ,   url: "http://localhost/cadviewer_4_1_0/content_dev/hq17-2.dwg", path: ""  },
		{ filenameText: "Version 2 - hq17-1.dwg", filename: "hq17-1.dwg" ,   url: "http://localhost/cadviewer_4_1_0/content_dev/hq17-2.dwg", path: ""  },
	];			
**/	
	//window.alert("here!"+cvjs_CompareFiles_CustomFileModalContent_flag);
	if (cvjs_CompareFiles_CustomFileModalContent_flag){
		for (jj=0; jj<cvjs_CompareFiles_CustomFileModalContent.length; jj++){
			//window.alert(cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ]+" "+cvjs_CompareFiles_CustomFileModalContent[jj].url)
			if (cvjs_CompareFiles_CustomFileModalContent[jj].url.indexOf(cvjs_compareDrawingsFirstDrawing)>-1)
				firstfile = cvjs_CompareFiles_CustomFileModalContent[jj].filenameText;
		}
	}
	if (cvjs_CompareFiles_CustomFileModalContent_flag){
		for (jj=0; jj<cvjs_CompareFiles_CustomFileModalContent.length; jj++){
			//window.alert(cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ]+" "+cvjs_CompareFiles_CustomFileModalContent[jj].url)
			if (cvjs_CompareFiles_CustomFileModalContent[jj].url.indexOf(cvjs_compareDrawingsSecondDrawing)>-1)
				secondfile = cvjs_CompareFiles_CustomFileModalContent[jj].filenameText;
		}
	}
	
	//4.1.01c	
	if (cvjs_toggleFlag){	
		jQuery("#compareDrawingMenuText1_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("&darr; "+firstfile);  
		jQuery("#compareDrawingMenuText2_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("&uarr; "+secondfile);  
	}else{	
		jQuery("#compareDrawingMenuText1_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("&uarr; "+firstfile);  
		jQuery("#compareDrawingMenuText2_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("&darr; "+secondfile);  
	} 
		

	

			if (cvjs_toggleFlag){

				colorFlag = true;
				FileName = cvjs_compareDrawingsFirstDrawing;
				cvjs_loadCompareDrawingSwitch = 1;

				cvjs_LoadDrawing(floorPlan_div, FileName );


			}


			if (!cvjs_toggleFlag){

				colorFlag = false;
				FileName = cvjs_compareDrawingsSecondDrawing;
				cvjs_loadCompareDrawingSwitch = 2;

				cvjs_LoadDrawing(floorPlan_div, FileName );
			}
if (cvjs_debug)		console.log("here we have to toggle the drawings with overlay in red and blue to see the difference");

}


/**
 * Toggles the drawings individually
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

function cvjs_compareDrawings_ToggleDrawings(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

		
	// reset arrows
	//4.1.01c
	var firstfile = cvjs_compareDrawingsFirstDrawing
	if (firstfile.lastIndexOf("/")>-1) firstfile = firstfile.substring(firstfile.lastIndexOf("/")+1);

	//4.1.01e
	if (firstfile.lastIndexOf("&filename=")>-1) firstfile = firstfile.substring(firstfile.lastIndexOf("&filename=")+10);
	

	var secondfile = cvjs_compareDrawingsSecondDrawing
	if (secondfile.lastIndexOf("/")>-1) secondfile = secondfile.substring(secondfile.lastIndexOf("/")+1);
	// 4.4.01e
	if (secondfile.lastIndexOf("&filename=")>-1) secondfile = secondfile.substring(secondfile.lastIndexOf("&filename=")+10);

	
	//4.1.01f
/**	
	var my_custom_modal_dir_listing = [
		{ filenameText: "Version 1 - hq17-1.dwg", filename: "hq17-1.dwg" ,   url: "http://localhost/cadviewer_4_1_0/content_dev/hq17-1.dwg", path: ""  },
		{ filenameText: "Version 2 - hq17-1.dwg", filename: "hq17-1.dwg" ,   url: "http://localhost/cadviewer_4_1_0/content_dev/hq17-2.dwg", path: ""  },
		{ filenameText: "Version 2 - hq17-1.dwg", filename: "hq17-1.dwg" ,   url: "http://localhost/cadviewer_4_1_0/content_dev/hq17-2.dwg", path: ""  },
	];			
**/	
	//window.alert("here!"+cvjs_CompareFiles_CustomFileModalContent_flag);
	if (cvjs_CompareFiles_CustomFileModalContent_flag){
		for (jj=0; jj<cvjs_CompareFiles_CustomFileModalContent.length; jj++){
			//window.alert(cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ]+" "+cvjs_CompareFiles_CustomFileModalContent[jj].url)
			if (cvjs_CompareFiles_CustomFileModalContent[jj].url.indexOf(cvjs_compareDrawingsFirstDrawing)>-1)
				firstfile = cvjs_CompareFiles_CustomFileModalContent[jj].filenameText;
		}
	}
	if (cvjs_CompareFiles_CustomFileModalContent_flag){
		for (jj=0; jj<cvjs_CompareFiles_CustomFileModalContent.length; jj++){
			//window.alert(cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ]+" "+cvjs_CompareFiles_CustomFileModalContent[jj].url)
			if (cvjs_CompareFiles_CustomFileModalContent[jj].url.indexOf(cvjs_compareDrawingsSecondDrawing)>-1)
				secondfile = cvjs_CompareFiles_CustomFileModalContent[jj].filenameText;
		}
	}
	

	jQuery("#compareDrawingMenuText1_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(firstfile);  
	jQuery("#compareDrawingMenuText2_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(secondfile);  
	

	
	
	

			cvjs_loadCompareDrawingSwitch = 0;

			cvjs_toggleFlag = !cvjs_toggleFlag;

			if (cvjs_toggleFlag){
				colorFlag = true;
				FileName = cvjs_compareDrawingsFirstDrawing;
				cvjs_LoadDrawing(floorPlan_div, FileName );
			}


			if (!cvjs_toggleFlag){
				colorFlag = false;
				FileName = cvjs_compareDrawingsSecondDrawing;
				cvjs_LoadDrawing(floorPlan_div, FileName );
			}

}


/**
 * Exit compare drawing and returns to base drawing
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

function cvjs_exitCompareDrawings(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);


if (cvjs_debug)		console.log("here we exit the compare drawings methods");
	cvjs_fileOverlay = false;
	cvjs_compareDrawings = false;
	firstOverlayCompareFile = true;
	// load first drawing again
	cvjs_LoadDrawing(floorPlan_div, cvjs_compareDrawingsFirstDrawing );

	
 // 3.3.06d
 cvjs_CompareFiles_CustomFileModalContent_flag = false;
 
 
 
 	//4.1.01b
	jQuery("#floatCompareDrawingMenu"+"_"+floorplan_div).hide();	

	
}


/////   DRAWINGS OVERLAY METHODS END


////    COLLABORATION METHODS START



var cvjs_collabServerUrl =	"../php/collaboration/";
var cvjs_collabServerFolder = "C:\\xampp\\htdocs\\CV-JS_2_4_1\\php\\collaboration\\";

var cvjs_collabSessionName = "session01"


/**
 * Sets the sessions name for the collaboration session
 * @param {string} sessions_name : name of the session. This name will be a server entity of same name containing all content relevant to the session
 */
function cvjs_setCollaborationSessionName(session_name){

	cvjs_collabSessionName = session_name;

}


/**
 * Sets the server Url for collaboration content
 * @param {string} url_name : default is "../php/collaboration/";
 */
function cvjs_setCollaborationServerUrl(url_name){

	cvjs_collabServerUrl = url_name;

}


/**
 * Sets the server path for collaboration content
 * @param {string} server_path : default is "C:\\xampp\\htdocs\\CV-JS_2_4_1\\php\\collaboration\\";
 */
function cvjs_setCollaborationServerFolder(server_path){

	cvjs_collabServerFolder = server_path;

}



function cvjs_collab_timer(){

	if (cvjs_debug) console.log("collab_timer");

	if (!cvjs_collab_mode) return;

		if (!cvjs_collabPresenter){

			// if not presenter
			// go to folder and read content

if (cvjs_debug)	console.log("load redline");

			// jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).show();
			cvjs_setStickyNoteRedlineUrl(cvjs_collabServerUrl+"redlines/"+cvjs_collabSessionName+".js");
			cvjs_loadStickyNotesRedlines(floorplan_div_Array[cvjs_active_floorplan_div_nr]);

			// load the viewBox settings

			var file =  cvjs_phpPath +cvjs_serverLoadFileController+"?file="+cvjs_collabServerUrl+"viewports/"+cvjs_collabSessionName+".js";

			jQuery.ajax({
			  url:file,
			  type: 'post',
			  cache: false,
			  success: function(viewPortString){

				if (viewPortString.indexOf("viewBox_X:") == -1){
					// do nothing, there is no content yet
				}else{

					var str1 = viewPortString.substring(viewPortString.indexOf("viewBox_X:")+11);
					var str2 = str1.substring(0,str1.indexOf(","));
					viewBox[cvjs_active_floorplan_div_nr].X = parseFloat(str2);

if (cvjs_debug)						console.log("XX"+str2+"YY");
					str1 = viewPortString.substring(viewPortString.indexOf("viewBox_Y:")+11);
					str2 = str1.substring(0,str1.indexOf(","));
if (cvjs_debug)						console.log("XX"+str2+"YY");
					viewBox[cvjs_active_floorplan_div_nr].Y = parseFloat(str2);

					str1 = viewPortString.substring(viewPortString.indexOf("viewBoxWidth[cvjs_active_floorplan_div_nr]:")+14);
					str2 = str1.substring(0,str1.indexOf(","));
if (cvjs_debug)						console.log("XX"+str2+"YY");
					viewBoxWidth[cvjs_active_floorplan_div_nr] = parseFloat(str2);

					str1 = viewPortString.substring(viewPortString.indexOf("viewBoxHeight[cvjs_active_floorplan_div_nr]:")+15);
					str2 = str1.substring(0,str1.indexOf(","));
if (cvjs_debug)						console.log("XX"+str2+"YY");
					viewBoxHeight[cvjs_active_floorplan_div_nr] = parseFloat(str2);


					var attr_1 = "{ \"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
					var pan_x = jQuery.parseJSON(attr_1);
					cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(pan_x);
				}

			  }  // end success load file names

			});

		}


		if (cvjs_collabPresenter){

			// define my username/ID as active settings
			cvjs_setCurrentStickyNoteValues_NameUserId(user_name, user_id );
			cvjs_setCurrentRedlineValues_NameUserid(user_name, user_id);


			// if presenter
			// go to folder and save redline and viewport

if (cvjs_debug)				console.log("presenter save redline");

			cvjs_setStickyNoteSaveRedlineUrl(cvjs_collabServerFolder+"redlines/"+cvjs_collabSessionName+".js");
			cvjs_saveStickyNotesRedlines(floorplan_div_Array[cvjs_active_floorplan_div_nr]);

			//  let us find the ViewPort

			var viewBoxString = "var cvjs_collaborationViewport = { \n viewBox_X: "+viewBox[cvjs_active_floorplan_div_nr].X+", \n viewBox_Y: "+viewBox[cvjs_active_floorplan_div_nr].Y+", \n viewBoxWidth[cvjs_active_floorplan_div_nr]: "+viewBoxWidth[cvjs_active_floorplan_div_nr]+", \n viewBoxHeight[cvjs_active_floorplan_div_nr]: "+viewBoxHeight[cvjs_active_floorplan_div_nr]+", \n}";

if (cvjs_debug)				console.log(viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+" "+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y);
if (cvjs_debug)				console.log(viewBoxString);


			// save the viewbox Settings


					var saveSettingsUrl = cvjs_serverHandlersPath + cvjs_serverSaveFileController; //	var saveSettingsUrl = settings_data_url+'save-file-p1.php';
					var settings_data_location = cvjs_collabServerFolder+"viewports/"+cvjs_collabSessionName+".js";

					var settings_data = {};
					settings_data['file'] = settings_data_location;
					settings_data['file_content'] = viewBoxString;
if (cvjs_debug)	console.log(settings_data['file_content']+" "+settings_data['file']+"  "+saveSettingsUrl);
					jQuery.ajax({
					  url:saveSettingsUrl,
					  type: 'post',
					  data: settings_data,
					  success: function(html){

					  }  // end success

					});







		}



	if (cvjs_collab_mode==true)
		setTimeout(function(){cvjs_collab_timer()},500);

}

var collaboration_start_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];



/**
 * Start a collaboration session
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

	function cvjs_start_collab(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	
	
		if (collaboration_start_offset_flag[cvjs_active_floorplan_div_nr]){
			collaboration_start_offset_flag[cvjs_active_floorplan_div_nr] = false;
			
//			jQuery("#collabStartModal_"+floorplan_div).offset({ top: 50, left: 150 });
			// 3.1.21j .appendTo('body');
			jQuery("#collabStartModal_"+floorplan_div).css({position: "fixed"});
			jQuery("#collabStartModal_"+floorplan_div).offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top}).appendTo('body');

		}

		jQuery("#collabStartModal_"+floorplan_div).show();

	}

	function cvjs_exit_startcollabmodal(floorplan_div){


		jQuery("#collabStartModal_"+floorplan_div).hide();

	}

	function cvjs_start_collab_button(floorplan_div){

		jQuery("#collabStartModal_"+floorplan_div).hide();

		// window.alert(jQuery("#cvjs_collabSessionInput").val());

		cvjs_collabSessionName = jQuery("#cvjs_collabSessionInput").val();

		cvjs_collabPresenter = false;
		cvjs_collab_mode = true;
		// start timer
		cvjs_collab_timer();

	}


/**
 * Leave the collaboration session
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

	function cvjs_stop_collab(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	
		cvjs_collab_mode = false;
		cvjs_collabPresenter = false;
		cvjs_clearCurrentRedline(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
		console.log("leaving collab session");

		// stop timer
		// remove username from server list

	}

	
	
/**
 * Clear the redlines in collaboration session
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

	function cvjs_clear_collab_redline(floorPlan_div){

	
	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	
	
		// if presenter

		if (cvjs_collabPresenter){
			// clear redline
if (cvjs_debug)			console.log("clear redline");

			cvjs_clearCurrentRedline(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
			cvjs_saveStickyNotesRedlines(floorplan_div_Array[cvjs_active_floorplan_div_nr]);



		}


	}


	
/**
 * Take control and become the presenter in collab sessiojn
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */
		
	function cvjs_make_collab_presenter(floorPlan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	

		// make presenter internally
		// change presenter into server list

		cvjs_collabPresenter= !cvjs_collabPresenter

		// load server content


	}

////    COLLABORATION METHODS END



function cvjs_downloadFile(filePath) {

   window.location.href = filePath;

//  var link = document.createElement('a');
//  link.href = filePath;
//  link.download = filePath.substr(filePath.lastIndexOf('/') + 1);
//  link.click();
}



	/// NOTE: BELOW CALLBACK METHODS FOR SVG CLICK HANDLERS

	function cvjs_SVGtoOriginal_X_coord(x, page){
	
		//console.log("Hello: "+actualLLX[cvjs_active_floorplan_div_nr]+"  "+actualLLY[cvjs_active_floorplan_div_nr]+"  "+rpWidth[cvjs_active_floorplan_div_nr]+"  "+rpHeight[cvjs_active_floorplan_div_nr])

		var spaceX = (x-actualLLX[cvjs_active_floorplan_div_nr])/(rpWidth[cvjs_active_floorplan_div_nr]);
		//var spaceY = (y-actualLLY[cvjs_active_floorplan_div_nr])/(rpHeight[cvjs_active_floorplan_div_nr]);
		//console.log(spaceX+"  "+spaceY);

		var llx = Number(cvjs_drawingCoordinates[page].lowerLeft.x);
		var lly = Number(cvjs_drawingCoordinates[page].lowerLeft.y);			
		var urx = Number(cvjs_drawingCoordinates[page].upperRight.x);
		var ury = Number(cvjs_drawingCoordinates[page].upperRight.y);
		var deltax = urx-llx;
		//var deltay = ury-lly;
		
		//console.log(llx+"  "+lly+"  "+urx+"  "+ury+" "+deltax+" "+deltay);
		
		var xcoord = llx + spaceX*deltax
		//var ycoord = lly + spaceY*deltay;

		return xcoord;
	

	}
	

	function cvjs_SVGtoOriginal_Y_coord(y, page){

		//console.log("Hello: "+actualLLX[cvjs_active_floorplan_div_nr]+"  "+actualLLY[cvjs_active_floorplan_div_nr]+"  "+rpWidth[cvjs_active_floorplan_div_nr]+"  "+rpHeight[cvjs_active_floorplan_div_nr])

		//var spaceX = (x-actualLLX[cvjs_active_floorplan_div_nr])/(rpWidth[cvjs_active_floorplan_div_nr]);
		var spaceY = (y-actualLLY[cvjs_active_floorplan_div_nr])/(rpHeight[cvjs_active_floorplan_div_nr]);
		//console.log(spaceX+"  "+spaceY);

		var llx = Number(cvjs_drawingCoordinates[page].lowerLeft.x);
		var lly = Number(cvjs_drawingCoordinates[page].lowerLeft.y);			
		var urx = Number(cvjs_drawingCoordinates[page].upperRight.x);
		var ury = Number(cvjs_drawingCoordinates[page].upperRight.y);
		//var deltax = urx-llx;
		var deltay = ury-lly;
		
		//console.log(llx+"  "+lly+"  "+urx+"  "+ury+" "+deltax+" "+deltay);
		
		//var xcoord = llx + spaceX*deltax
		var ycoord = lly + spaceY*deltay;

		return ycoord;
	
	}

	
	
var cvjs_currentSVGHyperLinkID = "";
var cvjs_currentSVGHyperLinkCSS = new Array();
var cvjs_currentSVGHyperLinkClassList = new Array();

var cvjs_SVGHyperLinkCSSAll = new Array();
var cvjs_SVGHyperLinkCSSAll_Org = new Array();

/****
var cvjs_SVGHyperLinkCSSAll_Drag = false;
var cvjs_SVGHyperLinkCSSAll_XDrag = 0;
var cvjs_SVGHyperLinkCSSAll_YDrag = 0;
var cvjs_SVGHyperLinkCSSAll_XDragW = 0;
var cvjs_SVGHyperLinkCSSAll_YDragW = 0;

var cvjs_SVGHyperLinkCSSAll_dx = 0;
var cvjs_SVGHyperLinkCSSAll_dy = 0;
var cvjs_SVGHyperLinkCSSAll_DragClick = false;
*****/


var cvjs_SVGHyperLinkCSSAll_XDrag = 0;
var cvjs_SVGHyperLinkCSSAll_YDrag = 0;
//var cvjs_SVGHyperLinkCSSAll_Drag = false;
var cvjs_SVGHyperLinkCSSAll_MouseDown = false;

var cvjs_SVGHyperLinkCSSAll_MouseMoveFirst = true;


var cvjs_SVGHyperLink_firstFingerX = 0;
var cvjs_SVGHyperLink_firstFingerY = 0;
var cvjs_SVGHyperLink_firstFingerX_m = 0;
var cvjs_SVGHyperLink_firstFingerY_m = 0;


var cvjs_SVGHyperLink_secondFingerX = 0;
var cvjs_SVGHyperLink_secondFingerY = 0;
var cvjs_SVGHyperLink_secondFingerX_m = 0;
var cvjs_SVGHyperLink_secondFingerY_m = 0;
var cvjs_SVGHyperLink_pinch = false;


var cvjs_SVGHyperLink_deltaXinit;
var cvjs_SVGHyperLink_deltaYinit; 

// the difference between two fingers
var cvjs_SVGHyperLink_deltaBase;
var cvjs_SVGHyperLink_deltaDynamicPre;
var cvjs_SVGHyperLink_deltaDynamic;

var cvjs_SVGHyperLink_viewBoxWidthPre;
var cvjs_SVGHyperLink_viewBoxHeightPre;
								
var cvjs_SVGHyperLink_pinch_touchend = false;

var cvjs_SVGHyperLink_vboxX = 0;
var cvjs_SVGHyperLink_vboxY = 0;


var cvjs_SVGHyperLink_moveX = 0;
var cvjs_SVGHyperLink_moveY = 0;

var cvjs_SVGHyperLink_current = 0;


var cvjs_SVGHyperLink_deltaPinchRedraw = 50;


var cvjs_floorplan_div = "";


/**
 * Initialize xlink SVG Hyperlinks with click handler so mouse click are caught, and adds a tooltip with the xlink <id> displayed. The return method on mouseclick is:  cvjs_OnHyperlinkClick(xlink_id);
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

function cvjs_InitializeSVGHyperlinkClick(floorplan_div){


	
	var jj=0;
	cvjs_SVGHyperLinkCSSAll = Array();
	cvjs_SVGHyperLinkCSSAll_Changed = Array();
	
	uItem = Array();

	cvjs_floorplan_div = floorplan_div;
	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	
	
	
	isSmartPhoneOrTablet = /Android|webOS|iPhone|iPad|iPod|BlackBerry|Touch/i.test(navigator.userAgent);
	// first click is actually mouseover
	
	
	// we want to build the array with css content
	jQuery("a.hyperlink").each(function(){
		try{
		//do something with the element here.
		
		// shall we try to make a copy onto the masterBackground
		
			
		
		var id = jQuery(this).attr('id');
		var xlink = jQuery(this).attr('xlink:href');

		
		
		var child = jQuery(this).children();
		var path_id=child[0].id;

		//console.log(path_id);
		cvjs_SVGHyperLinkCSSAll[jj] = new Array();
		cvjs_SVGHyperLinkCSSAll[jj][0] = path_id;
		cvjs_SVGHyperLinkCSSAll[jj][1] = jQuery("#"+path_id).css('fill');
		cvjs_SVGHyperLinkCSSAll[jj][2] = jQuery("#"+path_id).css('fill-opacity');
		cvjs_SVGHyperLinkCSSAll[jj][3] = jQuery("#"+path_id).css('stroke');
		cvjs_SVGHyperLinkCSSAll[jj][4] = jQuery("#"+path_id).css('stroke-width');
		cvjs_SVGHyperLinkCSSAll[jj][5] = jQuery("#"+path_id).css('stroke-opacity');
		cvjs_SVGHyperLinkCSSAll[jj][6] = jQuery("#"+path_id).css('opacity');

		//if (jj<5) alert(path_id+" "+jQuery("#"+path_id).attr('d'));
		//if (jj==1) alert(cvjs_currentSVGHyperLinkCSS[4]);
		
		// 13a					
		uItem[jj]=cvjs_rPaper[cvjs_active_floorplan_div_nr].path(jQuery("#"+path_id).attr('d')).attr({fill:"#FFFFFF", stroke:"#BBBBBB", "fill-opacity":"0.01", "stroke-opacity": 1.0, "stroke-width": 0.8*cvjs_redlineThickness_scaleFactor }).data("node", jj);						
		cvjs_SVGHyperLinkCSSAll[jj][7] = uItem[jj];
		cvjs_SVGHyperLinkCSSAll[jj][8] = id;
		cvjs_SVGHyperLinkCSSAll[jj][9] = xlink;

		
		cvjs_SVGHyperLinkCSSAll[jj][10] = jQuery("#"+path_id).css('fill');                 // external highlight  3.0.13c
		cvjs_SVGHyperLinkCSSAll[jj][11] = jQuery("#"+path_id).css('fill-opacity');;
		cvjs_SVGHyperLinkCSSAll[jj][12] = false;

		
		cvjs_SVGHyperLinkCSSAll[jj][7].mousedown(function(e){
			
			console.log("mousedown");

			if (!cvjs_SVGHyperLinkCSSAll_Drag && !isSmartPhoneOrTablet){
				cvjs_SVGHyperLinkCSSAll_Drag = true;
				cvjs_SVGHyperLinkCSSAll_XDrag = e.pageX;
				cvjs_SVGHyperLinkCSSAll_YDrag = e.pageY;
				
				cvjs_SVGHyperLink_vboxX = viewBox[cvjs_active_floorplan_div_nr].X;
				cvjs_SVGHyperLink_vboxY = viewBox[cvjs_active_floorplan_div_nr].Y;
				
				
			};
			
			
			
			
		}).mouseover(function(e){
			
			console.log("mouseover");
			var testVar = "mouseover "+e.clientX+" "+e.clientY;
			//alert(testVar);
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(400, 275, 300, 100  ).attr({fill:"rgb(255,255,255)", stroke:"rgb(0,0,0)", "fill-opacity":"1"});
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].text(actualLLX[cvjs_active_floorplan_div_nr]+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])*0.2,actualLLY[cvjs_active_floorplan_div_nr]+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr])*0.2, testVar ).attr({fill:"rgb(000,000,250)", stroke:"rgb(000,000,250)", "fill-opacity":"1"});


			cvjs_SVGHyperLink_current = this.data("node");			
			cvjs_SVGHyperLinkCSSAll[cvjs_SVGHyperLink_current][7].attr({fill: highlight_Hyperlinks.fill, "fill-opacity":"0.8" });
	
			// we remove all other highlights
			for (i=0; i<cvjs_SVGHyperLinkCSSAll.size; i++){						
						if (cvjs_SVGHyperLink_current!=i){
							// 3.0.13c
							if (cvjs_SVGHyperLinkCSSAll[i][12]){
								
								cvjs_SVGHyperLinkCSSAll[i][7].attr({fill: cvjs_SVGHyperLinkCSSAll[i][10], "fill-opacity": cvjs_SVGHyperLinkCSSAll[i][11]});
							}
							else
								cvjs_SVGHyperLinkCSSAll[i][7].attr({fill: "#FFFFFF", "fill-opacity":"0.01"});
						}
			}
			
			if (cvjs_SVGHyperLink_pinch_touchend){
				// clear everything if pinch
				cvjs_SVGHyperLink_pinch_touchend = false;	
				cvjs_SVGHyperLinkCSSAll[cvjs_SVGHyperLink_current][7].attr({fill: "#FFFFFF", "fill-opacity":"0.01"});
				
			}
			
	
	
	
	
			var id = cvjs_SVGHyperLinkCSSAll[cvjs_SVGHyperLink_current][8];

			// We use CADViewer tooltip to show the ID

			
					// 3.2.01e
					tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});
			
			
			var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
			var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
			if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
			//console.log("absolute");
			   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
			}
			else{  // we have placed CV-JS inside a div and we have to make a relative position
				//console.log("inside");
				tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
			}
			tip[cvjs_active_floorplan_div_nr].html(id);
			tip[cvjs_active_floorplan_div_nr].show();
	

		}).mouseout(function(e){
			var testVar = "mouseout "+e.clientX+" "+e.clientY;
			//alert(testVar);
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(400, 275, 300, 100  ).attr({fill:"rgb(255,255,255)", stroke:"rgb(0,0,0)", "fill-opacity":"1"});
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].text(actualLLX[cvjs_active_floorplan_div_nr]+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])*0.2,actualLLY[cvjs_active_floorplan_div_nr]+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr])*0.2, testVar ).attr({fill:"rgb(000,000,250)", stroke:"rgb(000,000,250)", "fill-opacity":"1"});
			console.log("mouseout");

			var currentHyperlink = this.data("node");			
			//cvjs_SVGHyperLinkCSSAll[currentHyperlink][7].attr({fill: "#FFFFFF", "fill-opacity":"0.01"});

			// 3.0.13c
			if (cvjs_SVGHyperLinkCSSAll[currentHyperlink][12]){
				
				cvjs_SVGHyperLinkCSSAll[currentHyperlink][7].attr({fill: cvjs_SVGHyperLinkCSSAll[currentHyperlink][10], "fill-opacity": cvjs_SVGHyperLinkCSSAll[currentHyperlink][11]});
			}
			else
				cvjs_SVGHyperLinkCSSAll[currentHyperlink][7].attr({fill: "#FFFFFF", "fill-opacity":"0.01"});
			
			
			
			
			tip[cvjs_active_floorplan_div_nr].hide();

		}).mousemove(function(e){
			
			var testVar = "mousemove "+e.clientX+" "+e.clientY+"  "+cvjs_SVGHyperLinkCSSAll_Drag+"  "+isSmartPhoneOrTablet;
			
			
			if (cvjs_SVGHyperLinkCSSAll_Drag && !isSmartPhoneOrTablet){
								
				console.log("dragging this component");
				testVar = "drag "+e.clientX+" "+e.clientY+"  "+cvjs_SVGHyperLinkCSSAll_XDrag+" "+cvjs_SVGHyperLinkCSSAll_YDrag;
				console.log(testVar);
				
				
				
				var xscale = viewBoxWidth[cvjs_active_floorplan_div_nr]/jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
				var yscale = viewBoxHeight[cvjs_active_floorplan_div_nr]/jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();
				var scale = 1;
				if (xscale>yscale) {
					scale = xscale
				}
				else{
					scale = yscale;
				}
				pdx = (e.clientX-cvjs_SVGHyperLinkCSSAll_XDrag)*scale;
				pdy = (e.clientY-cvjs_SVGHyperLinkCSSAll_YDrag)*scale;

				viewBox[cvjs_active_floorplan_div_nr].X = cvjs_SVGHyperLink_vboxX  - pdx;
				viewBox[cvjs_active_floorplan_div_nr].Y = cvjs_SVGHyperLink_vboxY  - pdy;
				
				var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
				var json_obj = jQuery.parseJSON(attr_2);
				cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);

			};
			
						
						
			//alert(testVar);
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(400, 275, 300, 100  ).attr({fill:"rgb(255,255,255)", stroke:"rgb(0,0,0)", "fill-opacity":"1"});
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].text(actualLLX[cvjs_active_floorplan_div_nr]+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])*0.2,actualLLY[cvjs_active_floorplan_div_nr]+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr])*0.2, testVar ).attr({fill:"rgb(000,000,250)", stroke:"rgb(000,000,250)", "fill-opacity":"1"});
				console.log("mousemove");
		}).mouseup(function(e){
			
			//e.preventDefault();  //k    // removing in n
			
			
			var testVar = "mouseup "+e.clientX+" "+e.clientY;
			//alert(testVar);
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(400, 275, 300, 100  ).attr({fill:"rgb(255,255,255)", stroke:"rgb(0,0,0)", "fill-opacity":"1"});
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].text(actualLLX[cvjs_active_floorplan_div_nr]+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])*0.2,actualLLY[cvjs_active_floorplan_div_nr]+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr])*0.2, testVar ).attr({fill:"rgb(000,000,250)", stroke:"rgb(000,000,250)", "fill-opacity":"1"});
				console.log("mouseup");

			cvjs_SVGHyperLinkCSSAll_Drag = false

			if (!isSmartPhoneOrTablet){	
				
				var delta = Math.sqrt( Math.pow(e.clientX-cvjs_SVGHyperLinkCSSAll_XDrag, 2)+ Math.pow(e.clientY-cvjs_SVGHyperLinkCSSAll_YDrag, 2));
				//window.alert(delta);
				if (delta<4  && !isSmartPhoneOrTablet){	
					var currentHyperlink = this.data("node");	
					cvjs_OnHyperlinkClick(cvjs_SVGHyperLinkCSSAll[currentHyperlink][9]);
				}
			}
			

			if (isSmartPhoneOrTablet){
								
				var delta = Math.sqrt( Math.pow(cvjs_SVGHyperLink_moveX-cvjs_SVGHyperLinkCSSAll_XDrag, 2)+ Math.pow(cvjs_SVGHyperLink_moveY-cvjs_SVGHyperLinkCSSAll_YDrag, 2));
//				window.alert(delta);	
				if (delta<4){
					var currentHyperlink = this.data("node");
					//alert("mouse move click!");
								// we remove all other highlights
								
					for (i=0; i<cvjs_SVGHyperLinkCSSAll.length; i++){	

						if (currentHyperlink!=i){
							// 3.0.13c
							if (cvjs_SVGHyperLinkCSSAll[i][12]){
								
								cvjs_SVGHyperLinkCSSAll[i][7].attr({fill: cvjs_SVGHyperLinkCSSAll[i][10], "fill-opacity": cvjs_SVGHyperLinkCSSAll[i][11]});
							}
							else
								cvjs_SVGHyperLinkCSSAll[i][7].attr({fill: "#FFFFFF", "fill-opacity":"0.01"});
						}
					/********
								if (i!=currentHyperlink){
								cvjs_SVGHyperLinkCSSAll[i][7].attr({fill: "#FFFFFF", "fill-opacity":"0.01"});
								}
					********/
					}
					cvjs_OnHyperlinkClick(cvjs_SVGHyperLinkCSSAll[currentHyperlink ][9]);
					
					cvjs_SVGHyperLink_current = currentHyperlink;  // l 
					
					
				}else{
					
					
					var currentHyperlink = this.data("node");			

					if (currentHyperlink!=cvjs_SVGHyperLink_current){						
						//alert("clear old object color if drag")						
						////cvjs_SVGHyperLinkCSSAll[cvjs_SVGHyperLink_current][7].attr({fill: "#FFFFFF", "fill-opacity":"0.01"});

						// 3.0.13c
						if (cvjs_SVGHyperLinkCSSAll[cvjs_SVGHyperLink_current][12]){
							
							cvjs_SVGHyperLinkCSSAll[cvjs_SVGHyperLink_current][7].attr({fill: cvjs_SVGHyperLinkCSSAll[cvjs_SVGHyperLink_current][10], "fill-opacity": cvjs_SVGHyperLinkCSSAll[cvjs_SVGHyperLink_current][11]});
						}
						else
							cvjs_SVGHyperLinkCSSAll[cvjs_SVGHyperLink_current][7].attr({fill: "#FFFFFF", "fill-opacity":"0.01"});

						// and we need to swap over to new hyperlink
						cvjs_SVGHyperLink_current = currentHyperlink;
					}

					
									
				}

				
			}


			
			
		}).touchstart(function(e){
			
			
			// isSmartPhoneOrTablet , coordinates for mouse up
			cvjs_SVGHyperLink_moveX = e.touches[0].pageX;
			cvjs_SVGHyperLink_moveY = e.touches[0].pageY;
		
			cvjs_SVGHyperLink_firstFingerX = e.touches[0].pageX;
			cvjs_SVGHyperLink_firstFingerY = e.touches[0].pageY;	
	
	
			try{
				
				cvjs_SVGHyperLink_secondFingerX = e.touches[1].pageX;
				cvjs_SVGHyperLink_secondFingerY = e.touches[1].pageY;	
				cvjs_SVGHyperLink_pinch = true; 
					
				cvjs_SVGHyperLink_deltaXinit= cvjs_SVGHyperLink_secondFingerX - cvjs_SVGHyperLink_firstFingerX;
				cvjs_SVGHyperLink_deltaYinit= cvjs_SVGHyperLink_secondFingerY - cvjs_SVGHyperLink_firstFingerY;

				// the difference between two fingers
				cvjs_SVGHyperLink_deltaBase = Math.sqrt(cvjs_SVGHyperLink_deltaXinit*cvjs_SVGHyperLink_deltaXinit + cvjs_SVGHyperLink_deltaYinit*cvjs_SVGHyperLink_deltaYinit);
				cvjs_SVGHyperLink_deltaDynamicPre = cvjs_SVGHyperLink_deltaBase;

				cvjs_SVGHyperLink_viewBoxWidthPre = viewBoxWidth[cvjs_active_floorplan_div_nr];
				cvjs_SVGHyperLink_viewBoxHeightPre = viewBoxHeight[cvjs_active_floorplan_div_nr];
				
				cvjs_SVGHyperLink_vboxX = viewBox[cvjs_active_floorplan_div_nr].X;
				cvjs_SVGHyperLink_vboxY = viewBox[cvjs_active_floorplan_div_nr].Y;
						

			var testVar = "PINCH!!";
			//alert(testVar);
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(400, 275, 300, 100  ).attr({fill:"rgb(255,255,255)", stroke:"rgb(0,0,0)", "fill-opacity":"1"});
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].text(actualLLX[cvjs_active_floorplan_div_nr]+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])*0.2,actualLLY[cvjs_active_floorplan_div_nr]+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr])*0.2, testVar ).attr({fill:"rgb(000,000,250)", stroke:"rgb(000,000,250)", "fill-opacity":"1"});

				
			}catch(err){
								
				cvjs_SVGHyperLink_pinch = false; 

			var testVar = "No PINCH";
			//alert(testVar);
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(400, 275, 300, 100  ).attr({fill:"rgb(255,255,255)", stroke:"rgb(0,0,0)", "fill-opacity":"1"});
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].text(actualLLX[cvjs_active_floorplan_div_nr]+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])*0.2,actualLLY[cvjs_active_floorplan_div_nr]+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr])*0.2, testVar ).attr({fill:"rgb(000,000,250)", stroke:"rgb(000,000,250)", "fill-opacity":"1"});
				
				
				
			}
	
	
	
			if (!cvjs_SVGHyperLinkCSSAll_Drag){
				cvjs_SVGHyperLinkCSSAll_Drag = true;
				cvjs_SVGHyperLinkCSSAll_XDrag = cvjs_SVGHyperLink_firstFingerX ;
				cvjs_SVGHyperLinkCSSAll_YDrag = cvjs_SVGHyperLink_firstFingerY ;
				
				cvjs_SVGHyperLink_vboxX = viewBox[cvjs_active_floorplan_div_nr].X;
				cvjs_SVGHyperLink_vboxY = viewBox[cvjs_active_floorplan_div_nr].Y;		
			};
			
	
			var testVar = "touchstart "+cvjs_SVGHyperLink_firstFingerX+" "+cvjs_SVGHyperLink_firstFingerY+"  "+cvjs_SVGHyperLinkCSSAll_Drag;
			//alert(testVar);
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(400, 275, 300, 100  ).attr({fill:"rgb(255,255,255)", stroke:"rgb(0,0,0)", "fill-opacity":"1"});
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].text(actualLLX[cvjs_active_floorplan_div_nr]+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])*0.2,actualLLY[cvjs_active_floorplan_div_nr]+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr])*0.2, testVar ).attr({fill:"rgb(000,000,250)", stroke:"rgb(000,000,250)", "fill-opacity":"1"});
			console.log("touchstart");
			
			
			var currentHyperlink = this.data("node");			
			cvjs_SVGHyperLinkCSSAll[currentHyperlink][7].attr({fill: highlight_Hyperlinks.fill, "fill-opacity":"0.8" });
	
			var id = cvjs_SVGHyperLinkCSSAll[currentHyperlink][8];

			// We use CADViewer tooltip to show the ID

			
					// 3.2.01e
					tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});
			
			
			var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
			var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
			if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
			//console.log("absolute");
			   tip[cvjs_active_floorplan_div_nr].css("left", cvjs_SVGHyperLink_firstFingerX+document.documentElement.scrollLeft+10).css("top", cvjs_SVGHyperLink_firstFingerY+document.documentElement.scrollTop-25);
			}
			else{  // we have placed CV-JS inside a div and we have to make a relative position
				//console.log("inside");
				tip[cvjs_active_floorplan_div_nr].css("left", cvjs_SVGHyperLink_firstFingerX-position.left+document.documentElement.scrollLeft+10).css("top", cvjs_SVGHyperLink_firstFingerY-position.top+document.documentElement.scrollTop-25);
			}
			tip[cvjs_active_floorplan_div_nr].html(id);
			tip[cvjs_active_floorplan_div_nr].show();

			
		}).touchend(function(e){

			tip[cvjs_active_floorplan_div_nr].hide();

			cvjs_SVGHyperLink_firstFingerX_m = e.touches[0].pageX;
			cvjs_SVGHyperLink_firstFingerY_m = e.touches[0].pageY;	

			if (cvjs_SVGHyperLink_pinch){
				
				cvjs_SVGHyperLink_pinch = false; 	
				cvjs_SVGHyperLink_pinch_touchend = true;

				
				for (i=0; i<cvjs_SVGHyperLinkCSSAll.length; i++){						
					// cvjs_SVGHyperLinkCSSAll[i][7].attr({fill: "#FFFFFF", "fill-opacity":"0.01"});

					// 3.0.13c
					if (cvjs_SVGHyperLinkCSSAll[i][12]){
						
						cvjs_SVGHyperLinkCSSAll[i][7].attr({fill: cvjs_SVGHyperLinkCSSAll[i][10], "fill-opacity": cvjs_SVGHyperLinkCSSAll[i][11]});
					}
					else
						cvjs_SVGHyperLinkCSSAll[i][7].attr({fill: "#FFFFFF", "fill-opacity":"0.01"});


				}
				
	

			}
			

			var testVar = "touchend "+cvjs_SVGHyperLink_firstFingerX_m+" "+cvjs_SVGHyperLink_firstFingerY_m;
				//alert(testVar);
				//cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(400, 275, 300, 100  ).attr({fill:"rgb(255,255,255)", stroke:"rgb(0,0,0)", "fill-opacity":"1"});
				//cvjs_rPaper[cvjs_active_floorplan_div_nr].text(actualLLX[cvjs_active_floorplan_div_nr]+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])*0.2,actualLLY[cvjs_active_floorplan_div_nr]+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr])*0.2, testVar ).attr({fill:"rgb(000,000,250)", stroke:"rgb(000,000,250)", "fill-opacity":"1"});
				console.log("touchend");

				
				
		
		}).touchmove(function(e){
		
			cvjs_SVGHyperLink_firstFingerX_m = e.touches[0].pageX;
			cvjs_SVGHyperLink_firstFingerY_m = e.touches[0].pageY;	

			// isSmartPhoneOrTablet , coordinates for mouse up
			cvjs_SVGHyperLink_moveX = e.touches[0].pageX;
			cvjs_SVGHyperLink_moveY = e.touches[0].pageY;


			try{
				
				cvjs_SVGHyperLink_secondFingerX_m = e.touches[1].pageX;
				cvjs_SVGHyperLink_secondFingerY_m = e.touches[1].pageY;	
				
				cvjs_SVGHyperLink_pinch = true; 
			
			 	e.stopPropagation();
				e.preventDefault();			

			var testVar = cvjs_SVGHyperLinkCSSAll_Drag+" pinch "+cvjs_SVGHyperLink_pinch+" "+cvjs_SVGHyperLink_firstFingerX_m+" "+cvjs_SVGHyperLink_secondFingerX_m+" "+cvjs_SVGHyperLink_firstFingerY_m+" "+cvjs_SVGHyperLink_secondFingerY_m+" ";
				//alert(testVar);
				//cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(400, 275, 300, 100  ).attr({fill:"rgb(255,255,255)", stroke:"rgb(0,0,0)", "fill-opacity":"1"});
				//cvjs_rPaper[cvjs_active_floorplan_div_nr].text(actualLLX[cvjs_active_floorplan_div_nr]+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])*0.2,actualLLY[cvjs_active_floorplan_div_nr]+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr])*0.2, testVar ).attr({fill:"rgb(000,000,250)", stroke:"rgb(000,000,250)", "fill-opacity":"1"});
				
			}catch(err){
								
				
			}


			
			var testVar = "touchmove "+(cvjs_SVGHyperLink_firstFingerX_m)+" "+(cvjs_SVGHyperLink_firstFingerY_m-cvjs_SVGHyperLink_firstFingerY);
//			var testVar = "touchmove "+(cvjs_SVGHyperLink_firstFingerX_m-cvjs_SVGHyperLink_firstFingerX)+" "+(cvjs_SVGHyperLink_firstFingerY_m-cvjs_SVGHyperLink_firstFingerY);
				//alert(testVar);
				//cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(400, 275, 300, 100  ).attr({fill:"rgb(255,255,255)", stroke:"rgb(0,0,0)", "fill-opacity":"1"});
				//cvjs_rPaper[cvjs_active_floorplan_div_nr].text(actualLLX[cvjs_active_floorplan_div_nr]+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])*0.2,actualLLY[cvjs_active_floorplan_div_nr]+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr])*0.2, testVar ).attr({fill:"rgb(000,000,250)", stroke:"rgb(000,000,250)", "fill-opacity":"1"});
					console.log("touchmove");
					
			if (cvjs_SVGHyperLinkCSSAll_Drag){
																
				if (cvjs_SVGHyperLink_pinch){

						cvjs_SVGHyperLink_deltaX =  cvjs_SVGHyperLink_secondFingerX_m - cvjs_SVGHyperLink_firstFingerX_m;
						cvjs_SVGHyperLink_deltaY =  cvjs_SVGHyperLink_secondFingerY_m - cvjs_SVGHyperLink_firstFingerY_m;
				
						cvjs_SVGHyperLink_deltaDynamic = Math.sqrt(cvjs_SVGHyperLink_deltaX*cvjs_SVGHyperLink_deltaX + cvjs_SVGHyperLink_deltaY*cvjs_SVGHyperLink_deltaY);

// no speed increase, removing  13a
/*						
						var deltaP = Math.abs(cvjs_SVGHyperLink_deltaDynamic-cvjs_SVGHyperLink_deltaDynamicPre);

			//var testVar = "tmove "+cvjs_SVGHyperLink_deltaDynamic+" ";
			var testVar = "tmove "+deltaP+" ";
				//alert(testVar);
				cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(400, 275, 300, 100  ).attr({fill:"rgb(255,255,255)", stroke:"rgb(0,0,0)", "fill-opacity":"1"});
				cvjs_rPaper[cvjs_active_floorplan_div_nr].text(actualLLX[cvjs_active_floorplan_div_nr]+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])*0.2,actualLLY[cvjs_active_floorplan_div_nr]+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr])*0.2, testVar ).attr({fill:"rgb(000,000,250)", stroke:"rgb(000,000,250)", "fill-opacity":"1"});
			var testVar = " "+cvjs_SVGHyperLink_deltaDynamicPre+" "+cvjs_SVGHyperLink_deltaPinchRedraw+"  "+Math.abs(cvjs_SVGHyperLink_deltaDynamic-cvjs_SVGHyperLink_deltaDynamicPre);;
				cvjs_rPaper[cvjs_active_floorplan_div_nr].text(actualLLX[cvjs_active_floorplan_div_nr]+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])*0.2,actualLLY[cvjs_active_floorplan_div_nr]+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr])*0.18, testVar ).attr({fill:"rgb(000,000,250)", stroke:"rgb(000,000,250)", "fill-opacity":"1"});

	*/					
						// only do pinch in increments				
						//if ( deltaP>cvjs_SVGHyperLink_deltaPinchRedraw){
				
							//alert("pinch");
							cvjs_SVGHyperLink_deltaDynamicPre = cvjs_SVGHyperLink_deltaDynamic;
				
							viewBox[cvjs_active_floorplan_div_nr].X = cvjs_SVGHyperLink_vboxX;
							viewBox[cvjs_active_floorplan_div_nr].Y = cvjs_SVGHyperLink_vboxY;

							vBHo = cvjs_SVGHyperLink_viewBoxHeightPre;
							vBWo = cvjs_SVGHyperLink_viewBoxWidthPre;

							viewBoxWidth[cvjs_active_floorplan_div_nr] = cvjs_SVGHyperLink_viewBoxWidthPre;
							viewBoxHeight[cvjs_active_floorplan_div_nr] = cvjs_SVGHyperLink_viewBoxHeightPre;
							viewBoxWidth[cvjs_active_floorplan_div_nr] /= cvjs_SVGHyperLink_deltaDynamic/cvjs_SVGHyperLink_deltaBase;
							viewBoxHeight[cvjs_active_floorplan_div_nr]/= cvjs_SVGHyperLink_deltaDynamic/cvjs_SVGHyperLink_deltaBase;

							viewBox[cvjs_active_floorplan_div_nr].X -= (viewBoxWidth[cvjs_active_floorplan_div_nr] - vBWo) / 2;
							viewBox[cvjs_active_floorplan_div_nr].Y -= (viewBoxHeight[cvjs_active_floorplan_div_nr] - vBHo) / 2;

							
							var testVar = "pinch "+cvjs_SVGHyperLink_deltaDynamic+" "+cvjs_SVGHyperLink_deltaBase+" "+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" ";

							zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/rpWidth[cvjs_active_floorplan_div_nr];

							var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
	//console.log("x4 attr_2="+attr_2);
							var json_obj = jQuery.parseJSON(attr_2);
							cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);

						//}     13a
				
				}
				else{
								
					console.log("dragging this component");
					testVar = "drag "+cvjs_SVGHyperLink_firstFingerX_m+" "+cvjs_SVGHyperLink_firstFingerY_m+"  "+cvjs_SVGHyperLinkCSSAll_XDrag+" "+cvjs_SVGHyperLinkCSSAll_YDrag;
					console.log(testVar);
					var xscale = viewBoxWidth[cvjs_active_floorplan_div_nr]/jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
					var yscale = viewBoxHeight[cvjs_active_floorplan_div_nr]/jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();
					var scale = 1;
					if (xscale>yscale) {
						scale = xscale
					}
					else{
						scale = yscale;
					}
					pdx = (cvjs_SVGHyperLink_firstFingerX_m-cvjs_SVGHyperLinkCSSAll_XDrag)*scale;				
					pdy = (cvjs_SVGHyperLink_firstFingerY_m-cvjs_SVGHyperLinkCSSAll_YDrag)*scale;

					viewBox[cvjs_active_floorplan_div_nr].X = cvjs_SVGHyperLink_vboxX  - pdx;
					viewBox[cvjs_active_floorplan_div_nr].Y = cvjs_SVGHyperLink_vboxY  - pdy;
					
					var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
					var json_obj = jQuery.parseJSON(attr_2);
					cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);
								
				}

			};
			

			
					
		});

		
		
		cvjs_SVGHyperLinkCSSAll_Org[jj] = new Array();
		cvjs_SVGHyperLinkCSSAll_Org[jj][0] = path_id;
		cvjs_SVGHyperLinkCSSAll_Org[jj][1] = jQuery("#"+path_id).css('fill');
		cvjs_SVGHyperLinkCSSAll_Org[jj][2] = jQuery("#"+path_id).css('fill-opacity');
		cvjs_SVGHyperLinkCSSAll_Org[jj][3] = jQuery("#"+path_id).css('stroke');
		cvjs_SVGHyperLinkCSSAll_Org[jj][4] = jQuery("#"+path_id).css('stroke-width');
		cvjs_SVGHyperLinkCSSAll_Org[jj][5] = jQuery("#"+path_id).css('stroke-opacity');
		cvjs_SVGHyperLinkCSSAll_Org[jj][6] = jQuery("#"+path_id).css('opacity');

		
				
		
		jj++;
		}catch(err){console.log(err);}
	});
	
	
	// 3.0.13b
	// turning the URL layer off, after copy to polygon array
	
/*	
	
		for (id=0; id<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; id++){
			window.alert("XXX"+layerTable[cvjs_active_floorplan_div_nr].layers[id].layerName+"XXXX"+layerTable[cvjs_active_floorplan_div_nr].layers[id].layer);
		}
*/		
	
	cvjs_LayerOff("URLs");
	
	
		
}


/**
 * Add color to an xlink SVG hyperlinks to have it behave like a dynamic highlight
 * @param {string} hyperlinkId - the <id> element of the xlink hyperlink
 * @param {string} hyperFill - the new fill color, of type #00FF00
 * @param {float} hyperOpacity - the opacity of the fill, a value between 0.0 and 1.0.
 */


function cvjs_colorSingleSVGHyperlink(hyperlinkId, hyperFill, hyperOpacity){

		jQuery("a.hyperlink").each(function(){
		    //do something with the element here.
				var id = jQuery(this).attr('id');
				var pid= "#"+id;

				//console.log("XX"+hyperlinkId+"XX"+id+"XX "+id.indexOf(hyperlinkId)+"  "+hyperlinkId.length+"  "+id.length);

				if (id.indexOf(hyperlinkId)==0 && hyperlinkId.length == id.length  ){

					//console.log("single color: "+id+"  "+pid);
					// find the path id that defines the hyperlink!

					// THIS IS A TMS STRUCTURE WITH A PATH INSIDE THE <A>
					var child = jQuery(this).children();
					var path_id=child[0].id;


					var myPos = -1;
					for (var i=0; i<cvjs_SVGHyperLinkCSSAll.length; i++){
						if (cvjs_SVGHyperLinkCSSAll[i][0] == path_id){
							myPos = i;
							
							// 3.0.13c
							cvjs_SVGHyperLinkCSSAll[myPos][7].attr({fill: hyperFill, "fill-opacity": hyperOpacity })	

							cvjs_SVGHyperLinkCSSAll[myPos][10] = hyperFill;                 // external highlight  3.0.13c
							cvjs_SVGHyperLinkCSSAll[myPos][11] = hyperOpacity;
							cvjs_SVGHyperLinkCSSAll[myPos][12] = true;
							

						}
					}
		
					cvjs_SVGHyperLinkCSSAll[myPos][1] =  hyperFill;
					cvjs_SVGHyperLinkCSSAll[myPos][2] =  hyperOpacity;
					cvjs_SVGHyperLinkCSSAll[myPos][3] =  hyperFill;
					cvjs_SVGHyperLinkCSSAll[myPos][5] =  hyperOpacity;
					cvjs_SVGHyperLinkCSSAll[myPos][6] =  hyperOpacity;

					if (cvjs_debug) console.log("path_id "+path_id+" mypos "+myPos);

					// Update the cvjs_SVGHyperLinkCSSAll Array with the new colors

					cvjs_currentSVGHyperLinkID = path_id;
					var pid="#"+path_id;

					// here we need to use the predefined values
					jQuery(pid).css('fill', hyperFill);
					jQuery(pid).css('fill-opacity', hyperOpacity);
					jQuery(pid).css('stroke', hyperFill);
					jQuery(pid).css('stroke-opacity', hyperOpacity);
					jQuery(pid).css('opacity', hyperOpacity);

					if (cvjs_debug) console.log(id+"  "+pid+" "+hyperFill+"  "+hyperOpacity);

				}
		});
}


/**
 * Reset colors on xlink SVG Hyperlinks. The hyperlinks are typically transparent, but can be controlled to do interactive highlight.-
 */

function cvjs_resetSVGHyperlinkColors(){

		var jj=0;

		jQuery("a.hyperlink").each(function(){
			try{
			var child = jQuery(this).children();
			var path_id=child[0].id;
			cvjs_SVGHyperLinkCSSAll[jj][1] = cvjs_SVGHyperLinkCSSAll_Org[jj][1];
			cvjs_SVGHyperLinkCSSAll[jj][2] = cvjs_SVGHyperLinkCSSAll_Org[jj][2];
			cvjs_SVGHyperLinkCSSAll[jj][3] = cvjs_SVGHyperLinkCSSAll_Org[jj][3];
			cvjs_SVGHyperLinkCSSAll[jj][4] = cvjs_SVGHyperLinkCSSAll_Org[jj][4];
			cvjs_SVGHyperLinkCSSAll[jj][5] = cvjs_SVGHyperLinkCSSAll_Org[jj][5];
			cvjs_SVGHyperLinkCSSAll[jj][6] = cvjs_SVGHyperLinkCSSAll_Org[jj][6];

			// 3.0.13c
			cvjs_SVGHyperLinkCSSAll[jj][7].attr({fill: "FFFFFF", "fill-opacity": 0.01 })						
			
			// no color on object
			cvjs_SVGHyperLinkCSSAll[jj][12] = false;

	
			
			
			jQuery("#"+path_id).css('fill', cvjs_SVGHyperLinkCSSAll[jj][1]);
			jQuery("#"+path_id).css('fill-opacity', cvjs_SVGHyperLinkCSSAll[jj][2]);
			jQuery("#"+path_id).css('stroke', cvjs_SVGHyperLinkCSSAll[jj][3]);
			jQuery("#"+path_id).css('stroke-width', cvjs_SVGHyperLinkCSSAll[jj][4]);
			jQuery("#"+path_id).css('stroke-opacity', cvjs_SVGHyperLinkCSSAll[jj][5]);
			 jQuery("#"+path_id).css('opacity', cvjs_SVGHyperLinkCSSAll[jj][6]);

			jj++;
			}catch(err){console.log(err);}
		});





}


/**
 * Make a legend in the upper right location of the drawings with color codes and text description
 * @param {float} upperRightDeltaX - delta x value, the Legend is moved this relative value to the right of drawing extents, value between 0 and 1
 * @param {float} upperRightDeltaX - delta y value, the Legend is moved this relative value from the top of the drawing extents, value between 0 and 1
 * @param {float[]} scaleTextArr - Array with the legends text heigth, on a per line basis, value between 0 and 1 as the relative value of the drawing height
 * @param {string[]} textStringArr - Array with the legends text to be displayed on a per line basis
 * @param {string[]} textStylesArr- Array with the text styles of each legend
 * @param {string[]} hexColorTextArr - Array with the hex colors on each text legends
 * @param {string[]} legendColorArr - Array with the hex colors of the color box associated with each legend text
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 * @param {Object} highlight_handles_style_object - object with the styles used for highlight
 */

 function cvjs_makeLegendUpperRightDiv(upperRightDeltaX, upperRightDeltaY,  roomLayer,  headerScale, headerString, headerStyle,  headerHexColor, scaleTextArr, textStringArr, textStylesArr, hexColorTextArr, legendColorArr, floorplan_div, highlight_handles_style_object){

	floorplan_div = floorplan_div + "_svg";
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
  
	cvjs_makeLegendUpperRight(upperRightDeltaX, upperRightDeltaY,  roomLayer,  headerScale, headerString, headerStyle,  headerHexColor, scaleTextArr, textStringArr, textStylesArr, hexColorTextArr, legendColorArr, highlight_handles_style_object);
 }




/**
 * Make a legend in the upper right location of the drawings with color codes and text description
 * @param {float} upperRightDeltaX - delta x value, the Legend is moved this relative value to the right of drawing extents, value between 0 and 1
 * @param {float} upperRightDeltaX - delta y value, the Legend is moved this relative value from the top of the drawing extents, value between 0 and 1
 * @param {float[]} scaleTextArr - Array with the legends text heigth, on a per line basis, value between 0 and 1 as the relative value of the drawing height
 * @param {string[]} textStringArr - Array with the legends text to be displayed on a per line basis
 * @param {string[]} textStylesArr- Array with the text styles of each legend
 * @param {string[]} hexColorTextArr - Array with the hex colors on each text legends
 * @param {string[]} legendColorArr - Array with the hex colors of the color box associated with each legend text
*/

 function cvjs_makeLegendUpperRight(upperRightDeltaX, upperRightDeltaY,  roomLayer,  headerScale, headerString, headerStyle,  headerHexColor, scaleTextArr, textStringArr, textStylesArr, hexColorTextArr, legendColorArr){
 
	var x1 = actualLLX[cvjs_active_floorplan_div_nr]+rpWidth[cvjs_active_floorplan_div_nr]*(1+upperRightDeltaX);
	var y1 = actualLLY[cvjs_active_floorplan_div_nr]+rpHeight[cvjs_active_floorplan_div_nr]*(upperRightDeltaY);

	var fontheight = rpHeight[cvjs_active_floorplan_div_nr]*headerScale;
	txt = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(x1 - (rpHeight[cvjs_active_floorplan_div_nr]*scaleTextArr[0]*1.6), y1, headerString).attr(headerStyle);
	roomLayer.add(txt);
	txt.attr({'font-size' : fontheight});
	txt.attr({'fill' : headerHexColor});
	y1 += fontheight*1.01;

	// headerString, headerStyle, headerScale
	
	var styleString = JSON.stringify(highlight_handles_style_object);
	styleString = styleString.toString();
	var splitString = styleString.split(",");
	var fillopacity_var = 0.5;
	
	for (var i=0; i<splitString.length; i++){
		var styleObject = splitString[i];
		if (styleObject.indexOf('"fill-opacity"')>-1){
			fillopacity_var = styleObject.substring(styleObject.indexOf(':')+1);
			if (fillopacity_var.indexOf('}')>-1)
				fillopacity_var = fillopacity_var.substring(0, fillopacity_var.indexOf('}'));
		}

	}
	fillopacity_var = fillopacity_var.substring(1);
	fillopacity_var = fillopacity_var.substring(0, fillopacity_var.length-1);
	fillopacity_var = Number(fillopacity_var);
	
	for	(i = 0; i < textStringArr.length; i++) {

		var fontheight = rpHeight[cvjs_active_floorplan_div_nr]*scaleTextArr[i];

		if (i>0) y1 += fontheight*1.05;
		txt = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(x1,y1, textStringArr[i]).attr(textStylesArr[i]);
		roomLayer.add(txt);
		txt.attr({'font-size' : fontheight});
		txt.attr({'fill' : hexColorTextArr[i]});

		
		rect = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(x1-(fontheight*1.5), y1 -fontheight*0.75, fontheight*0.8, fontheight*0.8).attr({fill: legendColorArr[i], "fill-opacity": fillopacity_var });  // we are making the opacity similar to the highlight
		roomLayer.add(rect);
	}


	cvjs_addedObjectsToExtents = true;
	cvjs_resetZoomPan();
	
}


	
/**
 * Changes visible text attribute objects on a block, referenced through its block handle
 * @param {string} handle - AutoCAD block handle referecen
 * @param {string[]} textArr - Array with the text objects to be replaced. The lenght of the array determines how many objects are replaced
 */

	
function cvjs_changeText_On_BlockHandle(handle, textArr){

 //window.alert("first in change");
   var oArr = {};
   jQuery(".cvjs_block").each(function() {
	   var id = jQuery(this).attr('id');
	   if (!oArr[id]) oArr[id] = true;
   });


   for (var prop in oArr){
	//console.log("oArr  prop"+prop);
				try{
					var target = "#"+prop;
					var cvjsId = "";
					jQuery(target).each(function() {
					  jQuery.each(this.attributes, function() {
						if(this.specified) {
						  //console.log(this.name, this.value);
						  var cvname = (this.name).toString().toLowerCase();
						  if (cvname == "cvjs:handle")
							cvjsId = this.value;
						  else
							cvjsId = "";
						  if (cvjsId.indexOf(handle)==0){

							var htmlString = jQuery(target).html();
							var idArr = new Array();
							var i = 0;
							while ( htmlString.indexOf("id=")>-1){

								var substring1 = htmlString.substring(htmlString.indexOf("id=")+4);
								var textId = "#"+substring1.substring(0, substring1.indexOf('"'));
								jQuery(textId).text(textArr[i]);
								jQuery(textId).css("visibility","visible");
								htmlString = htmlString.substring(htmlString.indexOf("id=")+4);

								i++;

								if (i==textArr.length) return
							}
							return;
						  }

						}
					  });
					});

				}
				catch(err){
					console.log(err);
				}
			   // alert(prop);
		}
}





/**
 * Changes visible text attribute objects on a block, referenced through its block handle
 * @param {string} handle - AutoCAD block handle reference
 * @param {string[]} textArr - Array with the text objects to be replaced. The lenght of the array determines how many objects are replaced
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 * @return {boolean} false if handle not found otherwise true
 */
	
function cvjs_changeText_On_BlockHandleDiv(handle, textArr, floorplan_div){


	floorplan_div = floorplan_div + "_svg";
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

 //window.alert("first in change");
   
   var returnflag = false;
   
   var oArr = {};
   jQuery(".cvjs_block").each(function() {

   		var id = jQuery(this).attr('id');

// new 2018-01-09
		var searchString = "[id^="+floorplan_div_Array[cvjs_active_floorplan_div_nr]+"]";
		var svgID = jQuery("#"+id).parents(searchString).attr('id');
		floorplan_div_Array[cvjs_active_floorplan_div_nr]
		
		if (svgID == floorplan_div_Array[cvjs_active_floorplan_div_nr])		
		   if (!oArr[id]) oArr[id] = true;
   });


   for (var prop in oArr){
	//console.log("oArr  prop"+prop);
				try{
					var target = "#"+prop;
					var cvjsId = "";
					jQuery(target).each(function() {
					  jQuery.each(this.attributes, function() {
						if(this.specified) {
						  //console.log(this.name, this.value);
						  var cvname = (this.name).toString().toLowerCase();
						  if (cvname == "cvjs:handle")
							cvjsId = this.value;
						  else
							cvjsId = "";
						  if (cvjsId.indexOf(handle)==0){

							var htmlString = jQuery(target).html();
							var idArr = new Array();
							var i = 0;
							while ( htmlString.indexOf("id=")>-1){

								var substring1 = htmlString.substring(htmlString.indexOf("id=")+4);
								var textId = "#"+substring1.substring(0, substring1.indexOf('"'));
								jQuery(textId).text(textArr[i]);
								jQuery(textId).css("visibility","visible");
								htmlString = htmlString.substring(htmlString.indexOf("id=")+4);
								i++;
//window.alert(i+" here?"+textArr.length);
								returnflag = true;
								if (i==textArr.length) return(true);							
//window.alert(i+" 2 here?"+textArr.length);
							}
							returnflag = true;
//							window.alert("here?");
							return(true);
//							window.alert("after return here?");
						  }

						}
					  });
					});

				}
				catch(err){
					console.log(err);
				}
			   // alert(prop);
		}
		
//window.alert("end of loop "+returnflag);		
	if (returnflag) return (true);
	return(false);	
}



	



/**
 * Make a stamp in the upper right location of the drawings with color codes and text description
 * @param {float} upperRightDeltaX - delta x value, the Legend is moved this relative value to the right of drawing extents, value between 0 and 1
 * @param {float} upperRightDeltaX - delta y value, the Legend is moved this relative value from the top of the drawing extents, value between 0 and 1
 * @param {string} roomLayer - name of layer to draw stamp
 * @param {float} headerScale - Header text heigth, on a per line basis, value between 0 and 1 as the relative value of the drawing height
 * @param {string[]} headerStringArrr - Array with the header text to be displayed on a per line basis
 * @param {object} headerStyle - Style array of the header text
 * @param {string} headerHexColor - Hex color of header text
 * @param {float[]} scaleTextArr - Array with the legends text heigth, on a per line basis, value between 0 and 1 as the relative value of the drawing height
 * @param {string[]} textStringArr - Array with the legends text to be displayed on a per line basis
 * @param {string[]} textStylesArr- Array with the text styles of each legend
 * @param {string[]} hexColorTextArr - Array with the hex colors on each text legends
 * @param {string} hexColorFrame - Hex color of the frame
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

 function cvjs_makeStampUpperRightDiv(upperRightDeltaX, upperRightDeltaY,  roomLayer,  headerScale, headerStringArr, headerStyle,  headerHexColor, scaleTextArr, textStringArr, textStylesArr, hexColorTextArr, hexColorFrame, floorplan_div){

	floorplan_div = floorplan_div + "_svg";
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
 
	window.alert(floorplan_div+" "+cvjs_active_floorplan_div_nr);
 
	cvjs_makeStampUpperRight(upperRightDeltaX, upperRightDeltaY,  roomLayer,  headerScale, headerStringArr, headerStyle,  headerHexColor, scaleTextArr, textStringArr, textStylesArr, hexColorTextArr, hexColorFrame);
 }


 
var cvjs_customLayerContentAdded = false;
var cvjs_customLayerContent;
 
/**
 * Make a stamp in the upper right location of the drawings with color codes and text description
 * @param {float} upperRightDeltaX - delta x value, the Legend is moved this relative value to the right of drawing extents, value between 0 and 1
 * @param {float} upperRightDeltaX - delta y value, the Legend is moved this relative value from the top of the drawing extents, value between 0 and 1
 * @param {float[]} scaleTextArr - Array with the legends text heigth, on a per line basis, value between 0 and 1 as the relative value of the drawing height
 * @param {string[]} textStringArr - Array with the legends text to be displayed on a per line basis
 * @param {string[]} textStylesArr- Array with the text styles of each legend
 * @param {string[]} hexColorTextArr - Array with the hex colors on each text legends
 * @param {string[]} legendColorArr - Array with the hex colors of the color box associated with each legend text
 */

 function cvjs_makeStampUpperRight(upperRightDeltaX, upperRightDeltaY,  roomLayer,  headerScale, headerStringArr, headerStyle,  headerHexColor, scaleTextArr, textStringArr, textStylesArr, hexColorTextArr , hexColorFrame){

	var x1 = actualLLX[cvjs_active_floorplan_div_nr]+rpWidth[cvjs_active_floorplan_div_nr]*(1+upperRightDeltaX);
	var y1 = actualLLY[cvjs_active_floorplan_div_nr]+rpHeight[cvjs_active_floorplan_div_nr]*(upperRightDeltaY);
	var y1_base = actualLLY[cvjs_active_floorplan_div_nr]+rpHeight[cvjs_active_floorplan_div_nr]*(upperRightDeltaY);
	

//console.log(x1+" "+y1+" "+y1_base);	


	if (cvjs_SVG_multiPagesFlag[cvjs_active_floorplan_div_nr]){   // 2018-03-21 
		var bbox = cvjs_SVGGroup[cvjs_active_floorplan_div_nr].getBBox();
		// we have to add the extents of the stamp later
			//indow.alert("bbox is SVG");
		x1 = bbox.x + bbox.width*(1+upperRightDeltaX);
		y1 = bbox.y + bbox.height*(upperRightDeltaY);
		y1_base = bbox.y + bbox.height*(upperRightDeltaY);		
	}

//console.log(x1+" "+y1+" "+y1_base);
	
	
	var fontheightHeader = rpHeight[cvjs_active_floorplan_div_nr]*headerScale;
	var fontheight = rpHeight[cvjs_active_floorplan_div_nr]*headerScale;
	var fontheightBase = rpHeight[cvjs_active_floorplan_div_nr]*headerScale;
	var width = rpWidth[cvjs_active_floorplan_div_nr]*(0.2);
	var height = fontheight*1.6;	
	var stampstrokewidth = fontheight*0.1;
	
	if (cvjs_SVG_multiPagesFlag[cvjs_active_floorplan_div_nr]){   // 2018-03-21 
		var bbox = cvjs_SVGGroup[cvjs_active_floorplan_div_nr].getBBox();
		// we have to add the extents of the stamp later
			//indow.alert("bbox is SVG");
		fontheightHeader = bbox.height*headerScale;
		fontheight = bbox.height*headerScale;
		fontheightBase = bbox.height;
		width = bbox.width*(0.2);
		height = fontheight*1.5;
	}

//console.log(fontheightHeader+" "+width+" "+height);
		
	var x0 = x1 -(fontheight*0.2);
	var y0 = y1 - (fontheight*1.5);
	
	for	(i = 0; i < headerStringArr.length; i++) {
		txt = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(x1, y1, headerStringArr[i]).attr(headerStyle);
		roomLayer.add(txt);
		txt.attr({'font-size' : fontheightHeader*0.95});   // 3.3.01e
		txt.attr({'fill' : headerHexColor});
		y1 += fontheight*1.05;
	}

	
// 3.3.01e 	
// we standardise back from the fontheightHeader
	fontheightBase = fontheightHeader/headerScale;

	
	for	(i = 0; i < textStringArr.length; i++) {
//console.log("text loop "+i+"  "+textStylesArr[i]);
		var fontheight = fontheightBase*scaleTextArr[i];
		if (i>0) y1 += fontheight*1.05;
		for	(j = 0; j < textStringArr[i].length; j++) {
//console.log("textstring "+j+"  "+x1 + fontheight*5*j +"  "+y1+"  "+textStringArr[i][j]+"  "+fontheight);			
			txt = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(x1 + fontheight*5*j , y1 , textStringArr[i][j]).attr(textStylesArr[i]);
			roomLayer.add(txt);
			txt.attr({'font-size' : fontheight*0.95});  // 3.3.01e
			txt.attr({'fill' : hexColorTextArr[i]});
		}
	}


	
	var boundingBoxElement = roomLayer.getBBox();

	var x = boundingBoxElement.x - boundingBoxElement.width*0.02;
	var y = boundingBoxElement.y - boundingBoxElement.height*0.02;
	var width = boundingBoxElement.width * (1.04);
	var height = boundingBoxElement.height * (1.04);

	rect = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(x, y, width, height).attr({stroke: hexColorFrame, "fill-opacity":"0.1", fill: "none", "stroke-width": stampstrokewidth});
	roomLayer.add(rect);
		
	y1 = y1_base;
	
	for	(i = 0; i < headerStringArr.length; i++) {

		fontheight = fontheightHeader; // rpHeight[cvjs_active_floorplan_div_nr]*headerScale;  // fontheight is already been calculated
	
		line = cvjs_rPaper[cvjs_active_floorplan_div_nr].line(x, y1+(fontheight*0.15), x+width, y1+(fontheight*0.15)).attr({stroke: hexColorFrame, "fill-opacity":"0.1", fill: "none", "stroke-width": stampstrokewidth});
//		line = cvjs_rPaper[cvjs_active_floorplan_div_nr].line(x, y1+(fontheight*0.15), x+width, y1+(fontheight*0.15)).attr({stroke: "#FF0000", "fill-opacity":"0.1", fill: "none", "stroke-width": 4});
		roomLayer.add(line);
		y1 += fontheight*1.05;	
	}
	
	var y1first = y1 - fontheight*1.05;
		
	for	(i = 0; i < textStringArr.length-1; i++) {

//		fontheight = rpHeight[cvjs_active_floorplan_div_nr]*scaleTextArr[i];
		fontheight = fontheightBase*scaleTextArr[i];

		if (i>0) y1 += fontheight*1.05;

		line = cvjs_rPaper[cvjs_active_floorplan_div_nr].line(x, y1+(fontheight*0.15), x+width, y1+(fontheight*0.15)).attr({stroke: hexColorFrame, "fill-opacity":"0.1", fill: "none", "stroke-width": stampstrokewidth});
//		line = cvjs_rPaper[cvjs_active_floorplan_div_nr].line(x, y1+(fontheight*0.15), x+width, y1+(fontheight*0.15)).attr({stroke: "#FF0000", "fill-opacity":"0.1", fill: "none", "stroke-width": 4});
		roomLayer.add(line);
				
	}
		
//	if( textStringArr.length==1) fontheight = rpHeight[cvjs_active_floorplan_div_nr]*scaleTextArr[0];
	if( textStringArr.length==1) fontheight = fontheightBase*scaleTextArr[0];

	line = cvjs_rPaper[cvjs_active_floorplan_div_nr].line(x+(fontheight*5), y1first+(fontheight*0.15), x+(fontheight*5) , y+height).attr({stroke: hexColorFrame, "fill-opacity":"0.1", fill: "none", "stroke-width": stampstrokewidth});
	roomLayer.add(line);
				
		
	//layers_all.add(roomLayer);	
	cvjs_customLayerContentAdded = true;				
	cvjs_customLayerContent = cvjs_rPaper[cvjs_active_floorplan_div_nr].g();
	cvjs_customLayerContent.add(roomLayer);	
		
	cvjs_addedObjectsToExtents = true;
	cvjs_resetZoomPan();
	
}




/**
 * Saves a stamp layer to a file
 * @param {string} fileName - name and path of file to save to
 * @param {string} floorplan_div - name of Element on which CADViewer is located
 * @param {object} layer - Layer with custom information , roomLayer
 */
function cvjs_saveStamp(fileName, floorplan_div, layer){

	cvjs_saveCustomSVGLayer(fileName, floorplan_div, layer);
}


/**
 * Saves a custom layer as SVG file
 * @param {string} fileName - name and path of file to save to
 * @param {string} floorplan_div - name of Element on which CADViewer is located
 * @param {object} layer - Layer with custom information 
 */
	
function cvjs_saveCustomSVGLayer(fileName, floorplan_div, layer){

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	var bbox = cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox();
		
	var header = '<?xml version="1.0" encoding="utf-8" ?>';
	header +=  ' <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">'; 
	header +=  '<svg contentScriptType="text/ecmascript" xmlns:xlink="http://www.w3.org/1999/xlink" zoomAndPan="magnify" contentStyleType="text/css" preserveAspectRatio="xMidYMid meet"' ;
	header += ' width="'+bbox.width+'" height="'+bbox.height+'" viewbox="'+bbox.x+' '+bbox.y+' '+bbox.width+' '+bbox.height+'"';
	header += ' version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:cvjs="http://www.tailormade.com/" stroke-linecap="butt" stroke-linejoin="round" fill-rule="evenodd" >';
	
	var myStamp = header + layer + "</svg>";		

	var cvjs_phpSaveStampUrlLocation = cvjs_serverHandlersPath + cvjs_serverSaveFileController;

	var js_data = {};
	js_data['file'] = fileName;
	js_data['file_content'] = myStamp;

	jQuery.ajax({
	  url:cvjs_phpSaveStampUrlLocation,
	  type: 'post',
	  data: js_data,
	  success: function(html){
		var status ="Save stamp: "+html;
		//window.alert(status);
	  },
	  error:function(data_e){console.log("Error "+data_e); return;}
	});

}


var cvjs_serverSVGtoPDFConverterController = "convert-svg-to-pdf.php"


/**
 * Saves a floorplan with overlays as PDF file
 * @param {string} fileName - name and path of file to save to
 * @param {string} floorplan_div - name of Element on which CADViewer is located
 */
	
function cvjs_saveFloorplanAsPDF(fileName, floorplan_div){

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

	var bbox = cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox();
		
	var header = '<?xml version="1.0" encoding="utf-8" ?>';
	header +=  ' <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">'; 
	header +=  '<svg contentScriptType="text/ecmascript" xmlns:xlink="http://www.w3.org/1999/xlink" zoomAndPan="magnify" contentStyleType="text/css" preserveAspectRatio="xMidYMid meet"' ;
	header += ' width="'+bbox.width+'" height="'+bbox.height+'" viewbox="'+bbox.x+' '+bbox.y+' '+bbox.width+' '+bbox.height+'"';
	header += ' version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:cvjs="http://www.tailormade.com/" stroke-linecap="butt" stroke-linejoin="round" fill-rule="evenodd" >';
	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	var myFloorPlan = header + cvjs_rPaper[cvjs_active_floorplan_div_nr] + "</svg>";		
	
	var cvjs_phpSaveSVGUrlLocation = cvjs_serverHandlersPath + cvjs_serverSaveFileController;

	var js_data = {};
	
	
	var counter = fileName.lastIndexOf(".");
	
	var svgFile = fileName.substring(0,counter)+".svg";
	
	js_data['file'] = svgFile;
	js_data['file_content'] = myFloorPlan;

	
if (cvjs_debug) console.log("make pdf "+svgFile+"  "+cvjs_phpSaveSVGUrlLocation);	
	
	jQuery.ajax({
	  url:cvjs_phpSaveSVGUrlLocation,
	  type: 'post',
	  data: js_data,
	  success: function(html){
		var status ="Save floorplan: "+html;
		
		if (cvjs_debug) console.log(status);
		
		var finalUrl = cvjs_serverHandlersPath + cvjs_serverSVGtoPDFConverterController;
		var filelist_data = {};

		filelist_data['pdf_file'] = fileName;
		filelist_data['svg_file'] = svgFile;
	
		jQuery.ajax({
		  url:finalUrl,
		  type: 'post',
		  data: filelist_data,
		  success: function(html){
				if (cvjs_debug) console.log("PDF file is now created: "+html);
				
				// we have to load again since the folder structure is done
				
				// cvjs_LoadDrawing(floorplan_div, cvjs_currentFileFromJSTreeFolder);
				
				
				
		  }
		});

		
		//window.alert(status);
	  },
	  error:function(data_e){console.log("Error "+data_e); return;}
	});

}




/**
 * Saves a floorplan with overlays as PDF file, upload to SharePoint folder
 * @param {string} fileName - name and path of file to save to
 * @param {string} floorplan_div - name of Element on which CADViewer is located
 * @param {string} sharepointFolder - name of SharePoint upload folder
 * @param {string} sharepointUserName - name of SharePointUser
 */
	
function cvjs_saveFloorplanAsPDFtoSharePoint(fileName, floorplan_div, sharepointFolder, sharepointUserName){

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

	var bbox = cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox();
		
	var header = '<?xml version="1.0" encoding="utf-8" ?>';
	header +=  ' <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">'; 
	header +=  '<svg contentScriptType="text/ecmascript" xmlns:xlink="http://www.w3.org/1999/xlink" zoomAndPan="magnify" contentStyleType="text/css" preserveAspectRatio="xMidYMid meet"' ;
	header += ' width="'+bbox.width+'" height="'+bbox.height+'" viewbox="'+bbox.x+' '+bbox.y+' '+bbox.width+' '+bbox.height+'"';
	header += ' version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:cvjs="http://www.tailormade.com/" stroke-linecap="butt" stroke-linejoin="round" fill-rule="evenodd" >';
	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	var myFloorPlan = header + cvjs_rPaper[cvjs_active_floorplan_div_nr] + "</svg>";		
	
	var cvjs_phpSaveSVGUrlLocation = cvjs_serverHandlersPath + cvjs_serverSaveFileController;

	var js_data = {};
		
	var counter = fileName.lastIndexOf(".");
	
	var svgFile = fileName.substring(0,counter)+".svg";
	
	js_data['file'] = svgFile;
	js_data['file_content'] = myFloorPlan;

	
	
	// LET US GET THE SAVE MODAL UP
	
	
		jQuery('#cvjs_wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html('<table class=\"waitlooperTable\" width=\"100\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr><td><div id=\"looper_image_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\"></div></td></tr><tr><td><div class=\"cvjs_wait_text_4\" id=\"cvjs_wait_looper_text_id_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\">'+languageTable.languages[cvjs_currentLanguage].WaitModal.Thumbnails+'</div></td></tr></table>');

		cvjs_setLooperPosition();

		jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).fadeIn(100);
	
	
	
	
if (cvjs_debug) console.log("make pdf "+svgFile+"  "+cvjs_phpSaveSVGUrlLocation);	
	
	jQuery.ajax({
	  url:cvjs_phpSaveSVGUrlLocation,
	  type: 'post',
	  data: js_data,
	  success: function(html){
		var status ="Save floorplan: "+html;
		
		console.log(status);
		
		var finalUrl = cvjs_serverHandlersPath + cvjs_serverSVGtoPDFConverterController;
		var filelist_data = {};

		filelist_data['pdf_file'] = fileName;
		filelist_data['svg_file'] = svgFile;
	
		jQuery.ajax({
		  url:finalUrl,
		  type: 'post',
		  data: filelist_data,
		  success: function(html){
				if (cvjs_debug) console.log("PDF created on server: "+html);
				
				// here we have to call the upload php method

							
					var finalUrl = cvjs_serverHandlersPath + "CV-JS_sharepoint_uploadfile.php";
	
					var filelist_data = {};

					filelist_data['localfilename'] = fileName;
					filelist_data['targetUrl'] = sharepointFolder;   //
					filelist_data['user_name'] = sharepointUserName;
				
					jQuery.ajax({
					  url:finalUrl,
					  type: 'post',
					  data: filelist_data,
					  success: function(html){
							if (cvjs_debug) console.log("PDF file is now uploaded to SharePoint server: "+html);
	

							jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();

	
							// We have also updated the path settings
							
							// therefore we must now reload CV-JS
							//window.alert("before reload!");
							location.reload();
															
					  }
					});
					
		  }
		});

		
		//window.alert(status);
	  },
	  error:function(data_e){console.log("Error "+data_e); return;}
	});

}




function getByteLen(normal_val) {
    // Force string type
    normal_val = String(normal_val);

    var byteLen = 0;
    for (var i = 0; i < normal_val.length; i++) {
        var c = normal_val.charCodeAt(i);
        byteLen += c < (1 <<  7) ? 1 :
                   c < (1 << 11) ? 2 :
                   c < (1 << 16) ? 3 :
                   c < (1 << 21) ? 4 :
                   c < (1 << 26) ? 5 :
                   c < (1 << 31) ? 6 : Number.NaN;
    }
    return byteLen;
}











/**
 * Saves a floorplan with overlays as SVG file
 * @param {string} fileName - name and path of file to save to
 * @param {string} floorplan_div - name of Element on which CADViewer is located
 */
	
function cvjs_saveFloorplanAsSVG(fileName, floorplan_div){

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	var bbox = cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox();
		
	var header = '<?xml version="1.0" encoding="utf-8" ?>';
	header +=  ' <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">'; 
	header +=  '<svg contentScriptType="text/ecmascript" xmlns:xlink="http://www.w3.org/1999/xlink" zoomAndPan="magnify" contentStyleType="text/css" preserveAspectRatio="xMidYMid meet"' ;
	header += ' width="'+bbox.width+'" height="'+bbox.height+'" viewbox="'+bbox.x+' '+bbox.y+' '+bbox.width+' '+bbox.height+'"';
	header += ' version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:cvjs="http://www.tailormade.com/" stroke-linecap="butt" stroke-linejoin="round" fill-rule="evenodd" >';
	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	var myFloorPlan = header + cvjs_rPaper[cvjs_active_floorplan_div_nr] + "</svg>";		
	
	var cvjs_phpSaveStampUrlLocation = cvjs_serverHandlersPath + cvjs_serverSaveFileController;

	var js_data = {};
	js_data['file'] = fileName;
	js_data['file_content'] = myFloorPlan;

	jQuery.ajax({
	  url:cvjs_phpSaveStampUrlLocation,
	  type: 'post',
	  data: js_data,
	  success: function(html){
		var status ="Save floorplan: "+html;
				
		//window.alert(status);
	  },
	  error:function(data_e){console.log("Error "+data_e); return;}
	});

}




/**
 * Saves a floorplan with overlays as SVG file
 * @param {string} filePath - location of the files to be merged, server side
 * @param {string} urlPath - url location of the files to be merged
 * @param {string} fileName - name of the pdf document to be merged, _red pdf pages will be merged into a document _red_merged
 * @param {string} floorplan_div - name of Element on which CADViewer is located
 */
	
function cvjs_mergePDFwithRedlines(filePath, urlPath, fileName, floorplan_div){


	var cvjs_phpMergeUrlLocation = cvjs_serverHandlersPath + cvjs_serverMergePHPFileController;

	var js_data = {};
	js_data['filePath'] = filePath;
	js_data['fileName'] = fileName;

	jQuery.ajax({
	  url:cvjs_phpMergeUrlLocation,
	  type: 'post',
	  data: js_data,
	  success: function(html){
		var status ="Merged floorplan: "+html;
				
		//if (cvjs_debug) window.alert(status);
		
				var filelocation= urlPath + "/" + fileName+"_merged.pdf";
				var xfilelocation= urlPath + "/" + fileName+"_merged.pdf";

		
				var is_explorer = (navigator.userAgent.indexOf('MSIE') > -1) || (navigator.userAgent.indexOf('Trident') > -1);

				var printWindow = window.open('', 'CADViewer - Print', 'width='+screen.width*cvjs_print_to_pdf_windowRelativeSize+',height='+ screen.height*cvjs_print_to_pdf_windowRelativeSize);

//window.alert(printWindow);

				var text = "";

				printWindow.document.write('<!DOCTYPE html><html><title>CADViewer - Print</title><head><script src="'+cvjs_defaultJSPath+'/jquery-2.2.3.js" type="text/javascript"></script>');
				text = text + '<!DOCTYPE html><html><title>CADViewer - Print</title><head><script src="'+cvjs_defaultJSPath+'/jquery-2.2.3.js" type="text/javascript"></script>';

///window.alert(printWindow);
				
				printWindow.document.write('<script type="text/javascript">');
				text = text + '<script type="text/javascript">';
				// file=

				//printWindow.document.write("jQuery(window).on('beforeunload', function (){ jQuery.ajax({url:'"+cvjs_phpPath+"/delete-file.php?file="+xfilelocation+"', cache: false, success: function(html){}});  }); jQuery(window).on('unload', function (){ jQuery.ajax({url:'"+cvjs_phpPath+"/delete-file.php?file="+xfilelocation+"', cache: false, success: function(html){}})  }); window.onbeforeunload = function (){ jQuery.ajax({url:'"+cvjs_phpPath+"/delete-file.php?file="+xfilelocation+"', cache: false, success: function(html){}}) }; </script>");
				//text = text + "jQuery(window).on('beforeunload', function (){ jQuery.ajax({url:'"+cvjs_phpPath+"/delete-file.php?file="+xfilelocation+"', cache: false, success: function(html){}});  }); jQuery(window).on('unload', function (){ jQuery.ajax({url:'"+cvjs_phpPath+"/delete-file.php?file="+xfilelocation+"', cache: false, success: function(html){}})  }); window.onbeforeunload = function (){ jQuery.ajax({url:'"+cvjs_phpPath+"/delete-file.php?file="+xfilelocation+"', cache: false, success: function(html){}}) }; </script>";

				printWindow.document.write("jQuery(window).on('beforeunload', function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}});  }); jQuery(window).on('unload', function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}})  }); window.onbeforeunload = function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}}) }; </script>");
				text = text + "jQuery(window).on('beforeunload', function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}});  }); jQuery(window).on('unload', function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}})  }); window.onbeforeunload = function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}}) }; </script>";

				
				printWindow.document.write('</head><body><div id="pdf">');
				text = text + '</head><body><div id="pdf">';

//				printWindow.document.write('<object width="1654" height="2339" type="application/pdf" data="'+filelocation+'" id="pdf_content"><p>Please install a PDF viewer, the CADViewer batch file PDF cannot be displayed.</p></object></div></body></html>');
//				text = text + '<object width="1654" height="2339" type="application/pdf" data="'+filelocation+'" id="pdf_content"><p>Please install a PDF viewer, the CADViewer batch file PDF cannot be displayed.</p></object></div></body></html>';

				printWindow.document.write('<object width="'+screen.width*cvjs_print_to_pdf_windowRelativeSize+'" height="'+screen.width*cvjs_print_to_pdf_windowRelativeSize*2339/1654+'" type="application/pdf" data="'+filelocation+'" id="pdf_content"><p>Please install a PDF viewer, the CADViewer batch file PDF cannot be displayed.</p></object></div></body></html>');
				text = text + '<object width="'+screen.width*cvjs_print_to_pdf_windowRelativeSize+'" height="'+screen.width*cvjs_print_to_pdf_windowRelativeSize*2339/1654+'" type="application/pdf" data="'+filelocation+'" id="pdf_content"><p>Please install a PDF viewer, the CADViewer batch file PDF cannot be displayed.</p></object></div></body></html>';
								
				//console.log(text);

				printWindow.document.close(); //this seems to be the thing doing the trick
				printWindow.focus();
		
	  },
	  error:function(data_e){console.log("Error "+data_e); return;}
	});

}




/**
 * Loads an stamp file into a custom layer
 * @param {string} fileName - name and path of SVG file to load
 * @param {string} floorplan_div - name of Element on which CADViewer is located
 * @param {object} layer - Layer on which to place the file content 
 */

function cvjs_loadStamp(fileName, floorplan_div, layer){


	cvjs_customLayerContentAdded = true;				
	cvjs_customLayerContent = cvjs_rPaper[cvjs_active_floorplan_div_nr].g();
	cvjs_customLayerContent.add(layer);	

	
	cvjs_loadCustomSVGLayer(fileName, floorplan_div, layer);
	
}


/**
 * Loads a SVG file into a custom layer
 * @param {string} fileName - name and path of SVG file to load
 * @param {string} floorplan_div - name of Element on which CADViewer is located
 * @param {object} layer - Layer on which to place the file content 
 */
	
function cvjs_loadCustomSVGLayer(fileName, floorplan_div, layer){

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	var bbox = cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox();
	var SVGLoadFileStamp = "";

	if (cvjs_bitmapFileNameIsServerPath_flag){	
		SVGLoadFileStamp = cvjs_serverHandlersPath + cvjs_serverLoadFileController + "?file=" + fileName;
		}
	else{
		SVGLoadFileStamp = fileName;
	}
	var cvjs_SVGGroup2 = cvjs_rPaper[cvjs_active_floorplan_div_nr].svg(0,0, bbox.width, bbox.height);
	var stampload = Snap.load(SVGLoadFileStamp , function ( myLoadedFragment ) {

				try{
				layer.add(myLoadedFragment);	
				//cvjs_masterBackground[cvjs_active_floorplan_div_nr].after(layer);
				var bbox = cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox();
				// window.alert("after stamp bbox.width"+bbox.width);
							
				cvjs_addedObjectsToExtents = true;
				cvjs_resetZoomPan(floorplan_div);
				} catch(err){
					window.alert(err);
				}
				
			} );
}
	


function cvjs_LoadDrawingAborted(floorplan_div, fileName){

console.log("Return call from LoadDrawing, another drawing is currently being loaded, so we wait 1.0 seconds....");	
	// we wait for 0.5 seconds and then we try again......
setTimeout(function(){cvjs_LoadDrawing(floorplan_div,fileName)},1000);
	
}

function cvjs_hideNavigationMenu(mydiv){
var floorplanMenu = "#floatNavigationMenu_"+mydiv+"_svg";
//	window.alert(gMenu);
	if (jQuery(floorplanMenu).is(":visible")){
		jQuery(floorplanMenu).hide();
	}
}

	
		
/**
 * Checks if a RoomID is present on a given floorplan
 * @param {string} rmid - Id of the Space Object to highlight
 * @param {string} floorplan_div - name of the div on which the CADViewerJS instance is placed
 * @return {boolean} false if rmid not found otherwise true
 */

function cvjs_checkRoomHandleDiv(rmid, floorplan_div){
	
	var svgdiv = floorplan_div+"_svg";
	var returnvalue;
	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(svgdiv);
	var rm = findFixture(rmid);

	if (rm == -1) 
		return false;
	else	
		return true;
	
	return false;
	
}
	
	
	
/**
 * Checks if a block handle is present on the floorplan
 * @param {string} handle - AutoCAD block handle reference
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 * @return {boolean} false if handle not found otherwise true
 */
	
function cvjs_checkBlockHandleDiv(handle, floorplan_div){


	floorplan_div = floorplan_div + "_svg";
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

 //window.alert("first in change");
   
   var returnflag = false;
   
   var oArr = {};
   jQuery(".cvjs_block").each(function() {

   		var id = jQuery(this).attr('id');

// new 2018-01-09
		var searchString = "[id^="+floorplan_div_Array[cvjs_active_floorplan_div_nr]+"]";
		var svgID = jQuery("#"+id).parents(searchString).attr('id');
		floorplan_div_Array[cvjs_active_floorplan_div_nr]
		
		if (svgID == floorplan_div_Array[cvjs_active_floorplan_div_nr])		
		   if (!oArr[id]) oArr[id] = true;
   });


   for (var prop in oArr){
	//console.log("oArr  prop"+prop);
				try{
					var target = "#"+prop;
					var cvjsId = "";
					jQuery(target).each(function() {
					  jQuery.each(this.attributes, function() {
						if(this.specified) {
						  //console.log(this.name, this.value);
						  var cvname = (this.name).toString().toLowerCase();
						  if (cvname == "cvjs:handle")
							cvjsId = this.value;
						  else
							cvjsId = "";
						  if (cvjsId.indexOf(handle)==0 ){
							 returnflag = true;
							return(true);
						  }

						}
					  });
					});

				}
				catch(err){
					console.log(err);
				}
			   // alert(prop);
		}
		
//window.alert("end of loop "+returnflag);		
	if (returnflag) return (true);
	return(false);	
}
	
	

/**
 * Get the content of all StickyNotes
 * @return {string} stickyNoteContent - xml wrapped content: userid, id, name, date, text, page
 */
function cvjs_getStickyNoteInfo(){


// extract all strickynote information to txt file

	var stickyNoteContent="";
	for (var i=0; i<vqStickyNotes.length; i++){

		if (i>0) stickyNoteContent = stickyNoteContent + "\n";
//			stickyNoteContent = stickyNoteContent+"<StickyNoteNode>"+vqStickyNotes[i].data("node")+"</StickyNoteNode>"+"<StickyNoteUserId>"+vqStickyNotes[i].data("userid")+"</StickyNoteUserId>"+"<StickyNoteId>"+vqStickyNotes[i].data("id")+"</StickyNoteId>"+"<StickyNoteName>"+vqStickyNotes[i].data("name")+"</StickyNoteName>"+"<StickyNoteDate>"+vqStickyNotes[i].data("date")+"</StickyNoteDate>"+"<StickyNoteText>"+vqStickyNotes[i].data("text")+"</StickyNoteText>"+"</StickyNoteDate>"+"<StickyNotePage>"+vqStickyNotes[i].data("currentPage")+"</StickyNotePage>";
			stickyNoteContent = stickyNoteContent+"<StickyNote><UserId>"+vqStickyNotes[i].data("userid")+"</UserId>"+"<Id>"+vqStickyNotes[i].data("id")+"</Id>"+"<Name>"+vqStickyNotes[i].data("name")+"</Name>"+"<Date>"+vqStickyNotes[i].data("date")+"</Date>"+"<Text>"+vqStickyNotes[i].data("text")+"</Text>"+"<Page>"+vqStickyNotes[i].data("currentPage")+"</Page></StickyNote>";
		}

	return stickyNoteContent;

}



/**
 * Saves all stickynote content as - xml wrapped content: userid, id, name, date, text, page
 * @param {string} fileName - name and path of file to save to
 * @param {string} floorplan_div - name of Element on which CADViewer is located
 */

function cvjs_saveStickyNoteInfo(fileName, floorplan_div){

// extract all strickynote information to txt file
	var stickyNoteContent="";
	for (var i=0; i<vqStickyNotes.length; i++){

		if (i>0) stickyNoteContent = stickyNoteContent + "\n";
//		stickyNoteContent = stickyNoteContent + vqStickyNotes[i].data("id")+","+vqStickyNotes[i].data("name")+","+vqStickyNotes[i].data("userid")+","+vqStickyNotes[i].data("date")+","+vqStickyNotes[i].data("text");
//		stickyNoteContent = stickyNoteContent+"<StickyNoteNode>"+vqStickyNotes[i].data("node")+"</StickyNoteNode>"+"<StickyNoteUserId>"+vqStickyNotes[i].data("userid")+"</StickyNoteUserId>"+"<StickyNoteId>"+vqStickyNotes[i].data("id")+"</StickyNoteId>"+"<StickyNoteName>"+vqStickyNotes[i].data("name")+"</StickyNoteName>"+"<StickyNoteDate>"+vqStickyNotes[i].data("date")+"</StickyNoteDate>"+"<StickyNoteText>"+vqStickyNotes[i].data("text")+"</StickyNoteText>"+"</StickyNoteDate>"+"<StickyNotePage>"+vqStickyNotes[i].data("currentPage")+"</StickyNotePage>";
//		stickyNoteContent = stickyNoteContent+"<StickyNoteUserId>"+vqStickyNotes[i].data("userid")+"</StickyNoteUserId>"+"<StickyNoteId>"+vqStickyNotes[i].data("id")+"</StickyNoteId>"+"<StickyNoteName>"+vqStickyNotes[i].data("name")+"</StickyNoteName>"+"<StickyNoteDate>"+vqStickyNotes[i].data("date")+"</StickyNoteDate>"+"<StickyNoteText>"+vqStickyNotes[i].data("text")+"</StickyNoteText>"+"</StickyNoteDate>"+"<StickyNotePage>"+vqStickyNotes[i].data("currentPage")+"</StickyNotePage>";
		stickyNoteContent = stickyNoteContent+"<StickyNote><UserId>"+vqStickyNotes[i].data("userid")+"</UserId>"+"<Id>"+vqStickyNotes[i].data("id")+"</Id>"+"<Name>"+vqStickyNotes[i].data("name")+"</Name>"+"<Date>"+vqStickyNotes[i].data("date")+"</Date>"+"<Text>"+vqStickyNotes[i].data("text")+"</Text>"+"<Page>"+vqStickyNotes[i].data("currentPage")+"</Page></StickyNote>";

	}

//window.alert()	
	
	var cvjs_phpSaveUrlLocation = cvjs_serverHandlersPath + cvjs_serverSaveFileController;

	var js_data = {};
	js_data['file'] = fileName;
	js_data['file_content'] = stickyNoteContent;

	jQuery.ajax({
	  url:cvjs_phpSaveUrlLocation,
	  type: 'post',
	  data: js_data,
	  success: function(html){
		var status ="Save stickynote: "+html;
				
		//window.alert(status);
	  },
	  error:function(data_e){console.log("Error "+data_e); return;}
	});
	
	
	
	
}

 


 function cvjs_publishPDF(floorplan_div){
	 

	cvjs_setPublishPDF(floorplan_div); 
	 
	 
	 
 }
 
 
 /**
 * Merge redline content into original DWG for re-distribution
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */
 
 function cvjs_mergeDXFDWG(floorplan_div){


	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

	
//	window.alert(cvjs_mergeDXFDWG_downloadMode);
	
	// 3.3.04b
	if (cvjs_mergeDXFDWG_downloadMode)
		cvjs_saveScreenAsMergedDXF(floorplan_div, 4);   // 3.3.04b we add new save mode
	else
		cvjs_setMergeDXF(floorplan_div); 
	 
 }
 
 
 
  
 function cvjs_mergeDXFViaButton(floorplan_div){
	 	 
	// turn off make entire document option if not PDF 	 
	 
	if (radioButton_mergeAsDXF==1){
			
			
		// merge Redline with DWG
		// 3.0.14a				
		var pageOrientation = "landscape";
		var pageSize = "A4";
		var pageResolution = '300';
		// CADViewer bitmap to tcpdf
//				cvjs_saveScreenAsPDF(pageOrientation, pageSize, pageResolution);

//		cvjs_saveScreenAsMergedDXF(floorplan_div);
		cvjs_saveScreenAsMergedDXF(floorplan_div, 1);
		

//		cvjs_publishPDF_modal_hide(floorplan_div);
		cvjs_mergeDXF_modal_hide(floorplan_div);
														
	}


	if (radioButton_mergeAsDXF==2){
		
		if (!cvjs_mailServerSetup){
			window.alert("Please set up e-mail server.");
		}
		else{
						
				cvjs_to_mail = jQuery("#cvjs_publishPDFemailrecipient_"+floorplan_div).val();
				cvjs_mail_title = jQuery("#cvjs_publishPDFemailtitle_"+floorplan_div).val();
				cvjs_mail_message =jQuery("#pdfmail_text").val();

				// SVG export and PDFBox /Batik process
//				cvjs_emailScreenAsPDFwithRedlines(floorplan_div);
				

				//  change to intern tcpdf
				// 3.0.14a				
				var pageOrientation = "landscape";
				var pageSize = "A4";
				var pageResolution = '300';
				// CADViewer bitmap to tcpdf
//				cvjs_saveScreenAsPDF_email(pageOrientation, pageSize, pageResolution, floorplan_div);

//				cvjs_saveScreenAsMergedDXF_email(floorplan_div);
				cvjs_saveScreenAsMergedDXF(floorplan_div, 2);
		
				
//				cvjs_publishPDF_modal_hide(floorplan_div);			
				cvjs_mergeDXF_modal_hide(floorplan_div);			
		}
		
	}
	
	if (radioButton_mergeAsDXF==3){

	
			var dateFlag = true;
					
				// SVG export and PDFBox /Batik process
//			saveDrawingWithAnnotationsAsPDF(cvjs_currentFileFromJSTreeFolder, cvjs_sharepoint_UserName, dateFlag)
				

				//  change to intern tcpdf
				// 3.0.14b				
				var pageOrientation = "landscape";
				var pageSize = "A4";
				var pageResolution = '300';
				// CADViewer bitmap to tcpdf
//				cvjs_saveScreenAsPDF_uploadServer(pageOrientation, pageSize, pageResolution, floorplan_div);


				//cvjs_saveScreenAsMergedDXF_uploadServer(floorplan_div);
				cvjs_saveScreenAsMergedDXF(floorplan_div, 3);

	
			
			cvjs_mergeDXF_modal_hide(floorplan_div);
//			cvjs_publishPDF_modal_hide(floorplan_div);

		
		// 3.2.01d  // we are calling it anyway
		if (cvjs_fileLoadingFromSharePointServer){			

		}
		else{
			
			
			
			
		//	window.alert("Server upload only implemented as part of Sharepoint server integration");			
		
		
		
		
		
		}
	
	}	
	
	
 }
 


 
 function cvjs_saveScreenAsMergedDXF(floorplan_div, mode){
	 
	 
	jQuery('#cvjs_wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html('<table class=\"waitlooperTable\" width=\"100\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr><td><div id=\"looper_image_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\"></div></td></tr><tr><td><div class=\"cvjs_wait_text_4\" id=\"cvjs_wait_looper_text_id_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\">'+languageTable.languages[cvjs_currentLanguage].WaitModal.MergeDWG+'</div></td></tr></table>');
	cvjs_setLooperPosition();	
	//window.alert("after waitlooper");
	// 4.1.02b
	jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).fadeIn(10);
	 
	 
	// save redline as XML
	//window.alert("save Redline as XML");
	
	var random = Math.random().toString().substring(2,5);
	var merge_fileName = 'merge_'+random+'.xml';

	cvjs_setStickyNoteSaveRedlineUrl(cvjs_ServerLocation+"/converters/files/merged/"+merge_fileName);	

	var dataUrl = "";
	dataUrl=cvjs_getStickyNotesRedlineXML(false);  //4.1.02a

	console.log(dataUrl);	
		
	var cvjs_phpSaveRedlineUrlLocation = cvjs_serverHandlersPath + cvjs_serverSaveFileControllerRedlines;
// 2016-10-25
	if (cvjs_StickyNoteSaveRedlineUrl.indexOf("\\")>-1){
		// do nothing
	}
	else{
		cvjs_StickyNoteSaveRedlineUrl = encodeURIComponent(cvjs_StickyNoteSaveRedlineUrl)
	}

	var js_data = {};
	js_data['file'] = cvjs_StickyNoteSaveRedlineUrl;
	js_data['file_content'] = dataUrl;

//console.log(cvjs_phpSaveRedlineUrlLocation+"  "+cvjs_StickyNoteSaveRedlineUrl);

	jQuery.ajax({
	  url:cvjs_phpSaveRedlineUrlLocation,
	  type: 'post',
	  data: js_data,
	  success: function(html){

			var serverPath = "";
			var myUploadFile = "";
			var myDownloadFile = "";
	
// move this up		3.2.01d	
			var currentdate = new Date();
			var datetime = "y"+currentdate.getFullYear() +"_m"+(currentdate.getMonth()+1)+"_d"+(currentdate.getDate())+"_h"+currentdate.getHours()+"_m"+currentdate.getMinutes()+"_s"+currentdate.getSeconds();

			var month = "jan";
			var hours = currentdate.getHours(); 
			
			if (hours<10) hours = "0"+hours;
			switch(currentdate.getMonth()) {
				case 0:
					month = "Jan";
					break;
				case 1:
					month = "Feb";
					break;
				case 2:
					month = "Mar";
					break;
				case 3:
					month = "Apr";
					break;
				case 4:
					month = "May";
					break;
				case 5:
					month = "Jun";
					break;
				case 6:
					month = "Jul";
					break;
				case 7:
					month = "Aug";
					break;
				case 8:
					month = "Sep";
					break;
				case 9:
					month = "Oct";
					break;
				case 10:
					month = "Nov";
					break;
				case 11:
					month = "Dec";
					break;
				default:
					month = "Jan";
			}							
			var datetime = month+"_"+(currentdate.getDate())+"_H"+hours+"_"+currentdate.getMinutes();

		
// determine paths,based on either sharepoint server, folder tree, or basic scenario
	 
	 	 
			if (cvjs_fileLoadingFromSharePointServer){
				if (cvjs_currentFileFromJSTreeFolder.indexOf("/")==-1){	
					serverPath = "";
					myUploadFile = cvjs_currentFileFromJSTreeFolder;
				}
				else{
					serverPath = cvjs_currentFileFromJSTreeFolder.substring(0,cvjs_currentFileFromJSTreeFolder.lastIndexOf("/"));
					myUploadFile = cvjs_currentFileFromJSTreeFolder.substring(cvjs_currentFileFromJSTreeFolder.lastIndexOf("/")+1);
				}
				
								
					// 3.2.01d			
				if (!cvjs_fileLoadingFromSharePointServer){
					myUploadFile = cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].substring(cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].lastIndexOf("/")+1);					
				}
			
				
				console.log(myUploadFile+" "+serverPath);
				
				myDownloadFile = myUploadFile;


				var extension = myUploadFile.substring(myUploadFile.lastIndexOf("."));
				myUploadFile = myUploadFile.substring(0,myUploadFile.lastIndexOf("."));						

				myUploadFile = myUploadFile + "_red_"+datetime+extension;
			
				console.log("download file: "+myDownloadFile +" upload file: "+ myUploadFile);				

			}
			else{	
				// 3.2.01d   - here we have to find all the paths in the other cases.
				// here we copy the original file over to the merge folder and then we do to overlay from there....
				
				///XXXXX  MERGE CASE FOR ALL NON SHAREPOINT CASES
				
					myDownloadFile = cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].substring(cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].lastIndexOf("/")+1);					
//					var localdestination = cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].substring(0,cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].lastIndexOf("/")+1);   //

					// copy file over!
//				window.alert(myUploadFile+"  "+localdestination);					
					// not done here
					myUploadFile = myDownloadFile.substring(0,myDownloadFile.lastIndexOf(".")) + "_red_"+datetime+myDownloadFile.substring(myDownloadFile.lastIndexOf(".")) ;
	
	
	
	
		// NEW NEW NEW
					// 3.3.05a  - if mode == 4, we do not copy drawing but simply use the source folder 	
// Note this works with absolute paths Servlet, relative paths are OK on Php
					if (mode == 4){
				
						var cvjs_phpMergeLocation = cvjs_serverHandlersPath + cvjs_serverMergeDWGController;
						var js_data = {};
						js_data['base_file'] = cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ];
						
						if(cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ]==""){		
							js_data['base_file'] = currentLoadedDrawingFullName; 
						}			
												
						js_data['merge_file'] = cvjs_ServerLocation+"/converters/files/merged/"+merge_fileName;
						js_data['out_file'] = cvjs_ServerLocation+"/converters/files/merged/"+myUploadFile;

						
						
						if (cvjs_debug) console.log(js_data['base_file']+"  "+js_data['merge_file']+"  "+js_data['out_file'] );
						

						// 4.1.02b 
						js_data['zip_output'] = "false";
						js_data['QR_code'] = "false";


						
						
						jQuery.ajax({
						  url:cvjs_phpMergeLocation,
						  type: 'post',
						  data: js_data,
						  success: function(html){

							if (cvjs_debug) console.log("callback from merge:"+html);
							if (cvjs_debug) console.log("mode 4");
	

							// 4.1.02b  - standard case 
							var downloadURL = cvjs_ServerUrl+"/converters/files/merged/"+myUploadFile;
					
							var downloadFileName = myUploadFile;
							if (downloadFileName.indexOf('/')>-1) 
								downloadFileName = downloadFileName.substring(downloadFileName.lastIndexOf('/')+1);

							// 4.1.02b  - custom name
							if (html.indexOf("<customoutfilename>")>-1){								
								var new_name = html.substring(html.indexOf("<customoutfilename>")+19);  // 4.1.01j
								new_name = new_name.substring(0,new_name.indexOf("</customoutfilename>"));												
								// 4.1.02a   4.1.02b												
								// we have two cases, call back is http / https , or just filename
								if (new_name.indexOf("http")==0){   // newname = url
									downloadURL = new_name;
									downloadFileName = new_name.substring(new_name.lastIndexOf("/")+1);
								}
								else{  // standard case   new_name = filename
									downloadFileName = new_name;
									downloadURL = cvjs_ServerUrl+"/converters/files/merged/"+downloadFileName;
								}
								
								if (cvjs_debug) console.log("XXXX"+new_name+"XXX");		
							}

/***  4.1.02b	 - remove code
								if (html.indexOf("<customoutfilename>")==0){
								
									var new_name = html.substring(19);
									new_name = new_name.substring(0,new_name.indexOf("</customoutfilename>"));
									myUploadFile = new_name;		
									console.log("XXXX"+new_name+"XXX");		
								}
					
								var downloadURL = cvjs_ServerUrl+"/converters/files/merged/"+myUploadFile;
						
								var downloadFileName = myUploadFile;
								if (downloadFileName.indexOf('/')>-1) 
									downloadFileName = downloadFileName.substring(downloadFileName.lastIndexOf('/')+1);
**/							


								jQuery("#topDownloadButtonPane"+"_"+floorplan_div).show();	
								cvjs_topDownloadButtonPane = true;	
								
							  
	//											  window.alert("downloadFileName "+downloadFileName);
											  
								jQuery("#downloadrow").show();
								jQuery("#downloadbutton").html('<a href="'+downloadURL+'" download="'+downloadFileName+'"><button class="btn" style="width:70%"><i class="fa fa-download"></i> Download: <i><b>'+downloadFileName+'</b></i> - with Redlines</button></a>');   // </div>
								
								jQuery("#downloadbutton").click(function() {
									jQuery("#topDownloadButtonPane"+"_"+floorplan_div).hide();	
									cvjs_topDownloadButtonPane = false;		
									cvjs_resizeWindow_position("floorPlan" );
									cvjs_resizeWindow_position("floorPlan" );
									cvjs_mergeOnOff = false;						
								});

								cvjs_resizeWindow_position("floorPlan" );
								cvjs_resizeWindow_position("floorPlan" );


// not hide wait!								
								jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
								
								},
								 error:function(data_e){console.log("Error "+data_e); return;}
								});		
								// we return mode=4
								return;
							}
// 3.3.05a mode 4  - return 
		
	

	
	
					var finalUrl = cvjs_serverHandlersPath + cvjs_serverCopyFileController;
					var filelist_data = {};

					filelist_data['localfilename'] = cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ];
					filelist_data['localdestination'] = cvjs_ServerLocation+"/converters/files/merged/"+myDownloadFile;
														
	console.log("fileName "+filelist_data['localfilename']+"  "+filelist_data['localdestination']);
		
				
					// copy source dwg over to /filers/merged/ folder
					jQuery.ajax({
					  url:finalUrl,
					  type: 'post',
					  data: filelist_data,
					  success: function(html){
							if (cvjs_debug) console.log("Drawing file is now copied: "+html);
													
								var cvjs_phpMergeLocation = cvjs_serverHandlersPath + cvjs_serverMergeDWGController;
								var js_data = {};
								js_data['base_file'] = cvjs_ServerLocation+"/converters/files/merged/"+myDownloadFile;
								js_data['merge_file'] = cvjs_ServerLocation+"/converters/files/merged/"+merge_fileName;
								js_data['out_file'] = cvjs_ServerLocation+"/converters/files/merged/"+myUploadFile;

								jQuery.ajax({
								  url:cvjs_phpMergeLocation,
								  type: 'post',
								  data: js_data,
								  success: function(html){

									console.log("callback from merge servlet:"+html);
																
									if (mode == 1){
										
										// download document
										//window.alert("out_file created  in merge folder.   download document");
											
										var cvjs_phpLoadLocation = cvjs_serverHandlersPath + cvjs_serverLoadFileController;
										var js_data = {};
										js_data['file'] = cvjs_ServerLocation+"/converters/files/merged/"+myUploadFile;
								//console.log(cvjs_phpSaveRedlineUrlLocation+"  "+cvjs_StickyNoteSaveRedlineUrl);
										jQuery.ajax({
										  url:cvjs_phpLoadLocation,
										  type: 'post',
										  data: js_data,
										  success: function(html){

												download_link(myUploadFile, html);

												jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
											
										  
												},
										 error:function(data_e){console.log("Error "+data_e); return;}
										});		
									}


									
									//  3.3.04b
									if (mode == 4){	
if (cvjs_debug) console.log("mode 4");

												var downloadURL = cvjs_ServerUrl+"/converters/files/merged/"+myUploadFile;										
												var downloadFileName = myUploadFile;
												if (downloadFileName.indexOf('/')>-1) 
													downloadFileName = downloadFileName.substring(downloadFileName.lastIndexOf('/')+1);

												jQuery("#topDownloadButtonPane"+"_"+floorplan_div).show();	
												cvjs_topDownloadButtonPane = true;	
																							  
//											  window.alert("downloadFileName "+downloadFileName);
											  											  
												jQuery("#downloadrow").show();
												jQuery("#downloadbutton").html('<a href="'+downloadURL+'" download="'+downloadFileName+'"><button class="btn" style="width:70%"><i class="fa fa-download"></i> Download: <i><b>'+downloadFileName+'</b></i> - with Redlines</button></a>');   // </div>
												
												jQuery("#downloadbutton").click(function() {
													jQuery("#topDownloadButtonPane"+"_"+floorplan_div).hide();	
													cvjs_topDownloadButtonPane = false;		
													cvjs_resizeWindow_position("floorPlan" );
													cvjs_resizeWindow_position("floorPlan" );
													cvjs_mergeOnOff = false;						
												});

												cvjs_resizeWindow_position("floorPlan" );
												cvjs_resizeWindow_position("floorPlan" );
																								
												jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
												

									}


									

									if (mode == 2){
										
										// download document
										// window.alert("out_file created  in merge folder.  - email document");

												var filelist_data = {};
												filelist_data['pdf_file'] = cvjs_ServerLocation+"/converters/files/merged/"+myUploadFile;
												filelist_data['pdf_file_name'] = myUploadFile ;  // myfolderFile;									
												filelist_data['from_name'] = cvjs_from_name;
												filelist_data['from_mail'] = cvjs_from_mail;
												filelist_data['cc_mail'] = cvjs_cc_mail;
												filelist_data['replyto'] = cvjs_replyto;
												
												
												// replace , with ;
												cvjs_to_mail = cvjs_to_mail.replace(/,/g, ';');
									

												cvjs_to_mail = jQuery("#cvjs_mergeDXFemailrecipient_"+floorplan_div).val();
												cvjs_mail_title = jQuery("#cvjs_mergeDXFemailtitle_"+floorplan_div).val();
												cvjs_mail_message =jQuery("#mergedxfmail_text").val();


									
												filelist_data['to_mail'] = cvjs_to_mail;
												filelist_data['mail_title'] = cvjs_mail_title;
												filelist_data['mail_message'] = cvjs_mail_message;
												
												
												console.log(filelist_data['pdf_file']+"  "+filelist_data['pdf_file_name']+" "+filelist_data['to_mail']+" "+filelist_data['mail_message']);
												
												var cvjs_phpSendDWGEmail = cvjs_serverHandlersPath + cvjs_serverSendPDFEmailController;
										

								//window.alert(filelist_data['pdf_file']);
								//if (true) return;
										
												jQuery.ajax({
												  url:cvjs_phpSendDWGEmail,
												  type: 'post',
												  data: filelist_data,
												  success: function(html){

												  
														jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
												  
												  
														window.alert("e-mail sent!  "+html);

														
														
														
														}
													});
				
									}
									
									if (mode == 3){
		

										var finalUrl = cvjs_serverHandlersPath + cvjs_serverCopyFileController;
										var filelist_data = {};
					//				3.2.01d

										filelist_data['localfilename'] = cvjs_ServerLocation+"/converters/files/merged/"+myUploadFile;;
										filelist_data['localdestination'] = cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].substring(0,cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].lastIndexOf("/")+1)+myUploadFile;
																										
										jQuery.ajax({
										  url:finalUrl,
										  type: 'post',
										  data: filelist_data,
										  success: function(html){
												if (cvjs_debug) console.log("Merged DWG file is now moved: "+html);

												jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
								
										  }
										});
									
								}
															
							  },
							  error:function(data_e){console.log("Error "+data_e); return;}
							});													
					  }
					});
			
			
				///XXXXX   UP-UP-UP     MERGE CASE FOR ALL NON SHAREPOINT CASES

				//3.2.01d  -> here we actually return!!!!  , we are done in this case
				return;
			}



			//3.2.01d  This is for Sharepoint only!  
				
			// make the file names for the merge document, and make merge document
			console.log("XML redline saved, download original file from sharepoint server   ");
			
			// here we have to download from sharepoint the myDownloadFile

			var cvjs_phpDownloadLocation = cvjs_serverHandlersPath + cvjs_serverDownloadSharepointController;
			var js_data = {};
			js_data['content_location'] = serverPath+"/"+myDownloadFile;
			js_data['local_path'] = cvjs_ServerLocation+"/converters/files/merged/"+myDownloadFile;
			js_data['content_username'] = cvjs_sharepoint_UserName;
			
			jQuery.ajax({
			  url:cvjs_phpDownloadLocation,
			  type: 'post',
			  data: js_data,
			  success: function(html){
				console.log(html);
											
				// we have downloaded the file into the /merged/ folder, now we want to do the overlay 

					console.log("downloaded from Sharepoint!");
	
					var cvjs_phpMergeLocation = cvjs_serverHandlersPath + cvjs_serverMergeDWGController;
					var js_data = {};
					js_data['base_file'] = cvjs_ServerLocation+"/converters/files/merged/"+myDownloadFile;
					js_data['merge_file'] = cvjs_ServerLocation+"/converters/files/merged/"+merge_fileName;
					js_data['out_file'] = cvjs_ServerLocation+"/converters/files/merged/"+myUploadFile;

					jQuery.ajax({
					  url:cvjs_phpMergeLocation,
					  type: 'post',
					  data: js_data,
					  success: function(html){

						console.log(html);
													
						if (mode == 1){
							
							// download document
							//window.alert("out_file created  in merge folder.   download document");
								
							var cvjs_phpLoadLocation = cvjs_serverHandlersPath + cvjs_serverLoadFileController;
							var js_data = {};
							js_data['file'] = cvjs_ServerLocation+"/converters/files/merged/"+myUploadFile;
					//console.log(cvjs_phpSaveRedlineUrlLocation+"  "+cvjs_StickyNoteSaveRedlineUrl);
							jQuery.ajax({
							  url:cvjs_phpLoadLocation,
							  type: 'post',
							  data: js_data,
							  success: function(html){

									download_link(myUploadFile, html);

									jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
									
							  
									},
							 error:function(data_e){console.log("Error "+data_e); return;}
							});		
						}
						

						if (mode == 2){
							
							// download document
							// window.alert("out_file created  in merge folder.  - email document");

									var filelist_data = {};
									filelist_data['pdf_file'] = cvjs_ServerLocation+"/converters/files/merged/"+myUploadFile;
									filelist_data['pdf_file_name'] = myUploadFile ;  // myfolderFile;									
									filelist_data['from_name'] = cvjs_from_name;
									filelist_data['from_mail'] = cvjs_from_mail;
									filelist_data['cc_mail'] = cvjs_cc_mail;
									filelist_data['replyto'] = cvjs_replyto;
									
									
									// replace , with ;
									cvjs_to_mail = cvjs_to_mail.replace(/,/g, ';');
						

									cvjs_to_mail = jQuery("#cvjs_mergeDXFemailrecipient_"+floorplan_div).val();
									cvjs_mail_title = jQuery("#cvjs_mergeDXFemailtitle_"+floorplan_div).val();
									cvjs_mail_message =jQuery("#mergedxfmail_text").val();


						
									filelist_data['to_mail'] = cvjs_to_mail;
									filelist_data['mail_title'] = cvjs_mail_title;
									filelist_data['mail_message'] = cvjs_mail_message;
									
									
									console.log(filelist_data['pdf_file']+"  "+filelist_data['pdf_file_name']+" "+filelist_data['to_mail']+" "+filelist_data['mail_message']);
									
									var cvjs_phpSendDWGEmail = cvjs_serverHandlersPath + cvjs_serverSendPDFEmailController;
							

					//window.alert(filelist_data['pdf_file']);
					//if (true) return;
							
									jQuery.ajax({
									  url:cvjs_phpSendDWGEmail,
									  type: 'post',
									  data: filelist_data,
									  success: function(html){

									  
											jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
									  
									  
											window.alert("e-mail sent!  "+html);

											
											
											
											}
										});
	
						}
						
						if (mode == 3){
							
							// download document
							//window.alert("out_file created  in merge folder.  - upload document");


							var finalUrl = cvjs_serverHandlersPath + "CV-JS_sharepoint_uploadfile2.php";
							var filelist_data = {};

							filelist_data['localfilename'] = cvjs_ServerLocation+"/converters/files/merged/"+myUploadFile;
							filelist_data['targetUrl'] = serverPath;   //
							filelist_data['user_name'] = cvjs_sharepoint_UserName;
							filelist_data['file_name'] = myUploadFile;
								
			console.log ("  "+serverPath+"  "+cvjs_sharepoint_UserName+"  "+myUploadFile);

							jQuery.ajax({
							  url:finalUrl,
							  type: 'post',
							  data: filelist_data,
							  success: function(html){
									if (cvjs_debug) console.log("PDF file is now uploaded to SharePoint server: "+html);


									jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();


									// We have also updated the path settings
									
									// therefore we must now reload CV-JS
									//window.alert("before reload!");
									
									
									location.reload();
																	
							  }
							});
			
			




							
						}
						
						
					
					  },
					  error:function(data_e){console.log("Error "+data_e); return;}

					});


			
											
				
			
			  },
			  error:function(data_e){console.log("Error "+data_e); return;}

			});
					 
	  },
	  error:function(data_e){console.log("Error "+data_e); return;}

	});





	 
	 
 }
 

 function  cvjs_saveScreenAsMergedDXF_email(floorplan_div){
	 
	 
	// save redline as XML
	window.alert("save Redline as XML");

	// make the file names for the merge document, and make merge document
	window.alert("make Merge document");

	
	// download document
	window.alert("email document");
	 
	 
 }
 

 function  cvjs_saveScreenAsMergedDXF_uploadServer(floorplan_div){
	 
	 
	// save redline as XML
	window.alert("save Redline as XML");

	// make the file names for the merge document, and make merge document
	window.alert("make Merge document");

	
	// download document
	window.alert("upload to sharepoint server");
	 
	 
 }
 
 
 
 
 				

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 function cvjs_publishPDFViaButton(floorplan_div){
	 
	 
	// turn off make entire document option if not PDF 
	 
	 
	if (radioButton_publishAsPDF==1){
			
			
//window.alert("creation mode "+cvjs_makePDFEntireDoc);
			
		if (!cvjs_makePDFEntireDoc){  // standard single page creation

		
				// SVG export and PDFBox /Batik process
				//cvjs_printScreenAsPDFwithRedlines(floorplan_div);
				
				// 3.0.14a				
				var pageOrientation = "landscape";
				var pageSize = "A4";
				var pageResolution = '300';
				// CADViewer bitmap to tcpdf
				cvjs_saveScreenAsPDF(pageOrientation, pageSize, pageResolution);

				
				cvjs_publishPDF_modal_hide(floorplan_div);
		}
		else{   // if PDF we create entire document		
				// 3.0.13e
			if (cvjs_preConversionFileExtension[cvjs_active_floorplan_div_nr].indexOf("pdf")==0 && cvjs_customPdfFolderFlag){    // is this correct?   dont think so
		
				var fileName = cvjs_last_FileName_PDF;

					
				var pathname = ServerLocation + "/converters/files/pdf/custom_"+cvjs_customPdfFolderName;
				var urlname = ServerUrl + "/converters/files/pdf/custom_"+cvjs_customPdfFolderName;

				
				// find the filename-red_s1
				var fname = fileName; 
				var fnameExt =fileName.substring(fileName.lastIndexOf(".")+1);
				// extract the file itself
				fname = fname.substring(fname.lastIndexOf("/")+1,fname.lastIndexOf("."));		
				fname = fname +"_red";

				//window.alert("cvjs_publish "+pathname+" "+urlname+"  "+fname);

				cvjs_mergePDFwithRedlines(pathname, urlname, fname,  "floorPlan1");
		
			}
			else{  // we publish current page
			
				// message + fadeOut
				
				// !!
			
				// SVG export and PDFBox /Batik process
				//cvjs_printScreenAsPDFwithRedlines(floorplan_div);
				
				// 3.0.14a				
				var pageOrientation = "landscape";
				var pageSize = "A4";
				var pageResolution = '300';
				// CADViewer bitmap to tcpdf
				cvjs_saveScreenAsPDF(pageOrientation, pageSize, pageResolution);


				cvjs_publishPDF_modal_hide(floorplan_div);
				
								
			}
			
		}
			
			
	}


	if (radioButton_publishAsPDF==2){
		
		if (!cvjs_mailServerSetup){
			window.alert("Please set up e-mail server.");
		}
		else{
						
				cvjs_to_mail = jQuery("#cvjs_publishPDFemailrecipient_"+floorplan_div).val();
				cvjs_mail_title = jQuery("#cvjs_publishPDFemailtitle_"+floorplan_div).val();
				cvjs_mail_message =jQuery("#pdfmail_text").val();

				// SVG export and PDFBox /Batik process
//				cvjs_emailScreenAsPDFwithRedlines(floorplan_div);
				

				//  change to intern tcpdf
				// 3.0.14a				
				var pageOrientation = "landscape";
				var pageSize = "A4";
				var pageResolution = '300';
				// CADViewer bitmap to tcpdf
				cvjs_saveScreenAsPDF_email(pageOrientation, pageSize, pageResolution, floorplan_div);


				
				
				cvjs_publishPDF_modal_hide(floorplan_div);			
		}
		
	}
	
	if (radioButton_publishAsPDF==3){

		if (cvjs_fileLoadingFromSharePointServer){			
			var dateFlag = true;
			
			
				// SVG export and PDFBox /Batik process
//			saveDrawingWithAnnotationsAsPDF(cvjs_currentFileFromJSTreeFolder, cvjs_sharepoint_UserName, dateFlag)
				

				//  change to intern TCPDF
				// 3.0.14b				
				var pageOrientation = "landscape";
				var pageSize = "A4";
				var pageResolution = '300';
				// CADViewer bitmap to tcpdf
				cvjs_saveScreenAsPDF_uploadServer(pageOrientation, pageSize, pageResolution, floorplan_div);
			
			
			
			
				cvjs_publishPDF_modal_hide(floorplan_div);
		}
		else{
			
				// Added 3.1.21c
			
			
				// SVG export and PDFBox /Batik process
//			saveDrawingWithAnnotationsAsPDF(cvjs_currentFileFromJSTreeFolder, cvjs_sharepoint_UserName, dateFlag)
				

				//  change to intern TCPDF
				// 3.0.14b				
				var pageOrientation = "landscape";
				var pageSize = "A4";
				var pageResolution = '300';
				// CADViewer bitmap to tcpdf
				cvjs_saveScreenAsPDF_uploadServer(pageOrientation, pageSize, pageResolution, floorplan_div);
			
			
				cvjs_publishPDF_modal_hide(floorplan_div);
			
				// 3.1.21c we supress this message and run through the process
			
				//window.alert("Server upload only implemented as part of Sharepoint server integration");			
		}
	
	}	
	
	
 }
 

/**
 * Captures the screen image and creates a single page PDF, which is uploaded to Sharepoint server
 * @param {string} pageOrientation - Orientation of drawings: landscape/portrait
 * @param {string} pageSize - Papersize of drawing
 * @param {string} pageResolution - Page resolution in dpi, default is 300
 * @param {string} floorplan_div - div on which CADViewer is places
 */
function cvjs_saveScreenAsPDF_uploadServer(pageOrientation, pageSize, pageResolution, floorplan_div){

	cvjs_setPrintPaperSize(pageSize);
	cvjs_setPrintOrientation(pageOrientation);
	cvjs_setPrintResolutionDpi(pageResolution);

		
	cvjs_setPrintPaperSize(pageSize);
	cvjs_setPrintOrientation(pageOrientation);
	cvjs_setPrintResolutionDpi(pageResolution);

	var random = Math.random().toString().substring(2,5);
	var image_fileName = 'screendump_'+random+'.png';

	cvjs_singleDrawingFile = 'screendump_'+random;
	cvjs_singlePageOrientation = pageOrientation;
	cvjs_singlePageSize = pageSize;
	cvjs_singlePageResolution= pageResolution;

	// set the print mode to single page pdf
	cvjs_serverSavePrintModeController = 5;

	if (cvjs_serverSavePrintModeController == 5){

		jQuery('#cvjs_wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html('<table class=\"waitlooperTable\" width=\"100\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr><td><div id=\"looper_image_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\"></div></td></tr><tr><td><div class=\"cvjs_wait_text_4\" id=\"cvjs_wait_looper_text_id_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\">'+languageTable.languages[cvjs_currentLanguage].WaitModal.Printing+'</div></td></tr></table>');


		cvjs_setLooperPosition();
		

	//window.alert("after waitlooper");
		jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).fadeIn(1500);

	}


	var serverPath;

	// 6.1.21
	serverPath = cvjs_ServerLocation  + "/converters/files/";


	//window.alert(serverPath+"  "+image_fileName)
	cvjs_saveScreenAsImage(serverPath, image_fileName);

}

 
 
 
 
 
 
 
/**
 * Captures the screen image and creates a single page PDF, which is attached to email
 * @param {string} pageOrientation - Orientation of drawings: landscape/portrait
 * @param {string} pageSize - Papersize of drawing
 * @param {string} pageResolution - Page resolution in dpi, default is 300
 * @param {string} floorplan_div - div on which CADViewer is places
 */
function cvjs_saveScreenAsPDF_email(pageOrientation, pageSize, pageResolution, floorplan_div){

	cvjs_setPrintPaperSize(pageSize);
	cvjs_setPrintOrientation(pageOrientation);
	cvjs_setPrintResolutionDpi(pageResolution);

	var random = Math.random().toString().substring(2,5);
	var image_fileName = 'screendump_'+random+'.png';

	cvjs_singleDrawingFile = 'screendump_'+random;
	cvjs_singlePageOrientation = pageOrientation;
	cvjs_singlePageSize = pageSize;
	cvjs_singlePageResolution= pageResolution;

	// set the print mode to single page pdf
	cvjs_serverSavePrintModeController = 4;

	if (cvjs_serverSavePrintModeController == 4){

		jQuery('#cvjs_wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html('<table class=\"waitlooperTable\" width=\"100\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr><td><div id=\"looper_image_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\"></div></td></tr><tr><td><div class=\"cvjs_wait_text_4\" id=\"cvjs_wait_looper_text_id_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\">'+languageTable.languages[cvjs_currentLanguage].WaitModal.Printing+'</div></td></tr></table>');


		cvjs_setLooperPosition();
		

	//window.alert("after waitlooper");
		jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).fadeIn(1500);

	}


	var serverPath;


		// 6.1.21
		serverPath = cvjs_ServerLocation  + "/converters/files/";
	
	
	
	//window.alert(serverPath+"  "+image_fileName)
	cvjs_saveScreenAsImage(serverPath, image_fileName);

}


function cvjs_printSavedBitmapToPDF_uploadServer(){




	var serverPath;

		// 6.1.21
		cvjs_phpImagesUrlController = cvjs_serverHandlersPath + cvjs_screenToPDF_Controller
		serverPath = cvjs_ServerLocation  + "/converters/files/" ;




	cvjs_serverSave_php_controllerArray = {};
	cvjs_serverSave_php_controllerArray['numberOfFiles'] = 1;
	
		
	cvjs_serverSave_php_controllerArray['serverPath'] = serverPath;


	cvjs_serverSave_php_controllerArray['fileName_0'] = cvjs_singleDrawingFile ;
	cvjs_serverSave_php_controllerArray['rotation_0'] = cvjs_singlePageOrientation;
	cvjs_serverSave_php_controllerArray['page_format_0'] = cvjs_singlePageSize;
	cvjs_serverSave_php_controllerArray['page_resolution_0'] = cvjs_singlePageResolution;

	cvjs_serverSave_php_controllerArray['org_fileName_0'] = cvjs_FileNameNoExtension ;

//window.alert("org_fileName_0 "+cvjs_serverSave_php_controllerArray['org_fileName_0']);


	jQuery('#cvjs_wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html('<table class=\"waitlooperTable\" width=\"100\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr><td><div id=\"looper_image_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\"></div></td></tr><tr><td><div class=\"cvjs_wait_text_5\" id=\"cvjs_wait_looper_text_id_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\">'+languageTable.languages[cvjs_currentLanguage].WaitModal.BatchPDF+'</div></td></tr></table>');

	cvjs_setLooperPosition();
	
	jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).fadeIn(1000);

	jQuery.ajax({
	  url:cvjs_phpImagesUrlController,
	  type: 'post',
	  data: cvjs_serverSave_php_controllerArray,
	  success: function(html){
			//window.alert(html+"  we have now created the single page pdf");
			cvjs_serverSavePrintModeController = 0;
			jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
			// hide modal
//				printWindow = window.open(cvjs_serverHandlersPath + "/tcpdf/batchconvert/" + html, 'CADViewer - Print', 'height='+screen.height*0.5+',width='+screen.width*0.5);

				// calculate file-name
		
				var currentdate = new Date();
				var datetime = "y"+currentdate.getFullYear() +"_m"+(currentdate.getMonth()+1)+"_d"+(currentdate.getDate())+"_h"+currentdate.getHours()+"_m"+currentdate.getMinutes()+"_s"+currentdate.getSeconds();

				var month = "jan";
				var hours = currentdate.getHours(); 
				
				if (hours<10) hours = "0"+hours;
				switch(currentdate.getMonth()) {
					case 0:
						month = "Jan";
						break;
					case 1:
						month = "Feb";
						break;
					case 2:
						month = "Mar";
						break;
					case 3:
						month = "Apr";
						break;
					case 4:
						month = "May";
						break;
					case 5:
						month = "Jun";
						break;
					case 6:
						month = "Jul";
						break;
					case 7:
						month = "Aug";
						break;
					case 8:
						month = "Sep";
						break;
					case 9:
						month = "Oct";
						break;
					case 10:
						month = "Nov";
						break;
					case 11:
						month = "Dec";
						break;
					default:
						month = "Jan";
				}
				
				
				var datetime = month+"_"+(currentdate.getDate())+"_H"+hours+"_"+currentdate.getMinutes();
				
				var serverPath = "";
				var myUploadFile = "";
				if (cvjs_currentFileFromJSTreeFolder.indexOf("/")==-1){	
					serverPath = "";
					myUploadFile = cvjs_currentFileFromJSTreeFolder;
				}
				else{
					serverPath = cvjs_currentFileFromJSTreeFolder.substring(0,cvjs_currentFileFromJSTreeFolder.lastIndexOf("/"));
					myUploadFile = cvjs_currentFileFromJSTreeFolder.substring(cvjs_currentFileFromJSTreeFolder.lastIndexOf("/")+1);
				}
		

				// 3.2.01d			
				if (!cvjs_fileLoadingFromSharePointServer){
					myUploadFile = cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].substring(cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].lastIndexOf("/")+1);					
				}

		
				myUploadFile = myUploadFile.substring(0,myUploadFile.lastIndexOf("."));
				
				
				var dateFlag = true;
				
				if (dateFlag){
					myUploadFile = myUploadFile + "_red_"+datetime+".pdf";
				}
				else{
					myUploadFile = myUploadFile + "_red.pdf";
				}
				
				// 6.1.21
				fileName =  cvjs_ServerLocation  + "/converters/files/" + html ;

				
//				fileName = cvjs_serverHandlersPath + "/tcpdf/batchconvert/" + html;				
				fileName = fileName.substring(0, fileName.indexOf(".html")) + ".pdf";

				
///   3.1.21c, here we can add flags to control where to upload to server.

				
				
				
				if (!cvjs_fileLoadingFromSharePointServer){
				// 3.1.21c

				// COPY TO ANOTHER FOLDER ON SAME SERVER STRUCTURE
				// READ FROM JSTREE STRUCTURE
				// COPY TO ANOTHER FOLDER ON A DIFFERENT SERVER STRUCTURE

					var finalUrl = cvjs_serverHandlersPath + cvjs_serverCopyFileController;
					var filelist_data = {};
					
//					var localdestination = cvjs_filepathServer+fileName.substring(fileName.lastIndexOf("/")+1);   //
					var localdestination = cvjs_filepathServer+cvjs_getCurrentMultiPage_FileName()+myUploadFile;   //

//				3.2.01d
					var localdestination = cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].substring(0,cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].lastIndexOf("/")+1)+cvjs_getCurrentMultiPage_FileName()+myUploadFile;   //
					
					filelist_data['localfilename'] = fileName;
					filelist_data['localdestination'] = localdestination;
														
	console.log("fileName "+fileName+"  "+localdestination);
		
					jQuery.ajax({
					  url:finalUrl,
					  type: 'post',
					  data: filelist_data,
					  success: function(html){
							if (cvjs_debug) console.log("PDF file is now moved: "+html);

							jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();


							// We have also updated the path settings
							
							// therefore we must now reload CV-JS
							//window.alert("before reload!");
															
					  }
					});
			


					
				}
				else{				
				
					// UPLOAD TO SHAREPOINT SERVER
					
					var finalUrl = cvjs_serverHandlersPath + "CV-JS_sharepoint_uploadfile2.php";
					var filelist_data = {};

					filelist_data['localfilename'] = fileName;
					filelist_data['targetUrl'] = serverPath;   //
					filelist_data['user_name'] = cvjs_sharepoint_UserName;
					filelist_data['file_name'] = myUploadFile;
						

	console.log ("fileName "+fileName+"  "+serverPath+"  "+cvjs_sharepoint_UserName+"  "+myUploadFile);

						
					jQuery.ajax({
					  url:finalUrl,
					  type: 'post',
					  data: filelist_data,
					  success: function(html){
							if (cvjs_debug) console.log("PDF file is now uploaded to SharePoint server: "+html);


							jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();


							// We have also updated the path settings
							
							// therefore we must now reload CV-JS
							//window.alert("before reload!");
							
							
							location.reload();
															
					  }
					});
			
						
				}
				
		


	  },
	  error:function(data_e){console.log("Error "+data_e); return;}

	});

}







function cvjs_printSavedBitmapToPDF_email(){

// BBBBBBBBBB
// make create batch pdf modal

//window.alert("wait "+languageTable.languages[cvjs_currentLanguage].WaitModal.BatchPDF);
	
	var serverPath;



	// 6.1.21
	cvjs_phpImagesUrlController = cvjs_serverHandlersPath + cvjs_screenToPDF_Controller
	serverPath = cvjs_ServerLocation  + "/converters/files/" ;

	
	
	
	cvjs_serverSave_php_controllerArray = {};
	cvjs_serverSave_php_controllerArray['numberOfFiles'] = 1;


	cvjs_serverSave_php_controllerArray['serverPath'] = serverPath;


	cvjs_serverSave_php_controllerArray['fileName_0'] = cvjs_singleDrawingFile ;
	cvjs_serverSave_php_controllerArray['rotation_0'] = cvjs_singlePageOrientation;
	cvjs_serverSave_php_controllerArray['page_format_0'] = cvjs_singlePageSize;
	cvjs_serverSave_php_controllerArray['page_resolution_0'] = cvjs_singlePageResolution;

	cvjs_serverSave_php_controllerArray['org_fileName_0'] = cvjs_FileNameNoExtension ;

//window.alert("org_fileName_0 "+cvjs_serverSave_php_controllerArray['org_fileName_0']);


	jQuery('#cvjs_wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html('<table class=\"waitlooperTable\" width=\"100\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr><td><div id=\"looper_image_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\"></div></td></tr><tr><td><div class=\"cvjs_wait_text_5\" id=\"cvjs_wait_looper_text_id_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\">'+languageTable.languages[cvjs_currentLanguage].WaitModal.BatchPDF+'</div></td></tr></table>');

	cvjs_setLooperPosition();
	
	jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).fadeIn(1000);

	jQuery.ajax({
	  url:cvjs_phpImagesUrlController,
	  type: 'post',
	  data: cvjs_serverSave_php_controllerArray,
	  success: function(html){
//			window.alert(html+"  we have now created the single page pdf");		
//			if (true) return;
			
			cvjs_serverSavePrintModeController = 0;
			jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
			// hide modal
//				printWindow = window.open(cvjs_serverHandlersPath + "/tcpdf/batchconvert/" + html, 'CADViewer - Print', 'height='+screen.height*0.5+',width='+screen.width*0.5);


// here we add the email content 
//				printWindow = window.open(cvjs_phpPath  + "/tcpdf/batchconvert/" + html, 'CADViewer - Print', 'height='+screen.height*0.8+',width='+screen.width*0.5);
//				printWindow.focus();


				var currentdate = new Date();
				var datetime = "y"+currentdate.getFullYear() +"_m"+(currentdate.getMonth()+1)+"_d"+(currentdate.getDate())+"_h"+currentdate.getHours()+"_m"+currentdate.getMinutes()+"_s"+currentdate.getSeconds();

				var month = "jan";
				var hours = currentdate.getHours(); 
				
				if (hours<10) hours = "0"+hours;
				switch(currentdate.getMonth()) {
					case 0:
						month = "Jan";
						break;
					case 1:
						month = "Feb";
						break;
					case 2:
						month = "Mar";
						break;
					case 3:
						month = "Apr";
						break;
					case 4:
						month = "May";
						break;
					case 5:
						month = "Jun";
						break;
					case 6:
						month = "Jul";
						break;
					case 7:
						month = "Aug";
						break;
					case 8:
						month = "Sep";
						break;
					case 9:
						month = "Oct";
						break;
					case 10:
						month = "Nov";
						break;
					case 11:
						month = "Dec";
						break;
					default:
						month = "Jan";
				}
				
				
				var datetime = month+"_"+(currentdate.getDate())+"_H"+hours+"_"+currentdate.getMinutes();

				
				var myUploadFile = "";
				if (cvjs_currentFileFromJSTreeFolder.indexOf("/")==-1){	
					myUploadFile = cvjs_currentFileFromJSTreeFolder;
				}
				else{
					myUploadFile = cvjs_currentFileFromJSTreeFolder.substring(cvjs_currentFileFromJSTreeFolder.lastIndexOf("/")+1);
				}
				
				// 3.2.01d			
				if (!cvjs_fileLoadingFromSharePointServer){
					myUploadFile = cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].substring(cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].lastIndexOf("/")+1);					
				}
					
				
				myUploadFile = myUploadFile.substring(0,myUploadFile.lastIndexOf("."));
				myUploadFile = myUploadFile + "_red_"+datetime+".pdf";

				var filelist_data = {};




				// 6.1.23
				
				//var n = html.lastIndexOf(".html");
				//var pdffile = html.substring(0,n);
				var pdffile = html;
				
				// 6.1.21
//				filelist_data['pdf_file'] = cvjs_ServerLocation  + "/converters/files/" + pdffile + ".pdf";  // myfolderFile;

				// 6.1.23
				filelist_data['pdf_file'] = cvjs_ServerLocation  + "/converters/files/" + pdffile;  // myfolderFile;

				
				filelist_data['pdf_file_name'] = myUploadFile ;  // myfolderFile;
				
				filelist_data['from_name'] = cvjs_from_name;
				filelist_data['from_mail'] = cvjs_from_mail;
				filelist_data['cc_mail'] = cvjs_cc_mail;
				filelist_data['replyto'] = cvjs_replyto;
				
				
				// replace , with ;
				cvjs_to_mail = cvjs_to_mail.replace(/,/g, ';');
				
				filelist_data['to_mail'] = cvjs_to_mail;
				filelist_data['mail_title'] = cvjs_mail_title;
				filelist_data['mail_message'] = cvjs_mail_message;
				
				var cvjs_phpSendPDFEmail = cvjs_serverHandlersPath + cvjs_serverSendPDFEmailController;
		

//window.alert(filelist_data['pdf_file']);
//if (true) return;
		
				jQuery.ajax({
				  url:cvjs_phpSendPDFEmail,
				  type: 'post',
				  data: filelist_data,
				  success: function(html){

						window.alert("e-mail sent!  "+html);

						}
					});
		
	  },
	  error:function(data_e){console.log("Error "+data_e); return;}

	});

}






 

function savepageaspdf(floorplan_div){

	var pathname = ServerLocation + "/converters/files/pdf/custom_"+cvjs_customPdfFolderName;
	// find the filename-red_s1
	var fname = cvjs_last_FileName_PDF; 
	fname = fname.substring(fname.lastIndexOf("/")+1,fname.lastIndexOf("."));
	// find the curent page
	var current_page = cvjs_getCurrentPage();
	// build the full page
	pathname = pathname +"/"+fname+"_red_"+current_page+".pdf";
	
	//window.alert(pathname);
	cvjs_zoomExtents(floorplan_div);
	
	// we do not zoom in !!!
	// cvjs_zoomOutCustomFactor(floorplan_div, 1.2);
	
	cvjs_saveFloorplanAsPDF(pathname, floorplan_div);
}
 
	
function saveDrawingWithAnnotationsAsPDF(cvjs_currentFileFromJSTreeFolder, cvjs_sharepoint_UserName, dateFlag){

	// var v1 = jQuery('#pdf_with_annotations').val();	
	" GRC_Project2/GRC_Punch List 3/GRC_Michigan.dwg"
	
	var currentdate = new Date();
	var datetime = "y"+currentdate.getFullYear() +"_m"+(currentdate.getMonth()+1)+"_d"+(currentdate.getDate())+"_h"+currentdate.getHours()+"_m"+currentdate.getMinutes()+"_s"+currentdate.getSeconds();

	var month = "jan";
	var hours = currentdate.getHours(); 
	
	if (hours<10) hours = "0"+hours;
	switch(currentdate.getMonth()) {
		case 0:
			month = "Jan";
			break;
		case 1:
			month = "Feb";
			break;
		case 2:
			month = "Mar";
			break;
		case 3:
			month = "Apr";
			break;
		case 4:
			month = "May";
			break;
		case 5:
			month = "Jun";
			break;
		case 6:
			month = "Jul";
			break;
		case 7:
			month = "Aug";
			break;
		case 8:
			month = "Sep";
			break;
		case 9:
			month = "Oct";
			break;
		case 10:
			month = "Nov";
			break;
		case 11:
			month = "Dec";
			break;
		default:
			month = "Jan";
	}
	
	
	var datetime = month+"_"+(currentdate.getDate())+"_H"+hours+"_"+currentdate.getMinutes();
	
	var serverPath = "";
	var myUploadFile = "";
	if (cvjs_currentFileFromJSTreeFolder.indexOf("/")==-1){	
		serverPath = "";
		myUploadFile = cvjs_currentFileFromJSTreeFolder;
	}
	else{
		serverPath = cvjs_currentFileFromJSTreeFolder.substring(0,cvjs_currentFileFromJSTreeFolder.lastIndexOf("/"));
		myUploadFile = cvjs_currentFileFromJSTreeFolder.substring(cvjs_currentFileFromJSTreeFolder.lastIndexOf("/")+1);
	}


	// 3.2.01d			
	if (!cvjs_fileLoadingFromSharePointServer){
		myUploadFile = cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].substring(cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].lastIndexOf("/")+1);					
	}

	
	myUploadFile = myUploadFile.substring(0,myUploadFile.lastIndexOf("."));
	
	
	if (dateFlag){
		myUploadFile = myUploadFile + "_red_"+datetime+".pdf";
	}
	else{
		myUploadFile = myUploadFile + "_red.pdf";
	}
	

	var location = ServerLocation+myUploadFile;
	console.log( "saveDrawingWithAnnotationsAsP "+  location + "  "+myUploadFile+"  "+serverPath);
	
	cvjs_saveFloorplanAsPDFtoSharePoint( location, "floorPlan", serverPath , cvjs_sharepoint_UserName );
//	cvjs_saveFloorplanAsPDFtoSharePoint( location, "floorPlan", "Project1", cvjs_sharepoint_UserName);
	
}



/**
 * Saves a floorplan with overlays as SVG file, then embed it into a pdf and display in own window
 * @param {string} floorplan_div - name of Element on which CADViewer is located
 */
	
function cvjs_printScreenAsPDFwithRedlines(floorplan_div){



	// make temp file name
	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

	var bbox = cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox();
		
	var header = '<?xml version="1.0" encoding="utf-8" ?>';
	header +=  ' <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">'; 
	header +=  '<svg contentScriptType="text/ecmascript" xmlns:xlink="http://www.w3.org/1999/xlink" zoomAndPan="magnify" contentStyleType="text/css" preserveAspectRatio="xMidYMid meet"' ;
	header += ' width="'+bbox.width+'" height="'+bbox.height+'" viewbox="'+bbox.x+' '+bbox.y+' '+bbox.width+' '+bbox.height+'"';
	header += ' version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:cvjs="http://www.tailormade.com/" stroke-linecap="butt" stroke-linejoin="round" fill-rule="evenodd" >';
	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	var myFloorPlan = header + cvjs_rPaper[cvjs_active_floorplan_div_nr] + "</svg>";		
	
	var cvjs_phpSaveSVGUrlLocation = cvjs_serverHandlersPath + cvjs_serverSaveFileController;
	var js_data = {};
	
	// we use the folder one step above app folder as temp folder
	
	
	var currentdate = new Date();
	var datetime = "y"+currentdate.getFullYear() +"_m"+(currentdate.getMonth()+1)+"_d"+(currentdate.getDate())+"_h"+currentdate.getHours()+"_m"+currentdate.getMinutes()+"_s"+currentdate.getSeconds();

	var month = "jan";
	var hours = currentdate.getHours(); 
	
	if (hours<10) hours = "0"+hours;
	switch(currentdate.getMonth()) {
		case 0:
			month = "Jan";
			break;
		case 1:
			month = "Feb";
			break;
		case 2:
			month = "Mar";
			break;
		case 3:
			month = "Apr";
			break;
		case 4:
			month = "May";
			break;
		case 5:
			month = "Jun";
			break;
		case 6:
			month = "Jul";
			break;
		case 7:
			month = "Aug";
			break;
		case 8:
			month = "Sep";
			break;
		case 9:
			month = "Oct";
			break;
		case 10:
			month = "Nov";
			break;
		case 11:
			month = "Dec";
			break;
		default:
			month = "Jan";
	}
	
	var datetime = month+"_"+(currentdate.getDate())+"_H"+hours+"_"+currentdate.getMinutes();
	//var random = Math.random().toString().substring(2,5);
	var fileName = cvjs_FileNameNoExtension+'_'+datetime+'.pdf';

	
	var htmlName = cvjs_FileNameNoExtension+'_'+datetime+'.html';	
	
	
//	var fileName = "tempXXXX.pdf";
	var myfolderFile = cvjs_ServerLocation+fileName; 
//	var myfolderFile = cvjs_ServerLocation+"/"+ fileName; 

//	window.alert(myfolderFile);
	
	var counter = myfolderFile.lastIndexOf(".");
	var svgFile = myfolderFile.substring(0,counter)+".svg";
	
	js_data['file'] = svgFile;
	js_data['file_content'] = myFloorPlan;

	if (cvjs_debug) console.log("make pdf "+svgFile+"  "+cvjs_phpSaveSVGUrlLocation);	
	
	jQuery.ajax({
	  url:cvjs_phpSaveSVGUrlLocation,
	  type: 'post',
	  data: js_data,
	  success: function(html){
		var status ="Save floorplan: "+html;
		
		if (cvjs_debug) console.log(status);
		
		var finalUrl = cvjs_serverHandlersPath + cvjs_serverSVGtoPDFConverterController;
		var filelist_data = {};

		filelist_data['pdf_file'] = myfolderFile;
		filelist_data['svg_file'] = svgFile;
	
		jQuery.ajax({
		  url:finalUrl,
		  type: 'post',
		  data: filelist_data,
		  success: function(html){
				if (cvjs_debug) console.log("PDF file is now created: "+html);
										
//		if (cvjs_debug) window.alert(html);
	
				var filelocation = cvjs_ServerUrl+ "/" + fileName;
				var xfilelocation = cvjs_ServerUrl + "/" + fileName;

				var htmlLocation = cvjs_ServerLocation + "/" + htmlName;
				var htmlUrl = cvjs_ServerUrl + "/" + htmlName;
				
				var is_explorer = (navigator.userAgent.indexOf('MSIE') > -1) || (navigator.userAgent.indexOf('Trident') > -1);
//				var printWindow = window.open('', 'CADViewer - Print', 'width='+screen.width*cvjs_print_to_pdf_windowRelativeSize+',height='+ screen.height*cvjs_print_to_pdf_windowRelativeSize);
				var text = "";

//				printWindow.document.write('<!DOCTYPE html><html><title>CADViewer - Print</title><head><script src="'+cvjs_defaultJSPath+'/jquery-2.2.3.js" type="text/javascript"></script>');
				text = text + '<!DOCTYPE html><html><title>CADViewer - Print</title><head><script src="'+cvjs_defaultJSPath+'/jquery-2.2.3.js" type="text/javascript"></script>';
				
//				printWindow.document.write('<script type="text/javascript">');
				text = text + '<script type="text/javascript">';

				//printWindow.document.write("jQuery(window).on('beforeunload', function (){ jQuery.ajax({url:'"+cvjs_phpPath+"/delete-file.php?file="+xfilelocation+"', cache: false, success: function(html){}});  }); jQuery(window).on('unload', function (){ jQuery.ajax({url:'"+cvjs_phpPath+"/delete-file.php?file="+xfilelocation+"', cache: false, success: function(html){}})  }); window.onbeforeunload = function (){ jQuery.ajax({url:'"+cvjs_phpPath+"/delete-file.php?file="+xfilelocation+"', cache: false, success: function(html){}}) }; </script>");
				//text = text + "jQuery(window).on('beforeunload', function (){ jQuery.ajax({url:'"+cvjs_phpPath+"/delete-file.php?file="+xfilelocation+"', cache: false, success: function(html){}});  }); jQuery(window).on('unload', function (){ jQuery.ajax({url:'"+cvjs_phpPath+"/delete-file.php?file="+xfilelocation+"', cache: false, success: function(html){}})  }); window.onbeforeunload = function (){ jQuery.ajax({url:'"+cvjs_phpPath+"/delete-file.php?file="+xfilelocation+"', cache: false, success: function(html){}}) }; </script>";

//				printWindow.document.write("jQuery(window).on('beforeunload', function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}});  }); jQuery(window).on('unload', function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}})  }); window.onbeforeunload = function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}}) }; </script>");
				text = text + "jQuery(window).on('beforeunload', function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}});  }); jQuery(window).on('unload', function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}})  }); window.onbeforeunload = function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}}) }; </script>";
				
//				printWindow.document.write('</head><body><div id="pdf">');
				text = text + '</head><body><div id="pdf">';

//				printWindow.document.write('<object width="1654" height="2339" type="application/pdf" data="'+filelocation+'" id="pdf_content"><p>Please install a PDF viewer, the CADViewer batch file PDF cannot be displayed.</p></object></div></body></html>');
//				text = text + '<object width="1654" height="2339" type="application/pdf" data="'+filelocation+'" id="pdf_content"><p>Please install a PDF viewer, the CADViewer batch file PDF cannot be displayed.</p></object></div></body></html>';

//				printWindow.document.write('<object width="'+screen.width*cvjs_print_to_pdf_windowRelativeSize+'" height="'+screen.width*cvjs_print_to_pdf_windowRelativeSize*2339/1654+'" type="application/pdf" data="'+filelocation+'" id="pdf_content"><p>Please install a PDF viewer, the CADViewer batch file PDF cannot be displayed.</p></object></div></body></html>');
				text = text + '<object width="'+screen.width*cvjs_print_to_pdf_windowRelativeSize+'" height="'+screen.width*cvjs_print_to_pdf_windowRelativeSize*2339/1654+'" type="application/pdf" data="'+filelocation+'" id="pdf_content"><p>Please install a PDF viewer, the CADViewer batch file PDF cannot be displayed.</p></object></div></body></html>';
								
//				printWindow.document.close(); //this seems to be the thing doing the trick
//				printWindow.focus();

							
				js_data['file'] = htmlLocation;
				js_data['file_content'] = text;
							
				jQuery.ajax({
				  url:cvjs_phpSaveSVGUrlLocation,
				  type: 'post',
				  data: js_data,
				  success: function(html){
					var status ="Save html: "+html;
						
							var printWindow = window.open(htmlUrl, 'CADViewer - Print', 'width='+screen.width*cvjs_print_to_pdf_windowRelativeSize+',height='+ screen.height*cvjs_print_to_pdf_windowRelativeSize);
							printWindow.focus();							
					  }
					});
			
				
				
				
		  }
		});

		
		//window.alert(status);
	  },
	  error:function(data_e){console.log("Error "+data_e); return;}
	});
}

	


function cvjs_initializeFileSelector(){


// drawing file 1

		jQuery('#attention_bitmap').hide();


/*

// hide all file objects initially
		for (var i=maxfiles;i>0;i--){

			var l1 = "1floor"+i;
			var l2 = "2floor"+i;

			jQuery("#"+l1).hide();
			jQuery("#"+l2).hide();
		}

*/


		// load and build the server side list with files

		//console.log(" cvjs_loadServerFileList(1); ");

		cvjs_loadServerFileList(1);


}



// 3.3.06a
function cvjs_setModalSingleFileItems(number){
	
	
var basefloor = '#1floor'+number;	
	

		jQuery(basefloor).mouseover(function()
			{
			    jQuery(basefloor+'_1').css('color', '#29BBEB');
			    jQuery("#cvjs_serverFileLoadModal").draggable({ disabled: true });

        	});

		jQuery(basefloor).mouseout(function()
			{
			    jQuery(basefloor+'_1').css('color', '#333333');
			    jQuery("#cvjs_serverFileLoadModal").draggable({ disabled: false });
        	});



		jQuery(basefloor+'_1').mousedown(function()
			{
				var filename =	jQuery(basefloor+'_2').text();
				current_selected_filename = filename;
				current_selected_shortname = jQuery(basefloor+'_1').text();
				jQuery('#display_floorplan_name').html(current_selected_shortname);
				var file =  cvjs_floorplansRelativePath + filename;
				 cvjs_callServerForDataOverlayProcessing();

				cvjs_loadFileWithDataOverlays(filename, number); // 3.3.05f
			    jQuery(basefloor+'_1').css('color', '#333333');


        	});

		jQuery(basefloor+'_2').mousedown(function()
			{
				var filename =	jQuery(basefloor+'_2').text();
				current_selected_filename = filename;
				current_selected_shortname = jQuery(basefloor+'_1').text();
				jQuery('#display_floorplan_name').html(current_selected_shortname);
				var file =  cvjs_floorplansRelativePath + filename;
				 cvjs_callServerForDataOverlayProcessing();

				cvjs_loadFileWithDataOverlays(filename, number); // 3.3.05f

			});

			
var		basefloor2 = '#2floor'+number;	
			

		jQuery(basefloor2+'_3').click(function()
			{

				if (active_modal == 1){
					// do nothing

				}
				else{

					jQuery("#delete_form").fadeIn(1000);
					delete_filename = jQuery(basefloor2+'_4').text();
					delete_floor =  jQuery(basefloor2+'_1').text();

					hidefield_name1 = basefloor2; //"#2floor1";
					hidefield_name2 = basefloor; // "#1floor1";
					// update array with file names - remove the file and associated name from list
					positionPopup();
				}

			});
// delete mouse over
		jQuery(basefloor2+'_3').mouseover(function()
			{
				jQuery(basefloor2+'_3_image').attr("src", ""+cvjs_imagesLocation+"tools/Trash_Over_3.png");  //  Trash_Over_3.png             // Trash_2.png
			});
// delete mouse out
		jQuery(basefloor2+'_3').mouseout(function()
			{
				jQuery(basefloor2+'_3_image').attr("src", ""+cvjs_imagesLocation+"tools/Trash_Up_1.png");    //   Trash_Up_1.png             // Trash_2.png

			});

		jQuery(basefloor2+'_2').mouseover(function(){


		});

		jQuery(basefloor2+'_2').mousedown(function()
			{

				try{

				if (active_modal == 1){
					// do nothing

				}
				else{
					if (edit_nametag_flag == 0)
						edit_nametag_flag = 1;
					else{
						if (edit_nametag_flag == 1)
							fnArr_ShortName[edit_nametag_flag-1] =  jQuery('#floor_name_tag').val();
							edit_nametag_flag = 0;
					}


					if ( edit_nametag_flag == 1){
						jQuery(basefloor2+'_2').css('color', '#02C226');
						jQuery(basefloor2+'_2_2').css('color', '#E85656');
						jQuery(basefloor2+'_2_3').css('color', '#E85656');
						var shortname = jQuery(basefloor2+'_1').text();
						var textstring = "<input id=\"floor_name_tag\" type=\"text3\" class=\"name_tags2\" value=\""+shortname+"\">";
						jQuery(basefloor2+'_1').html(textstring);
//console.log("disable sort");
						jQuery('#sortable').sortable({ disabled: true });
					}

					if ( edit_nametag_flag == 0){
						jQuery(basefloor2+'_2').css('color', '#026DD9');
						jQuery(basefloor2+'_2_2').css('color', '#026DD9');
						jQuery(basefloor2+'_2_3').css('color', '#026DD9');
						var newname = jQuery('#floor_name_tag').val();
						jQuery(basefloor2+'_1').html(newname);
						jQuery(basefloor+'_1').html(newname);
						// update array with file names

						//fnArr_FileName[0] =  fnArr_listdirectory_FileName[0];
						//fnArr_ShortName[0] =  newname;
						save_filename_list();

						jQuery('#sortable').sortable({ disabled: false });


					}

				}
				} catch(err){console.log("Err 1: "+err);}

			});


		jQuery(basefloor2+'_2_2').mousedown(function()
			{
				if (active_modal == 1){
					// do nothing

				}
				else{

					jQuery("#unlink_form").fadeIn(1000);
					delete_filename = jQuery('#2floor1_4').text();
					positionPopupUnlink();
				}
			});


		jQuery(basefloor2+'_2_3').mousedown(function()
			{
				if (active_modal == 1){
					// do nothing

				}
				else{
					jQuery("#clear_form").fadeIn(1000);
					delete_filename = jQuery('#2floor1_4').text();
					positionPopupClear();
				}
			});



	
	
	
	
	
}





function cvjs_initializeAllFileSelectorDivs(floorplan_div){


	jQuery("#button2-no_upload_redline").click(function(){

//		jQuery("#cvjs_serverFileLoadModal").hide();

		// hide redline load modal if in interactive mode
		jQuery( "#addRedlineTable").hide();

	});

	jQuery("#button1-upload_redline").click(function(){

		var f_path = "";
		var flagloop = true;
		var counter1 = 0;
		var temp = cvjs_redlinesRelativePath;
			while(flagloop){
				if (temp.indexOf("../")==0 ){
					temp = temp.substring(3);
					counter1++;

				}
				else
					flagloop=false;
			}

			flagloop = true;

		var counter2 = 0;
			temp = cvjs_phpPath;
			while(flagloop){
				if (temp.indexOf("../")==0 ){
					temp = temp.substring(3);
					counter2++;

				}
				else
					flagloop=false;
			}

		if (counter2>1) {
			f_path = cvjs_redlinesRelativePath.substring((counter2-1)*3);
		}
		else
			f_path = cvjs_redlinesRelativePath;

if (cvjs_debug) console.log("cvjs_initializeAllFileSelectorDivs cvjs_saveStickyNotesRedlines f_path="+f_path)

		if (cvjs_redlinesAbsolutePathOnly) f_path = cvjs_filepathServerRedlines;    // if only absolute paths, set f_path to the absolute path

if (cvjs_debug) console.log("2 cvjs_initializeAllFileSelectorDivs cvjs_saveStickyNotesRedlines fpath="+f_path)

		cvjs_setStickyNoteSaveRedlineUrl(f_path+jQuery('#uploadredline_name_tag').val());


//		cvjs_setStickyNoteSaveRedlineUrl(cvjs_redlinesRelativePath+jQuery('#uploadredline_name_tag').val());
		cvjs_saveStickyNotesRedlines(floorplan_div);

	});



		// NEW WE CREATE BASED ON EVERYTHING    '#1floor1 -> '#1floor80    #2floor1 -> '#2floor80
		// 3.3.06a
		for (i=1; i<cvjs_maxfiles; i++)
			cvjs_setModalSingleFileItems(i);
		// 3.3.06a we double from 40 -> 80 items in the list
		

// TEMPLATE FOR cvjs_setModalSingleFileItems(number);		
/***

		jQuery('#1floor1').mouseover(function()
			{
			    jQuery('#1floor1_1').css('color', '#29BBEB');
			    jQuery("#cvjs_serverFileLoadModal").draggable({ disabled: true });

        	});

		jQuery('#1floor1').mouseout(function()
			{
			    jQuery('#1floor1_1').css('color', '#333333');
			    jQuery("#cvjs_serverFileLoadModal").draggable({ disabled: false });
        	});



		jQuery('#1floor1_1').mousedown(function()
			{
				var filename =	jQuery('#1floor1_2').text();
				current_selected_filename = filename;
				current_selected_shortname = jQuery('#1floor1_1').text();
				jQuery('#display_floorplan_name').html(current_selected_shortname);
				var file =  cvjs_floorplansRelativePath + filename;
				 cvjs_callServerForDataOverlayProcessing();

				cvjs_loadFileWithDataOverlays(filename,1); // 3.3.05f
			    jQuery('#1floor1_1').css('color', '#333333');

        	});

		jQuery('#1floor1_2').mousedown(function()
			{
				var filename =	jQuery('#1floor1_2').text();
				current_selected_filename = filename;
				current_selected_shortname = jQuery('#1floor1_1').text();
				jQuery('#display_floorplan_name').html(current_selected_shortname);
				var file =  cvjs_floorplansRelativePath + filename;
				 cvjs_callServerForDataOverlayProcessing();

				cvjs_loadFileWithDataOverlays(filename,1); // 3.3.05f

			});


		jQuery('#2floor1_3').click(function()
			{

				if (active_modal == 1){
					// do nothing

				}
				else{

					jQuery("#delete_form").fadeIn(1000);
					delete_filename = jQuery('#2floor1_4').text();
					delete_floor =  jQuery('#2floor1_1').text();

					hidefield_name1 = "#2floor1";
					hidefield_name2 = "#1floor1";
					// update array with file names - remove the file and associated name from list
					positionPopup();
				}

			});
// delete mouse over
		jQuery('#2floor1_3').mouseover(function()
			{
				jQuery('#2floor1_3_image').attr("src", ""+cvjs_imagesLocation+"tools/Trash_Over_3.png");  //  Trash_Over_3.png             // Trash_2.png
			});
// delete mouse out
		jQuery('#2floor1_3').mouseout(function()
			{
				jQuery('#2floor1_3_image').attr("src", ""+cvjs_imagesLocation+"tools/Trash_Up_1.png");    //   Trash_Up_1.png             // Trash_2.png

			});

		jQuery('#2floor1_2').mouseover(function(){

		});

		jQuery('#2floor1_2').mousedown(function()
			{

				try{

				if (active_modal == 1){
					// do nothing

				}
				else{
					if (edit_nametag_flag == 0)
						edit_nametag_flag = 1;
					else{
						if (edit_nametag_flag == 1)
							fnArr_ShortName[edit_nametag_flag-1] =  jQuery('#floor_name_tag').val();
							edit_nametag_flag = 0;
					}


					if ( edit_nametag_flag == 1){
						jQuery('#2floor1_2').css('color', '#02C226');
						jQuery('#2floor1_2_2').css('color', '#E85656');
						jQuery('#2floor1_2_3').css('color', '#E85656');
						var shortname = jQuery('#2floor1_1').text();
						var textstring = "<input id=\"floor_name_tag\" type=\"text3\" class=\"name_tags2\" value=\""+shortname+"\">";
						jQuery('#2floor1_1').html(textstring);
//console.log("disable sort");
						jQuery('#sortable').sortable({ disabled: true });
					}

					if ( edit_nametag_flag == 0){
						jQuery('#2floor1_2').css('color', '#026DD9');
						jQuery('#2floor1_2_2').css('color', '#026DD9');
						jQuery('#2floor1_2_3').css('color', '#026DD9');
						var newname = jQuery('#floor_name_tag').val();
						jQuery('#2floor1_1').html(newname);
						jQuery('#1floor1_1').html(newname);
						// update array with file names

						//fnArr_FileName[0] =  fnArr_listdirectory_FileName[0];
						//fnArr_ShortName[0] =  newname;
						save_filename_list();

						jQuery('#sortable').sortable({ disabled: false });


					}

				}
				} catch(err){console.log("Err 1: "+err);}

			});


		jQuery('#2floor1_2_2').mousedown(function()
			{
				if (active_modal == 1){
					// do nothing

				}
				else{

					jQuery("#unlink_form").fadeIn(1000);
					delete_filename = jQuery('#2floor1_4').text();
					positionPopupUnlink();
				}
			});


		jQuery('#2floor1_2_3').mousedown(function()
			{
				if (active_modal == 1){
					// do nothing

				}
				else{
					jQuery("#clear_form").fadeIn(1000);
					delete_filename = jQuery('#2floor1_4').text();
					positionPopupClear();
				}
			});
			
***/			
						



			jQuery('#select_file').click(function()
			{
   				//document.getElementById("cvjs_upfile").click();

   				jQuery("#cvjs_upfile").click();

			});


			jQuery('#select_file').mouseover(function()
			{
					// addFloorPlan.png
				    // jQuery('#select_file').attr("src", ""+cvjs_imagesLocation+"cross-blue.png");

				    jQuery("#cvjs_serverFileLoadModal").draggable({ disabled: true });


			});


			jQuery('#select_file').mouseout(function()
			{
					// addFloorPlan.png
				    // jQuery('#select_file').attr("src", ""+cvjs_imagesLocation+"cross.png");

					jQuery("#cvjs_serverFileLoadModal").draggable({ disabled: false });


			});





		jQuery("#CloseAttentionBitmap").click(function() {

				jQuery('#attention_bitmap').hide();
				attention_bitmap_flag = 0;


		});

		jQuery("#done_editing").click(function() {


			if (active_modal == 1){
				// do nothing

			}
			else{


				// if an edit box is open, then we update the filename and close the edit box
				if (edit_nametag_flag>0){

					var tag_2floorx_1 = "#2floor"+edit_nametag_flag+"_1";
					var tag_2floorx_2 = "#2floor"+edit_nametag_flag+"_2";
					var tag_1floorx_1 = "#1floor"+edit_nametag_flag+"_1";

					//console.log("tag_1floorx_1="+tag_1floorx_1);

					jQuery(tag_2floorx_2).css('color', '#00539B');
					var newname = jQuery('#floor_name_tag').val();
					jQuery(tag_2floorx_1).html(newname);
					jQuery(tag_1floorx_1).html(newname);
					// update array with file names

					//fnArr_FileName[edit_nametag_flag-1] =  fnArr_listdirectory_FileName[edit_nametag_flag-1];
					//fnArr_ShortName[edit_nametag_flag-1] =  newname;
					save_filename_list();

					edit_nametag_flag = 0;

				}



				jQuery('#SelectFloorPlanPanel').show();
				jQuery('#SelectFloorPlan').show();
				jQuery('#SelectFloorPlanPanelEdit').hide();
				jQuery('#SelectFloorPlanEdit').hide();

			}

		});


		jQuery("#editing").click(function() {

			save_filename_list();

		    jQuery('#SelectFloorPlanPanel').hide();
		    jQuery('#SelectFloorPlan').hide();


		    jQuery('#SelectFloorPlanPanelEdit').show();
		    jQuery('#SelectFloorPlanEdit').show();


		});




	jQuery('#delete_modal_cancel_image').mouseover(function()
		{
			jQuery('#delete_modal_cancel_image').attr("src", ""+cvjs_imagesLocation+"tools/Cancel_Over_2.png");

		});

	jQuery('#delete_modal_cancel_image').mouseout(function()
		{
			jQuery('#delete_modal_cancel_image').attr("src", ""+cvjs_imagesLocation+"tools/Cancel_Inactive_4.png");

		});



	jQuery('#delete_modal_proceed_image').mouseover(function()
		{
			jQuery('#delete_modal_proceed_image').attr("src", ""+cvjs_imagesLocation+"tools/Proceed_111x28_Over.png");

		});


	jQuery('#delete_modal_proceed_image').mouseout(function()
		{
			jQuery('#delete_modal_proceed_image').attr("src", ""+cvjs_imagesLocation+"tools/Proceed_111x28_Up.png");

		});



	jQuery('#unlink_modal_cancel_image').mouseover(function()
		{
			jQuery('#unlink_modal_cancel_image').attr("src", ""+cvjs_imagesLocation+"tools/Cancel_Over_2.png");

		});

	jQuery('#unlink_modal_cancel_image').mouseout(function()
		{
			jQuery('#unlink_modal_cancel_image').attr("src", ""+cvjs_imagesLocation+"tools/Cancel_Inactive_4.png");

		});


	jQuery('#unlink_modal_proceed_image').mouseover(function()
		{
			jQuery('#unlink_modal_proceed_image').attr("src", ""+cvjs_imagesLocation+"tools/Proceed_111x28_Over.png");

		});


	jQuery('#unlink_modal_proceed_image').mouseout(function()
		{
			jQuery('#unlink_modal_proceed_image').attr("src", ""+cvjs_imagesLocation+"tools/Proceed_111x28_Up.png");

		});



	jQuery('#clear_modal_cancel_image').mouseover(function()
		{
			jQuery('#clear_modal_cancel_image').attr("src", ""+cvjs_imagesLocation+"tools/Cancel_Over_2.png");

		});

	jQuery('#clear_modal_cancel_image').mouseout(function()
		{
			jQuery('#clear_modal_cancel_image').attr("src", ""+cvjs_imagesLocation+"tools/Cancel_Inactive_4.png");

		});


	jQuery('#clear_modal_proceed_image').mouseover(function()
		{
			jQuery('#clear_modal_proceed_image').attr("src", ""+cvjs_imagesLocation+"tools/Proceed_111x28_Over.png");

		});


	jQuery('#clear_modal_proceed_image').mouseout(function()
		{
			jQuery('#clear_modal_proceed_image').attr("src", ""+cvjs_imagesLocation+"tools/Proceed_111x28_Up.png");

		});


	jQuery("#button2-nodelete").click(function(){

		active_modal = 0;

		jQuery("#delete_form").fadeOut(500);

		// Reset opacity of SelectFloorPlanPanelEdit
		jQuery('#SelectFloorPlanPanelEdit').css("filter", "alpha(opacity=100)");
		// filter:alpha(opacity=40);
		jQuery('#SelectFloorPlanPanelEdit').css("opacity", "1.0");

	});


	jQuery("#button1-delete").click(function(){

	//console.log("delete");


		active_modal = 0;

		jQuery("#delete_form").fadeOut(500);  //XXX

		delete_file_and_overlay(delete_filename);
		jQuery(hidefield_name1).hide();
		jQuery(hidefield_name2).hide();

		// Reset opacity of SelectFloorPlanPanelEdit
		jQuery('#SelectFloorPlanPanelEdit').css("filter", "alpha(opacity=100)");
		// filter:alpha(opacity=40);
		jQuery('#SelectFloorPlanPanelEdit').css("opacity", "1.0");

	});




	jQuery("#button1-unlink").click(function(){

		active_modal = 0;

		jQuery("#unlink_form").fadeOut(500);
		// Reset opacity of SelectFloorPlanPanelEdit
		jQuery('#SelectFloorPlanPanelEdit').css("filter", "alpha(opacity=100)");
		// filter:alpha(opacity=40);
		jQuery('#SelectFloorPlanPanelEdit').css("opacity", "1.0");


		// unlink code
		unlink_flag = 1;
		unlink_file = delete_filename;

	});






	jQuery("#button2-nounlink").click(function(){

		active_modal = 0;

		jQuery("#unlink_form").fadeOut(500);

		// Reset opacity of SelectFloorPlanPanelEdit
		jQuery('#SelectFloorPlanPanelEdit').css("filter", "alpha(opacity=100)");
		// filter:alpha(opacity=40);
		jQuery('#SelectFloorPlanPanelEdit').css("opacity", "1.0");

		unlink_flag = 0;
		unlink_file = "";

	});



	jQuery("#unlink_modal_close_cross").click(function(){

		active_modal = 0;

		jQuery("#unlink_form").fadeOut(500);

		// Reset opacity of SelectFloorPlanPanelEdit
		jQuery('#SelectFloorPlanPanelEdit').css("filter", "alpha(opacity=100)");
		// filter:alpha(opacity=40);
		jQuery('#SelectFloorPlanPanelEdit').css("opacity", "1.0");

		jQuery('#unlink_modal_close_cross').css("filter", "alpha(opacity=100)");
		jQuery('#unlink_modal_close_cross').css("opacity", "1.0");


		unlink_flag = 0;
		unlink_file = "";

	});


	jQuery('#unlink_modal_close_cross').mouseover(function()
		{
			jQuery('#unlink_modal_close_cross').css("filter", "alpha(opacity=70)");
			jQuery('#unlink_modal_close_cross').css("opacity", "0.7");
		});


	jQuery('#unlink_modal_close_cross').mouseout(function()
		{
			jQuery('#unlink_modal_close_cross').css("filter", "alpha(opacity=100)");
			jQuery('#unlink_modal_close_cross').css("opacity", "1.0");
		});



	jQuery("#button1-clear").click(function(){

		active_modal = 0;

		jQuery("#clear_form").fadeOut(500);
		// Reset opacity of SelectFloorPlanPanelEdit
		jQuery('#SelectFloorPlanPanelEdit').css("filter", "alpha(opacity=100)");
		// filter:alpha(opacity=40);
		jQuery('#SelectFloorPlanPanelEdit').css("opacity", "1.0");

		// clear code   - swapped current_selected_filename with delete_filename


	// NOTE NOT IMPLEMENTED

	});





	jQuery("#button2-noclear").click(function(){

		active_modal = 0;


		jQuery("#clear_form").fadeOut(500);

		// Reset opacity of SelectFloorPlanPanelEdit
		jQuery('#SelectFloorPlanPanelEdit').css("filter", "alpha(opacity=100)");
		// filter:alpha(opacity=40);
		jQuery('#SelectFloorPlanPanelEdit').css("opacity", "1.0");

	});



	jQuery("#clear_modal_close_cross").click(function(){

		active_modal = 0;

		jQuery("#clear_form").fadeOut(500);

		// Reset opacity of SelectFloorPlanPanelEdit
		jQuery('#SelectFloorPlanPanelEdit').css("filter", "alpha(opacity=100)");
		// filter:alpha(opacity=40);
		jQuery('#SelectFloorPlanPanelEdit').css("opacity", "1.0");

		jQuery('#clear_modal_close_cross').css("filter", "alpha(opacity=100)");
		jQuery('#clear_modal_close_cross').css("opacity", "1.0");


	});


	jQuery('#clear_modal_close_cross').mouseover(function()
		{
			jQuery('#clear_modal_close_cross').css("filter", "alpha(opacity=70)");
			jQuery('#clear_modal_close_cross').css("opacity", "0.7");
		});


	jQuery('#clear_modal_close_cross').mouseout(function()
		{
			jQuery('#clear_modal_close_cross').css("filter", "alpha(opacity=100)");
			jQuery('#clear_modal_close_cross').css("opacity", "1.0");
		});


	jQuery("#modal_close_cross").click(function(){

		active_modal = 0;

		jQuery("#delete_form").fadeOut(500);

		// Reset opacity of SelectFloorPlanPanelEdit
		jQuery('#SelectFloorPlanPanelEdit').css("filter", "alpha(opacity=100)");
		// filter:alpha(opacity=40);
		jQuery('#SelectFloorPlanPanelEdit').css("opacity", "1.0");

		jQuery('#modal_close_cross').css("filter", "alpha(opacity=100)");
		jQuery('#modal_close_cross').css("opacity", "1.0");


	});


	jQuery('#modal_close_cross').mouseover(function()
		{
			jQuery('#modal_close_cross').css("filter", "alpha(opacity=70)");
			jQuery('#modal_close_cross').css("opacity", "0.7");
		});


	jQuery('#modal_close_cross').mouseout(function()
		{
			jQuery('#modal_close_cross').css("filter", "alpha(opacity=100)");
			jQuery('#modal_close_cross').css("opacity", "1.0");
		});




	jQuery('#uploadredline_modal_cancel_image').mouseover(function()
		{
			jQuery('#uploadredline_modal_cancel_image').attr("src", ""+cvjs_imagesLocation+"tools/Cancel_Over_2.png");

		});

	jQuery('#uploadredline_modal_cancel_image').mouseout(function()
		{
			jQuery('#uploadredline_modal_cancel_image').attr("src", ""+cvjs_imagesLocation+"tools/Cancel_Inactive_4.png");

		});

	jQuery('#uploadredline_modal_proceed_image').mouseover(function()
		{
			jQuery('#uploadredline_modal_proceed_image').attr("src", ""+cvjs_imagesLocation+"tools/Proceed_111x28_Over.png");

		});


	jQuery('#uploadredline_modal_proceed_image').mouseout(function()
		{
			jQuery('#uploadredline_modal_proceed_image').attr("src", ""+cvjs_imagesLocation+"tools/Proceed_111x28_Up.png");

		});



}



var active_modal = 0;
var edit_nametag_flag=0;

var filesonserver = 0;

var cvjs_floorplansRelativePath  = "../drawings/floorplans/";

var cvjs_filepathServer  =  "home/myserver/"
var cvjs_floorplanUrl  = "http://myserver.com"

var cvjs_filename_list_status = 1;   // 1 file loaded, 2 redline load, 3 floor plan objects load


function save_filename_list(){   // we are using the old reference list here


if (cvjs_debug) console.log("save_filename_list  cvjs_filename_list_status "+ cvjs_filename_list_status);



	// build list
	var dataUrl = "";
	dataUrl = "(RW-2)|"+filesonserver+"|";
	for (var i=0; i<filesonserver; i++){
		dataUrl = dataUrl + fnArr_FileName[i]+";";
	}
	dataUrl = dataUrl + "|";

	for (var i=0; i<filesonserver; i++){
		dataUrl = dataUrl + fnArr_ShortName[i]+";";
	}
	dataUrl = dataUrl + "|";

//console.log(dataUrl);

	// save file
	var finalUrl = cvjs_phpPath +'save-file.php';
	
	// 3.2.02f
	var finalUrl = cvjs_serverHandlersPath +  cvjs_serverSaveFileControllerRedlines;
		
	
	// data

	var filelist_data = {};

	if (cvjs_filename_list_status==1){

		var fpath = "";
		var flagloop = true;
		var counter1 = 0;
		var temp = cvjs_floorplansRelativePath;
			while(flagloop){
				if (temp.indexOf("../")==0 ){
					temp = temp.substring(3);
					counter1++;

				}
				else
					flagloop=false;
			}

			flagloop = true;

		var counter2 = 0;
			temp = cvjs_phpPath;
			while(flagloop){
				if (temp.indexOf("../")==0 ){
					temp = temp.substring(3);
					counter2++;

				}
				else
					flagloop=false;
			}

		if (counter2>1) {
				fpath =	cvjs_floorplansRelativePath.substring((counter2-1)*3);
		}
		else
				fpath =	cvjs_floorplansRelativePath;


		if (cvjs_fileLocationAbsolutePathsOnly) fpath = cvjs_filepathServer;


		filelist_data['file'] = encodeURIComponent(fpath+filenames_data_url_name);
		//filelist_data['file'] = encodeURIComponent(cvjs_floorplansRelativePath+filenames_data_url_name);
	}
	if (cvjs_filename_list_status==2){


		var fpath = "";
		var flagloop = true;
		var counter1 = 0;
		var temp = cvjs_redlinesRelativePath;
			while(flagloop){
				if (temp.indexOf("../")==0 ){
					temp = temp.substring(3);
					counter1++;

				}
				else
					flagloop=false;
			}

			flagloop = true;
		var counter2 = 0;
			temp = cvjs_phpPath;
			while(flagloop){
				if (temp.indexOf("../")==0 ){
					temp = temp.substring(3);
					counter2++;

				}
				else
					flagloop=false;
			}

		if (counter2>1) {
			fpath =	cvjs_redlinesRelativePath.substring((counter2-1)*3);
		}
		else
			fpath =	cvjs_redlinesRelativePath;


		if (cvjs_redlinesAbsolutePathOnly) fpath = cvjs_filepathServerRedlines;    // if only absolute paths, set f_path to the absolute path

//console.log(cvjs_redlinesAbsolutePathOnly+" save redline files "+fpath);


		filelist_data['file'] = encodeURIComponent(fpath+filenames_data_url_name);
//		filelist_data['file'] = encodeURIComponent(cvjs_redlinesRelativePath+filenames_data_url_name);
	}


if (cvjs_debug) console.log("save_filename_list   "+filelist_data['file']);
if (cvjs_debug) console.log("save_filename_list   "+dataUrl);
if (cvjs_debug) console.log("save_filename_list   "+finalUrl);


	filelist_data['file_content'] = dataUrl;


	jQuery.ajax({
	  url:finalUrl,
	  type: 'post',
	  data: filelist_data,
	  success: function(html){
	  	//console.log(html);
		
	    // 3.3.04e after everything is up on the server, then call the new loading of drawing
		//					if (cvjs_directFileLoad) cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_filepathServer+ file_and_ext);					
		if (cvjs_directFileLoad) cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_directFileLoadPath );
		
	  }  // end success




	});

}


        function getFiles() {
            // Get input element
            myFileList = document.getElementById("myfiles");
            // loop through files property, using length to get number of files chosen
            for (var i = 0; i < myFileList.files.length; i++) {
                // display them in the div
                document.getElementById("display").innerHTML += "<br/>" + myFileList.files[i].name ;
            }
        }




// 3.2.01g   - change to cvjs_ add_file_objec  and have the file element element as parameter
function cvjs_add_file_object(myElement){

//window.alert("myElement "+myElement);

//var obj = document.getElementById("cvjs_upfile");
// 3.2.01g
var obj = document.getElementById(myElement);


for (var i = 0; i < obj.files.length; i++) {
	// display them in the div
if (cvjs_debug) 	console.log(obj.files[i].name);
}

var file = obj.value;
var fileName = file.split("\\");
var file_and_ext = fileName[fileName.length-1];
var illegal_character = 0;

  // probably not needed
  var files = obj.files;
  if (!files) {
        // workaround for IE9
        files = [];
        files.push({
            name: obj.value.substring(obj.value.lastIndexOf("\\")+1),
            size: 0,  // it's not possible to get file size w/o flash or so
            type: obj.value.substring(obj.value.lastIndexOf(".")+1)
        });

        obj.files = files;
    }


var size = 0;
var path = "";
var vval = "";

try{
	size = obj.files[0].size;
	path = obj.files[0].name;
	vval = obj.files[0].path;
if (cvjs_debug) 	console.log(size+"  "+path+"  "+vval)
}catch(err) {
	console.log(err);
};





if (file_and_ext.indexOf("+")>-1 || file_and_ext.indexOf("%")>-1)
	illegal_character = 1;

if (illegal_character == 1){
		jQuery('#attention_1').html("Attention: Illegal character!");
		jQuery('#attention_2').html("Illegal character in file name! Please rename and try again.");
		jQuery('#attention_bitmap').show();
}
else{

// make the variable for the next available floorplan
	var fileExt = fileName[fileName.length-1].split(".");

	var formats = ".dwf|.dxf|.dwg|.png|.gif|.jpg|.tif|.tiff|.svg|.svgz|.js|.pdf|.dgn|.pcf|.json";
	if (formats.indexOf(fileExt[fileExt.length-1].toLowerCase())==-1){

		jQuery('#attention_1').html("Attention: Format not supported!");
		jQuery('#attention_2').html("CADViewer supports the following: <br> AutoCAD Formats: DWG, DXF, DWF <br> MicroStation Formats: DGN, PCF <br>Bitmap Formats: JPG, GIF, PNG, TIFF <br>Scalable Vector Graphics: SVG and SVGZ. <br>Adobe Acrobat: PDF<br>CADViewer: .JS JavaScript files.<br>LinkList/DwgMerge: .JSON files. ");
		jQuery('#attention_bitmap').show();
	}
	else{  // file is supported
		// check if file already is uploaded


		// Demo mode, only a single file is allowed to be uploads
		if (cvjs_fileLoadTrialMode) filesonserver=0;


		var check_flag = 0;
		for (var i=0; i<filesonserver; i++){
			if (fnArr_FileName[i].indexOf(file_and_ext) == 0){
				check_flag = 1;
				
				// remove this check
				// 4.1.01k
				check_flag = 0;
				
			}
		}

				
		if (check_flag == 1){
			jQuery('#attention_1').html("Attention:");
			jQuery('#attention_2').html(file_and_ext+" has already been uploaded! ");
			jQuery('#attention_bitmap').show();
		}
		else{  // upload file

			var formats_bitmap = ".png|.gif|.jpg";
			if (formats_bitmap.indexOf(fileExt[fileExt.length-1].toLowerCase())>=0){

				//jQuery('#attention_bitmap').show();
				//attention_bitmap_flag = 1;
			}

			jQuery('#SelectFloorPlanPanelEdit').hide();
			jQuery('#SelectFloorPlanPanel').show();


			// let us move all current files one step down the list, and upload to the top position

			filesonserver++;

			for (i=filesonserver-1; i>0; i--){

				fnArr_FileName[i] = fnArr_FileName[i-1];
				fnArr_ShortName[i] = fnArr_ShortName[i-1];

				var location = "#1floor"+(i+1);
				jQuery(location).show();

				location = "#1floor"+(i+1)+"_2";
				jQuery(location).html(fnArr_FileName[i]);

				location = "#2floor"+(i+1);
				jQuery(location).show();

				location = "#2floor"+(i+1)+"_4";
				jQuery(location).html(fnArr_FileName[i]);

				var fname= file_and_ext.split(".");
				location = "#2floor"+(i+1)+"_1";
				jQuery(location).html(fnArr_ShortName[i]);

				location = "#1floor"+(i+1)+"_1";
				jQuery(location).html(fnArr_ShortName[i]);

			}

			fnArr_FileName[0] = file_and_ext;
			fnArr_ShortName[0] = file_and_ext;

			var location = "#1floor"+1;
			jQuery(location).show();

			location = "#1floor"+1+"_2";
			jQuery(location).html(file_and_ext);

			location = "#2floor"+1;
			jQuery(location).show();
			location = "#2floor"+1+"_4";
			jQuery(location).html(file_and_ext);

			var fname= file_and_ext.split(".");
			location = "#2floor"+1+"_1";
			jQuery(location).html(fname[0]);

			location = "#1floor"+1+"_1";
			jQuery(location).html("");


//window.alert("file we are uploading "+cvjs_phpPath+"upload_2.php");


			var phpUpload_location = "";

			if (externalServerPhpUpload)
				phpUpload_location = cvjs_phpUploadPath;
			else
				phpUpload_location = cvjs_phpPath;

			jQuery(location).axuploader({
				url: phpUpload_location+cvjs_serverUploadController,
				finish:function(x,files){

// check if PDF version is supported

					var s1_data = {};
					var check_header = cvjs_floorplansRelativePath+file_and_ext;


//console.log("check_header="+check_header+"  fileExt[fileExt.length-1]="+fileExt[fileExt.length-1]);


					if (fileExt[fileExt.length-1].indexOf("pdf")>=0  || fileExt[fileExt.length-1].indexOf("PDF")>=0 ){

//console.log("inside pdf loop");

						s1_data['file'] = file_and_ext;
						var loadUrl1 =  cvjs_floorplansRelativePath +'load-header.php';

//console.log("before ajax loadUrl1="+loadUrl1+" s1_data['file']="+s1_data['file']);

						jQuery.ajax({
						  url:loadUrl1,
						  type: 'post',
						  data: s1_data,
						  success: function(binArray){

//console.log("success binArray="+binArray);

							var version = binArray.substring(0,8);  // (PDF)
//console.log("version="+version);
							if (version.indexOf("PDF-1.2")>=0 || version.indexOf("PDF-1.3")>=0 || version.indexOf("PDF-1.4")>=0 || version.indexOf("PDF-1.5")>=0 ||version.indexOf("PDF-1.6")>=0 ){

								var iii=0;

								// we are home safe
							}
							else{  // delete file
if (cvjs_debug) console.log("The PDF version is currently unsupported, please use a PDF tool to save the file as Acrobat 7 (PDF 1.6) or below.");

								var location = "#1floor"+filesonserver;
								jQuery(location).hide();

								location = "#2floor"+filesonserver;
								jQuery(location).hide();

								filesonserver--;

								// delete the file on server
								var finalUrl = cvjs_phpPath+'delete-file.php?file='+encodeURIComponent(cvjs_floorplansRelativePath+file_and_ext);
								jQuery.ajax({
								  url:finalUrl,
								  cache: false,
								  success: function(html){
								  }  // end success

								});
							}
						  }  // end success

						});
					}
					
					
					// when we are finished uploading we update the tree, if a tree is defined
					// internally for all service based implementations
					// 3.2.01g
					try{
						jQuery('#tree').jstree(true).refresh(true);
						
					}catch (err){ console.log("we do not have a folder tree to update...:  "+err);}
					



					
				},
				enable:true,
				fileObject:obj,
				remotePath:function(){

					//console.log("remotePath!! ");
					// here we have to return dependent on what we are loading in!
//QQQQ
					if (cvjs_debug) console.log("file upload "+cvjs_filepathServer+" file_and_ext"+file_and_ext);

					// 3.3.04e ,
					// If direct load from SAAS , we load in the drawing here
					
//					if (cvjs_directFileLoad) cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_filepathServer+ file_and_ext);
					
					if (cvjs_directFileLoad) cvjs_directFileLoadPath = cvjs_filepathServer+ file_and_ext;
					
									
					
					//window.alert("END of Upload check_flag="+check_flag);		
					//4.1.01k  - we now clean the field, allowing for another selection of the same drawing
					document.getElementById(myElement).value = "";

					
					return cvjs_filepathServer;
					

				}
			});


			// do not remove  jQuery(location).html(fileName[0]);

		}
	}


	} // illegal character

}


var cvjs_fileLocationAbsolutePathsOnly = false;

/**
 * Set up the location of folder in server in which files are upload to and accessed from
 * @param {string} myServerPathToFloorplans - full path to the location of the drawings (typically  /home/myserver/drawings/floorplans/)
 * @param {string} floorplanPath - the relative location of floorplans relative to my document (typically ../drawings/floorplans/)
 * @param {string} floorplanUrl - Url to the locations of floorplans relative to my document
 * @param {string} username - username for floorplans drawings folder, "" if none
 * @param {string} password - password for floorplans drawings folder, "" if none
 */
function cvjs_setServerFileLocation(myServerPathToFloorplans, floorplanPath, floorplanUrl, username, password ){

	cvjs_floorplansRelativePath  = floorplanPath;
	cvjs_filepathServer  =  myServerPathToFloorplans;

	cvjs_floorplanUrl = floorplanUrl;

	rest_contentUserName = username;
	rest_contentPassword = password;


	cvjs_fileLocationAbsolutePathsOnly = false;
}



/**
 * Set up the location of folder in server in which files are upload to and accessed from
 * @param {string} myServerPathToFloorplans - full path to the location of the drawings (typically  /home/myserver/drawings/floorplans/)
 * @param {string} floorplanPath - the relative location of floorplans relative to my document (typically ../drawings/floorplans/)
 * @param {string} username - username for floorplans drawings folder, "" if none
 * @param {string} password - password for floorplans drawings folder, "" if none
 */
function cvjs_setServerFileLocation_AbsolutePaths(myServerPathToFloorplans, floorplanUrl, username, password ){

	cvjs_floorplansRelativePath  = "";
	cvjs_filepathServer  =  myServerPathToFloorplans;

	cvjs_floorplanUrl = floorplanUrl;

	rest_contentUserName = username;
	rest_contentPassword = password;

	cvjs_fileLocationAbsolutePathsOnly = true;

}






function cvjs_exitServerFileLoadModal(){

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;

	jQuery( "#cvjs_serverFileLoadModal" ).hide();
	jQuery( "#cvjs_serverFileLoadModal_table" ).hide(); 

}


function cvjs_callServerForDataOverlayProcessing(){

	//console.log("Here we will do a server call to build data overlays on floorplan objects - if available -");
}



function cvjs_loadFileWithDataOverlays(fileName, row){

	var filePathName = "";

	//console.log("loading of file, if there are dataoverlays we load those too! "+fileName);

	var fileExtension =  fileName.substring(fileName.lastIndexOf('.')+1) ;
	fileExtensionLower = fileExtension.toLowerCase();

	if (fileExtensionLower.indexOf("dwg")==0 || fileExtensionLower.indexOf("dwf")==0 || fileExtensionLower.indexOf("dxf")==0 || fileExtensionLower.indexOf("dgn")==0 || fileExtensionLower.indexOf("pcf")==0){
		fileNamePath = cvjs_floorplanUrl+fileName;
	}
	else{
		if (cvjs_fileLocationAbsolutePathsOnly)  // we have not specified a path
			fileNamePath = cvjs_floorplanUrl+fileName;
		else
			fileNamePath = cvjs_floorplansRelativePath+fileName;
	}

	
	// 3.3.05f   - in case of custom modal
	if (cvjs_CompareFiles_CustomFileModalContent_flag){
		// the file-name is directly from the array
		fileNamePath = cvjs_CompareFiles_CustomFileModalContent[row-1].url;
	}
	
	
	
	//console.log("before loadDrawing "+floorPlan_div+" "+fileNamePath);
	// we hide everything in trial mode

	if (cvjs_fileLoadTrialMode){
			filesonserver = 0;
			for (var i=cvjs_maxfiles;i>1;i--){

				var l1 = "1floor"+i;
				var l2 = "2floor"+i;

				jQuery("#"+l1).hide();
				jQuery("#"+l2).hide();
			}
	}

	// load file
	if (cvjs_filename_list_status == 1){

		// here we need to reset all page change layout, etc.  2017-08-07
		// VVVVVV
		
		//////  2018-05-09  we clear the current redline before loading
		cvjs_clearCurrentRedline(floorplan_div_Array[cvjs_active_floorplan_div_nr]);

		

		rest_nname[cvjs_active_floorplan_div_nr ].length = 0;

		cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], fileNamePath );
	}

	
	
	
	
	
	
	// load redline
	if (cvjs_filename_list_status == 2){
		cvjs_clearDrawingStickyNotes();
		cvjs_StickyNoteRedlineUrl = cvjs_redlinesRelativePath+fileName;

		if (cvjs_redlinesAbsolutePathOnly) f_path = cvjs_filepathServerRedlines;    // if only absolute paths, set f_path to the absolute path
//		if (cvjs_redlinesAbsolutePathOnly) cvjs_StickyNoteRedlineUrl = cvjs_filepathServerRedlines + fileName;    // if only absolute paths, set f_path to the absolute path



			 ///     ZZZZZZZ CLEAR REDLINE LOAD
			 //		console.log(vqRedlines.length)
			 // we clear everything if we are not putting redlines on top of each other
			 if (cvjs_loadMultipleRedlinesStickyNotes == false){


					for (i=0; i<vqRedlines.length; i++){
			if (cvjs_debug) 			console.log(i+" remove red"+vqRedlines[i]);
						vqRedlines[i].remove();
					}
					for (i=0; i<vqStickyNotes.length; i++){
			if (cvjs_debug) 			console.log(i+"  "+vqStickyNotes[i]+" remove note");
						vqStickyNotes[i].remove();
					}


					// 2017-07-10
					cvjs_stickyNotesRedlines = [];
					cvjs_stickyNotesRedlines.length = 0;

			if (cvjs_debug) 		console.log("cvjs_stickynote "+cvjs_stickynote);

					cvjs_deleteAllStickyNotes();
					cvjs_deleteAllRedlines();
					vqRedlines.length=0;
					vqStickyNotes.length=0;


			}

		//console.log("loading "+cvjs_StickyNoteRedlineUrl);
		cvjs_loadStickyNotesRedlines(floorplan_div_Array[cvjs_active_floorplan_div_nr]);

	}

	
	// load spaces
	// 3.3.07a
	if (cvjs_filename_list_status == 3){
		cvjs_SpaceObjectUrl = cvjs_spaceObjectsRelativePath + fileName;
		if (cvjs_debug) console.log("loading "+cvjs_SpaceObjectUrl);	
		cvjs_loadSpaceObjects(floorplan_div_Array[cvjs_active_floorplan_div_nr]);	
	}
		
	
	
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
	jQuery('#cvjs_serverFileLoadModal').hide();
	jQuery( "#cvjs_serverFileLoadModal_table" ).hide();
}



var fileload_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];


var cvjs_fileLoadToServer = false;



/**
 * Enables bitmaps to be loaded via server handler instead of direct load
 * @param {boolean} mode - true for bitmap file load through server handler
 */

function cvjs_loadBitmapsViaServerPath(mode){

	cvjs_bitmapFileNameIsServerPath_flag = mode;

}






/**
 * Calls the file manager, set the enable file manager load to true prior to calling this method
 * @param {string} floorplan_div - the div of the CADViewerJS canvas
 */

function cvjs_openFileLoadToServer(floorplan_div){


	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;


	// 3.0.15c   - add "_svg" to div, if called through external API
	if (cvjs_debug) console.log(floorplan_div.lastIndexOf("_svg")+"  "+(floorplan_div.length-4));
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	
	
	cvjs_convertSpaceObject = false;


		cvjs_filename_list_status = 1;
		filesonserver = 0;



		if (!cvjs_fileLoadToServer){
			cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], languageTable.languages[cvjs_currentLanguage].InfoMessageModal.FileLoadThroughApp);
			return;
		}

		if (fileload_offset_flag[cvjs_active_floorplan_div_nr]){
			fileload_offset_flag[cvjs_active_floorplan_div_nr] = false;
			// 3.1.21j .appendTo('body');
			jQuery("#cvjs_serverFileLoadModal").css({position: "fixed"});
			jQuery("#cvjs_serverFileLoadModal").offset({left:150+jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position().left, top: 50+jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position().top});
		}

		jQuery('#SelectFloorPlan').hide();
		jQuery('#SelectFloorPlanPanel').hide();

		jQuery('#SelectFloorPlanEdit').hide();
		jQuery('#SelectFloorPlanPanelEdit').hide();

		jQuery( "#cvjs_cvRoomTextLayersOnLoad").html("");


		jQuery( "#serverFileModalName" ).html(languageTable.languages[cvjs_currentLanguage].FileLoadModal.Header);
		jQuery( "#addFloorPlanTable").show();
		jQuery( "#add_br_not_addFloorPlanTable").show();   //
	
		// 6.2.43
		//var mwidth = jQuery("#id_filemodal_hr").css("width");
		//var mmwidth = jQuery("#id__filemodal_horizontal_line").css("width")
							
		jQuery( "#addRedlineTable").hide();
		jQuery( "#infoFileModalNameDrawing" ).html(languageTable.languages[cvjs_currentLanguage].FileLoadModal.DrawingFilename);

		jQuery( "#editFloorPlanInfoText" ).html(languageTable.languages[cvjs_currentLanguage].FileLoadModal.EditFloorplanInfo);
		jQuery( "#infoFloorPlanInfoText" ).html(languageTable.languages[cvjs_currentLanguage].FileLoadModal.DrawingFilename);


		cvjs_initializeFileSelector();
		//jQuery('#cvjs_serverFileLoadModal').modal('show');

}


var cvjs_fileLoadTrialMode = false;

function cvjs_setFileLoadTrialMode(loadMode){

	cvjs_fileLoadTrialMode = loadMode;
}


var filenames_data_url_name    = "filenames.rw";


function cvjs_loadServerFileList(mode){


//console.log("cvjs_loadServerFileList");

// load up the array with the file shortnames

// mode = 1  Floorplan Files
// mode = 2  Redlines


// 3.3.05b
if (cvjs_CompareFiles_CustomFileModalContent_flag){
		
	filesonserver = 0;
	//window.alert("we manually build the fileName list and abort "+cvjs_CompareFiles_CustomFileModalContent.length);
	
	for (i=0; i<cvjs_CompareFiles_CustomFileModalContent.length; i++){
	
//		fnArr_listdirectory_ShortName[i] = cvjs_CompareFiles_CustomFileModalContent[i].filename;
//		fnArr_listdirectory_FileName[i] = cvjs_CompareFiles_CustomFileModalContent[i].url.substring(cvjs_CompareFiles_CustomFileModalContent[i].url.lastIndexOf("/")+1);;

		// 3.3.05f
		fnArr_listdirectory_ShortName[i] = cvjs_CompareFiles_CustomFileModalContent[i].filenameText;
		fnArr_listdirectory_FileName[i] = cvjs_CompareFiles_CustomFileModalContent[i].filename;	
	}


	for (i=0; i<fnArr_listdirectory_FileName.length; i++){
	
		fnArr_ShortName[i] = fnArr_listdirectory_ShortName[i];
		fnArr_FileName[i] = fnArr_listdirectory_FileName[i];

		var j = i+1;
		var l1 = "1floor"+j+"_2";
		var l2 = "2floor"+j+"_4";

		var l3 = "1floor"+j+"_1";
		var l4 = "2floor"+j+"_1";

//console.log("l3="+l3+" fnArr_FileName[i]="+fnArr_listdirectory_FileName[i] +"   "+fnArr_listdirectory_ShortName[i] );

		jQuery("#"+l1).html(fnArr_listdirectory_FileName[i]);
		jQuery("#"+l2).html(fnArr_listdirectory_FileName[i]);

		jQuery("#"+l3).html(fnArr_listdirectory_ShortName[i]);
		jQuery("#"+l4).html(fnArr_listdirectory_ShortName[i]);

		filesonserver++;
	}
	
	
	
	
	for (var i=0;i<filesonserver;i++){
		var j = i+1;
		var l1 = "1floor"+j;
		var l2 = "2floor"+j;
		jQuery("#"+l1).show();
		jQuery("#"+l2).show();

	}

// hide objects acording to how many on server
	for (var i=cvjs_maxfiles;i>filesonserver;i--){

		var l1 = "1floor"+i;
		var l2 = "2floor"+i;
//console.log("hide i="+i+" l1="+l1+" l2="+l2);
		jQuery("#"+l1).hide();
		jQuery("#"+l2).hide();

	}

console.log("cvjs_CompareFiles_CustomFileModalContent_flag before show!");

	jQuery('#SelectFloorPlan').show();
	jQuery('#SelectFloorPlanPanel').show();

	jQuery('#cvjs_serverFileLoadModal').show();
	jQuery('#cvjs_serverFileLoadModal_table').show();
	
	
	return;
}
// 3.3.05b




var file;



if (mode==1){

	var fpath = "";
	var flagloop = true;
	var counter1 = 0;
	var temp = cvjs_floorplansRelativePath;
		while(flagloop){
			if (temp.indexOf("../")==0 ){
				temp = temp.substring(3);
				counter1++;

			}
			else
				flagloop=false;
		}

		flagloop = true;

	var counter2 = 0;
		temp = cvjs_phpPath;
		while(flagloop){
			if (temp.indexOf("../")==0 ){
				temp = temp.substring(3);
				counter2++;

			}
			else
				flagloop=false;
		}

	if (counter2>1) {
		fpath =	cvjs_floorplansRelativePath.substring((counter2-1)*3);
	}
	else
		fpath =	cvjs_floorplansRelativePath;


	if (cvjs_fileLocationAbsolutePathsOnly) fpath = cvjs_floorplanUrl;    // if only absolute paths, set f_path to the absolute path


	//file =  cvjs_phpPath +"load-file.php?file="+ cvjs_floorplansRelativePath+filenames_data_url_name;
//	file =  cvjs_phpPath +"load-file.php?file="+ fpath+filenames_data_url_name;
	file =  cvjs_phpPath +cvjs_serverLoadFileController+"?file="+ fpath+filenames_data_url_name;

	if (cvjs_loadFileControllerFlag)   // servlet load
		file =  cvjs_serverHandlersPath +cvjs_serverLoadFileController+"?file="+ fpath+filenames_data_url_name;

if (cvjs_debug) 	console.log(" cvjs_loadServerFileList mode 1 "+file);


}




if (mode==2){

	var fpath = "";
	var flagloop = true;
	var counter1 = 0;
	var temp = cvjs_redlinesRelativePath;
		while(flagloop){
			if (temp.indexOf("../")==0 ){
				temp = temp.substring(3);
				counter1++;

			}
			else
				flagloop=false;
		}

		flagloop = true;
	var counter2 = 0;
		temp = cvjs_phpPath;
		while(flagloop){
			if (temp.indexOf("../")==0 ){
				temp = temp.substring(3);
				counter2++;

			}
			else
				flagloop=false;
		}

	if (counter2>1) {
		fpath =	cvjs_redlinesRelativePath.substring((counter2-1)*3);
	}
	else
		fpath =	cvjs_redlinesRelativePath;

if (cvjs_debug) console.log("phpPath="+cvjs_phpPath+" 1 cvjs_loadServerFileList fpath="+fpath)


	if (cvjs_redlinesAbsolutePathOnly)
		fpath = cvjs_filepathServerRedlines;
	else
		fpath = cvjs_redlinesRelativePath;    // if only absolute paths, set f_path to the absolute path


if (cvjs_debug) console.log("ZZ"+cvjs_redlinesAbsolutePathOnly+"  "+cvjs_redlinesRelativePath+"  "+cvjs_filepathServerRedlines);



if (cvjs_debug) console.log(" 2 cvjs_loadServerFileList fpath="+fpath);    // if only absolute paths, set f_path to the absolute path

//	file =  cvjs_phpPath +"load-file.php?file="+ fpath+filenames_data_url_name;
	file =  cvjs_phpPath +cvjs_serverLoadFileController+"?file="+ fpath+filenames_data_url_name;

//	cvjs_filepathServerRedlines

	if (cvjs_loadRedlinesFileControllerFlag) 
		file =  cvjs_serverHandlersPath +cvjs_serverLoadFileControllerRedlines+"?file="+ fpath+filenames_data_url_name;

if (cvjs_debug) console.log("ajax call: mode 2 file="+file);    // if only absolute paths, set f_path to the absolute path


}



// 3.3.07a
if (mode==3){

	var fpath = "";
	var flagloop = true;
	var counter1 = 0;
	var temp = cvjs_spaceObjectsRelativePath;
		while(flagloop){
			if (temp.indexOf("../")==0 ){
				temp = temp.substring(3);
				counter1++;

			}
			else
				flagloop=false;
		}

		flagloop = true;
	var counter2 = 0;
		temp = cvjs_phpPath;
		while(flagloop){
			if (temp.indexOf("../")==0 ){
				temp = temp.substring(3);
				counter2++;

			}
			else
				flagloop=false;
		}

	if (counter2>1) {
		fpath =	cvjs_spaceObjectsRelativePath.substring((counter2-1)*3);
	}
	else
		fpath =	cvjs_spaceObjectsRelativePath;

if (cvjs_debug) console.log("phpPath="+cvjs_phpPath+" 1 cvjs_loadServerFileList fpath="+fpath)


	if (cvjs_spaceObjectsAbsolutePathOnly)
		fpath = cvjs_filepathServerSpaceObjects;
	else
		fpath = cvjs_spaceObjectsRelativePath;    // if only absolute paths, set f_path to the absolute path


if (cvjs_debug) console.log("ZZ"+cvjs_spaceObjectsAbsolutePathOnly+"  "+cvjs_spaceObjectsRelativePath+"  "+cvjs_filepathServerSpaceObjects);


if (cvjs_debug) console.log(" 2 cvjs_loadServerFileList fpath="+fpath);    // if only absolute paths, set f_path to the absolute path

//	file =  cvjs_phpPath +"load-file.php?file="+ fpath+filenames_data_url_name;
	file =  cvjs_phpPath +cvjs_serverLoadFileController+"?file="+ fpath+filenames_data_url_name;

//	cvjs_filepathServerRedlines

	if (cvjs_loadRedlinesFileControllerFlag) 
		file =  cvjs_serverHandlersPath +cvjs_serverLoadFileControllerRedlines+"?file="+ fpath+filenames_data_url_name;

if (cvjs_debug) console.log("ajax call: mode 3 file="+file);    // if only absolute paths, set f_path to the absolute path


}
// 3.3.07a


//console.log("file="+file);




jQuery.ajax({
  url:file,
  type: 'post',
  cache: false,
  success: function(binArray2){
		var version = binArray2.substring(0,6);  // (RW-2)

		fnArr_FileName.length = 0;
		fnArr_ShortName.length = 0;

if (cvjs_debug) console.log("loaded from server RW-2:"+binArray2);

		if (version.indexOf("RW")>=0){

	// use binArray to populate all arrays

			var arr_s = binArray2.split("|");
			var index = arr_s[1];
			var arr_cx = arr_s[2].replace(/&amp;/g,"&");
			arr_cx = arr_cx.split(";");

			for (var i=0; i<index; i++){
				fnArr_FileName[i] = arr_cx[i].replace(/&/g,"&amp;");
			}
			arr_cx = arr_s[3].replace(/&amp;/g,"&");
			arr_cx = arr_cx.split(";");

			for (var i=0; i<index; i++){
				fnArr_ShortName[i] = arr_cx[i].replace(/&/g,"&amp;");
			}

		}


// call the php file that displays the server content

//CCCC


	var finalUrl =	""; //2017-07-11  cvjs_serverHandlersPath + cvjs_serverListDirectoryController;

	// data
	var filelist_data = {};

	if (mode == 1){
		finalUrl =	cvjs_serverHandlersPath + cvjs_serverListDirectoryController;  // 2017-07-11

		filelist_data['directory'] = cvjs_filepathServer;
		filelist_data['directoryurl'] = cvjs_floorplansRelativePath;
		//console.log(finalUrl+"  "+cvjs_filepathServer+" "+cvjs_floorplansRelativePath);
	}


	if (mode == 2){

		finalUrl =	cvjs_serverHandlersPath + cvjs_serverListDirectoryControllerRedlines;  // 2017-07-11

		filelist_data['directory'] = cvjs_filepathServerRedlines;
		filelist_data['directoryurl'] = cvjs_redlinesRelativePath;

		//console.log(finalUrl+"  "+cvjs_redlinesRelativePath+"  "+cvjs_redlinesRelativePath);
	}

	
	
	// 3.3.07a
	if (mode == 3){

		finalUrl =	cvjs_serverHandlersPath + cvjs_serverListDirectoryControllerRedlines;  // 2017-07-11

		filelist_data['directory'] = cvjs_filepathServerSpaceObjects;
		filelist_data['directoryurl'] = cvjs_spaceObjectsRelativePath;

		//console.log(finalUrl+"  "+cvjs_redlinesRelativePath+"  "+cvjs_redlinesRelativePath);
	}
	// 3.3.07a

	
	
	

if (cvjs_debug) console.log("file list call:"+finalUrl);

	jQuery.ajax({
	  url:finalUrl,
	  type: 'post',
	  data: filelist_data,
	  success: function(html){
if (cvjs_debug) console.log("server file list:"+html);

			var str = html;
			var n = str.split("<br>");

			// initialize number of files
			filesonserver=0;

//console.log("n="+n+"   fnArr_FileName.length="+ fnArr_FileName.length);

			var test_str = "";
				for (var jj=0;jj<fnArr_FileName.length;jj++){
					test_str = test_str + " " + fnArr_FileName[jj];
				}

if (cvjs_debug) console.log("This is empty if there is no .rw file on server test_str="+test_str);

fnArr_listdirectory_FileName = [];
fnArr_listdirectory_ShortName =[];
// list filenames on server
			if (n.length >= 2){
if (cvjs_debug) console.log("n.length="+n.length);
				for (var i=0;i<n.length-1;i++){
					fnArr_listdirectory_FileName[i] = n[i+1];
					var fname = n[i+1].split(".");
					fnArr_listdirectory_ShortName[i] = fname[0];
					//console.log("On Server fnArr_listdirectory_FileName="+i+"  "+n[i+1]+"  "+fname[0]);
				}
			}

//console.log("size of fnArr_FileName.length "+fnArr_FileName.length);

			for (i=0; i<fnArr_listdirectory_FileName.length; i++){
				for (j=0; j<fnArr_FileName.length; j++){
					var rep_str = fnArr_listdirectory_FileName[i];  // my element  2017-08-22
					var res_str = rep_str.replace(/&/g,"&amp;");
					//console.log("before check "+i+" "+j+" fileName "+fnArr_FileName[j]+"  res_str "+res_str);
					if (res_str.indexOf(fnArr_FileName[j])>=0 && res_str.length == fnArr_FileName[j].length){
					// the file on the server has a filename in the list
//console.log("we are updating "+fnArr_listdirectory_ShortName[i]+" to:"+fnArr_ShortName[j]);
						fnArr_listdirectory_ShortName[i] = fnArr_ShortName[j];
					}
				}
			}

			// we change the arrays

			//fnArr_ShortName = fnArr_listdirectory_ShortName;
			//fnArr_FileName = fnArr_listdirectory_FileName;

			for (i=0; i<fnArr_listdirectory_FileName.length; i++){

				fnArr_ShortName[i] = fnArr_listdirectory_ShortName[i];
				fnArr_FileName[i] = fnArr_listdirectory_FileName[i];

				var j = i+1;
				var l1 = "1floor"+j+"_2";
				var l2 = "2floor"+j+"_4";

				var l3 = "1floor"+j+"_1";
				var l4 = "2floor"+j+"_1";

console.log("l3="+l3+" fnArr_FileName[i]="+fnArr_listdirectory_FileName[i] +"   "+fnArr_listdirectory_ShortName[i] );

				jQuery("#"+l1).html(fnArr_listdirectory_FileName[i]);
				jQuery("#"+l2).html(fnArr_listdirectory_FileName[i]);

				jQuery("#"+l3).html(fnArr_listdirectory_ShortName[i]);
				jQuery("#"+l4).html(fnArr_listdirectory_ShortName[i]);

				filesonserver++;
			}

			// TRIAL FILE LOAD MODE, we simply set filesonserver to zero
			// Trialmode for fileload only, redlines are free
			if (cvjs_fileLoadTrialMode  && mode==1){

				filesonserver = 0;
			}


//console.log("we are done filesonserver="+filesonserver);

// show/hide objects in the file list according to how many files on server

			for (var i=0;i<filesonserver;i++){
				var j = i+1;
				var l1 = "1floor"+j;
				var l2 = "2floor"+j;
				jQuery("#"+l1).show();
				jQuery("#"+l2).show();

			}

// hide objects acording to how many on server
			for (var i=cvjs_maxfiles;i>filesonserver;i--){

				var l1 = "1floor"+i;
				var l2 = "2floor"+i;
//console.log("hide i="+i+" l1="+l1+" l2="+l2);
				jQuery("#"+l1).hide();
				jQuery("#"+l2).hide();

			}

//console.log("before show!");

			jQuery('#SelectFloorPlan').show();
			jQuery('#SelectFloorPlanPanel').show();

//GGGGG
		  }  // end success
		  ,error:function(data_e){
			  console.log("Error "+data_e);
			return;}


		});


		// we end up with displaying the file modal

		jQuery('#cvjs_serverFileLoadModal').show();
		jQuery('#cvjs_serverFileLoadModal_table').show();


	  }  // end success load file names

	});

}


function positionPopupUnlink(){

	if (active_modal == 1){
   		// do nothing

   	}
   	else{

   		 active_modal = 1;


		  if(!jQuery("#unlink_form").is(':visible')){
			return;
		  }
		  jQuery("#unlink_form").css({
			  left: 225,
			  top: 150,
			  position:'absolute'
		  });


		   jQuery('#unlink_Modal_header').html(languageTable.languages[cvjs_currentLanguage].UnlinkModal.Header);

		   jQuery('#unlink_modal_file').html(languageTable.languages[cvjs_currentLanguage].UnlinkModal.Text1+" <strong>"+delete_filename+"</strong>. "+languageTable.languages[cvjs_currentLanguage].UnlinkModal.Text2);

		//   jQuery('#unlink_modal_file').html("Do you want to unlink all locations in drawing,<strong> "+delete_filename+"</strong>?");

		// jQuery('#unlink_modal_file_name').html(delete_filename+"?");

		  // Set opacity of SelectFloorPlanPanelEdit and block interaction
		  jQuery('#SelectFloorPlanPanelEdit').css("filter", "alpha(opacity=40)");
		  // filter:alpha(opacity=40);
		  jQuery('#SelectFloorPlanPanelEdit').css("opacity", "0.40");

	}
}




function positionPopupClear(){

	if (active_modal == 1){
   		// do nothing

   	}
   	else{

   		 active_modal = 1;

	  if(!jQuery("#clear_form").is(':visible')){
		return;
	  }
	  jQuery("#clear_form").css({
		  left: 225,
		  top: 150,
		  position:'absolute'
	  });


	   jQuery('#clear_Modal_header').html(languageTable.languages[cvjs_currentLanguage].ClearModal.Header);

	   jQuery('#clear_modal_file').html(languageTable.languages[cvjs_currentLanguage].ClearModal.Text1+" <strong>"+delete_filename+"</strong>.");


	//   jQuery('#clear_modal_file').html("Do you want to clear all locations in drawing,<strong> "+delete_filename+"</strong>?");

	 //jQuery('#clear_modal_file_name').html(delete_filename+"?");

	  // Set opacity of SelectFloorPlanPanelEdit and block interaction
	  jQuery('#SelectFloorPlanPanelEdit').css("filter", "alpha(opacity=40)");
	  // filter:alpha(opacity=40);
	  jQuery('#SelectFloorPlanPanelEdit').css("opacity", "0.40");

	}
}



function positionPopup(){


	if (active_modal == 1){
   		// do nothing

   	}
   	else{

   		 active_modal = 1;

		  if(!jQuery("#delete_form").is(':visible')){
			return;
		  }
		  jQuery("#delete_form").css({
			  left: 225,
			  top: 150,
			  position:'absolute'
		  });


		   jQuery('#delete_Modal_header').html(languageTable.languages[cvjs_currentLanguage].DeleteModal.Header);

		jQuery('#delete_modal_file_name1').html(languageTable.languages[cvjs_currentLanguage].DeleteModal.Text1+" <strong>"+delete_filename+"</strong> "+languageTable.languages[cvjs_currentLanguage].DeleteModal.Text2);

		// jQuery('#delete_modal_file_name1').html("Deleting, <strong>"+delete_filename+"</strong>, will disable access to the floor plan, <strong> "+delete_floor+"</strong>, for all users.");

		 //jQuery('#delete_modal_file_name2').html("will disable access to the floor plan for all users.");


		  // Set opacity of SelectFloorPlanPanelEdit and block interaction
		  jQuery('#SelectFloorPlanPanelEdit').css("filter", "alpha(opacity=40)");
		  // filter:alpha(opacity=40);
		  jQuery('#SelectFloorPlanPanelEdit').css("opacity", "0.40");

	}
}


function delete_file_and_overlay(filename){

var finalUrl;

if (cvjs_filename_list_status == 1){




	var fpath = "";
	var flagloop = true;
	var counter1 = 0;
	var temp = cvjs_floorplansRelativePath;
		while(flagloop){
			if (temp.indexOf("../")==0 ){
				temp = temp.substring(3);
				counter1++;

			}
			else
				flagloop=false;
		}

		flagloop = true;

	var counter2 = 0;
		temp = cvjs_phpPath;
		while(flagloop){
			if (temp.indexOf("../")==0 ){
				temp = temp.substring(3);
				counter2++;

			}
			else
				flagloop=false;
		}

	if (counter2>1) {
		fpath =	cvjs_floorplansRelativePath.substring((counter2-1)*3);
	}
	else
		fpath =	cvjs_floorplansRelativePath;

	if (cvjs_fileLocationAbsolutePathsOnly) fpath = cvjs_filepathServer;


	finalUrl = cvjs_phpPath+'delete-file.php?file='+encodeURIComponent(fpath+filename);


//window.alert("1 delete "+finalUrl);

//	finalUrl = cvjs_phpPath+'delete-file.php?file='+encodeURIComponent(cvjs_floorplansRelativePath+filename);

}
if (cvjs_filename_list_status == 2){





	var fpath = "";
	var flagloop = true;
	var counter1 = 0;
	var temp = cvjs_redlinesRelativePath;
		while(flagloop){
			if (temp.indexOf("../")==0 ){
				temp = temp.substring(3);
				counter1++;

			}
			else
				flagloop=false;
		}

		flagloop = true;
	var counter2 = 0;
		temp = cvjs_phpPath;
		while(flagloop){
			if (temp.indexOf("../")==0 ){
				temp = temp.substring(3);
				counter2++;

			}
			else
				flagloop=false;
		}

	if (counter2>1) {
		fpath =	cvjs_redlinesRelativePath.substring((counter2-1)*3);
	}
	else
		fpath =	cvjs_redlinesRelativePath;


	if (cvjs_redlinesAbsolutePathOnly) fpath = cvjs_filepathServerRedlines;    // if only absolute paths, set f_path to the absolute path

	finalUrl = cvjs_phpPath+'delete-file.php?file='+encodeURIComponent(fpath+filename);

//	finalUrl = cvjs_phpPath+'delete-file.php?file='+encodeURIComponent(cvjs_redlinesRelativePath+filename);

}


	jQuery.ajax({
	  url:finalUrl,
	  cache: false,
	  success: function(html){
	  }  // end success

	});

/*
	//for (var i=0; i<filesonserver; i++){

console.log("deleting name from list!!! "+filename);

	var i=0;
	while (i<filesonserver){
		if (filename.indexOf(fnArr_listdirectory_FileName[i])==0 && filename.length == fnArr_listdirectory_FileName[i].length ){

console.log("deleting name from list!!! "+filename);
			for (var j=0; j<filesonserver-1; j++){
				fnArr_listdirectory_FileName[j]= fnArr_listdirectory_FileName[j+1];
				fnArr_listdirectory_ShortName[j]= fnArr_listdirectory_ShortName[j+1];
			}
			i = filesonserver;
			filesonserver--;
		}
		i++;
	}

*/

//console.log(" We want to delete name from list!!! "+filename);


	var i=0;
	while (i<filesonserver){
		if (filename.indexOf(fnArr_FileName[i])==0 && filename.length == fnArr_FileName[i].length ){

//console.log("deletingarray number"+i+" "+filename+"  from list "+fnArr_FileName[i]);
			for (var j=i; j<filesonserver-1; j++){
				fnArr_FileName[j]= fnArr_FileName[j+1];
				fnArr_ShortName[j]= fnArr_ShortName[j+1];
			}
			i = filesonserver;
			filesonserver--;
		}
		i++;
	}



	// update filename_data_url
	save_filename_list();

}


var cvjs_redlinesAbsolutePathOnly = false;

/**
 * Sets the relative path for the redlines location
 * @param {string} serverPath - absolute path to the redlines location, "/home/cadviewerjs/redlines/"
 * @param {string} path - path to the redlines location, default is "../redlines"
 */

function cvjs_setRedlinesRelativePath(path, serverPath){

	cvjs_filepathServerRedlines = serverPath;
	cvjs_redlinesRelativePath = path;
	cvjs_redlinesAbsolutePathOnly = false;
}


/**
 * Sets the absolute path for the redlines location, relative path is not used
 * @param {string} path - abslute URL to the redlines location
 * @param {string} serverPath - absolute path to the redlines location, "/home/cadviewerjs/redlines/"
 */
function cvjs_setRedlinesAbsolutePath(path,serverPath){

	cvjs_filepathServerRedlines = serverPath;
	cvjs_redlinesRelativePath = path;
	cvjs_redlinesAbsolutePathOnly = true;

}


/**
 * Opens the Redline Save Modal for server interaction with redlines
 * @param {string} floorplan-div - the ID of the Element in which CADViewer is running
 */

function cvjs_openRedlineSaveModal(floorplan_div){


	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;

if (cvjs_debug) 	console.log("cvjs_openRedlineSaveModal");


	//cvjs_fileLoaderRedlineMode = true;
	cvjs_fileSaverRedlineMode = true;   // 2017-07-11

	cvjs_filename_list_status = 2;
	filesonserver = 0;


	if (fileload_offset_flag[cvjs_active_floorplan_div_nr]){
		fileload_offset_flag[cvjs_active_floorplan_div_nr] = false;
		// 3.1.21j .appendTo('body');
		jQuery("#cvjs_serverFileLoadModal").css({position: "fixed"});
		jQuery("#cvjs_serverFileLoadModal").offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});
	}

	jQuery('#attention_bitmap').hide();

	jQuery('#SelectFloorPlan').hide();
	jQuery('#SelectFloorPlanPanel').hide();

	jQuery('#SelectFloorPlanEdit').hide();
	jQuery('#SelectFloorPlanPanelEdit').hide();

	jQuery( "#cvjs_cvRoomTextLayersOnLoad").html("");


	jQuery( "#serverFileModalName" ).html(languageTable.languages[cvjs_currentLanguage].SaveRedlineModal.Header);
	jQuery( "#addFloorPlanTable").hide();
	jQuery( "#add_br_not_addFloorPlanTable").hide();
	
	
	jQuery( "#addRedlineTable").show();
	jQuery( "#infoFileModalNameDrawing" ).html(languageTable.languages[cvjs_currentLanguage].SaveRedlineModal.RedlineFilename);


	jQuery( "#editFloorPlanInfoText" ).html(languageTable.languages[cvjs_currentLanguage].SaveRedlineModal.EditRedlineInfo);
	jQuery( "#infoFloorPlanInfoText" ).html(languageTable.languages[cvjs_currentLanguage].SaveRedlineModal.RedlineFilename);


	var textstring = "<input id=\"uploadredline_name_tag\" type=\"text3_red\" class=\"name_tags2_red\" value=\""+"redline-01.js"+"\">";
	jQuery('#inputRedlineFileName').html(textstring);

	//jQuery('#cvjs_serverFileLoadModal').show();


if (cvjs_debug) console.log("cvjs_openRedlineSaveModal cvjs_loadServerFileList(2)");
 	cvjs_loadServerFileList(2);

}

/**
 * Opens the Redline Load Modal for server interaction with redlines
 * @param {string} floorplan-div - the ID of the Element in which CADViewer is running
 */

function cvjs_openRedlineLoadModal(floorplan_div){

	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;


if (cvjs_debug) 	console.log("cvjs_openRedlineLoadModal ");

	cvjs_fileLoaderRedlineMode = true;


	cvjs_filename_list_status = 2;
	filesonserver = 0;



	if (fileload_offset_flag[cvjs_active_floorplan_div_nr]){
		fileload_offset_flag[cvjs_active_floorplan_div_nr] = false;
		// 3.1.21j .appendTo('body');
		jQuery("#cvjs_serverFileLoadModal").css({position: "fixed"});
		jQuery("#cvjs_serverFileLoadModal").offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});
	}


	jQuery('#attention_bitmap').hide();

	jQuery('#SelectFloorPlan').hide();
	jQuery('#SelectFloorPlanPanel').hide();

	jQuery('#SelectFloorPlanEdit').hide();
	jQuery('#SelectFloorPlanPanelEdit').hide();

	jQuery( "#cvjs_cvRoomTextLayersOnLoad").html("");


	jQuery( "#serverFileModalName" ).html(languageTable.languages[cvjs_currentLanguage].OpenRedlineModal.Header);
	jQuery( "#addFloorPlanTable").hide();
	jQuery( "#add_br_not_addFloorPlanTable").hide();

	jQuery( "#addRedlineTable").hide();
	jQuery( "#infoFileModalNameDrawing" ).html(languageTable.languages[cvjs_currentLanguage].OpenRedlineModal.RedlineFilename);


	jQuery( "#editFloorPlanInfoText" ).html(languageTable.languages[cvjs_currentLanguage].OpenRedlineModal.EditRedlineInfo);
	jQuery( "#infoFloorPlanInfoText" ).html(languageTable.languages[cvjs_currentLanguage].OpenRedlineModal.RedlineFilename);

/*
	jQuery( "#serverFileModalName" ).html("CADViewer - Open Redline");
	jQuery( "#addFloorPlanTable").hide();
	jQuery( "#addRedlineTable").hide();
	jQuery( "#infoFileModalNameDrawing" ).html("REDLINE / FILENAME");


	jQuery( "#editFloorPlanInfoText" ).html("Edit Redline Info");
	jQuery( "#infoFloorPlanInfoText" ).html("REDLINE / FILENAME");
*/

if (cvjs_debug) console.log("cvjs_openRedlineLoadModal cvjs_loadServerFileList(2)");

 	cvjs_loadServerFileList(2);
}



var blackwhiteMode = 0;
var cvjs_original_background = "";


/**
 * Toggle the color settings Black /White
 * @param {string} floorplan-div - the ID of the Element in which CADViewer is running
 */

function cvjs_toggleBlackWhite(floorplan_div){

	//window.alert(currentLoadedDrawingFullName+"   "+floorplan_div);

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (cvjs_debug) console.log(floorplan_div.lastIndexOf("_svg")+"  "+(floorplan_div.length-4));
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	
	
	var last3 = currentLoadedDrawingFullName.slice(-2);

	blackwhiteMode++;
	if (blackwhiteMode<1 || blackwhiteMode>3) blackwhiteMode = 1;

	if (last3.indexOf("js")>0 ){

		if (blackwhiteMode==1) {
			cvjs_original_background = cvjs_currentBackgroundColor[cvjs_active_floorplan_div_nr].toString();
			//console.log("original"+cvjs_original_background+"  "+cvjs_currentBackgroundColor+" to string"+cvjs_currentBackgroundColor.toString());
			cvjs_colorAllLayersInDrawing_InvertBackground("000000", floorplan_div);

		}
		if (blackwhiteMode==2) cvjs_colorAllLayersInDrawing_InvertBackground("FFFFFF", floorplan_div);
		if (blackwhiteMode==3) {
			cvjs_setBackgroundColorHex(cvjs_original_background, floorplan_div);
			//console.log(currentLoadedDrawingFullName);
			cvjs_LoadDrawing(floorplan_div, currentLoadedDrawingFullName);
		}
	}
	else{
		// we are loading something converted into svg

		if (blackwhiteMode==1){
			cvjs_original_background = cvjs_currentBackgroundColor[cvjs_active_floorplan_div_nr].toString();
			//console.log("original"+cvjs_original_background+"  "+cvjs_currentBackgroundColor+" to string"+cvjs_currentBackgroundColor.toString());
			cvjs_colorAllLayersInDrawing_InvertBackground_SVG("000000", blackwhiteMode, floorplan_div);
		}
		if (blackwhiteMode==2) cvjs_colorAllLayersInDrawing_InvertBackground_SVG("FFFFFF", blackwhiteMode, floorplan_div);
		if (blackwhiteMode==3) {

			cvjs_colorAllLayersInDrawing_OriginalColor_SVG(floorplan_div);
		}
	}
}


function cvjs_colorAllLayersInDrawing_OriginalColor_SVG(floorplan_div){

//	   cvjs_setBackgroundColorHex("FFFFFF");


//window.alert("OriginalColor  "+blackwhiteMode)

	   var oArr = {};
	   jQuery("*[id]").each(function() {
//		   var id = jQuery(this).attr('id');
		   
			try{
				var id = jQuery(this).attr('id');
				var searchString = "[id^="+floorplan_div+"]";
				var svgID = jQuery("#"+id).parents(searchString).attr('id');
				
				if (svgID == floorplan_div_Array[cvjs_active_floorplan_div_nr]){
				   if (!oArr[id]) oArr[id] = true;
				}
			   		
			}
			catch (err) { 
			//	console.log(err+" XX"+id+"XX");
			}

		   
//		   if (!oArr[id]) oArr[id] = true;
	   });

	   for (var prop in oArr){

			try{
				var target = "#"+prop;
				if (jQuery(target).attr("id").indexOf("cv_")==0){
					jQuery(target).css("stroke", cvjs_SVGLineColorArray[prop]);
					jQuery(target).css("fill", cvjs_SVGFillColorArray[prop]);
				}
			}catch(err){}
		}

	//console.log("before call original color:"+cvjs_original_background);
	cvjs_setBackgroundColorHex(cvjs_original_background, floorplan_div);

};


var cvjs_SVGLineColorArray = {};
var cvjs_SVGFillColorArray = {};
var oArr = {};

function cvjs_colorAllLayersInDrawing_InvertBackground_SVG(hexColor, bwMode, floorplan_div){


//	try{
//		cvjs_setBackgroundColorHex(invertHex(hexColor));
//	}
//	catch(err){
//	//	console.log("3 "+err);
//	}


//	var myDiv= '#'+'#'+floorplan_div_Array[cvjs_active_floorplan_div_nr];

// 	jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).removeClass("sClr_red");


	//if (true) return;


	if (bwMode == 1){

	   cvjs_setBackgroundColorHex("FFFFFF", floorplan_div);
	   cvjs_SVGFillColorArray = {}
	   cvjs_SVGLineColorArray = {}
	   var strokeCol = "#"+hexColor;
	   oArr = {};
	   jQuery("*[id]").each(function() {

			try{
				var id = jQuery(this).attr('id');
				var searchString = "[id^="+floorplan_div+"]";
				var svgID = jQuery("#"+id).parents(searchString).attr('id');
				
				if (svgID == floorplan_div_Array[cvjs_active_floorplan_div_nr]){
				   if (!oArr[id]) oArr[id] = true;
				}
		  
		   	}
			catch (err) { 
			//	console.log(err+" XX"+id+"XX");
			}


//		var id = jQuery(this).attr('id');
//		   if (!oArr[id]) oArr[id] = true;
	   });

	   for (var prop in oArr){

			try{
				var target = "#"+prop;
				if (jQuery(target).attr("id").indexOf("cv_")==0){

					cvjs_SVGLineColorArray[prop]= jQuery(target).css("stroke");
					cvjs_SVGFillColorArray[prop]= jQuery(target).css("fill");

					if (cvjs_SVGLineColorArray[prop]!="none") jQuery(target).css("stroke", strokeCol);
					if (cvjs_SVGFillColorArray[prop]!="none") jQuery(target).css("fill", strokeCol);
				}
			}catch(err){}
		}

	}

/*

	if (bwMode == 1){
	   cvjs_setBackgroundColorHex("FFFFFF");
	   cvjs_SVGFillColorArray = {}
	   cvjs_SVGLineColorArray = {}
	   oArr = {};
	   jQuery("*[id]").each(function() {
		   var id = jQuery(this).attr('id');
		   if (!oArr[id]) oArr[id] = true;
		   var target = "#"+id;
			if (id.indexOf("cv_")==0){
				var valStroke = jQuery(target).css("stroke");
				var valFill = jQuery(target).css("fill");
				cvjs_SVGLineColorArray[prop] = valStroke;
				cvjs_SVGFillColorArray[prop] = valFill;

				var strokeCol = "#"+hexColor;
				jQuery(target).css("stroke", strokeCol);
				if (jQuery(target).css("fill") == "none"){
				}
				else
					jQuery(target).css("fill", strokeCol);

			}
	   });

	   for (var prop in oArr){

			try{
				var target = "#"+prop;
				if (jQuery(target).attr("id").indexOf("cv_")==0){
					var valStroke = jQuery(target).css("stroke");
					var valFill = jQuery(target).css("fill");
					cvjs_SVGLineColorArray[prop] = valStroke;
					cvjs_SVGFillColorArray[prop] = valFill;

					var strokeCol = "#"+hexColor;
					jQuery(target).css("stroke", strokeCol);
					if (jQuery(target).css("fill") == "none"){
					}
					else
						jQuery(target).css("fill", strokeCol);

				}
			}catch(err){}
		}
	}

*/

	if (bwMode == 2){

	   cvjs_setBackgroundColorHex("000000", floorplan_div);
		var strokeCol = "#"+hexColor;
		for (var prop in oArr){
			try{
				var target = "#"+prop;
				if (jQuery(target).attr("id").indexOf("cv_")==0){
					if (cvjs_SVGLineColorArray[prop]!="none") jQuery(target).css("stroke", strokeCol);
					if (cvjs_SVGFillColorArray[prop]!="none") jQuery(target).css("fill", strokeCol);
				}
			}catch(err){}
		}

	}



/*
console.log("before class");

	var cArr = {};
	jQuery("*[class]").each(function() {
		console.log("here "+this);
		var strokeCol =  "#"+"FF0000"; // "#"+hexColor;
		jQuery(this).css("stroke", strokeCol);
	});

//console.log("after class");
*/

};


/**
 * Create an internal array with all fill colors on all SVG graphical objects.
 */
function cvjs_storeFillColors(){
	

   cvjs_SVGFillColorArray = {}
   oArr = {};
   jQuery("*[id]").each(function() {
	   var id = jQuery(this).attr('id');
	   if (!oArr[id]) oArr[id] = true;
   });

   for (var prop in oArr){
		try{
			var target = "#"+prop;
			if (jQuery(target).attr("id").indexOf("cv_")==0){
				cvjs_SVGFillColorArray[prop]= jQuery(target).css("fill");
			}
		}catch(err){}
	}

	
}



/**
 * Toggle the color settings Black /White
 * @param {string} floorplan-div - the ID of the Element in which CADViewer is running
 * @param {string} hexColor - color of all layers
 */
function cvjs_colorAllLayersInDrawing(floorplan_div, hexColor){

	cvjs_colorAllLayersInDrawing_InvertBackground(hexColor, floorplan_div);
}

function cvjs_colorAllLayersInDrawing_InvertBackground(hexColor, floorplan_div){


	var objectColor = "";

	if (hexColor.indexOf("#")>-1)
		objectColor = hexColor;
	else 
		objectColor = "#"+hexColor;

//window.alert("objectColor "+objectColor);

	jQuery("g[stroke]", jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr])).each(function (index, item) {
		item = jQuery(item);
		try{
			item.attr('stroke', objectColor);
		}
		catch(err){
			//console.log("1 "+err);
		}
	});


	jQuery("g[fill]", jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr])).each(function (index, item) {
		item = jQuery(item);
		try{
			var fill = item.attr('fill');
			if (fill!="none") item.attr('fill', objectColor);
		}
		catch(err){
//			console.log("2 "+err);
		}
	});


try{

	cvjs_setBackgroundColorHex(invertHex(hexColor), floorplan_div);
}
catch(err){
//	console.log("3 "+err);
}



}


function invertHex(hexnum){
  if(hexnum.length != 6) {

	if (cvjs_debug) console.log("error hexnum "+hexnum);

    console.error("Hex color must be six hex numbers in length.");
    return false;
  }

  hexnum = hexnum.toUpperCase();
  var splitnum = hexnum.split("");
  var resultnum = "";
  var simplenum = "FEDCBA9876".split("");
  var complexnum = new Array();
  complexnum.A = "5";
  complexnum.B = "4";
  complexnum.C = "3";
  complexnum.D = "2";
  complexnum.E = "1";
  complexnum.F = "0";

  for(i=0; i<6; i++){
    if(!isNaN(splitnum[i])) {
      resultnum += simplenum[splitnum[i]];
    } else if(complexnum[splitnum[i]]){
      resultnum += complexnum[splitnum[i]];
    } else {
      console.error("Hex colors must only include hex numbers 0-9, and A-F");
      return false;
    }
  }

  return resultnum;
}



var	cvjs_filepathServerInsertImages = "";
var	cvjs_insertImagesRelativePath = "../drawings/inserted_image_objects/";



var cvjs_insertimagesAbsolutePathOnly = false;

/**
 * Sets the relative path for the insert image object location
 * @param {string} path - path to the inserted images location, default is "../drawings/inserted_image_objects/"
 * @param {string} serverPath - absolute path to the inserted images location, "/home/cadviewerjs/drawings/mypath/inserted_image_objects/"
 */

function cvjs_setInsertImageObjectsRelativePath(path, serverPath){

	cvjs_filepathServerInsertImages = serverPath;
	cvjs_insertImagesRelativePath = path;


	cvjs_imageObjectServerName = serverPath+"imageObjects.js";  // generic object name
	cvjs_imageObjectUrl = path+"imageObjects.js";  // generic object name

	cvjs_insertimagesAbsolutePathOnly = false;
}


/**
 * Sets the basolute path for the insert image object location, relative path is not used
 * @param {string} path - absolute http/Url path to the inserted images location,
 * @param {string} serverPath - absolute path to the inserted images location, "/home/cadviewerjs/drawings/mypath/inserted_image_objects/"
 */

function cvjs_setInsertImageObjectsAbsolutePath(path, serverPath){

	cvjs_filepathServerInsertImages = serverPath;
	cvjs_insertImagesRelativePath = path;

	cvjs_imageObjectServerName = serverPath+"imageObjects.js";  // generic object name
	cvjs_imageObjectUrl = path+"imageObjects.js";  // generic object name

	cvjs_insertimagesAbsolutePathOnly = true;

}


/**
 * Sets the basolute path for the insert image object location, relative path is not used
 * @param {string} path - absolute http/Url path to the inserted images location,
 * @param {string} serverPath - absolute path to the inserted images location, "/home/cadviewerjs/drawings/mypath/inserted_image_objects/"
 * @param {string} fileName - filename, "myobject.js"
 */

function cvjs_setInsertImageObjectsAbsolutePath_FileName(path, serverPath, fileName){

	cvjs_filepathServerInsertImages = serverPath;
	cvjs_insertImagesRelativePath = path;

	fileName = fileName.replace(/ /g, '_');
	
	cvjs_imageObjectServerName = serverPath+"/imageObjects_"+fileName+".js";  // generic object name
	cvjs_imageObjectUrl = path+"/imageObjects_"+fileName+".js";  // generic object name

	cvjs_insertimagesAbsolutePathOnly = true;

}









function cvjs_add_image( ){
	//console.log(currentImageNoteId);
	document.getElementById("upfile_image").click();
}



function add_file_object_image(obj){

var file = obj.value;

var size;
var path;
var vval;


var floorplan_div = floorplan_div_Array[cvjs_active_floorplan_div_nr];


try{
	size = obj.files[0].size;
	path = obj.files[0].name;
	vval = obj.files[0].path;

if (cvjs_debug) 	console.log(size+"  "+path+"  "+vval)
}catch(err) {
	console.log(err);

	return;

};


var fileName = file.split("\\");
var file_and_ext = fileName[fileName.length-1];
var illegal_character = 0;

if (file_and_ext.indexOf("+")>-1 || file_and_ext.indexOf("%")>-1)
	illegal_character = 1;

if (illegal_character == 1){
		jQuery('#attention_1').html("Attention: Illegal character!");
		jQuery('#attention_2').html("Illegal character in file name! Please rename and try again.");
		jQuery('#attention_bitmap').show();
}
else{

// make the variable for the next available floorplan
	var fileExt = fileName[fileName.length-1].split(".");

	var formats = ".dwf|.dxf|.dwg|.png|.gif|.jpg|.tif|.tiff|.svg|.svgz|.js|.pdf|.dgn|.pcf";
	if (formats.indexOf(fileExt[fileExt.length-1].toLowerCase())==-1){

		jQuery('#attention_1').html("Attention: Format not supported!");
		jQuery('#attention_2').html("CADViewer supports the following: <br> AutoCAD Formats: DWG, DXF, DWF <br> MicroStation Formats: DGN, PCF <br>Bitmap Formats: JPG, GIF, PNG, TIFF <br>Scalable Vector Graphics: SVG and SVGZ. <br>Acrobat: PDF<br>CADViewer: .JS JavaScript files. ");
		jQuery('#attention_bitmap').show();
	}
	else{  // file is supported
		// check if file already is uploaded


		// Demo mode, only a single file is allowed to be uploads
		if (cvjs_fileLoadTrialMode) filesonserver=0;


		var check_flag = 0;
		for (var i=0; i<filesonserver; i++){
			if (fnArr_FileName[i].indexOf(file_and_ext) == 0){
				check_flag = 1;
			}
		}

		if (check_flag == 1){
			jQuery('#attention_1').html("Attention:");
			jQuery('#attention_2').html(file_and_ext+" has already been uploaded! ");
			jQuery('#attention_bitmap').show();
		}
		else{  // upload file

			var location = "#1floor"+1;


			var phpUpload_location = "";

			if (externalServerPhpUpload)
				phpUpload_location = cvjs_phpUploadPath;
			else
				phpUpload_location = cvjs_phpPath;

					
			
			jQuery(location).html("");
			jQuery(location).axuploader({
				url: phpUpload_location+cvjs_serverUploadController,
				finish:function(x,files){

// check if PDF version is supported
					//console.log("uploaded current note " + currentImageNoteId+" "+file_and_ext);
					vqImageNotes[currentImageNoteId].data("imageObject", file_and_ext);
					//jQuery('#cvjs_floorPlanInsertImage').html("<img src='"+cvjs_insertImagesRelativePath+"/"+vqImageNotes[currentImageNoteId].data("imageObject")+"' height='"+vqImageNotes[currentImageNoteId].data("imageHeight")+"' />");

//window.alert("<img src='"+cvjs_serverHandlersPath+cvjs_serverLoadFileController+"?file="+cvjs_insertImagesRelativePath+"/"+vqImageNotes[currentImageNoteId].data("imageObject")+"' height='"+vqImageNotes[currentImageNoteId].data("imageHeight")+"' />");					
					// 3.1.21k
					if (cvjs_buildFolderTree_crossDomain)
						jQuery('#cvjs_floorPlanInsertImage').html("<img src='"+cvjs_serverHandlersPath+cvjs_serverLoadFileController+"?file="+cvjs_insertImagesRelativePath+"/"+vqImageNotes[currentImageNoteId].data("imageObject")+"' height='"+vqImageNotes[currentImageNoteId].data("imageHeight")+"' />");
					else
						jQuery('#cvjs_floorPlanInsertImage').html("<img src='"+cvjs_insertImagesRelativePath+"/"+vqImageNotes[currentImageNoteId].data("imageObject")+"' height='"+vqImageNotes[currentImageNoteId].data("imageHeight")+"' />");


					jQuery('#cvjs_floorPlanInsertImageEncapsulate_'+floorplan_div).css("width", vqImageNotes[currentImageNoteId].data("imageWidth")+8);
					jQuery('#cvjs_floorPlanInsertImage').css("width", vqImageNotes[currentImageNoteId].data("imageWidth"));
					//jQuery('#cvjs_floorPlanInsertImage').css("width", "auto");
					jQuery('#cvjs_floorPlanInsertImageTop').css("width", vqImageNotes[currentImageNoteId].data("imageWidth"));

/***  save load structure....
					for (var imageObject in cvjs_insertImageObjects){
							if (cvjs_insertImageObjects[imageObject].id == (currentImageNoteId+1)){
								cvjs_insertImageObjects[imageObject].imageObject = file_and_ext;

								jQuery('#cvjs_floorPlanInsertImage').html("<img src='"+cvjs_insertImagesRelativePath+"/"+cvjs_insertImageObjects[imageObject].imageObject+"' height='"+cvjs_insertImageObjects[imageObject].imageHeight+"' />");
								jQuery('#cvjs_floorPlanInsertImageEncapsulate').css("width", cvjs_insertImageObjects[imageObject].imageWidth+8);
								jQuery('#cvjs_floorPlanInsertImage').css("width", cvjs_insertImageObjects[imageObject].imageWidth);
								jQuery('#cvjs_floorPlanInsertImageTop').css("width", cvjs_insertImageObjects[imageObject].imageWidth);
							}
					}
***/
				},
				enable:true,
				fileObject:obj,
				remotePath:function(){

					//console.log("remotePath!! ");
					// here we have to return dependent on what we are loading in!
										
					return cvjs_filepathServerInsertImages;
				}
			});


			// do not remove  jQuery(location).html(fileName[0]);

		}
	}


	} // illegal character

}

var cvjs_insertImageObjects;
var imageObjects_loaded = false;
var current_image_js_initialized = 0;
var cvjs_imageObjectUrl = "../drawings/demo/inserted_image_objects/"+"imageObjects.js"
var cvjs_imageObjectServerName = "../drawings/demo/inserted_image_objects/"+"imageObjects.js"
var cvjs_imageObjectName ;





/**
 * Load all object image links
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

function cvjs_loadAllImageLinks(floorplan_div){


	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	



		imageObjects_loaded  = false;
		if (current_image_js_initialized == 0){
			current_image_js_initialized = 1;
			cvjs_imageObjectName = cvjs_imageObjectUrl ;

	//console.log("before loadJSbase redline "+cvjs_StickyNoteRedlineUrl);
			loadJSbase(cvjs_imageObjectUrl );
		}else{
	//console.log("replace "+current_jsRedlinename+"  "+cvjs_StickyNoteRedlineUrl);
		
			replacejscssfile(current_jsRedlinename, cvjs_imageObjectUrl, "js");
			cvjs_imageObjectName = cvjs_imageObjectUrl;
		}
		cvjs_loadImageObjectTimer();
}


function cvjs_loadImageObjectTimer(){

//console.log("imageObjectTimer");

	// make sure it is loaded
	if (imageObjects_loaded){
		load_failures=0;

		var rightadjustment = 0;
		cvjs_currentImageLink_id = 0;

		//console.log(vqImageNotes.length);

		if (vqImageNotes.length>0){
			for (var i=0; i<vqImageNotes.length; i++){
						//console.log("delete "+i);
				vqImageNotes[i].data("deleted", true);
				var dTransform = "S0.001";
				vqImageNotes[i].attr({'transform': dTransform, "opacity" : "0.01"});
			}
			vqImageNotes.length = 0;
		}
		cvjs_currentImageLink_id =0;
		cvjs_currentImageLink_underbar =0;

		for (var imageObject in cvjs_insertImageObjects){
			//console.log("loop id "+cvjs_currentImageLink_id+"  "+cvjs_insertImageObjects[imageObject].transform);
			make_imageIcon(cvjs_currentImageLink_id, cvjs_insertImageObjects[imageObject].transform, cvjs_insertImageObjects[imageObject].imageObject, cvjs_insertImageObjects[imageObject].currentPage, cvjs_insertImageObjects[imageObject].username, cvjs_insertImageObjects[imageObject].userid);
			cvjs_currentImageLink_id++;
			cvjs_currentImageLink_underbar++;
		}

	}else{
		if (load_failures < 80){
			    setTimeout(function(){cvjs_loadImageObjectTimer()},256);
    	}
    	else{
    		if (cvjs_debug) console.log("Object load failed! - please check if imageObject Url is set correct: ");
    	}
	}

}



function make_imageIcon(imageNoteId, tTransform_c, imageObject, currentPage, username, userid){


	var floorplan_div = floorplan_div_Array[cvjs_active_floorplan_div_nr];

	var rightadjustment = 0;
	if ((imageNoteId+1)<10) rightadjustment = 3;

	//cvjs_currentImageLink_underbar = imageNoteId;

	tRubberBand_c = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0,0h20v20h-20v-20Z").attr({stroke: "#000000", "stroke-width" : "1.0"}),cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M4,11h11v8h-11v-8h2").attr({stroke: "#000000", "stroke-width" : "0.5"}),
								  cvjs_rPaper[cvjs_active_floorplan_div_nr].text(3+rightadjustment,9,"#"+(imageNoteId + 1)).attr({"font-size": "8px", "font-style": "italic", stroke: "#000000", "stroke-width" : "0.3", "fill" : "#000000", "fill-opacity" : 1.0}),cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M4,19 8,14 10,16 12.5,15 15,19").attr({stroke: "#000000", "stroke-width" : "0.5", "fill": "#000000"}))   ;

	tRubberBand_c.attr({'transform': tTransform_c , "opacity" : "1"});

//console.log("tTransform_c"+tTransform_c);

	tRubberBand_c.attr({	fill: '#DCCCFF', "fill-opacity": "0.8", stroke: '#000', 'stroke-opacity': "1" });

	cvjs_currentStickyNote_transform = tTransform_c;

	var cImageNoteItemX = tRubberBand_c.data("node", cvjs_currentImageLink_underbar);
	vqImageNotes.push(cImageNoteItemX);


	currentImageNoteId = vqImageNotes.length-1;

	//console.log("after push"+currentImageNoteId);

	vqImageNotes[imageNoteId].data("id", imageNoteId+1);
	vqImageNotes[imageNoteId].data("name", "object"+(imageNoteId+1));
	vqImageNotes[imageNoteId].data("layer", "objectLayer");
	vqImageNotes[imageNoteId].data("group", "unassigned");
	vqImageNotes[imageNoteId].data("username", username);
	vqImageNotes[imageNoteId].data("userid", userid);
	vqImageNotes[imageNoteId].data("currentPage", currentPage);
	vqImageNotes[imageNoteId].data("imageObject", imageObject);
	vqImageNotes[imageNoteId].data("imageHeight", 450);
	vqImageNotes[imageNoteId].data("imageWidth", 600);
	vqImageNotes[imageNoteId].data("transform", tTransform_c);


	jQuery('#cvjs_floorPlanInsertImage').html("");


/*
					OBJECT_1: {
						name: "object1",
						id: "1",
						layer: "ObjectLayer",
						group: "unassigned",
						username: "James Smith",
						userid: "user_01",
						currentPage: 1,
						insertX: 200,
						insertY: 300,
						imageObject: "",
						imageHeight: 450,
						imageWidth: 600
					}
*/



	vqImageNotes[currentImageNoteId].mousedown(function(e){

		currentImageNoteId = this.data("node");

		jQuery('#cvjs_imageObject').html("<b>"+languageTable.languages[cvjs_currentLanguage].ImageObjectModal.Header+(currentImageNoteId+1)+"</b>");

//console.log("opening and image is "+currentImageNoteId+" "+cvjs_insertImagesRelativePath+" "+vqImageNotes[currentImageNoteId].data("imageObject"));

		if (vqImageNotes[currentImageNoteId].data("imageObject")=="" ){
			jQuery('#cvjs_floorPlanInsertImage').html("");
		}else{			
			// 3.1.21l
			if (cvjs_buildFolderTree_crossDomain)
				jQuery('#cvjs_floorPlanInsertImage').html("<img src='"+cvjs_serverHandlersPath+cvjs_serverLoadFileController+"?file="+cvjs_insertImagesRelativePath+"/"+vqImageNotes[currentImageNoteId].data("imageObject")+"' height='"+vqImageNotes[currentImageNoteId].data("imageHeight")+"' />");
			else
				jQuery('#cvjs_floorPlanInsertImage').html("<img src='"+cvjs_insertImagesRelativePath+"/"+vqImageNotes[currentImageNoteId].data("imageObject")+"' height='"+vqImageNotes[currentImageNoteId].data("imageHeight")+"' />");	
			//jQuery('#cvjs_floorPlanInsertImage').html("<img src='"+cvjs_insertImagesRelativePath+"/"+vqImageNotes[currentImageNoteId].data("imageObject")+"' height='"+vqImageNotes[imageNoteId].data("imageHeight")+"' />");

			jQuery('#cvjs_floorPlanInsertImageEncapsulate_'+floorplan_div).css("width", vqImageNotes[currentImageNoteId].data("imageWidth")+8);
			jQuery('#cvjs_floorPlanInsertImage').css("width", vqImageNotes[currentImageNoteId].data("imageWidth"));
			jQuery('#cvjs_floorPlanInsertImageTop').css("width", vqImageNotes[currentImageNoteId].data("imageWidth"));
		}

		jQuery( "#cvjs_floorPlanInsertImageEncapsulate_"+floorplan_div).show();
	}).mousemove(function(e){
		//console.log(cvjs_currentImageLink_underbar);
		currentImageNoteId = this.data("node");
		vqImageNotes[currentImageNoteId].attr(highlightColor_ImageNotes);
	}).mouseout(function(e){
		currentImageNoteId = this.data("node");
		vqImageNotes[currentImageNoteId].attr(defaultColor_ImageNotes);
	}).mouseup(function(e){


	}).touchstart(function(e){
	}).touchmove(function(e){
	}).touchend(function(e){
	}).dblclick(function(e){
	});

}


//  GENERIC LOAD OF REDLINES THROUGH JQUERY AND SETTING OF INLINE SCRIPT


function cvjs_addInlineScript(cvjs_script){

	jQuery(function () {
	  jQuery('<script>')
		.attr('type', 'text/javascript')
		.text(cvjs_script)
		.appendTo('head');
	});
}



// SAVE ALL IMAGES


/**
 * Saves all image links
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

 function cvjs_saveAllImageLinks(floorplan_div){

 
 	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	

 
	if 	(vqImageNotes.length<1) return;

	var dataUrl="";

	var comma_flag =0;

	dataUrl = dataUrl +"var cvjs_insertImageObjects = {\n";

	for (spc in vqImageNotes)
	{
		if (vqImageNotes[spc].data("deleted") == true ){
			// console.log("file.js deleted node "+vqRedlines[spc].data("deleted"));    // we dont have to tell the node is deleted
		}
		else{  // node exists

			if (comma_flag == 0){
				comma_flag = 1
			}
			else{
				dataUrl = dataUrl +"						,\n";
			}

			dataUrl = dataUrl +"					"+"OBJECT_"+(vqImageNotes[spc].data("node")+1)+": {\n";
			dataUrl = dataUrl +"						name: \""+vqImageNotes[spc].data("name")+"\",\n";
			dataUrl = dataUrl +"						id: \""+vqImageNotes[spc].data("id")+"\",\n";
			dataUrl = dataUrl +"						layer: \""+vqImageNotes[spc].data("layer")+"\",\n";
			dataUrl = dataUrl +"						group: \""+vqImageNotes[spc].data("group")+"\",\n";
			dataUrl = dataUrl +"						username: \""+vqImageNotes[spc].data("username")+"\",\n";
			dataUrl = dataUrl +"						userid: \""+vqImageNotes[spc].data("userid")+"\",\n";
			dataUrl = dataUrl +"						currentPage: "+vqImageNotes[spc].data("currentPage")+",\n";
			dataUrl = dataUrl +"						imageObject: \""+vqImageNotes[spc].data("imageObject")+"\",\n";
			dataUrl = dataUrl +"						imageHeight: \""+vqImageNotes[spc].data("imageHeight")+"\",\n";
			dataUrl = dataUrl +"						imageWidth: \""+vqImageNotes[spc].data("imageWidth")+"\",\n";
			dataUrl = dataUrl +"						transform: \""+vqImageNotes[spc].data("transform")+"\"\n";
			dataUrl = dataUrl +"					}\n";

		} // case node exists
	}

	dataUrl = dataUrl +"}\n\n";

	dataUrl = dataUrl +"\njQuery(document).ready(function() { \n";
	dataUrl = dataUrl +"	imageObjects_loaded = true; \n";
	dataUrl = dataUrl +"}); \n";
	dataUrl = dataUrl +"imageObjects_loaded = true; \n";


//		console.log(dataUrl);

//		prompt("Copy to clipboard: Ctrl+C, Enter", dataUrl);

//		console.log(vqStickyNotes[0]);

	var cvjs_phpSaveImagesUrlLocation = cvjs_serverHandlersPath + cvjs_serverSaveFileControllerRedlines;

	var js_data = {};
	js_data['file'] = cvjs_imageObjectServerName;
	js_data['file_content'] = dataUrl;

//console.log(cvjs_phpSaveRedlineUrlLocation+"  "+cvjs_StickyNoteSaveRedlineUrl);

	jQuery.ajax({
	  url:cvjs_phpSaveImagesUrlLocation,
	  type: 'post',
	  data: js_data,
	  success: function(html){

		var status ="Save Image Notes: "+html;

		if ((!html || 0 === html.length)) status = "Image Icons Saved";


//		jQuery('#cvjs_informationModalText').html(status);
//		jQuery('#info_messageModal').modal('show');

		cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], status);


		if (vqImageNotes.length>0){
			for (var i=0; i<vqImageNotes.length; i++){
						//console.log("delete "+i);
				vqImageNotes[i].data("deleted", true);
				var dTransform = "S0.001";
				vqImageNotes[i].attr({'transform': dTransform, "opacity" : "0.01"});
			}
			vqImageNotes.length = 0;
		}
		cvjs_currentImageLink_id =0;
		cvjs_currentImageLink_underbar =0;


	  }
	});


}



/**
 * Clears all image links from the canvas
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */
 
function cvjs_clearAllImageLinks(floorplan_div){

 	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	


		if (vqImageNotes.length>0){
			for (var i=0; i<vqImageNotes.length; i++){
						//console.log("delete "+i);
				vqImageNotes[i].data("deleted", true);
				var dTransform = "S0.001";
				vqImageNotes[i].attr({'transform': dTransform, "opacity" : "0.01"});
			}
			vqImageNotes.length = 0;
		}
		cvjs_currentImageLink_id =0;
		cvjs_currentImageLink_underbar =0;

}




 
 /**
 * Opens the File Loader Modal to load and convert drawing with space objects
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */
  
function cvjs_loadDrawingsWithSpaceObjects(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	


	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;


		cvjs_filename_list_status = 1;
		filesonserver = 0;

		cvjs_convertSpaceObject = false

		if (!cvjs_fileLoadToServer){
			cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], languageTable.languages[cvjs_currentLanguage].InfoMessageModal.FileLoadThroughApp);
			return;
		}

		if (fileload_offset_flag[cvjs_active_floorplan_div_nr]){
			fileload_offset_flag[cvjs_active_floorplan_div_nr] = false;
//			jQuery("#cvjs_serverFileLoadModal").offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top}); ;
// 3.0.14e
			jQuery("#cvjs_serverFileLoadModal").offset({left:150+jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position().left, top: 50+jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position().top}); ;


		}

		jQuery('#SelectFloorPlan').hide();
		jQuery('#SelectFloorPlanPanel').hide();

		jQuery('#SelectFloorPlanEdit').hide();
		jQuery('#SelectFloorPlanPanelEdit').hide();

		jQuery( "#serverFileModalName" ).html(languageTable.languages[cvjs_currentLanguage].FileLoadSpaceModal.Header);

		jQuery( "#cvjs_cvRoomTextLayersOnLoad").html("<canvas id=\"dummy\" width=\"36\" height=\"12\"></canvas>"+languageTable.languages[cvjs_currentLanguage].FileLoadSpaceModal.BuildRoomTextHyperlinks+"<canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input type=\"checkbox\" id=\"cvjs_convert_RL_TL_checkbox\" value=\"conversion_status\"><br><canvas id=\"dummy\" width=\"16\" height=\"8\">");
		jQuery("#cvjs_convert_RL_TL_checkbox")
			.change(function(){
				if( jQuery(this).is(":checked") ){
					cvjs_convertSpaceObject = true;
				}else{
					cvjs_convertSpaceObject = false;
				}
			});


		jQuery( "#addFloorPlanTable").show();
		jQuery( "#add_br_not_addFloorPlanTable").hide();
		






		
		jQuery( "#addRedlineTable").hide();

		jQuery( "#infoFileModalNameDrawing" ).html(languageTable.languages[cvjs_currentLanguage].FileLoadSpaceModal.DrawingFilename);
		jQuery( "#editFloorPlanInfoText" ).html(languageTable.languages[cvjs_currentLanguage].FileLoadSpaceModal.EditFloorplanInfo);
		jQuery( "#infoFloorPlanInfoText" ).html(languageTable.languages[cvjs_currentLanguage].FileLoadSpaceModal.DrawingFilename);


		cvjs_initializeFileSelector();
		//jQuery('#cvjs_serverFileLoadModal').modal('show');


};



/**
 * Clean the server side temporary folder for files. This command is useful when using cvjs_conversion_setContentResponse("file");
 * where the server conversion provides a full set of files that is not removed when read by CADViewer
 */

function cvjs_conversion_cleanFilesDirectory(){


	var conv_extr_request = new Object();
	conv_extr_request.action      = "clear_files_folder";
	var api_data = JSON.stringify(conv_extr_request);

	tms_rest_api_url = tms_rest_api_url1+rest_php_version;


if (cvjs_debug) console.log(" index of"+tms_rest_api_url1.indexOf("tms-restful-api"));


	if (tms_rest_api_url1.indexOf("tms-restful-api")>-1){
		cvjs_passwordProtected = true;
		//cvjs_checkLicensePre();
		if (cvjs_isLicensed){
			cvjs_usr = "tms";
			cvjs_pwd = "restful";
		}

if (cvjs_debug) console.log(cvjs_isLicensed+" "+cvjs_usr+" "+cvjs_pwd);

	}

	var tms_rest_api_url_pw;


	if (cvjs_passwordProtected){
		var loc_1 = tms_rest_api_url.indexOf("//");
		var protocol_1 = tms_rest_api_url.substring(0,loc_1+2);
		var url_1 = tms_rest_api_url.substring(loc_1+2);
		tms_rest_api_url_pw = protocol_1+cvjs_usr+":"+cvjs_pwd+"@"+url_1;

	}else{
		tms_rest_api_url_pw = tms_rest_api_url;
	}


	// Encoding for Tomcat 8, xerces PHP server, we encode the json stream encodeURIComponent(api_data), previously only api_data

	var url_json = "";
	if (cvjs_encodeURIcall_server)
		url_json = tms_rest_api_url_pw+"?json="+encodeURIComponent(api_data);
	else
		url_json = tms_rest_api_url_pw+"?json="+api_data;


	
//	var url_json = tms_rest_api_url_pw+"?json="+api_data;

if (cvjs_debug) console.log(tms_rest_api_url_pw+" in makeConversion  request="+ encodeURIComponent(api_data)+"  non encoded request: "+api_data);


	if (cvjs_jsonp_handshake){

	if (cvjs_debug) console.log("before ajax call to php ");

		jQuery.ajax({
			url : url_json,
       		jsonp: "tms_restful_api",
        	dataType: 'jsonp',
			success:function(Api_response)
					{
	if (cvjs_debug) console.log("jsonP Conversion success: "+Api_response);

				},
			error:function(xhr, status, error)
					{

						// here we do not care, we get the response back
						if (error.toString().indexOf("Files Deleted!")>-10){
						}
						else
							console.log("1 jsonp getEngines error="+xhr.responseText+" status="+status+" error="+error);
					}
		});
	}


	if (cvjs_servlet_handshake){

	if (cvjs_debug) console.log("2: before ajax call to Servlet");

		var filelist_data = {};
		filelist_data['request'] = api_data;
		
		if (cvjs_debug) console.log("before ajax call to Servlet filelist_data['request'] "+ filelist_data['request']);
	
		jQuery.ajax({
			url : tms_rest_api_url_pw,
			type: 'post',
			data: filelist_data,
			success:function(Api_response)
					{
	if (cvjs_debug) console.log("json delete success: "+Api_response);

					},
			error:function(data_e)
					{
						// here we do not care, we get the response back
						if (date_e.toString().indexOf("Files Deleted!")>-1){
						}
						else
							console.log("2 json getEngines error="+data_e);
					}
		});
	}


	if (cvjs_post_handshake){

	if (cvjs_debug) console.log("before ajax post call");
			// not working for cross domain

		var json_data = {};
		json_data['json_data'] = api_data;

		jQuery.ajax({
			url : tms_rest_api_url_pw,
			type: 'POST',
        	data: json_data,
			success:function(Api_response)
					{
						if (cvjs_debug) console.log("post delete: "+Api_response);

					},
			error:function(data_e)
					{
						// here we do not care, we get the response back
						if (date_e.toString().indexOf("Files Deleted!")>-1){
						}
						else
							console.log("3 jsonp getEngines error="+data_e);
					}
		});
	}


}

var cvjs_spaceObjectUserMode = false;


function cvjs_setSpaceObjectUserMode(mode){

	cvjs_spaceObjectUserMode = mode;

}


var cvjs_newList;


// 6.2.54
var cvjs_addSpaceObjectType = 0;


/**
 * Add a Space Object Rectangle
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */
function cvjs_addRectangleSpaceObject(floorplan_div){

	// set the space object type
	cvjs_addSpaceObjectType = 2;
/*
	<ModalPoly>Space Objects - Polygon</ModalPoly>
	<ModalRect>Space Objects - Rectangle</ModalRect>
	<ModalCircle>Space Objects - Circle</ModalCircle>
	<Layer>Layer:</Layer>
	<SpaceId>Space ID:</SpaceId>
	<Create>Create</Create>
tingsTextLayer").html();
	jQuery("#cvjs_spaceobjectsettingsTextSpaceId").html();
	jQuery("#cvjs_spaceobjectsettingsTextCreate").html();
*/	

	jQuery("#cvjs_spaceobjectsettingsTextHeader").html(languageTable.languages[cvjs_currentLanguage].InitSpaceObjects.ModalRect);
	// call the Layer + ID modal	
	var mylayer = jQuery("#cvjs_spaceobjectLayerFromModal").val();
	if (mylayer == "unassigned" ) 
		jQuery("#cvjs_spaceobjectLayerFromModal").val("cvjs_SpaceLayer");
	
	var maxID = cvjs_currentMaxNodeId();
	maxID++;
	jQuery("#cvjs_spaceobjectIdFromModal").val(maxID);
	
	cvjs_spaceObjectsInitSettingsModal(floorplan_div);

}
  
function cvjs_addRectangleSpaceObjectCore(floorplan_div){

	
	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	


	cvjs_hidePop();
	Node_id = cvjs_currentMaxNodeId();
	//console.log("xurrent Node_id="+Node_id);
	Node_id++;
	currentNode_underbar = Node_underbar+Node_id;


	var mylayer = jQuery("#cvjs_spaceobjectLayerFromModal").val();
	cvjs_currentNode_layer = mylayer;
	var myid = jQuery("#cvjs_spaceobjectIdFromModal").val();
	if (myid != ""){
		currentNode_id = myid;
		currentNode_name = myid;		
	}
	else{
		currentNode_id = Node_id;
		currentNode_name = Node_id;		
	}
	
	//window.alert(mylayer+"  "+myid);


// 6.2.32
	currentNode_layer = cvjs_currentNode_layer;
	currentNode_group = "";
	currentNode_attributes = "";
	currentNode_attributeStatus = "";  // 3.2.02b
	currentNode_type = "Space";
	currentNode_occupancy = "";
	currentNode_tags = "unassigned";

	
/***	
	currentNode_name = "unassigned";
	currentNode_layer = "unassigned";
	currentNode_group = "unassigned";
	currentNode_attributes = "unassigned";
	currentNode_attributeStatus = "unpopulated";  // 3.2.02b
	currentNode_type = "unassigned";
	currentNode_tags = "unassigned";
	currentNode_tags = "unassigned";

*/

	currentNode_linked = false;
	cvjs_setCurrentNodeValues(currentNode_underbar, currentNode_name, currentNode_id, currentNode_layer, currentNode_group, currentNode_attributes, currentNode_attributeStatus, currentNode_type, currentNode_tags, currentNode_occupancy, currentNode_linked);
	cvjs_addHandleFunc_Rectangle();

}



/**
 * Add a Space Object Polygon
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */  	

function cvjs_addPolygonSpaceObject(floorplan_div){

	// set the space object type
	cvjs_addSpaceObjectType = 1;

	// call the Layer + ID modal
	jQuery("#cvjs_spaceobjectsettingsTextHeader").html(languageTable.languages[cvjs_currentLanguage].InitSpaceObjects.ModalPoly);

	var mylayer = jQuery("#cvjs_spaceobjectLayerFromModal").val();
	if (mylayer == "unassigned" ) 
		jQuery("#cvjs_spaceobjectLayerFromModal").val("cvjs_SpaceLayer");
	
	var maxID = cvjs_currentMaxNodeId();
	maxID++;
	jQuery("#cvjs_spaceobjectIdFromModal").val(maxID);

	cvjs_spaceObjectsInitSettingsModal(floorplan_div);	
}


function cvjs_addPolygonSpaceObjectCore(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	

	cvjs_hidePop();
	Node_id = cvjs_currentMaxNodeId();
	//console.log("xurrent Node_id="+Node_id);
	Node_id++;
	currentNode_underbar = Node_underbar+Node_id;


	var mylayer = jQuery("#cvjs_spaceobjectLayerFromModal").val();
	cvjs_currentNode_layer = mylayer;
	var myid = jQuery("#cvjs_spaceobjectIdFromModal").val();
	if (myid != ""){
		currentNode_id = myid;
		currentNode_name = myid;		
	}
	else{
		currentNode_id = Node_id;
		currentNode_name = Node_id;		
	}

	
	currentNode_layer = cvjs_currentNode_layer; //"cvjs_Data_layer";
	currentNode_group = "";
	currentNode_attributes = "";
	currentNode_attributeStatus = "";  // 3.2.02b
	currentNode_type = "Space";
	currentNode_occupancy = "";
	currentNode_tags = "unassigned";

	
/***	
	currentNode_name = "unassigned";
	currentNode_layer = "unassigned";
	currentNode_group = "unassigned";
	currentNode_attributes = "unassigned";
	currentNode_attributeStatus = "unpopulated";  // 3.2.02b
	currentNode_type = "unassigned";
	currentNode_tags = "unassigned";
	currentNode_tags = "unassigned";

*/

	currentNode_linked = false;
	cvjs_setCurrentNodeValues(currentNode_underbar, currentNode_name, currentNode_id, currentNode_layer, currentNode_group, currentNode_attributes, currentNode_attributeStatus, currentNode_type, currentNode_tags, currentNode_occupancy, currentNode_linked);


	cvjs_addHandleFunc_Polygon();
}



/**
 * Add a Space Object Circle
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */  	
function cvjs_addCircleSpaceObject(floorplan_div){

	// set the space object type
	cvjs_addSpaceObjectType = 3;

	jQuery("#cvjs_spaceobjectsettingsTextHeader").html(languageTable.languages[cvjs_currentLanguage].InitSpaceObjects.ModalCircle);

	var mylayer = jQuery("#cvjs_spaceobjectLayerFromModal").val();
	if (mylayer == "unassigned" ) 
		jQuery("#cvjs_spaceobjectLayerFromModal").val("cvjs_SpaceLayer");
	
	var maxID = cvjs_currentMaxNodeId();
	maxID++;
	jQuery("#cvjs_spaceobjectIdFromModal").val(maxID);

	// call the Layer + ID modal
	cvjs_spaceObjectsInitSettingsModal(floorplan_div);
}


function cvjs_addCircleSpaceObjectCore(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	

	cvjs_hidePop();
	Node_id = cvjs_currentMaxNodeId();
	//console.log("xurrent Node_id="+Node_id);
	Node_id++;
	currentNode_underbar = Node_underbar+Node_id;



	var mylayer = jQuery("#cvjs_spaceobjectLayerFromModal").val();
	cvjs_currentNode_layer = mylayer;
	var myid = jQuery("#cvjs_spaceobjectIdFromModal").val();
	if (myid != ""){
		currentNode_id = myid;
		currentNode_name = myid;		
	}
	else{
		currentNode_id = Node_id;
		currentNode_name = Node_id;		
	}


	currentNode_layer = cvjs_currentNode_layer; //"cvjs_Data_layer";
	currentNode_group = "";
	currentNode_attributes = "";
	currentNode_attributeStatus = "";  // 3.2.02b
	currentNode_type = "Space";
	currentNode_occupancy = "";
	currentNode_tags = "unassigned";

	
/***	
	currentNode_name = "unassigned";
	currentNode_layer = "unassigned";
	currentNode_group = "unassigned";
	currentNode_attributes = "unassigned";
	currentNode_attributeStatus = "unpopulated";  // 3.2.02b
	currentNode_type = "unassigned";
	currentNode_tags = "unassigned";
	currentNode_tags = "unassigned";

*/

	currentNode_linked = false;
	cvjs_setCurrentNodeValues(currentNode_underbar, currentNode_name, currentNode_id, currentNode_layer, currentNode_group, currentNode_attributes, currentNode_attributeStatus, currentNode_type, currentNode_tags, currentNode_occupancy, currentNode_linked);



	cvjs_addHandleFunc_Circle();

}


/**
 * Copy a Space Object Circle
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */  	

function cvjs_copyCircleSpaceObject(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	


	cvjs_hidePop();

	Node_id = cvjs_currentMaxNodeId();
	//console.log("xurrent Node_id="+Node_id);


	Node_id++;
	currentNode_underbar = Node_underbar+Node_id;

// 3.3.06e
	currentNode_id = Node_id;
	currentNode_name = Node_id;
	currentNode_layer =  cvjs_currentNode_layer; // "cvjs_Data_layer";
	currentNode_group = "";
	currentNode_attributes = "";
	currentNode_attributeStatus = "";  // 3.2.02b
	currentNode_type = "Space";
	currentNode_occupancy = "";
	currentNode_tags = "unassigned";

	
/***	
	currentNode_name = "unassigned";
	currentNode_layer = "unassigned";
	currentNode_group = "unassigned";
	currentNode_attributes = "unassigned";
	currentNode_attributeStatus = "unpopulated";  // 3.2.02b
	currentNode_type = "unassigned";
	currentNode_tags = "unassigned";
	currentNode_tags = "unassigned";

*/

	currentNode_linked = false;
	cvjs_setCurrentNodeValues(currentNode_underbar, currentNode_name, currentNode_id, currentNode_layer, currentNode_group, currentNode_attributes, currentNode_attributeStatus, currentNode_type, currentNode_tags, currentNode_occupancy, currentNode_linked);

	
	//console.log("before addHandleFunc_CopyCircle");
	cvjs_addHandleFunc_CopyCircle();

}


/**
 * Delete a Space Object
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */  	

function cvjs_deleteSpaceObject(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	

	
	if (!cvjs_supressPopUpModal) {		
		cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], languageTable.languages[cvjs_currentLanguage].InfoMessageModal.NotSpaceMode);		
		return ;

	}
//if (true) return;

//	if (icon_command_active == 3)
//		icon_command_active = 0;
//	else
		icon_command_active = 3;
}



function cvjs_ObjectSelected(rmid){
//	 	// placeholder for method in tms_cadviewerjs_modal_1_0_14.js   - must be removed when in creation mode and using creation modal

	xcvjs_ObjectSelected(rmid);

}


function xcvjs_ObjectSelected(rmid){
	// generic callback method when an object has been clicked

//console.log("hi "+cvjs_spaceObjectUserMode);

//console.log(cvjs_spaceObjectUserMode);



	if (cvjs_spaceObjectUserMode){  // user display mode
//		console.log(rmid+"  "+findRoom(rmid)+" "+vqRooms[cvjs_active_floorplan_div_nr][findRoom(rmid)]);

		jQuery("#drop_locations").html(vqRooms[cvjs_active_floorplan_div_nr][findRoom(rmid)].data("name")+'<span class="caret"></span>');

	}else{   // creation mode

		// this function is often not implemented as the methods defined in cvjsPopUpBody takes precedence

		if (cvjs_debug) console.log("object clicked "+rmid+" command active: "+icon_command_active);
		if (cvjs_debug) console.log(rmid+"  "+findRoom(rmid)+" "+vqRooms[cvjs_active_floorplan_div_nr][findRoom(rmid)]);



		if (icon_command_active == 10){   // layer off
			for (spc in vqRooms[cvjs_active_floorplan_div_nr])
			{
				if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == rmid) {
					var layer = vqRooms[cvjs_active_floorplan_div_nr][spc].data("layer");
					cvjs_LayerOff(layer);
				}
			}
			all_icons_up();
			icon_command_active = 6;
//			jQuery('#select_image').attr("src", ""+cvjs_imagesLocation+"tools/Select_Selected_2.png");
//			jQuery('#cv_select div').css('color', '#000000');
//			jQuery('#cv_select').css('background', '#a4d7f4');

		}
		else
		if (icon_command_active == 3){

			//console.log("delete object");
			for (spc in vqRooms[cvjs_active_floorplan_div_nr])
			{
				if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == rmid) {
					var node = vqRooms[cvjs_active_floorplan_div_nr][spc].data("node");
					cvjs_setUpVqRooms_deleteNode(node);
					CADViewer_floorplan_methods(node);  // deletes all arrays
					
					// 3.0.14g
					// search for node id, then remove svg cv id and node
					// to be implemented
					
				}
			}
		}
		// 4.1.02e
		if (icon_command_active == 33){

			// 4.1.02e
			for (spc in vqRooms[cvjs_active_floorplan_div_nr])
			{
				if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == rmid) {
					var node = vqRooms[cvjs_active_floorplan_div_nr][spc].data("node");
					cvjs_setUpVqRooms_deleteNode(node);
					CADViewer_floorplan_methods(node);  // deletes all arrays
							
					// 4.1.02e, now we have to find node_image and remove.
					console.log("Delete Space Image - the node is: "+node);
					var image_id = "#cv_"+node+"_image";
					
					try{
						jQuery( image_id ).remove();
					}
					catch(err1){
					 console.log(err1);	
					}					
					// make standard mode again
					cvjs_supressPopUpModal = false;	
					cvjs_creationMode = false;
					cvjs_standardHighLightColors = true;
										
					for (var room in vqRooms[cvjs_active_floorplan_div_nr]){

						if (vqRooms[cvjs_active_floorplan_div_nr][room].data("node") == node){
						
							// do nothing!
							// console.log("DO NOT MAKE NODE MODAL! "+ vqRooms[cvjs_active_floorplan_div_nr][room].data("node"));
						}
						else{
							var htitle = "<table width=\"100%\"><tr><td class=\"cvjs_modal_header_1\" onclick=\"cvjs_popupTitleClick(\'"+vqRooms[cvjs_active_floorplan_div_nr][room].data("id")+"\');\">"+vqRooms[cvjs_active_floorplan_div_nr][room].data("name")+"</td>"+
								"<td class=\"cvjs_modal_header_info_1\" onclick=\"hideOnlyPop("+room+");\"><i class=\"fa fa-times\"></i></td></tr>"+
								"<tr><td cols=\"2\"><h4 id=\"cvjs_modal_header_info_2\">"+vqRooms[cvjs_active_floorplan_div_nr][room].data("type")+"</h4></td></tr></table>";

					//console.log("dual_hbody_flag "+dual_hbody_flag+"  floor.rooms[bRoom].id   "+floor.rooms[bRoom].id);

							if (dual_hbody_flag){
								if ( parseInt(cvjs_currentNode_id) >=-1){
									jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
										style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
										position: {my: 'bottom center', at: 'top left'}, //   my: 'bottom center', at: 'top center'
										hideOnHTMLClick: 'false'});
								}else{
									jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody_2, title: htitle},
										style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
										position: {my: 'bottom center', at: 'top left'}, //   my: 'bottom center', at: 'top center'
										hideOnHTMLClick: 'false'});
								}
							}

							if (!dual_hbody_flag){
									jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
										style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
										position: {my: 'bottom center', at: 'top left'},
										hideOnHTMLClick: 'false'});
							}
							
						}

					}
					
					hideOnlyPop();
					cvjs_clearDrawing();

					// 4.1.02f
				}
			}
		}
		
		// 4.1.02g
		if (icon_command_active == 34){

			// 4.1.02e
			for (spc in vqRooms[cvjs_active_floorplan_div_nr])
			{
				if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == rmid) {
					var node = vqRooms[cvjs_active_floorplan_div_nr][spc].data("node");

					CADViewer_floorplan_methods(node);  // deletes all arrays
							
					if (cvjs_debug) console.log("Resize Space Image - the node is: "+node);
					
					var image_id = "#cv_"+node+"_image";
					var path_id = "#cv_"+node;
					var image_height = jQuery( image_id ).attr("height"); 
					var image_width = jQuery( image_id ).attr("width"); 
					var image_x = jQuery( image_id ).attr("x"); 
					var image_y = jQuery( image_id ).attr("y"); 
					var path_d = jQuery( path_id ).attr("d");
					
					console.log(image_x+"  "+image_y+"  "+image_width+" "+image_height+"  path: "+path_d);				
//					window.alert(rmid);		
					//cvjs_highlightSpaceObjectIdDiv(rmid, highlight_colorgrade_A_1, roomLayer1, floorplan_div_Array[cvjs_active_floorplan_div_nr]);		
	
					cvjs_supressPopUpModal = false;	
					cvjs_creationMode = false;
					cvjs_standardHighLightColors = true;
					hideOnlyPop();
					cvjs_clearDrawing();


			/**  default color for standard Space Object selection mode  - not selected   */
				defaultColor = {
						fill: '#FFF',
						"fill-opacity": "0.1",
						stroke: '#CCC',
						'stroke-width': 1,
						'stroke-linejoin': 'round',
					};
			/**  default color for standard Space Object selection mode  - highlighted   */
				highlight = {
						fill: '#FFF',
						"fill-opacity": "0.1",
						stroke: '#FFF',
						'stroke-width': 3
					};
			/**  default color for standard Space Object selection mode  - selrcted   */
				selectColor = {
						fill: '#FFF',
						"fill-opacity": "0.5",
						stroke: '#FFF',
						'stroke-width': 3
					};
	
					console.log("call cvjs_addHandleFunc_ResizeImageSpace");
					cvjs_addHandleFunc_ResizeImageSpace(node, rmid, image_height, image_width, image_x, image_y, path_d);
					console.log("after call cvjs_addHandleFunc_ResizeImageSpace");


					
					
					
				}
			}
		}
		
		else{   // it is select for highlight

			for (spc in vqRooms[cvjs_active_floorplan_div_nr])
			{
				if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == rmid) {
					var node = vqRooms[cvjs_active_floorplan_div_nr][spc].data("node");
					CADViewer_floorplan_methods(node);
				}
			}
		}

	}
	currentSelectedId = rmid;
}



/**
 * Sets the mode of Space Object to either display or create
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

function cvjs_changeSpaceObjectDisplayMode(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	

	
	
	// 3.3.06e  - change the load to bypass settings
	if (cvjs_changeSpaceObject_ManualCreationMode){

		if (cvjs_debug) console.log("cvjs_changeSpaceObjectDisplayMode here - generic handling");
		
		cluster_host_flag = 1;
		
		var j=0;
		for (i=0; i < 100; i++){
				//		for (i=0; i < 6; i++){
	//		fArr_Name[j] = data[i].LOCATION;  // name of space
	//		fArr_Id[j] = data[i].LOCATIONSID;     // if of space
			fArr_Name[j] ="";  // name of space
			fArr_Id[j] = "";     // if of space

			fArr_PolygonNr[j] = -1;    // no association with room polygons yet
			fArr_PolygonLayerName[j] = "none"; // no association with room polygons yet
			fArr_Type[j] = -1;
			fArr_Occupancy[j] = -1;
			fArr_Tags[j] = -1;

			//window.alert(i+" "+data[i].LOCATION+" "+data[i].LOCATIONSID+" "+fArr_Name[j]+"  "+fArr_Id[j]+"  "+data[i][maximo_includecols1]);
			j++;
		}
		
		
		
		
		cvjs_supressPopUpModal = true;	
		cvjs_creationInputType = 2;
		
		
// before 6.2.55	   NOTE NOTE NOTE  	
//		cvjs_creation_modal_show(floorplan_div);


		if (cvjs_supressPopUpModal == true){
			
			cvjs_setCreationMode(cvjs_supressPopUpModal, true);
			hideOnlyPop();
			cvjs_clearDrawing();		
			// 3.2.02c
			cvjs_draw_space_object_names_on_spaces();
			// turn on/off the div in SpaceObjects_C_1_06

			cvjs_spaceObjectsChangeSettingsModal(floorplan_div);  // 6.2.55		


//			cvjs_spaceObjectInputPanel(floorplan_div);  pre 6.2.55 controlling modal, now dormant.

		}


		
		
		// this is how we do this
		return;
	}
	
	
	

	if (cluster_host_flag == 0){
		cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], languageTable.languages[cvjs_currentLanguage].InfoMessageModal.ConnectToHostFirst);
	}
	else{

		hideOnlyPop();
		cvjs_clearDrawing();

		cvjs_supressPopUpModal = !cvjs_supressPopUpModal;  // 3.2.02c
		
		
		if (cvjs_supressPopUpModal){
	//
	//		call_cluster_host();
	
			//3.2.02c
			//cvjs_spaceObjectInputPanel(floorplan_div);
			cvjs_showCreationModeModal(floorplan_div)
		
		}else{
			jQuery("#IconMenuPanel").hide();

		}
	}

}


function setLocationMode(){


}



function cvjs_change_space(rmid){


	if (!cvjs_spaceObjectUserMode) return;

if (cvjs_debug) 	console.log("change space "+rmid);

	hidePop();
	setLocationMode();


	if (rmid == 0)
		{
		//  setBuildingFloorAllOffices(vqBuilding, vqFloor);
    	//closeAllPopups(-1);

//		space = cvjs_highlightRoomImmediate(rmid);
		jQuery("#drop_locations").html('All Spaces<span class="caret"></span>');     // we have hardcoded entry 0 to 'All Locations'

		}
	else
		{

		// setBuildingFloorOffice(vqBuilding, vqFloor, rmid);
		space = cvjs_highlightRoomImmediate(rmid, true);

//console.log("highlightImmediate space="+space+"  rmid="+rmid);
		if (space >= 0)
			{
			spaceId = rmid;
			lastObj[cvjs_active_floorplan_div_nr] = space;

//			CheckRoomOnScreen(vqRooms[cvjs_active_floorplan_div_nr][space]);

window.alert("cv changespace");			
	    	jQuery(vqRooms[cvjs_active_floorplan_div_nr][space].node).qtip('show');

			// new
			//console.log(vqRooms[cvjs_active_floorplan_div_nr][space].data("name"));

// figure out if sensor or location, change lists
			var id = vqRooms[cvjs_active_floorplan_div_nr][space].data("id");

//console.log(" change_room  id="+id);



////////////  THIS GENERATION IS DEPENDING ON WHICH TYPE OF OBJECT SELECTED

/*
			if (parseInt(id) >=-1){

				jQuery("#drop_locations_sensors").html('Locations <span class="caret"></span>');
				// sort drop_location list locations
				jQuery("#locations").html(cvjs_newList);
				cvjs_LayerOn_AllOff("Locations");

			}
			else{
				jQuery("#drop_locations_sensors").html('Sensors <span class="caret"></span>');
				// sort drop_location list fixtures
				jQuery("#locations").html(newListSensors);
				cvjs_LayerOn_AllOff("Sensors");
			}

*/


			jQuery("#drop_locations").html(vqRooms[cvjs_active_floorplan_div_nr][space].data("name")+'<span class="caret"></span>');

			}
		}

//console.log("after change_space");


}


function sortByColumn(a, colIndex){

    a.sort(sortFunction);

    function sortFunction(a, b) {
        if (a[colIndex] === b[colIndex]) {
            return 0;
        }
        else {
            return (a[colIndex] < b[colIndex]) ? -1 : 1;
        }
    }

    return a;
}


/**
 * Display of Space Object structure in User Mode, with enabled seach panel
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */
 
function cvjs_displaySpaceObjectsStructure(floorplan_div){
	

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	

	cvjs_displaySpaceObjectsStructureInternal(floorplan_div, "", "", "", "");	
	
}



function cvjs_displaySpaceObjectsStructureInternal(floorplan_div, userSiteName, dropFloor, dropFloorList, myCustomFunction){


	if (floorplan_div.indexOf("_svg")>-1) floorplan_div = floorplan_div.substring(0,floorplan_div.indexOf("_svg"));

console.log("cvjs_displaySpaceObjectsStructure:  "+floorplan_div);



	cvjs_setCreationMode(false, true);
	hideOnlyPop();
	cvjs_clearDrawing();

	
	
if (cvjs_debug) 	console.log("1 display Space Object Structure");

	// 3.2.01g
	if ( !(typeof id_supress_call_cluster_host === 'undefined') && id_supress_call_cluster_host == true){				
		// do nothing, we are not calling cluster_host
	}
	else{
		// standard case, call cluster host
		call_cluster_host();
		
	}

		
	cvjs_setSpaceObjectUserMode(true);

	
	
	
	
	

	
	
	
if (cvjs_debug) 	console.log("2 display Space Object Structure");


	// this is not needed, being overwritten by below
 	//cvjs_setIconInterfaceControls_ClassicSkin(true);

	
//NOTE BLOCKED FOR TESTING 2018-08-20	
	
	// 3.1.20e  - uncomment this .....
	// cvjs_setIconInterfaceControls_MimimumDisk(true);
// 3.0.14e
//	jQuery('#gMenu_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("<div class=\"controls_min\"><li style=\"list-style-type:none\" id=\"zoom-extents\"><i class=\"fa fa-arrows-alt\"></i></li><li style=\"list-style-type:none\" id=\"zoom-in\"><i class=\"fa fa-plus\"></i></li><li style=\"list-style-type:none\" id=\"zoom-out\"><i class=\"fa fa-minus\"></i></li><li style=\"list-style-type:none\" id=\"zoom-window\"><i class=\"fa fa-search-plus\"></i></li></div>");

	
	
	
	
/*

	if (!isSmartPhoneOrTablet)
		jQuery('#gMenu').html("<img src=\""+cvjs_imagesLocation+"PanZoomFull.png\" usemap=\"#PanZoomMapClassic\" border=\"0\" height=\"267\" width=\"79\" class=\"map\" hidefocus=\"true\">");
	else
		jQuery('#gMenu').html("<img src=\""+cvjs_imagesLocation+"ZoomExtentsDevice.png\" usemap=\"#ZoomExtentsDeviceMapClassic\" border=\"0\" height=\"176\" width=\"79\" class=\"map\" hidefocus=\"true\">");

*/


/*  4.1.02d
	jQuery('#floatNavigationMenu_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
*/
	
		

/*
	jQuery("<link/>", {
	   rel: "stylesheet",
	   type: "text/css",
	   href: cvjs_defaultJSPath+"/space/css/vqjs_47.css"
	}).appendTo("head");

*/

	jQuery("<link/>", {
	   rel: "stylesheet",
	   type: "text/css",
	   href: cvjs_applicationFolder + "/user_resources/css/topbar.css"
	}).appendTo("head");


	jQuery("<link/>", {
	   rel: "stylesheet",
	   type: "text/css",
	   href: cvjs_applicationFolder + "/user_resources/css/navbar.css"
	}).appendTo("head");


	jQuery("<link/>", {
	   rel: "stylesheet",
	   type: "text/css",
	   href: cvjs_applicationFolder + "/user_resources/css/headerbar.css"
	}).appendTo("head");

	jQuery("<link/>", {
	   rel: "stylesheet",
	   type: "text/css",
	   href: cvjs_applicationFolder + "/user_resources/css/legend.css"
	}).appendTo("head");


	jQuery("<link/>", {
	   rel: "stylesheet",
	   type: "text/css",
	   href: cvjs_applicationFolder + "/user_resources/css/tempbar.css"
	}).appendTo("head");


	jQuery("<link/>", {
	   rel: "stylesheet",
	   type: "text/css",
	   href: cvjs_applicationFolder + "/user_resources/css/wizards.css"
	}).appendTo("head");


	jQuery("<link/>", {
	   rel: "stylesheet",
	   type: "text/css",
	   href: cvjs_applicationFolder + "/user_resources/css/font-awesome.css"
	}).appendTo("head");

	jQuery("<link/>", {
	   rel: "stylesheet",
	   type: "text/css",
	   href: cvjs_applicationFolder + "/user_resources/css/modal_01.css"
	}).appendTo("head");



	jQuery("<link/>", {
	   rel: "stylesheet",
	   type: "text/css",
	   href: cvjs_applicationFolder + "/user_resources/css/combined-floorplan.css"
	}).appendTo("head");


	
	


//	4.1.02d
		cvjs_displayTopMenuIconBar(false, floorplan_div);  // disable top menu icon bar		
		jQuery("#topIconMenu_placeholder_1_"+floorplan_div+"_svg").hide();
		jQuery("#floatNavigationMenu_"+floorplan_div+"_svg").hide();
		cvjs_hideNavigationMenu(floorplan_div);
	
//  THIS IS STANDARD LAYOUT USERS CAN CUSTOM CHANGE IN PULLDOWN MENU METHODS!!!!
	
	


    //nav_user_SpaceObjects_1_01.html
	// 3.0.14e
	// 3.2.02g
	//jQuery( "#cvjs_spaceObjectUserDisplay" ).load(cvjs_defaultJSPath+"/space/html/nav_user_SpaceObjects_A_1_12.html", function() {  // 3.2.01e    // 3.1.20e

	jQuery( "#cvjs_spaceObjectUserDisplay" ).load(cvjs_ServerUrl+"/app/cv/cv-pro/space/html/nav_user_SpaceObjects_A_3_3_01.html", function() {  // 3.3.01b   
	// 3.3.01a
//	jQuery( "#cvjs_spaceObjectUserDisplay" ).load(cvjs_defaultJSPath+"/space/html/nav_user_SpaceObjects_A_3_3_01.html", function() {  // 3.3.01b   

	
//window.alert("loading spaceObjectUser....");	
	
		// 3.0.14f 
		jQuery("#searchModal").hide();
		jQuery("#searchModal").draggable();
		jQuery("#searchModal").css({position: 'absolute'});
		jQuery("#searchModal").css({left: 300, top: 100});
		
		jQuery('#searchModalCloseButton').on('click', function() {
			jQuery("#searchModal").hide();
		});
		// 3.0.14f 



		jQuery("#site_name").html(cvjs_FileNameNoExtension);

		var html_string = "<img src=\'"+cvjs_imagesLocation+"menu_cv_search_right.png\'>";	 
//window.alert(html_string);			
		jQuery("#iconSearch").html(html_string);
		
		html_string = "<img src=\'"+cvjs_imagesLocation+"logo_cv_d.png\'>";		
		jQuery("#user_logoCV").html(html_string);
		
		
//		jQuery("#user_menu_CV").html("<img src=\""+cvjs_imagesLocation+"menu_cv_right.png\">");
		html_string = "<img src=\'"+cvjs_imagesLocation+"menu_cv_right.png\'>";		


		jQuery("#dropdownMenu1").append(html_string);



		if ( userSiteName == undefined ||  userSiteName ==""){
			jQuery("#site_name").html(cvjs_FileNameNoExtension);
		}
		else{
			jQuery("#site_name").html(userSiteName);

		}


		if ( dropFloor == undefined ||  dropFloor ==""){


			if (multiPages[cvjs_active_floorplan_div_nr].currentPage>=1)
				jQuery("#drop_floor").html(multiPages[cvjs_active_floorplan_div_nr].pages[(multiPages[cvjs_active_floorplan_div_nr].currentPage)-1].pageName+'<span class="caret"></span>');

			var newFloorList = "";
			
			
			// 3.1.20g  settings in /app/js/space/custom_settings.js
			if (id_main_data_dropfloor_single_drawing==true){
				for (var i=0; i<1; i++){
					newFloorList = newFloorList + "<li><a href=\"javascript:change_drawing('"+i+"')\">"+multiPages[cvjs_active_floorplan_div_nr].pages[i].pageName+"</a></li>";
				}
			}
			else{
				for (var i=0; i<multiPages[cvjs_active_floorplan_div_nr].multiPages; i++){
					newFloorList = newFloorList + "<li><a href=\"javascript:change_drawing('"+i+"')\">"+multiPages[cvjs_active_floorplan_div_nr].pages[i].pageName+"</a></li>";
				}
			}
			
			jQuery("#floors_list").html(newFloorList);

		}
		else{

			jQuery("#drop_floor").html(dropFloor+'<span class="caret"></span>');

			var newFloorList = "";

			for (var i=0; i<dropFloorList.length; i++){
				newFloorList = newFloorList + "<li><a href=\"javascript:change_drawing('"+i+"')\">"+dropFloorList[i]+"</a></li>";
			}
			jQuery("#floors_list").html(newFloorList);

		}



	

		// THIS LIST SHOULD BE EXPANDED - we take the user layer

		if (id_main_data_layer==""){
			jQuery("#locations_sensors_list").html("<li><a href=\"javascript:change_objects_generic('"+0+"')\">"+languageTable.languages[cvjs_currentLanguage].HeaderObjectLayers.ObjectLayer[0]+"</a></li>"+"<li><a href=\"javascript:change_objects_generic('"+1+"')\">"+languageTable.languages[cvjs_currentLanguage].HeaderObjectLayers.ObjectLayer[1]+"</a></li>");
			jQuery("#drop_locations_sensors").html(languageTable.languages[cvjs_currentLanguage].HeaderObjectLayers.ObjectLayer[0]+' <span class="caret"></span>');
		}
		else{
			jQuery("#locations_sensors_list").html("<li><a href=\"javascript:change_objects_generic('"+0+"')\">"+id_main_data_layer+"</a></li>");
			jQuery("#drop_locations_sensors").html(id_main_data_layer+' <span class="caret"></span>');

		}

		jQuery("#drop_locations").html('All Spaces<span class="caret"></span>');

	

		// 3.2.02g
		// descriptions for dropdowns
		
		
			

		jQuery("#drop_floor").mouseenter(function(event) {
			// Show the descriptor with user text information
			cvjs_displayInformationModal("floorPlan_svg", "Changes layout of the drawing, in case multiple layouts for the current drawing is available.", 110, jQuery("#drop_floor").offset().left+100, jQuery("#drop_floor").offset().top + 20 );
		});


		jQuery("#drop_floor").mouseleave(function(event) {
			// hide the descriptor with user text information
			cvjs_hideInformationModal("floorPlan" );
		});

		
		jQuery("#drop_locations_sensors").mouseenter(function(event) {
			// Show the descriptor with user text information
			cvjs_displayInformationModal("floorPlan_svg", "Selects the data-layer(s) with interactive content if multiple layers are available, as default this is cvjs_Data_Layer.", 110, jQuery("#drop_locations_sensors").offset().left+100, jQuery("#drop_locations_sensors").offset().top + 20 );
		});


		jQuery("#drop_locations_sensors").mouseleave(function(event) {
			// hide the descriptor with user text information
			cvjs_hideInformationModal("floorPlan" );
		});
		
		jQuery("#drop_locations").mouseenter(function(event) {
			// Show the descriptor with user text information
			cvjs_displayInformationModal("floorPlan_svg", "Drop-down access to all interactive content in the current drawing displayed. Select the object by it's ID.", 110, jQuery("#drop_locations").offset().left+100, jQuery("#drop_locations").offset().top + 20 );
		});


		jQuery("#drop_locations").mouseleave(function(event) {
			// hide the descriptor with user text information
			cvjs_hideInformationModal("floorPlan" );
		});
		
		
	
	
		// 3.1.20i
		// Custom Lists		
		jQuery("#dropdown_custom_1").hide();
		jQuery("#dropdown_custom_2").hide();
		jQuery("#dropdown_custom_3").hide();
		// 3.2.01e
		jQuery("#dropdown_custom_4").hide();
		jQuery("#dropdown_custom_5").hide();
		jQuery("#dropdown_custom_6").hide();
	


		try{
			if (id_custom_1_dropdown_name!=""){		
				jQuery("#dropmenu_custom_1").html(id_custom_1_dropdown_name+' <span class="caret"></span>');
				cvjs_buildCustom_1_dropdownMenu();
				jQuery("#dropdown_custom_1").show();
			}
		}
		catch (err){
			console.log("1"+err);	
		}


		try{
			if (id_custom_2_dropdown_name!=""){		
				jQuery("#dropmenu_custom_2").html(id_custom_2_dropdown_name+' <span class="caret"></span>');
				cvjs_buildCustom_2_dropdownMenu();
				jQuery("#dropdown_custom_2").show();
			}
		}
		catch (err){	
			console.log("2"+err);
		}
		
				
		
		if (id_custom_3_dropdown_name!=""){		
			jQuery("#dropmenu_custom_3").html(id_custom_3_dropdown_name+' <span class="caret"></span>');
			cvjs_buildCustom_3_dropdownMenu();			
			jQuery("#dropdown_custom_3").show();
		}
		


		// 3.2.01e
		if (id_custom_4_dropdown_name!=""){		
			jQuery("#dropmenu_custom_4").html(id_custom_4_dropdown_name+' <span class="caret"></span>');
			cvjs_buildCustom_4_dropdownMenu();			
			jQuery("#dropdown_custom_4").show();
		}

		
		if (id_custom_5_dropdown_name!=""){		
			jQuery("#dropmenu_custom_5").html(id_custom_5_dropdown_name+' <span class="caret"></span>');
			cvjs_buildCustom_5_dropdownMenu();			
			jQuery("#dropdown_custom_5").show();
		}
		
		if (id_custom_6_dropdown_name!=""){		
			jQuery("#dropmenu_custom_6").html(id_custom_6_dropdown_name+' <span class="caret"></span>');
			cvjs_buildCustom_6_dropdownMenu();			
			jQuery("#dropdown_custom_6").show();
		}

		
		var Val = (typeof id_supress_standard_dropdown_menus === 'undefined');
//		window.alert("here "+Val+"     " + id_supress_standard_dropdown_menus);	
		// 3.2.01f
		if ( !(typeof id_supress_standard_dropdown_menus === 'undefined') && id_supress_standard_dropdown_menus != false){
			jQuery("#drop_locations").html("");
			jQuery("#drop_floor").html("");
			jQuery("#drop_locations_sensors").html("");
		}
		
		
	

		
		// selections list to the left

		//var selections_list = "<li role=\"presentation\"><a href=\"#\" class=\"mapData\">XData Maps</a></li><li role=\"presentation\" class=\"divider\"></li><li role=\"presentation\"><a href=\"#\" class=\"siteInfo\">Site Details</a></li>";
		var selections_list = "<li><a href=\"javascript:display_maps()\">Data Maps</a></li><li role=\"presentation\" class=\"divider\"></li><li><a href=\"javascript:display_info()\">Site Info</a></li>";

		//window.alert(selections_list);

		jQuery('#selections_list').html(selections_list);
		//jQuery('#selections_list').html(newFloorList);



		
/****4.1.02d - remove
		

		//*******************************************
		/*	FLOORPLAN CONTROLS
		/******************************************** /

		jQuery('#zoom-in').on('click', function() {
		
			cvjs_zoomIn(floorplan_div);
		});

		jQuery('#zoom-in').on('mouseover', function() {

		});


		jQuery('#zoom-out').on('click', function() {
			cvjs_zoomOut(floorplan_div);
		});

		jQuery('#zoom-extents').on('click', function() {
			cvjs_resetZoomPan(floorplan_div);
		});

		jQuery('#zoom-window').on('click', function() {
			cvjs_zoomWindow(floorplan_div);
		});


**/		
		
		
		cvjs_newList = "<li><a href=\"javascript:cvjs_change_space('0')\">All Spaces</a></li>";

		var roomsListNames = new Array();
		var ii = 0;
		for (spc in vqRooms[cvjs_active_floorplan_div_nr])
		{
			roomsListNames[ii] = new Array();
			roomsListNames[ii][0] = vqRooms[cvjs_active_floorplan_div_nr][spc].data("id");
			roomsListNames[ii][1] = vqRooms[cvjs_active_floorplan_div_nr][spc].data("name");;
			ii++;
		}

		var sorted_Rooms = sortByColumn(roomsListNames, 0);
			for (spc in sorted_Rooms)
			{
					if (myCustomFunction=="" || myCustomFunction==undefined)
						cvjs_newList = cvjs_newList + "<li><a href=\"javascript:cvjs_change_space('"+sorted_Rooms[spc][0]+"')\">"+sorted_Rooms[spc][1]+"</a></li>";
					else
						cvjs_newList = cvjs_newList + "<li><a href=\"javascript:"+myCustomFunction+"('"+sorted_Rooms[spc][0]+"')\">"+sorted_Rooms[spc][1]+"</a></li>";
			}

/*
			for (spc in vqRooms[cvjs_active_floorplan_div_nr])
			{
				var vqid = vqRooms[cvjs_active_floorplan_div_nr][spc].data("id");
					var vqname = vqRooms[cvjs_active_floorplan_div_nr][spc].data("name");
					cvjs_newList = cvjs_newList + "<li><a href=\"javascript:cvjs_change_space('"+vqid+"')\">"+vqname+"</a></li>";
			}

*/



		jQuery("#locations").html(cvjs_newList);

		
		jQuery('.siteInfo').click(function() {
			if (cvjs_debug) console.log("Site Info");
		});

		jQuery('.mapData').click(function() {
			jQuery("#mapDataModal").modal('show');
		});



		jQuery('#iconSearch').click(function() {

			jQuery('#SearchQuantity').html("");
			jQuery('#SearchResultsList').html("");
			jQuery('#searchfield_tag').val("");

			cvjs_hidePop();  // hide all pop-up menus on CADViewer canvas
			jQuery("#drop_locations").html('All Spaces<span class="caret"></span>');
			
			jQuery('#searchfield_tag').val("");

			buildSearchList(myCustomFunction);

//			jQuery("#searchModal").modal('show');

			 // 3.0.14f 
			 jQuery("#searchModal").show();
			
			
			
		});


		jQuery('#iconSearch').mouseover(function() {
    		jQuery('#iconSearch').css('cursor','pointer');
		});




		jQuery("#searchfield_tag").on("change keyup paste", function(){

	//console.log("on change");

			buildSearchList(myCustomFunction);

	/*
			jQuery(document).keypress(function(e) {
				if(e.which == 13) {
					// alert('You pressed enter!');
					var i=0; // do nothing

				}
				else{
					jQuery('#SearchResultsList').html("");
				}
			});
			//console.log("we have search input");

	*/


		});


		jQuery("#searchfield_tag").submit(function(){

			//console.log("submit search");

		});




		jQuery("#searchModal").submit(function() {

		// console.log("submit...");
			buildSearchList(myCustomFunction);
		});


		jQuery('#search_button').click(function() {
			buildSearchList(myCustomFunction);
		});

		jQuery('#searchfield_tag').click(function() {

		//			jQuery('#SearchTitle').html("");
		//			jQuery('#SearchTitle2').html("");
		//			jQuery('#SearchQuantity').html("");
		//			jQuery('#SearchResultsList').html("");

				buildSearchList(myCustomFunction);

		});

	});


	// display the datamaps

	cvjs_displayMapsStatus = true;
	jQuery("#datamaps_form").show();

	if ( jQuery("#cvjs_displayData_switch").prop("checked")){
		jQuery("#datamaps_form").css("left", 40).css("top", jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position().top + jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height()-197);
	}else{
		jQuery("#datamaps_form").css("left", 40).css("top", jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position().top + jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height()-120);
	}


	
// 3.0.14f
//window.alert("lets call custom");
custom_host_parser_PopUpMenu();



		
	
}


var seachInObjArrFlag = 0;
var seachInObjArrCounter = 0;

function buildSearchList(myCustomFunction){

//window.alert("buildSearchList");

		var val = jQuery('#searchfield_tag').val();

		seachInObjArrFlag = 0;
		seachInObjArrCounter = 0;

		var res = searchInObjArray(vqRooms, val.toLowerCase());

		if (seachInObjArrFlag == 1  || seachInObjArrCounter == 0){

			var jj=0;
			jQuery('#SearchQuantity').html("0 item(s)");
			jQuery('#SearchResultsList').html("");
		}
		else{

			jQuery('#SearchQuantity').html(res.length+" item(s)");

			jQuery('#SearchResultsList').html("");
//				jQuery('#SearchResultsList').html("<div class='search-results-list'>");

			for (i=0; i < res.length; i++)
			{

	// 2019-09-03
				var d ="";

				if (myCustomFunction=="" || myCustomFunction==undefined)
					d = "<div class=\"searchItem row\"><div class=\"searchSubItem col-md-12\" onmouseup=\"search_pick_space\(\'"+vqRooms[cvjs_active_floorplan_div_nr][res[i]].data("id")+"\'\)\"onmouseover=\"search_highlight_space\(\'"+vqRooms[cvjs_active_floorplan_div_nr][res[i]].data("id")+"\'\);\" onmouseout=\"search_highlight_mouseout();\">";
				else
					d = "<div class=\"searchItem row\"><div class=\"searchSubItem col-md-12\" onmouseup=\""+myCustomFunction+"(\'"+vqRooms[cvjs_active_floorplan_div_nr][res[i]].data("id")+"\'\)\"onmouseover=\"search_highlight_space\(\'"+vqRooms[cvjs_active_floorplan_div_nr][res[i]].data("id")+"\'\);\" onmouseout=\"search_highlight_mouseout();\">";

//				var d = "<div class=\"searchItem row\"><div class=\"searchSubItem col-md-12\" onmouseup=\"search_pick_space\(\'"+vqRooms[cvjs_active_floorplan_div_nr][res[i]].data("id")+"\'\)\"onmouseover=\"search_highlight_space\(\'"+vqRooms[cvjs_active_floorplan_div_nr][res[i]].data("id")+"\'\);\" onmouseout=\"search_highlight_mouseout();\">";


				// 3.1.20g  // check for <br> in name
				var typeEntry = vqRooms[cvjs_active_floorplan_div_nr][res[i]].data("type");
				if (typeEntry.indexOf("<br>")>0){
					typeEntry = typeEntry.replace(/<br>/g,'   -   ');					
				}
				var sr = d+ "<div class=\"searchItem-name\">"+vqRooms[cvjs_active_floorplan_div_nr][res[i]].data("name") +
					"</div><div class=\"searchItem-type\"><small>"+typeEntry+"</small></div>";  // 3.1.20g

//				var sr = d+ "<div class=\"searchItem-name\">"+vqRooms[cvjs_active_floorplan_div_nr][res[i]].data("name") +
//					"</div><div class=\"searchItem-type\"><small>"+vqRooms[cvjs_active_floorplan_div_nr][res[i]].data("type")+"</small></div>";

				jQuery('#SearchResultsList').append(sr);
			}

//                jQuery('#SearchResultsList').append("</div>");

		}

		return false;

}



	function getUnique(a) {
	  var b = [a[0]], i, j, tmp;
	  for (i = 1; i < a.length; i++) {
		tmp = 1;
		for (j = 0; j < b.length; j++) {
		  if (a[i] == b[j]) {
			tmp = 0;
			break;
		  }
		}
		if (tmp) {
		  b.push(a[i]);
		}
	  }
	  return b;
	}




function searchInObjArray(arr, item)
{
	var newArr = new Array();

//console.log("1");

	try{

//console.log("2");

			for (var room in vqRooms[cvjs_active_floorplan_div_nr])
			{

	//console.log("3");

	//console.log(" name="+vqRooms[cvjs_active_floorplan_div_nr][room].data('name')+" type="+vqRooms[cvjs_active_floorplan_div_nr][room].data('type')+ " item="+item);

				if (vqRooms[cvjs_active_floorplan_div_nr][room].data('name').toLowerCase().indexOf(item) != -1){

	//console.log("1x push room="+room);
					seachInObjArrCounter = 1;

					newArr.push(room);
				}
				else if (vqRooms[cvjs_active_floorplan_div_nr][room].data('type').toLowerCase().indexOf(item) != -1){

	//console.log("2x push room="+room);
					seachInObjArrCounter = 1;

					newArr.push(room);
				}

			}


			item = item.replace(/ /gi, "&nbsp;");                      /// LLLLLLLL
			item = item.replace(/\u00A0/gi, "&nbsp;");


			for (var room in vqRooms[cvjs_active_floorplan_div_nr])
			{

	//console.log("item="+item);

				var i = 1;
				var tagName = "tag1";
				var tagData = vqRooms[cvjs_active_floorplan_div_nr][room].data(tagName);
				while (tagData != undefined)
					{
					if (tagData.toLowerCase().indexOf(item) != -1){
	//console.log("push room");
						seachInObjArrCounter = 1;
						newArr.push(room);
					}
					tagName = "tag" + (++i);
					tagData = vqRooms[cvjs_active_floorplan_div_nr][room].data(tagName);
					}
	//console.log("after item");

			}

	}
	catch(err){

		seachInObjArrFlag = 1;
		console.log("Err C "+err);

	}


	return getUnique(newArr);
}


var mouseout_flag = true;

function search_highlight_mouseout(){

	if (mouseout_flag)
		cvjs_clearAllDrawing();
	else
		mouseout_flag = true;

}


function search_highlight_space(trigger){

	cvjs_highlightRoomImmediate(trigger, true);
}


function search_pick_space(trigger){

	 cvjs_pick_space(trigger);
	 mouseout_flag = false;
//	 jQuery("#searchModal").modal('hide');

	 // 3.0.14f 
	 jQuery("#searchModal").hide();
	// no let us leave the search modal up
	 
	 
}



var settings_changes = 0;



/**
 * Settings of how Space Objects communicates with user defined back-end
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

function cvjs_spaceObjectSettings(floorplan_div){


	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	

		

	settings_changes = 0;

	jQuery("#cvjs_spaceObjectAdminSettings"+"_"+floorplan_div).show();   // 3.0.14e
						
	jQuery( "#cvjs_spaceObjectAdminSettings_"+floorplan_div ).load(cvjs_ServerUrl+"/app/cv/cv-pro/space/html/nav_admin_SpaceObjects_B_1_05.html", function() {
//	jQuery( "#cvjs_spaceObjectAdminSettings_"+floorplan_div ).load(cvjs_defaultJSPath+"/space/html/nav_admin_SpaceObjects_B_1_05.html", function() {
	
		jQuery("#SettingsPanel").draggable();
		jQuery('#cancel_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/Cancel_Inactive_4.png");
		jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Inactive.png");
		jQuery("#CloseSettingsX").append("<img src=\""+cvjs_imagesLocation+"CrossX.png\">");
		
		// first time - import settings

		if (settings_changes == 0){
			jQuery("#id_api_proxy_url").val(api_proxy_url);
			jQuery("#id_usr").val(usr);
			jQuery("#id_pwd").val(pwd);
			// jQuery("#id_building").val(building_data_identifier);  // removed 2013-05-30
			jQuery("#id_building_name").val(building_name);
			jQuery("#id_company").val(company);
			jQuery("#id_address").val(address);
			jQuery("#id_city").val(city);
			jQuery("#id_zipcode").val(zipcode);
			jQuery("#id_state").val(state);
			jQuery("#id_country").val(country);
			jQuery("#id_FacMgr").val(FacMgr_name);
			jQuery("#id_FacMgr_title").val(FacMgr_title);
			jQuery("#id_FacMgr_email").val(FacMgr_email);
			jQuery("#id_FacMgr_phone").val(FacMgr_phone);
			jQuery("#id_refresh_rate").val(refresh_rate);

			jQuery("#id_data_connector").val(id_data_connector);
			jQuery("#id_data_parser").val(id_data_parser);
			jQuery("#id_publish_location").val(id_publish_location);
			jQuery("#id_main_data_layer").val(id_main_data_layer);

			jQuery("#id_datafield1_name").val(id_datafield1_name);
			jQuery("#id_datafield1_value").val(id_datafield1_value);
			jQuery("#id_datafield2_name").val(id_datafield2_name);
			jQuery("#id_datafield2_value").val(id_datafield2_value);
			jQuery("#id_datalayer1_name").val(id_datalayer1_name);
			jQuery("#id_datalayer1_value").val(id_datalayer1_value);
			jQuery("#id_datalayer2_name").val(id_datalayer2_name);
			jQuery("#id_datalayer2_value").val(id_datalayer2_value);

			jQuery("#cv_link10_id_datalayer_name").val(id_datalayer2_name);

		}
		// first time - import settings



		jQuery('#cancel_settings').mouseover(function()
			{
			    jQuery('#cancel_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/Cancel_Over_2.png");

			});

		jQuery('#cancel_settings').mouseout(function()
			{
			    jQuery('#cancel_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/Cancel_Inactive_4.png");

			});

		jQuery('#cancel_settings').mousedown(function()
			{
			    jQuery('#cancel_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/Cancel_Down_3.png");

				// cancel all settings - reset all
				jQuery("#id_api_proxy_url").val(api_proxy_url);
				jQuery("#id_usr").val(usr);
				jQuery("#id_pwd").val(pwd);
				// jQuery("#id_building").val(building_data_identifier);  // removed 2013-05-30
				jQuery("#id_building_name").val(building_name);
				jQuery("#id_company").val(company);
				jQuery("#id_address").val(address);
				jQuery("#id_city").val(city);
				jQuery("#id_zipcode").val(zipcode);
				jQuery("#id_state").val(state);
				jQuery("#id_country").val(country);
				jQuery("#id_FacMgr").val(FacMgr_name);
				jQuery("#id_FacMgr_title").val(FacMgr_title);
				jQuery("#id_FacMgr_email").val(FacMgr_email);
				jQuery("#id_FacMgr_phone").val(FacMgr_phone);
				jQuery("#id_refresh_rate").val(refresh_rate);


				jQuery("#id_data_connector").val(id_data_connector);
				jQuery("#id_data_parser").val(id_data_parser);
				jQuery("#id_publish_location").val(id_publish_location);
				jQuery("#id_main_data_layer").val(id_main_data_layer);



				jQuery("#id_datafield1_name").val(id_datafield1_name);
				jQuery("#id_datafield1_value").val(id_datafield1_value);
				jQuery("#id_datafield2_name").val(id_datafield2_name);
				jQuery("#id_datafield2_value").val(id_datafield2_value);
				jQuery("#id_datalayer1_name").val(id_datalayer1_name);
				jQuery("#id_datalayer1_value").val(id_datalayer1_value);
				jQuery("#id_datalayer2_name").val(id_datalayer2_name);
				jQuery("#id_datalayer2_value").val(id_datalayer2_value);


				// hide settings
				//LegendOff();
				jQuery('#Settings').hide();
				jQuery('#SettingsPanel').hide();

				jQuery('#settings_image').attr("src", ""+cvjs_imagesLocation+"Settings_Up_1.png");
				jQuery('#settings div').css('color', '#DDDDDD');

			});


		jQuery("#id_api_proxy_url").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});

		jQuery("#id_usr").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});


		jQuery("#id_pwd").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});


		jQuery("#id_data_connector").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});

		jQuery("#id_data_parser").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});


		jQuery("#id_publish_location").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});

		jQuery("#id_main_data_layer").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});


		jQuery("#id_datafield1_name").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});
		jQuery("#id_datafield1_value").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});
		jQuery("#id_datafield2_name").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});
		jQuery("#id_datafield2_value").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});

		jQuery("#id_datalayer1_name").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});
		jQuery("#id_datalayer1_value").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});

		jQuery("#id_datalayer2_name").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});
		jQuery("#id_datalayer2_value").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});



		//jQuery("#id_building").click(function() {
		//	settings_changes = 1;
		//	jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		//});

		jQuery("#id_building_name").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});

		jQuery("#id_company").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});

		jQuery("#id_address").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});

		jQuery("#id_city").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});

		jQuery("#id_state").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});

		jQuery("#id_zipcode").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});

		jQuery("#id_country").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});

		jQuery("#id_FacMgr").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});

		jQuery("#id_FacMgr_title").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});

		jQuery("#id_FacMgr_email").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});

		jQuery("#id_FacMgr_phone").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});



		jQuery('#save_settings').mouseover(function()
			{
				if (settings_changes == 1)
			    	jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Over.png");

			});

		jQuery('#save_settings').mouseout(function()
			{
				if (settings_changes == 0)
			    	jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Inactive.png");

				if (settings_changes == 1)
			    	jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");


			});


    var settings_data_file  = "custom_settings.js";


		jQuery('#save_settings').mousedown(function()
			{

				if (settings_changes == 1){

					// check if values are OK

					refresh_rate  = jQuery('#id_refresh_rate').val();
					var number = parseInt(refresh_rate, 10);

					if (number<0){
						console.log("Refresh Rate value must be between 1 and 3600.");
						refresh_rate = -number;
						jQuery('#id_refresh_rate').val(refresh_rate);
					}
					else
						if (number<3601 && number>0){
							refresh_rate = number;
							jQuery('#id_refresh_rate').val(refresh_rate);

						}
						else{

							console.log("Refresh Rate value must be between 1 and 3600.");
							refresh_rate = 30;
							jQuery('#id_refresh_rate').val(refresh_rate);

						}



					jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Down.png");

					settings_changes = 0;

					// save all settings

					// build a file with variables

					api_proxy_url 			 = jQuery('#id_api_proxy_url').val();
					usr            			 = jQuery('#id_usr').val();
					pwd						 = jQuery('#id_pwd').val();

					// building_data_identifier = jQuery('#id_building').val();  // removed 2013-05-30
					building_name            = jQuery('#id_building_name').val();
					company                  = jQuery('#id_company').val();
					address                  = jQuery('#id_address').val();
					city                     = jQuery('#id_city').val();
					zipcode                  = jQuery('#id_zipcode').val();
					state                    = jQuery('#id_state').val();
					country                  = jQuery('#id_country').val();
					FacMgr_name              = jQuery('#id_FacMgr').val();
					FacMgr_title             = jQuery('#id_FacMgr_title').val();
					FacMgr_email             = jQuery('#id_FacMgr_email').val();
					FacMgr_phone             = jQuery('#id_FacMgr_phone').val();

					refresh_rate             = jQuery('#id_refresh_rate').val();


					id_data_connector = jQuery("#id_data_connector").val();
					id_data_parser = jQuery("#id_data_parser").val();
					id_publish_location = jQuery("#id_publish_location").val();
					id_main_data_layer = jQuery("#id_main_data_layer").val();

					id_datafield1_name = jQuery("#id_datafield1_name").val();
					id_datafield1_value = jQuery("#id_datafield1_value").val();
					id_datafield2_name = jQuery("#id_datafield2_name").val();
					id_datafield2_value = jQuery("#id_datafield2_value").val();
					id_datalayer1_name = jQuery("#id_datalayer1_name").val();
					id_datalayer1_value = jQuery("#id_datalayer1_value").val();
					id_datalayer2_name = jQuery("#id_datalayer2_name").val();
					id_datalayer2_value = jQuery("#id_datalayer2_value").val();



					//maximo_rsStart = jQuery("#id_maximo_rsstart").val();
					//maximo_maxItems = jQuery("#id_maximo_maxitems").val();
					//maximo_includecols1 = jQuery("#id_maximo_includecols1").val();
					//maximo_includecols2 = jQuery("#id_maximo_includecols2").val();
					//maximo_includecols3 = jQuery("#id_maximo_includecols3").val();



					var dataUrl="";
					dataUrl = dataUrl +"var usr = \""+usr+"\";\n";
					dataUrl = dataUrl +"var pwd = \""+pwd+"\";\n";
					dataUrl = dataUrl +"var api_proxy_url = \""+api_proxy_url+"\";\n";
					//dataUrl = dataUrl +"var building_data_identifier = \""+building_data_identifier+"\";\n";
					dataUrl = dataUrl +"var building_name = \""+building_name+"\";\n";
					dataUrl = dataUrl +"var company = \""+company+"\";\n";
					dataUrl = dataUrl +"var address = \""+address+"\";\n";
					dataUrl = dataUrl +"var city = \""+city+"\";\n";
					dataUrl = dataUrl +"var zipcode = \""+zipcode+"\";\n";
					dataUrl = dataUrl +"var state = \""+state+"\";\n";
					dataUrl = dataUrl +"var country = \""+country+"\";\n";
					dataUrl = dataUrl +"var FacMgr_name = \""+FacMgr_name+"\";\n";
					dataUrl = dataUrl +"var FacMgr_title = \""+FacMgr_title+"\";\n";
					dataUrl = dataUrl +"var FacMgr_email = \""+FacMgr_email+"\";\n";
					dataUrl = dataUrl +"var FacMgr_phone = \""+FacMgr_phone+"\";\n";
					dataUrl = dataUrl +"var refresh_rate = \""+refresh_rate+"\";\n";

					dataUrl = dataUrl +"var id_data_connector = \""+id_data_connector+"\";\n";
					dataUrl = dataUrl +"var id_data_parser = \""+id_data_parser+"\";\n";
					dataUrl = dataUrl +"var id_publish_location = \""+id_publish_location+"\";\n";
					dataUrl = dataUrl +"var id_main_data_layer = \""+id_main_data_layer+"\";\n";

					dataUrl = dataUrl +"var id_datafield1_name = \""+id_datafield1_name+"\";\n";
					dataUrl = dataUrl +"var id_datafield1_value = \""+id_datafield1_value+"\";\n";
					dataUrl = dataUrl +"var id_datafield2_name = \""+id_datafield2_name+"\";\n";
					dataUrl = dataUrl +"var id_datafield2_value = \""+id_datafield2_value+"\";\n";
					dataUrl = dataUrl +"var id_datalayer1_name = \""+id_datalayer1_name+"\";\n";
					dataUrl = dataUrl +"var id_datalayer1_value = \""+id_datalayer1_value+"\";\n";
					dataUrl = dataUrl +"var id_datalayer2_name = \""+id_datalayer2_name+"\";\n";
					dataUrl = dataUrl +"var id_datalayer2_value = \""+id_datalayer2_value+"\";\n";



//					dataUrl = dataUrl +"var maximo_rsStart = \""+maximo_rsStart+"\";\n";
//					dataUrl = dataUrl +"var maximo_maxItems = \""+maximo_maxItems+"\";\n";
//					dataUrl = dataUrl +"var maximo_includecols1 = \""+maximo_includecols1+"\";\n";
//					dataUrl = dataUrl +"var maximo_includecols2 = \""+maximo_includecols2+"\";\n";
//					dataUrl = dataUrl +"var maximo_includecols3 = \""+maximo_includecols3+"\";\n";


					// save file to .js file in /javascripts folder

//					var saveSettingsUrl = settings_data_url+'save-file-p1.php';
					// data

					var saveSettingsUrl = cvjs_serverHandlersPath + cvjs_serverSaveFileController; //					var saveSettingsUrl = settings_data_url+'save-file-p1.php';

					var settings_data_location = cvjs_defaultJSPath + settings_data_file;

					//NOTE!!!
					var settings_data_location = "../app/js/space/" + settings_data_file;

					var settings_data = {};
					settings_data['file'] = settings_data_location;
					settings_data['file_content'] = dataUrl;
if (cvjs_debug) console.log(dataUrl+" "+settings_data['file']+"  "+saveSettingsUrl);
					jQuery.ajax({
					  url:saveSettingsUrl,
					  type: 'post',
					  data: settings_data,
					  success: function(html){

					  }  // end success

					});


				}

					// 3.2.01g
	if ( !(typeof id_supress_call_cluster_host === 'undefined') && id_supress_call_cluster_host == true){				
		// do nothing, we are not calling cluster_host
	}
	else{
		// standard case, call cluster host
		call_cluster_host();
		
	}			
	//			call_cluster_host();
				
				jQuery('#Settings').hide();
				jQuery('#SettingsPanel').hide();
				
				
				jQuery('#settings_image').attr("src", ""+cvjs_imagesLocation+"Settings_Up_1.png");
				jQuery('#settings div').css('color', '#DDDDDD');

			});


			
			
			
		jQuery("#CloseSettingsX").click(function() {

				jQuery('#Settings').hide();
				jQuery('#SettingsPanel').hide();

		});


		
		
//		window.alert("show??");
		
// 3.0.14e				
//				jQuery('#Settings').show();
//				jQuery('#SettingsPanel').show();
		
		
		
		
		
		
	});

}

var cluster_host_flag = 0;

// CAll to HOST to check if there is a connection!

function call_cluster_host(){


if (cvjs_debug) console.log("CALL CLUSTER HOST"); 	


	// 3.2.01e   change server structure, so connectors are independent folder
	var finalUrl = cvjs_ServerUrl + id_data_connector;

	// var finalUrl = cvjs_serverHandlersPath + id_data_connector;
	
	
	var uApi_response = "";        /// THIS IS THE ARRAY WITH THE RESPONSE FROM THE UAPI CALL

	// data
	var filelist_data = {};
	filelist_data['url'] = api_proxy_url;
	filelist_data['usr'] = usr;
	filelist_data['pwd'] = pwd;
	filelist_data['id_datafield1_name'] = id_datafield1_value;   // we only want a single element to check if there is a response
	filelist_data['id_datafield1_value'] = id_datafield1_value;
	filelist_data['id_datafield2_name'] = id_datafield2_value;   // we only want a single element to check if there is a response
	filelist_data['id_datafield2_value'] = id_datafield2_value;

	filelist_data['id_datalayer1_name'] = id_datalayer1_name;
	filelist_data['id_datalayer1_value'] = id_datalayer1_value;
	filelist_data['id_datalayer2_name'] = id_datalayer2_name;
	filelist_data['id_datalayer2_value'] = id_datalayer2_value;


	//var includecols = "LOCATIONSID,LOCATION";

	//if (maximo_includecols1.length >0) includecols = includecols + "," + maximo_includecols1;
	//if (maximo_includecols2.length >0) includecols = includecols + "," + maximo_includecols2;
	//if (maximo_includecols3.length >0) includecols = includecols + "," + maximo_includecols3;

	cluster_host_flag = 1;  // we set it to one to continue   3.2.01h
	
if (cvjs_debug) console.log("CALL CLUSTER HOST finalUrl="+finalUrl); 			
	
	jQuery.ajax({
	  url:finalUrl,
	  type: 'post',
	  data: filelist_data,
	  success: function(uApi_response_all){

if (cvjs_debug) 		console.log("host_response="+uApi_response_all+"XXX");

		// this is the data_connector reply
		//uApi_response_all = uApi_response_all.substr(0, uApi_response_all.length-1);

		if (uApi_response_all=="" || uApi_response_all.indexOf("Error 500:")>-1){
			cluster_host_flag = 0;
			cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], languageTable.languages[cvjs_currentLanguage].InfoMessageModal.ErrorConnectingToHost);
		}
		else{
			// NOTE CHANGE THIS!!!
			cluster_host_flag = 1;


if (cvjs_debug) 		console.log("id_data_parser="+id_data_parser);


// "http://localhost/CV-JS_2_3_7/php/data_host_connectors/js/custom_host_parser.js"
			// we are loading in the data-parser to parse the content from the cluster host


		jQuery.getScript( id_data_parser )
		  .done(function( script, textStatus ) {
			console.log("status=" +textStatus );
		  })
		  .fail(function( jqxhr, settings, exception ) {
			console.log( "Triggered ajaxError handler. "+jqxhr+" "+settings+"  "+exception );
		});

if (cvjs_debug) 		console.log("after getScript1");



			jQuery.getScript( id_data_parser, function( data, textStatus, jqxhr ) {
//			  console.log( data ); // Data returned
//			  console.log( textStatus ); // Success
//			  console.log( jqxhr.status ); // 200
//			  console.log( "Load was performed." );

				// CUSTOM IMPLEMENTATION OF
				cvjs_customHostParser(uApi_response_all);
			});

		}

	  },  // end success

	  failure: function(uApi_response_all){
			cluster_host_flag = 0;
			cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], languageTable.languages[cvjs_currentLanguage].InfoMessageModal.ErrorConnectingToHost);
	  }  // failure

	});

	
	
}














var Node_underbar = "NODE_";
var icon_command_active = 0;
var selectedLinkUnlinkLayer = "";

var space_object_input_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];


var save_drawing_flag = 0;

var space_object_edit_mode = false;
var edit_cancel_flag = false;


function cvjs_spaceObjectInputPanel(floorplan_div){

	// 3.0.14e
	jQuery( "#cvjs_spaceObjectInputPanel_"+floorplan_div ).show();


	jQuery( "#cvjs_spaceObjectInputPanel_"+floorplan_div ).load(cvjs_ServerUrl+"/app/cv/cv-pro/space/html/nav_admin_SpaceObjects_C_1_06.html", function() {
//	jQuery( "#cvjs_spaceObjectInputPanel_"+floorplan_div ).load(cvjs_defaultJSPath+"/space/html/nav_admin_SpaceObjects_C_1_06.html", function() {
		jQuery("#IconMenuPanel").draggable();
		jQuery("#CloseObjectMenuX").append("<img src=\""+cvjs_imagesLocation+"CrossX.png\">");
		jQuery('#save_drawing_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_240x22_Inactive.png");

// set name of datafields
		jQuery("#cv_link10_id_datalayer_name").html(id_datalayer2_name);

		jQuery("#layer_tag").val(id_main_data_layer);

		//window.alert("XHere_4");	
		// 3.2.02c
		jQuery("#type_tag").val(id_main_data_template_type);
					
		
// generate the pulldown menu
		jQuery("#spaces_drawing").html(new_linkList);  // CH



		
		
		// 3.3.07b
		jQuery("#spaces_manual_tag").click(function() {
			jQuery('#done_editing_location').css('color', '#0096d7');
			
		//	alert("we color blue...");
			
		});

		
		jQuery("#c").click(function() {
			jQuery('#done_editing_location').css('color', '#0096d7');
		});

		jQuery("#spaces_drawing").click(function() {
			jQuery('#done_editing_location').css('color', '#0096d7');
		});
		jQuery("#type_tag").click(function() {
			jQuery('#done_editing_location').css('color', '#0096d7');
		});
		jQuery("#layer_tag").click(function() {
			jQuery('#done_editing_location').css('color', '#0096d7');
		});
		jQuery("#occupancy_tag").click(function() {
			jQuery('#done_editing_location').css('color', '#0096d7');
		});
		jQuery("#other_tags").click(function() {
			jQuery('#done_editing_location').css('color', '#0096d7');
		});




		if (space_object_input_offset_flag[cvjs_active_floorplan_div_nr]){
			space_object_input_offset_flag[cvjs_active_floorplan_div_nr] = true;  // false = true
			// 3.1.21j .appendTo('body');
			jQuery("#IconMenuPanel").css({position: "fixed"});
			jQuery("#IconMenuPanel").offset({left:600+jQuery('#'+floorplan_div).position().left, top: 150+jQuery('#'+floorplan_div).position().top});
			
			//jQuery("#IconMenuPanel").offset({left: 600, top: 150}).appendTo('body');
		}

		jQuery("#IconMenuPanel").show();

		jQuery("#IconMenuPanel").height(140);

		jQuery("#location_text_static").hide();
		jQuery("#location_text_dynamic").hide();

// TOP CROSS


		jQuery('#CloseObjectMenuX').css( 'cursor', 'pointer' );
		jQuery("#CloseObjectMenuX").click(function() {

			jQuery("#IconMenuPanel").hide();
			cvjs_setCreationMode(!cvjs_supressPopUpModal, true);
			hideOnlyPop();
			cvjs_clearDrawing();


		});


		// we make saving active....  for testing...
		save_drawing_flag = 1;

// SAVE DRAWING ICON BAR


		jQuery('#save_drawing').mouseover(function()
			{
				if (save_drawing_flag == 1)
			    	jQuery('#save_drawing_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_240x22_Over.png");

			});

		jQuery('#save_drawing').mouseout(function()
			{
			    if (save_drawing_flag == 1)
			    	jQuery('#save_drawing_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_240x22_Up.png");

			});



		jQuery('#save_drawing').mousedown(function()  //ZZZ
			{

				if (save_drawing_flag == 1) {

					// Set opacity of IconMenuPanel and block interaction
					jQuery('#IconMenuPanel').css("filter", "alpha(opacity=20)");
					// filter:alpha(opacity=25);
					jQuery('#IconMenuPanel').css("opacity", "0.20");
					// 	opacity:0.2;

					//jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).fadeIn(500);
					//jQuery("#cvjs_wait_looper_text_id").html("Saving");

// add XX
					jQuery("#savepane_small").fadeIn(500);
					jQuery("#savepane_small").show();

//v3WWW
					// block interaction!!!
					cvjs_wait_looper_on = 1;

					var loc_x = jQuery(window).width()/2;  // - ( jQuery('#IconMenuPanel').width()+200)/2;   // image is 86x14    //infopane_small is 200
					var loc_y = (jQuery(window).height() - 14) / 2;

					
						var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
						var floorplan_h = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();
						var floorplan_w = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
	if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
		loc_x = position.left+floorplan_w/2-86;   // image is 86x14
		loc_y = position.top+floorplan_h/2-14;		
	}
	else{	
		loc_x = floorplan_w/2-86;   // image is 86x14
		loc_y = floorplan_h/2-14;		

	}
	
					
					
					
					//jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css({
					//	left:loc_x,
					//	top: loc_y,
					//	position:'absolute'
					//});



					jQuery("#savepane_small").css({
						left:loc_x,
						top: loc_y,
						position:'absolute'
					});



					jQuery('#save_drawing_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_240x22_Down.png");

						save_drawing_flag = 0;

						// clear colors if in select mode
						reset_color_on_selected_space();

						// NEW
						var current_selected_filename = id_publish_location.substring(id_publish_location.lastIndexOf("/")+1);
						var building_data_identifier = "BUILDING_NAME_GOES_HERE";
						var current_selected_shortname = current_selected_filename.substring(0, current_selected_filename.lastIndexOf("."));

						var tempstr = id_publish_location;
						
					
						// 3.3.07b  , we set the location of the save drawing to space folder files + space_ + current file name + ".js"
						// instead
						var downloadFileName = "";

						var noconvertedfile = false
						if (cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ]==""){		
								console.log("Source file not DWG!");
								noconvertedfile = true;
								// return;
						}			
						var downloadFileName = cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ];		
						
						if (noconvertedfile)			
								downloadFileName = currentLoadedDrawingFullName; 
							
						if (downloadFileName.indexOf('/')>-1) 
							downloadFileName = downloadFileName.substring(downloadFileName.lastIndexOf('/')+1);

						downloadFileName = downloadFileName.substring(0, downloadFileName.lastIndexOf('.'));
						

						tempstr = cvjs_filepathServerSpaceObjects + "space_" + downloadFileName + ".js";
						// 3.3.07b
						
						
						

						var n_str = "";

						//  save .rw file with data arrays to server

						/*
							var fArr_Name = new Array();  // CH
							var fArr_Id = new Array();  // CH
							var fArr_PolygonNr = new Array();  // CH
							var fArr_PolygonLayerName = new Array();  // CH
							var fArr_Occupancy = new Array();  // CH
							var fArr_Tags = new Array();  // CH
							var fArr_Type = new Array();  // CH
						*/

						
						var handleUpdates = 0;
						var dataHandleString = "";
						
						
						var dataUrl = "";

						//  create a .js script file containing all edited objects and their reference data, save that back to server

						/*
						var buildings = {
							MY_OFFICE_BUILDING: {
								name: "Office Building",
								company: "X",
								address: "My place",
								city: "City",
								state: "CA",
								FacMgr: "admin@mycorp.com",
								floors: {
									ground : {
										name: "undefined",
										file: "x-1.dwf",
										rooms: {
											NODE_4: {
												name: "XXX",
												id: 123,
												type: "Conference Room",
												},
											NODE_3: {
												name: "YYY,
												id: 123,
												type: "Conference Room",
												},
											}
										},
									b1 : {
										name: "undefined",
										rooms: {}
										}
									}
							}

						}

						*/

						//console.log("building header");
						// create the header         - see top of file for variable names

						dataUrl="";

						// 3.3.07a
						if (cvjs_changeSpaceObject_ManualCreationMode) {
								dataUrl = cvjs_createSpaceOutput_JSfile();
						}
						else{   // we move the legacy .js space file into a separate method
								dataUrl = cvjs_createSpaceOutput_JSfile_Legacy();						
						}
						
						//var finalUrl = overlay_data_url+'save-file-p3.php';
 						var finalUrl = cvjs_serverHandlersPath + cvjs_serverSaveFileController;
						
						//4.1.01g   - For ASP.NET, the controller has to be the Redline Controller, nothing changes for PHP mode
 						var finalUrl = cvjs_serverHandlersPath + cvjs_serverSaveFileControllerRedlines;
						if (tempstr.indexOf("\\")>-1){
							// do nothing
						}
						else{
							tempstr = encodeURIComponent(tempstr)
						}
						// //4.1.01g


					
						

						var js_data = {};
						js_data['file'] = tempstr;   // encodeURIComponent(tempstr);
						js_data['file_content'] = dataUrl;

if (cvjs_debug) console.log(finalUrl+" tempstr="+tempstr+" dataUrl="+dataUrl);
						jQuery.ajax({
						  url:finalUrl,
						  type: 'post',
						  data: js_data,
						  success: function(html){

if (cvjs_debug) console.log("succes html "+html);


//console.log("C1: make save button gray");


						// make the save button gray
						//jQuery('#save_drawing').css('background', '	#DDDDDD'); //	#CCCCFF   #EEEEEE
						//jQuery('#save_drawing').css('color', 'black');
						jQuery('#save_drawing_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_240x22_Inactive.png");


						save_drawing_flag = 0;


							jQuery('#IconMenuPanel').css("filter", "alpha(opacity=100)");
							// filter:alpha(opacity=25);
							jQuery('#IconMenuPanel').css("opacity", "1");
							// 	opacity:0.2;

							//jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).fadeIn(500);
							//jQuery("#cvjs_wait_looper_text_id").html("Saving");

		// add XX
							jQuery("#savepane_small").fadeOut(500);
							jQuery("#savepane_small").hide();


							
			//   3.2.02e   -> make an xml file for dwgMerge						
								dataHandleString ="<cvjsAddXdataToHandle>\n<totalUpdateHandles>"+handleUpdates+"</totalUpdateHandles>\n"+dataHandleString+"</cvjsAddXdataToHandle>"; 
								console.log(dataHandleString+"  "+current_selected_shortname+" "+id_publish_location);
//								window.alert(dataHandleString+"  "+current_selected_shortname+" "+id_publish_location);

								var xml_out = id_publish_location.substring(0, id_publish_location.lastIndexOf("."))+".xml";
								var js_data = {};
								js_data['file'] = encodeURIComponent(xml_out);
								js_data['file_content'] = dataHandleString;

			if (cvjs_debug) console.log(finalUrl+" tempstr="+tempstr+" dataUrl="+dataUrl);
								jQuery.ajax({
								  url:finalUrl,
								  type: 'post',
								  data: js_data,
								  success: function(html){
							
							
								  }  // end success save <file>.js

								});
							
							
							
							
							


						  }  // end success save <file>.js

						});

						

					
					
					
					
					

					
				}   // end of save_drawing_flag conditional statement

			});





		jQuery('#done_editing_location').mousedown(function()
			{

				var polygonNumberFromDrawing = currentLinkId;    // we must find the polygon number from drawing
				var userFriendlyName = "";
				var scriptName = "";

				
				// 3.2.02c
				if (cvjs_creationInputType==1){
				
			
	if (cvjs_debug) console.log("done_editing_location linkID="+currentLinkId+" link unlink layer "+selectedLinkUnlinkLayer);

					// loop over i, find the index where the currentLinkId match, that index is being updated
					for (var i=0;i<fArr_Name.length;i++)
					{
						if (fArr_Id[i] == currentLinkId){
							fArr_PolygonNr[i] = polygonNumberFromDrawing;
							fArr_PolygonLayerName[i] = selectedLinkUnlinkLayer;

							userFriendlyName = fArr_Name[i];



	if (cvjs_debug) console.log("index in array:"+i+" fArr_PolygonNr[i] "+fArr_PolygonNr[i]+" fArr_PolygonLayerName[i] "+fArr_PolygonLayerName[i]+ " " +userFriendlyName );


							// NOTE NOTE - we hardcode the type to the location

							fArr_Type[i] = jQuery('#type_tag').val();
							fArr_Occupancy[i] = jQuery('#occupancy_tag').val();
							fArr_Layer[i] = jQuery('#layer_tag').val();
	//v3xxx
							for (spc in vqRooms[cvjs_active_floorplan_div_nr])
							{
								if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == fArr_Id[i] ){
									vqRooms[cvjs_active_floorplan_div_nr][spc].removeData("layer");
									vqRooms[cvjs_active_floorplan_div_nr][spc].data("layer", jQuery('#layer_tag').val())
									jQuery("#layer_s").html(vqRooms[cvjs_active_floorplan_div_nr][spc].data("layer"));
								}
							}

							fArr_Tags[i] = jQuery('#other_tags').val();

	//console.log("XX"+fArr_Occupancy[i]+"  "+fArr_Tags[i]+"XX");

							// static page
							jQuery("#location_s").html(fArr_Name[i]);
							jQuery("#type_s").html(fArr_Type[i]);
							jQuery("#occupancy_s").html(fArr_Occupancy[i]);
							jQuery("#tags_s").html(fArr_Tags[i]);
							// 3.2.02c
							jQuery("#layer_s").html(fArr_Layer[i]);


						}
					}



					for (var i=0;i<fArr_Name_fixtures.length;i++)
					{
						if (fArr_Id_fixtures[i] == currentLinkId){
							//console.log("fArr_PolygonNr_fixtures updated index in array:"+i+"  polygonNumberFromDrawing="+polygonNumberFromDrawing);
							fArr_PolygonNr_fixtures[i] = polygonNumberFromDrawing;
							fArr_PolygonLayerName_fixtures[i] = selectedLinkUnlinkLayer;

							if (fArr_Name_fixtures[i] == "")
								userFriendlyName = fArr_Id_fixtures[i];
							else
								userFriendlyName = fArr_Name_fixtures[i];

							//userFriendlyName = fArr_Name_fixtures[i];


							fArr_Type_fixtures[i] = jQuery('#type_tag').val();
							fArr_Layer_fixtures[i] = jQuery('#layer_tag').val();

							for (spc in vqRooms[cvjs_active_floorplan_div_nr])
							{
								if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == fArr_Id_fixtures[i]){
									vqRooms[cvjs_active_floorplan_div_nr][spc].removeData("layer");
									vqRooms[cvjs_active_floorplan_div_nr][spc].data("layer", jQuery('#layer_tag').val())
									jQuery("#layer_s").html(vqRooms[cvjs_active_floorplan_div_nr][spc].data("layer"));
								}
							}

							fArr_Occupancy_fixtures[i] = jQuery('#occupancy_tag').val();
							fArr_Tags_fixtures[i] = jQuery('#other_tags').val();;

	//console.log("XX"+fArr_Occupancy[i]+"  "+fArr_Tags[i]+"XX");


							// static page

							if (fArr_Name_fixtures[i] == "")
								jQuery("#location_s").html(fArr_Id_fixtures[i]);
							else
								jQuery("#location_s").html(fArr_Name_fixtures[i]);

							jQuery("#type_s").html(fArr_Type_fixtures[i]);
							jQuery("#occupancy_s").html(fArr_Occupancy_fixtures[i]);
							jQuery("#tags_s").html(fArr_Tags_fixtures[i]);

						}
					}



					// we update the list with available spaces,
					generate_new_linkList();
					generate_new_linkList_fixtures();


					// we color the corresponding space on the drawing "polygonNumberFromDrawing" with a different color
					//console.log("before LinkShape layer="+selectedLinkUnlinkLayer+" currentLinkId="+currentLinkId);
					scriptCode =  "officeclick('"+currentLinkId+"')";
					// color the space back to the selection tool color

					//document.applets[0].LinkShape(selectedLinkUnlinkLayer, scriptCode, userFriendlyName, 65, 164, 88);  // color it with link colors
					//document.applets[0].LinkShape(selectedLinkUnlinkLayer, scriptCode, userFriendlyName, 65, 164, 88, alpha_value, polygon_order, clean_polygon_space);
		
				}
				else{   //3.2.02c
					
					
					//3.2.02e					
					currentLinkId = jQuery('#spaces_manual_tag').val();
		
					userFriendlyName = currentLinkId;
					console.log("currentLinkId "+currentLinkId+" "+polygonNumberFromDrawing+"  "+currentSelectedId);					
					
					jQuery("#location_s").html(currentLinkId);
					jQuery("#type_s").html(jQuery("#type_tag").val());
					jQuery("#occupancy_s").html(jQuery("#occupancy_tag").val());
					jQuery("#tags_s").html(jQuery("#other_tags").val());
					// 3.2.02c
					jQuery("#layer_s").html(jQuery("#layer_tag").val());
										
				}
						
//v3XXXX
//console.log("currentLinkId "+currentLinkId+" userFriendlyName "+userFriendlyName);

				for (spc in vqRooms[cvjs_active_floorplan_div_nr])
				{
					if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == currentSelectedId) {
						var node = vqRooms[cvjs_active_floorplan_div_nr][spc].data("node")
//console.log("node "+node+"   "+jQuery('#layer_tag').val());
						cvjs_setCurrentNodeValuesFromExistingNode(node);
//						cvjs_overwriteNodeValues( node, currentLinkId, userFriendlyName, jQuery('#layer_tag').val(), cvjs_currentNode_group, cvjs_currentNode_attributes, jQuery('#type_tag').val(), cvjs_currentNode_tags, jQuery('#occupancy_tag').val(), true);
console.log(" before cvjs_overwriteNodeValues "+node+" "+currentLinkId+" "+userFriendlyName+" "+jQuery('#layer_tag').val());
console.log(" before cvjs_overwriteNodeValues "+cvjs_currentNode_group+" unpopulated "+cvjs_currentNode_attributes);

						cvjs_overwriteNodeValues( node, currentLinkId, userFriendlyName,  jQuery('#layer_tag').val(), cvjs_currentNode_group, " "                      , "unpopulated",                        jQuery('#type_tag').val(),  " ", jQuery('#occupancy_tag').val(), true);



						cvjs_redrawPop();
					}
				}



//				document.applets[0].LinkShape(selectedLinkUnlinkLayer, scriptCode, userFriendlyName, select_link_r, select_link_g, select_link_b, alpha_value, polygon_order, clean_polygon_space);


				// and reset set the variable
				// currentLinkId = -1;    // no only changed with new selection



				// we drop this... set the text field of the space selector to "none selected"
				// jQuery("#drop_link_spaces").html('None Selected'+'<b class="caret"></b>');

				// we clear the icon menu and reset the selected command
				// This is changed, since select is permanently on
				// icon_command_active = 0;
				// all_icons_up();

				jQuery('#unlink_location').html("Unlink Location");
				// make it blue, since the space is linked
				jQuery('#unlink_location').css('color', '#0096d7');


				jQuery('#done_editing_location').html("");
				jQuery('#edit_cancel_location').html("Edit Fields");
				edit_cancel_flag = false;


				//  switch to static page
				jQuery("#location_text_static").show();
				jQuery("#location_text_dynamic").hide();


				// make the save field green
				save_drawing_flag = 1;

				// make the save drawing button green
			    //jQuery('#save_drawing').css('background', '#45AC5C');
			    //jQuery('#save_drawing').css('color', 'white');
				jQuery('#save_drawing_image').attr("src", "../app/images/tools/SaveChanges_240x22_Up.png");



				// now we have to update the select tool with the new information

				// v3 document.applets[0].TurnOffLinkShapes();
				//cvjs_hidePop();



				var layerLinkList = "";
				for (var i=0;i<fArr_Name.length;i++){
					 if (fArr_PolygonLayerName[i].indexOf("NODE_")>=0){
						layerLinkList =	layerLinkList + fArr_PolygonLayerName[i] + ";" ;
					}
				}
				for (var i=0;i<fArr_Name_fixtures.length;i++){
					 if (fArr_PolygonLayerName_fixtures[i].indexOf("NODE_")>=0){
						layerLinkList =	layerLinkList + fArr_PolygonLayerName_fixtures[i] + ";" ;
					}
				}


				
				// 3.2.02c
				cvjs_draw_space_object_names_on_spaces();				
				
				

				//   call linkmethod to select any type of shape

//console.log("done editing!");

			});



		jQuery('#unlink_location').mousedown(function()
			{


				// remove this layer from the space allocation list
				for (var i=0;i<fArr_Name.length;i++)
				{
					if (fArr_PolygonLayerName[i] == selectedLinkUnlinkLayer){
						fArr_PolygonNr[i] = -1;
						fArr_PolygonLayerName[i] = "none";
						fArr_Type[i] = -1;
						fArr_Occupancy[i] = -1;
						fArr_Tags[i] = -1;
					}
				}

				for (var i=0;i<fArr_Name_fixtures.length;i++)
				{
					if (fArr_PolygonLayerName_fixtures[i] == selectedLinkUnlinkLayer){
						fArr_PolygonNr_fixtures[i] = -1;
						fArr_PolygonLayerName_fixtures[i] = "none";
						fArr_Type_fixtures[i] = -1;
						fArr_Occupancy_fixtures[i] = -1;
						fArr_Tags_fixtures[i] = -1;
					}
				}


				// update the space list table
				generate_new_linkList();
				generate_new_linkList_fixtures();


				// update the hyperlink information on the polygon on the drawing

				var tempstr = selectedLinkUnlinkLayer.substring(5);
				// console.log(tempstr);
				var scriptCode = "officeclick('"+tempstr+"')";
				var userFriendlyName = "Object "+tempstr;

				// use the selection space colors for this shape
				// color the space back to the selection tool color

				//document.applets[0].LinkShape(selectedLinkUnlinkLayer, scriptCode, userFriendlyName, 141, 192, 47);  // color it in unlink colors
				//document.applets[0].LinkShape(selectedLinkUnlinkLayer, scriptCode, userFriendlyName, 141, 192, 47, alpha_value, polygon_order, clean_polygon_space);


//console.log("currentLinkId "+currentLinkId+" userFriendlyName "+userFriendlyName);

//v3XXX
				for (spc in vqRooms[cvjs_active_floorplan_div_nr])
				{
					if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == currentSelectedId) {
						var node = vqRooms[cvjs_active_floorplan_div_nr][spc].data("node");
						if (cvjs_debug) console.log("node="+node);
						var linkId = node.substring(node.lastIndexOf("NODE_")+5);
						cvjs_overwriteNodeValues( node, node, "unassigned_"+linkId, "unassigned", "unassigned", "unassigned", "unassigned", "unassigned", "unassigned", false);
						cvjs_redrawPop();
					}
				}


//				document.applets[0].LinkShape(selectedLinkUnlinkLayer, scriptCode, userFriendlyName, select_no_link_r, select_no_link_g, select_no_link_b, alpha_value, polygon_order, clean_polygon_space);

//console.log("selectedLinkUnlinkLayer="+selectedLinkUnlinkLayer);


				// now we have to update the select tool with the new information

//v3				document.applets[0].TurnOffLinkShapes();
				//cvjs_hidePop();



				var layerLinkList = "";
				for (var i=0;i<fArr_Name.length;i++){
					 if (fArr_PolygonLayerName[i].indexOf("NODE_")>=0){
						layerLinkList =	layerLinkList + fArr_PolygonLayerName[i] + ";" ;
					}
				}

				for (var i=0;i<fArr_Name_fixtures.length;i++){
					 if (fArr_PolygonLayerName_fixtures[i].indexOf("NODE_")>=0){
						layerLinkList =	layerLinkList + fArr_PolygonLayerName_fixtures[i] + ";" ;
					}
				}


				//   call linkmethod to select any type of shape


if (cvjs_debug) console.log("done unlink!");


				// we set the text field of the space selector to "none selected"
				//jQuery("#drop_link_spaces").html('None Selected'+'<b class="caret"></b>');
				// all_icons_up();

				// make it gray, since the space is now unlinked
				jQuery('#unlink_location').css('color', '#999999');

				// clear the fields since the space is now unlinked
				// dynamic page
				jQuery("#drop_link_spaces").html('None Selected'+'<b class="caret"></b>');
				jQuery("#drop_link_fixtures").html('None Selected'+'<b class="caret"></b>');
				jQuery("#type_tag").val(" ");

				//window.alert("XHere");	
				// 3.2.02c
				jQuery("#type_tag").val(id_main_data_template_type);

				
				
				jQuery("#layer_tag").val(" ");
				jQuery("#layer_tag").val(id_main_data_layer);


				jQuery("#occupancy_tag").val(" ");
				jQuery("#other_tags").val(" ");

				// static page
				jQuery("#location_s").html("None Selected");
				jQuery("#type_s").html("-");
				jQuery("#occupancy_s").html("-");
				jQuery("#tags_s").html("-");
				jQuery("#layer_s").html("-");

				jQuery("#maximoid1_s").html("-");
				jQuery("#maximoid2_s").html("-");
				jQuery("#maximoid3_s").html("-");

				jQuery("#maximo_df_1").html("-");
				jQuery("#maximo_df_2").html("-");
				jQuery("#maximo_df_3").html("-");


				// make the save field green
				// make the save drawing button green
			    //jQuery('#save_drawing').css('background', '#45AC5C');
			    //jQuery('#save_drawing').css('color', 'white');
			    jQuery('#save_drawing_image').attr("src", "../app/images/tools/SaveChanges_240x22_Up.png");

			    save_drawing_flag = 1;


			});




		jQuery('#edit_cancel_location').mousedown(function()
			{


			 if (edit_cancel_flag == false){

				if (lastObj==-1){

					cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], languageTable.languages[cvjs_currentLanguage].InfoMessageModal.NoObjectSelected);

				}
				else{

					//ZZZZ jQuery('body').css('overflow', 'scroll');  // make scroll mode to be able to select from location list

					// we are pressing the edit cancel button to enter edit mode
					jQuery('#edit_cancel_location').html("Cancel");
					jQuery('#done_editing_location').html("Done Editing");
					jQuery('#unlink_location').html("");

					//  switch to dynamic page
					jQuery("#location_text_static").hide();
					jQuery("#location_text_dynamic").show();

					jQuery("#IconMenuPanel").height(370);

	//v3				document.applets[0].TurnOffLinkShapes();   // turn off LinkShapes
					//cvjs_hidePop();

					edit_cancel_flag = true;
				}

			 }else{

			 	// we are in cancel mode and want to revert to init mode
			 	jQuery('#edit_cancel_location').html("Edit Fields");
			 	jQuery('#done_editing_location').html("");
			 	jQuery('#unlink_location').html("Unlink Location");


				//  switch to static page
				jQuery("#location_text_static").show();
				jQuery("#location_text_dynamic").hide();

				jQuery("#IconMenuPanel").height(240);

				// turn on LinkShapes
				//cvjs_hidePop();


				var layerLinkList = "";
				for (var i=0;i<fArr_Name.length;i++){
					 if (fArr_PolygonLayerName[i].indexOf("NODE_")>=0){
						layerLinkList =	layerLinkList + fArr_PolygonLayerName[i] + ";" ;
					}
				}

				for (var i=0;i<fArr_Name_fixtures.length;i++){
					 if (fArr_PolygonLayerName_fixtures[i].indexOf("NODE_")>=0){
						layerLinkList =	layerLinkList + fArr_PolygonLayerName_fixtures[i] + ";" ;
					}
				}


				//   call linkmethod to select any type of shape


			if (cvjs_debug) console.log("edit_cancel_location");


			 	edit_cancel_flag = false;

			 }

				// old stuff
				// color the selected layer in the color it had before selection
				// reset_color_on_selected_space();
				// all_icons_up();
				// do nothing with the save field


			});


//			window.alert(cvjs_creationInputType+" cvjs_creationInputType");

			// 3.2.02c
				if (cvjs_creationInputType==1){      // pull down menu setup
					jQuery("#cv_link11").show();
					jQuery("#cv_link11_B2").hide();
					jQuery("#cv_link11_B3").show();
				}
				else{                                // individual tag add setup
					jQuery("#cv_link11").hide();
					jQuery("#cv_link11_B2").show();
					jQuery("#cv_link11_B3").hide();
				}
	
	});

}


    function CADViewer_floorplan_methods(parameter1)
    {
		
			CADViewer_floorplan_methods_newVersion(); if (true) return;  //6.2.55

if (cvjs_debug) console.log("CADViewer_floorplan_methods parameter1="+parameter1+" icon_command_active="+icon_command_active);


	try{

		// 2016-12-4
		if (space_object_edit_mode){
			jQuery("#location_text_static").hide();
			jQuery("#location_text_dynamic").show();
			jQuery("#IconMenuPanel").height(240);
		}
		else{
			jQuery("#location_text_static").show();
			jQuery("#location_text_dynamic").hide();
			jQuery("#IconMenuPanel").height(240);
		}




		if (icon_command_active == 1  || icon_command_active == 6 ){

			// A) we have selected a link polygons, which must be assigned with a space
			// B) or we have clicked the select button and the canvas, which means that something has been selected


			 if (selectedLinkUnlinkLayer != parameter1)
			 	reset_color_on_selected_space();

			 	selectedLinkUnlinkLayer = parameter1;

			// index_47:  selection mode is always on
			// if nothing is selected, then we hide the select window

				if (selectedLinkUnlinkLayer == "nolayername"){
					jQuery('#link_tags_table').hide();
				}
				else{
					jQuery('#link_tags_table').show();
				}



				// check what type of object that has been clicked

					// remove this layer from the space allocation list
				var linkflag = -1;
				for (var i=0;i<fArr_Name.length;i++)
				{
					if (fArr_PolygonLayerName[i] == selectedLinkUnlinkLayer){
						linkflag = i;
					}
				}

// fixtures
				var linkflag_fixture = -1;
				for (var i=0;i<fArr_Name_fixtures.length;i++)
				{
					if (fArr_PolygonLayerName_fixtures[i] == selectedLinkUnlinkLayer){
						linkflag_fixture = i;
					}
				}

//console.log("linkflag="+linkflag+" linkflag_fixture="+linkflag_fixture);

				if (linkflag > -1 ){
					// this object is linked and therefore unlink buttons must be active
					// link will be active when action in the location field is done
					jQuery('#unlink_location').css('color', '#0096d7');
					jQuery('#done_editing_location').css('color', '#999999');  // #dddddd

					// now we must populate the location and tag fields in the menu correctly

					// dynamic page
					jQuery("#drop_link_spaces").html(fArr_Name[linkflag]+'<b class="caret"></b>');
					jQuery("#drop_link_fixtures").html("None Selected"+'<b class="caret"></b>');

					jQuery("#type_tag").val(fArr_Type[linkflag]);

					var nval = fArr_Name[linkflag];

					jQuery("#layer_tag").val("");
					jQuery("#layer_tag").val(id_main_data_layer);

					jQuery("#layer_s").html("");


//v3XXX
					var currId =  fArr_Id[linkflag];

//console.log("  currId "+currId);

					for (spc in vqRooms[cvjs_active_floorplan_div_nr])
					{
						if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == currId ){


							jQuery("#layer_tag").val(vqRooms[cvjs_active_floorplan_div_nr][spc].data("layer"));
							jQuery("#layer_s").html(vqRooms[cvjs_active_floorplan_div_nr][spc].data("layer"));
						}
					}

					jQuery("#occupancy_tag").val(fArr_Occupancy[linkflag]);
					jQuery("#other_tags").val(fArr_Tags[linkflag]);

					// static page
					jQuery("#location_s").html(fArr_Name[linkflag]);
					jQuery("#type_s").html(fArr_Type[linkflag]);
					jQuery("#occupancy_s").html(fArr_Occupancy[linkflag]);
					jQuery("#tags_s").html(fArr_Tags[linkflag]);

					jQuery("#maximoid1_s").html(fArr_Maximo_Datafield1[linkflag]);
					jQuery("#maximoid2_s").html(fArr_Maximo_Datafield2[linkflag]);
					jQuery("#maximoid3_s").html(fArr_Maximo_Datafield3[linkflag]);

					jQuery("#maximo_df_1").html(fArr_Maximo_Datafield1[linkflag]);
					jQuery("#maximo_df_2").html(fArr_Maximo_Datafield2[linkflag]);
					jQuery("#maximo_df_3").html(fArr_Maximo_Datafield3[linkflag]);

					currentLinkId = fArr_Id[linkflag];
				}

				if (linkflag_fixture > -1 ){
					// this object is linked and therefore unlink buttons must be active
					// link will be active when action in the location field is done
					jQuery('#unlink_location').css('color', '#0096d7');
					jQuery('#done_editing_location').css('color', '#999999');  // #dddddd

					// now we must populate the location and tag fields in the menu correctly

					// dynamic page
					jQuery("#drop_link_spaces").html("None Selected"+'<b class="caret"></b>');
					jQuery("#drop_link_fixtures").html(fArr_Name_fixtures[linkflag_fixture]+'<b class="caret"></b>');

					jQuery("#type_tag").val(fArr_Type_fixtures[linkflag_fixture]);


					var nval = fArr_Name_fixtures[linkflag_fixture];
					jQuery("#layer_tag").val("");
					jQuery("#layer_tag").val(id_main_data_layer);



					jQuery("#layer_s").html("");

					var currId =  fArr_Id_fixtures[linkflag_fixture];

//console.log("  currId fixtures "+currId);

					for (spc in vqRooms[cvjs_active_floorplan_div_nr])
					{
						if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == currId ){
							jQuery("#layer_tag").val(vqRooms[cvjs_active_floorplan_div_nr][spc].data("layer"));
							jQuery("#layer_s").html(vqRooms[cvjs_active_floorplan_div_nr][spc].data("layer"));
						}
					}

					jQuery("#occupancy_tag").val(fArr_Occupancy_fixtures[linkflag_fixture]);
					jQuery("#other_tags").val(fArr_Tags_fixtures[linkflag_fixture]);

					// static page
					jQuery("#location_s").html(fArr_Name_fixtures[linkflag_fixture]);
					jQuery("#type_s").html(fArr_Type_fixtures[linkflag_fixture]);
					jQuery("#occupancy_s").html(fArr_Occupancy_fixtures[linkflag_fixture]);
					jQuery("#tags_s").html(fArr_Tags_fixtures[linkflag_fixture]);

					currentLinkId = fArr_Id_fixtures[linkflag_fixture];
				}


//console.log("currentLinkId="+currentLinkId);

				if (linkflag_fixture == -1  && linkflag == -1 ){
					// this object is an unlinked new object and therefore no is active
					// link will be active when action in the location field is done
					jQuery('#unlink_location').css('color', '#999999');
					jQuery('#done_editing_location').css('color', '#999999');

					// dynamic page
					jQuery("#drop_link_spaces").html('None Selected'+'<b class="caret"></b>');
					jQuery("#drop_link_fixtures").html("None Selected"+'<b class="caret"></b>');

					jQuery("#type_tag").val("");
					
					//window.alert("XHere_2");	
					// 3.2.02c
					jQuery("#type_tag").val(id_main_data_template_type);
					
					
					jQuery("#layer_tag").val("");
					jQuery("#layer_tag").val(id_main_data_layer);


					jQuery("#occupancy_tag").val("");
					jQuery("#other_tags").val("");

					// static page
					jQuery("#location_s").html("None Selected");
					jQuery("#type_s").html("-");
					jQuery("#occupancy_s").html("-");
					jQuery("#tags_s").html("-");
					jQuery("#layer_s").html("-");

					jQuery("#maximoid1_s").html("-");
					jQuery("#maximoid2_s").html("-");
					jQuery("#maximoid3_s").html("-");

					currentLinkId = -1;

				}



		}
		else{   // all other commands release icons

			if (icon_command_active == 2){
				if (selectedLinkUnlinkLayer == "nolayername"){

					// do nothing
				}
				else{

					// remove this layer from the space allocation list
					for (var i=0;i<fArr_Name.length;i++)
					{
						if (fArr_PolygonLayerName[i] == selectedLinkUnlinkLayer){
							fArr_PolygonNr[i] = -1;
							fArr_PolygonLayerName[i] = "none";
							fArr_Type[i] = -1;
							fArr_Layer[i] = -1;
							fArr_Occupancy[i] = -1;
							fArr_Tags[i] = -1;
						}
					}


					for (var i=0;i<fArr_Name_fixtures.length;i++)
					{
						if (fArr_PolygonLayerName_fixtures[i] == selectedLinkUnlinkLayer){
							fArr_PolygonNr_fixtures[i] = -1;
							fArr_PolygonLayerName_fixtures[i] = "none";
							fArr_Type_fixtures[i] = -1;
							fArr_Layer_fixtures[i] = -1;
							fArr_Occupancy_fixtures[i] = -1;
							fArr_Tags_fixtures[i] = -1;
						}
					}



					// update the space list table
					generate_new_linkList();

					generate_new_linkList_fixtures();


					// update the hyperlink information on the polygon on the drawing

					var tempstr = selectedLinkUnlinkLayer.substring(5);

					var scriptCode = "officeclick('"+tempstr+"')";
					var userFriendlyName = "Object "+tempstr;

//					document.applets[0].LinkShape(selectedLinkUnlinkLayer, scriptCode, userFriendlyName, 153, 153, 153, alpha_value, polygon_order, clean_polygon_space);


//console.log("before calling LinkShape selectedLinkUnlinkLayer "+selectedLinkUnlinkLayer);


					// we set the text field of the space selector to "none selected"
					jQuery("#drop_link_spaces").html('None Selected'+'<b class="caret"></b>');

				}
			}

			icon_command_active = 0;

			// reset all icon images
			//all_icons_up();

//v3
			icon_command_active = 6;
			jQuery('#select_image').attr("src", ""+cvjs_imagesLocation+"tools/Select_Selected_2.png");
			jQuery('#cv_select div').css('color', '#000000');
			jQuery('#cv_select').css('background', '#a4d7f4');


    	}

    	}
    	catch(err) {  console.log(err); }



    }




function cvjs_addCircleAccessPointObject(){

	cvjs_hidePop();
	Node_id = cvjs_currentMaxNodeId();
	//console.log("xurrent Node_id="+Node_id);
	Node_id++;
	currentNode_underbar = Node_underbar+Node_id;
	currentNode_id = "NODE_"+Node_id;
//console.log(currentNode_id+" "+Node_id+" "+currentNode_underbar);
	currentNode_name = "unassigned";
	currentNode_layer = "unassigned";
	currentNode_group = "unassigned";
	currentNode_attributes = "unassigned";
	currentNode_attributeStatus = "unpopulated";  // 3.2.02b
	currentNode_type = "unassigned";
	currentNode_tags = "unassigned";
	currentNode_tags = "unassigned";
	currentNode_linked = false;
	cvjs_setCurrentNodeValues(currentNode_underbar, currentNode_name, currentNode_id, currentNode_layer, currentNode_group, currentNode_attributes, currentNode_attributeStatus, currentNode_type, currentNode_tags, currentNode_tags, currentNode_linked);
	cvjs_addHandleFunc_CircleAccessPoint();

}


var AP_diameter = 400;

function cvjs_addHandleFunc_CircleAccessPoint() {

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,60, '');

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;

	tRubberBand_c = cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(0, 0, 1, 1).attr({stroke: "#b00000", "stroke-width" : "0.01", "fill" : "none", "fill-opacity" : "0.01", "opacity" : "0.01"});
	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});
//	handleGroup.drag(move_cvjs_create_circle_ap,start_cvjs_create_circle_ap,stop_cvjs_create_circle_ap);

	handleGroup.mousedown(mousedown_copycircle_ap);
}


function cvjs_removeHandleFunc_CircleAccessPoint() {
		handleGroup.selectAll('handler').remove();
		handleGroup.remove();
	//console.log("handler removed");
}


var start_cvjs_create_circle_ap = function() {
	flag_c = false;
	 tRubberBand_c.attr({stroke: "#b00000", "stroke-width" : "0.01", "fill" : "none", "fill-opacity" : "0.01", "opacity" : "0.01"});
}

var move_cvjs_create_circle_ap = function(dx,dy,x,y) {

var text = x+" "+y+" dx="+dx+" dy="+dy+" viewbox "+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr];
//myText.attr({'text': text});

		if (!flag_c){
			firstX_c = x;
			firstY_c = y;
			lastX_c = dx;
			lastY_c = dy;
			flag_c = true;
		}
		else{
			lastX_c = dx;
			lastY_c = dy;

		}

	delta = Math.sqrt(dx*dx+dy*dy);

	// Move to Global_scale.

//	tTransform_c = "t" + firstX_c + "," + firstY_c;
	tTransform_c = "t" + (firstX_c-delta_x)/global_scale + "," + (firstY_c-delta_y)/global_scale;

	delta/=global_scale;

	tTransform_c += "S"+(delta);
	tRubberBand_c.attr({'transform': tTransform_c , "opacity" : "1"});
}

var stop_cvjs_create_circle_ap = function() {

// selected unlinked red: #ff9999 : 255, 153, 153
// #5BBEF6
	tRubberBand_c.attr({fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1"});





//test
	tRubberBand_c.attr({fill: '#00ff99', "fill-opacity": "0.5", stroke: '#009999', 'stroke-opacity': "1"});


	// remove handler
//	cvjs_removeHandleFunc_Circle();



var startColor = '#CD9A97';
var middleColor = '#F8FD96';
var endColor = '#99FEC5';
var xC = 0.5;
var yC = 0.5;
var radius = 0.5;
var fillOpacity = 0.8;


	var radial_gradient = cvjs_rPaper[cvjs_active_floorplan_div_nr].gradient("r("+xC+", "+yC+", "+radius+" )"+startColor+"-"+middleColor+"-"+endColor);

	if (cvjs_debug) console.log(radial_gradient);


	tRubberBand_c.attr({'fill': radial_gradient, 'fill-opacity': fillOpacity, 'stroke-opacity': fillOpacity });



	if (cvjs_debug) console.log(tRubberBand_c);




var bigCircle = cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(1200, 1000, 800);


bigCircle.attr({
    fill: "#bada55",
    stroke: "#000",
    strokeWidth: 5
});



bigCircle.attr({'fill': radial_gradient, 'fill-opacity': fillOpacity, 'stroke-opacity': fillOpacity });


if (true) return;



	tRubberBand_c.attr({
		clip: vqRedlines[0]
//		clip: bigCircle
	});



	bigCircle.attr({
		clip: tRubberBand_c
	});





//	tRubberBand_c.attr({'fill': radial_gradient, 'fill-opacity': fillOpacity, 'stroke-opacity': fillOpacity });


//var bigCircle = cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(1200, 1000, 800);


//bigCircle.attr({
//    fill: "#bada55",
//    stroke: "#000",
//    strokeWidth: 5
//});



//	bigCircle.attr({
//		mask: tRubberBand_c
//	});


if (cvjs_debug) console.log(vqRedlines[0]);


//	bigCircle.attr({
//		clip: vqRedlines[0]
//	});


//	vqRedlines[0].attr({
//		clip: bigCircle
//	});





//	bigCircle.attr({'fill': radial_gradient, 'fill-opacity': fillOpacity, 'stroke-opacity': fillOpacity });


//	tRubberBand_c.attr({
//		mask: bigCircle
//	});





if (true) return;



	// remove handler
	cvjs_removeHandleFunc_CircleAccessPoint();
	cvjs_addVqRoomsGraphics_newNode_circle(cvjs_currentNode_underbar, tRubberBand_c);
	cvjs_setUpVqRooms_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentNode_underbar);

	cvjs_graphicalObjectCreated('Circle');
};




var mousedown_copycircle_ap = function(e,x,y) {


//console.log(e+" "+x+" "+y);

	tRubberBand_c = cvjs_rPaper[cvjs_active_floorplan_div_nr].circle((x-delta_x)/global_scale, (y-delta_y)/global_scale, AP_diameter , AP_diameter );

//	tRubberBand_c.attr({	fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1" });

	var startColor = '#CD9A97';
	var middleColor = '#F8FD96';
	var endColor = '#99FEC5';
	var xC = 0.5;
	var yC = 0.5;
	var radius = 0.5;
	var fillOpacity = 0.8;

	var radial_gradient = cvjs_rPaper[cvjs_active_floorplan_div_nr].gradient("r("+xC+", "+yC+", "+radius+" )"+startColor+"-"+middleColor+"-"+endColor);

//	console.log(radial_gradient);
	tRubberBand_c.attr({'fill': radial_gradient, 'fill-opacity': fillOpacity, 'stroke-opacity': fillOpacity });

//	console.log(tRubberBand_c);
//var bigCircle = cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(1200, 1000, 800);

/*
bigCircle.attr({
    fill: "#bada55",
    stroke: "#000",
    strokeWidth: 5
});
*/
//bigCircle.attr({'fill': radial_gradient, 'fill-opacity': fillOpacity, 'stroke-opacity': fillOpacity });
//	console.log(bigCircle);


//	var walls_all = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(bigCircle);

//	var walls_all = cvjs_rPaper[cvjs_active_floorplan_div_nr].group();



//walls_all.attr({
//    fill: "#bada55",
//    stroke: "#000",
//    strokeWidth: 5
//});

//walls_all.attr({'fill': radial_gradient, 'fill-opacity': fillOpacity, 'stroke-opacity': fillOpacity });


/*
	for (i=0; i<vqRooms.length; i++)
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{

		vqRooms[cvjs_active_floorplan_div_nr][spc].attr({
   			 fill: "#FF0000"
		});

		walls_all.add(vqRooms[cvjs_active_floorplan_div_nr][spc]);
	}

*/

//var x70= cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M 0 0 L 0 2000 L 2000 2000 L 2000 0 z");

//var x84=cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M567.29,1473.8h-97.37L469.93,1773.29h97.37L567.29,1473.8").data("node","NODE_84");

//var x25=cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M738.34,1477.69H567.37L567.37,1647.89H738.34L738.34,1477.69").data("node","NODE_25");



var x70= cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M -500 0 L 3000 0 L 3000 3000 L 0 3000 z" + "M567.37,1717.21H738.34l0,19.47h1.95l0,34.66H567.29l0.07,-54.14M448.9,1594.53H329.53L329.53,1773.29h40.5l0,-19.08h78.87L448.9,1594.53"+"M567.29,1473.8h-97.37L469.93,1773.29h97.37L567.29,1473.8"+"M738.34,1477.69H567.37L567.37,1647.89H738.34L738.34,1477.69").data("node","NODE_70");

x70.attr({
    fill: middleColor,
    'fill-opacity': fillOpacity

//    stroke: "#000",
//    strokeWidth: 5
});



//var x70= cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M 0 0 L 0 000 L 2000 2000 L 2000 0 z" + "M567.37,1717.21H738.34l0,19.47h1.95l0,34.66H567.29l0.07,-54.14M448.9,1594.53H329.53L329.53,1773.29h40.5l0,-19.08h78.87L448.9,1594.53"+"M567.29,1473.8h-97.37L469.93,1773.29h97.37L567.29,1473.8"+"M738.34,1477.69H567.37L567.37,1647.89H738.34L738.34,1477.69").data("node","NODE_70");
var x85= cvjs_rPaper[cvjs_active_floorplan_div_nr].path("").data("node","NODE_85");

//var x70= cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M567.37,1717.21H738.34l0,19.47h1.95l0,34.66H567.29l0.07,-54.14");
//var x85= cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M448.9,1594.53H329.53L329.53,1773.29h40.5l0,-19.08h78.87L448.9,1594.53");



//cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M 50 50 L 50 150 L 150 150 L 150 50 z" + " M 75 75 L 75 125 L 125 125 L 125 75 z").attr("fill", "#f00");

cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M 50 50 L 50 150 L 150 150 L 150 50 z" + " M 75 75 L 125 75 L 125 125 L 75 125 z").attr("fill", "#00ff00");



	tRubberBand_c.attr({
//		clip: x85,
		clip: x70 ,
//		'clip-rule': 'nonzero'
		'clip-rule': 'evenodd'
	});



	cvjs_removeHandleFunc_CircleAccessPoint();

if (true) return;

/*
x70.attr({
    fill: "#bada55",
    stroke: "#000",
    strokeWidth: 5
});

x85.attr({
    fill: "#ba5500",
    stroke: "#000",
    strokeWidth: 5
});

*/

try{


	var walls_all = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M567.37,1717.21H738.34l0,19.47h1.95l0,34.66H567.29l0.07,-54.14"),cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M448.9,1594.53H329.53L329.53,1773.29h40.5l0,-19.08h78.87L448.9,1594.53"));
	//walls_all.add(x85);
	//walls_all.add(x70);


	walls_all.attr({
		fill: "#00ff00"
	});


if (cvjs_debug) console.log(tRubberBand_c+"  "+walls_all);

	tRubberBand_c.attr({
		clip: x85
//		clip: walls_all
//		clip: bigCircle,
//		'clip-rule':"evenodd"

	});


}catch (err){console.log(err);}



//		walls_all.add(bigCircle);

//walls_all.attr({
//    fill: "#00ff00"
//});


/*
	tRubberBand_c.attr({
		clip: x85
//		clip: walls_all
//		clip: bigCircle,
//		'clip-rule':"evenodd"

	});

*/

//	tRubberBand_c.attr({
//		clip: x70
//		clip: walls_all
//		clip: bigCircle,
//		'clip-rule':"evenodd"
//
//	});






//console.log(walls_all);

/*

	tRubberBand_c.attr({
//		clip: walls_all
		clip: bigCircle,
		'clip-rule':"evenodd"
	});

*/

/*

	tRubberBand_c.attr({
		clip: vqRedlines[0]
//		clip: bigCircle
	});


*/


	cvjs_removeHandleFunc_CircleAccessPoint();

//	cvjs_removeHandleFunc_CopyCircle();

//	cvjs_addVqRoomsGraphics_newNode_circle(cvjs_currentNode_underbar, tRubberBand_c);
//	cvjs_setUpVqRooms_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentNode_underbar);

	cvjs_graphicalObjectCreated('CopyCircleAP');


}

// END- Draw Circle



// https://en.wikipedia.org/wiki/List_of_ISO_739-1_codes




function cvjs_setLanguageIndexIncrement(){


	var i = cvjs_currentLanguage+1;

	//console.log(i+"  language "+cvjs_currentLanguage+" number of languages "+languageTable.numberOfLanguages);

	cvjs_setLanguageIndex(i);

}

function cvjs_setLanguageIndex(languageIndex){


	if (languageIndex >= languageTable.numberOfLanguages) languageIndex = 0;
	if (languageIndex<0) languageIndex = languageTable.numberOfLanguages-1;

	cvjs_currentLanguage = languageIndex;

	//console.log("language is "+ languageTable.languages[cvjs_currentLanguage].thisLanguage);

	// After we have set the language, we have to update the modals
//	cvjs_updateModals();


}



/**
 * Set the ajax control callback variable
 * @param {boolean} callbackStatus - set to false then monitor then true
 */

function cvjs_ajaxPostCallbackVariable_thumbNails(callbackStatus){

	cvjs_ajaxPostStatus_thumbNails = callbackStatus;

}




var cvjs_serverSendPDFEmailController = "mail-pdf-redline.php"; 
//var cvjs_serverSendDWGEmailController = "mail-dwg-redline.php"; 
var cvjs_mailServerSetup = false;	   
	   
var cvjs_from_name = "";
var cvjs_from_mail = "";
var cvjs_cc_mail = "";
var cvjs_replyto = "";
var cvjs_to_mail = "";
var cvjs_mail_title = "";
var cvjs_mail_message = "";
 	


	
/**
 * Settings for email sender in the PDF publish method. When calling this method, email will be activated
 * @param {string} from_name - name of the from sender in redline PDF email
 * @param {string} from_mail - email address of the from sender in redline PDF email
 * @param {string} cc_mail - email of the cc address when sending redline PDF email
 * @param {string} replyto - mail of the reply to sender in redline PDF email
 */
	
function cvjs_emailSettings_PDF_publish(from_name, from_mail, cc_mail, replyto){
	
	cvjs_mailServerSetup = true;	   
	   
	cvjs_from_name = from_name;
	cvjs_from_mail = from_mail;
	cvjs_cc_mail = cc_mail;
	cvjs_replyto = replyto;
	

}




/**
 * Saves a floorplan with overlays as SVG file, then embed it into a pdf and send it as email
 * @param {string} floorplan_div - name of Element on which CADViewer is located
 */
	
function cvjs_emailScreenAsPDFwithRedlines(floorplan_div){



	// make temp file name
		
	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

	var bbox = cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox();
		
	var header = '<?xml version="1.0" encoding="utf-8" ?>';
	header +=  ' <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">'; 
	header +=  '<svg contentScriptType="text/ecmascript" xmlns:xlink="http://www.w3.org/1999/xlink" zoomAndPan="magnify" contentStyleType="text/css" preserveAspectRatio="xMidYMid meet"' ;
	header += ' width="'+bbox.width+'" height="'+bbox.height+'" viewbox="'+bbox.x+' '+bbox.y+' '+bbox.width+' '+bbox.height+'"';
	header += ' version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:cvjs="http://www.tailormade.com/" stroke-linecap="butt" stroke-linejoin="round" fill-rule="evenodd" >';
	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	var myFloorPlan = header + cvjs_rPaper[cvjs_active_floorplan_div_nr] + "</svg>";		
	
	var cvjs_phpSaveSVGUrlLocation = cvjs_serverHandlersPath + cvjs_serverSaveFileController;
	var js_data = {};
	
	// we use the folder one step above app folder as temp folder
	
	
	var currentdate = new Date();
	var datetime = "y"+currentdate.getFullYear() +"_m"+(currentdate.getMonth()+1)+"_d"+(currentdate.getDate())+"_h"+currentdate.getHours()+"_m"+currentdate.getMinutes()+"_s"+currentdate.getSeconds();

	var month = "jan";
	var hours = currentdate.getHours(); 
	
	if (hours<10) hours = "0"+hours;
	switch(currentdate.getMonth()) {
		case 0:
			month = "Jan";
			break;
		case 1:
			month = "Feb";
			break;
		case 2:
			month = "Mar";
			break;
		case 3:
			month = "Apr";
			break;
		case 4:
			month = "May";
			break;
		case 5:
			month = "Jun";
			break;
		case 6:
			month = "Jul";
			break;
		case 7:
			month = "Aug";
			break;
		case 8:
			month = "Sep";
			break;
		case 9:
			month = "Oct";
			break;
		case 10:
			month = "Nov";
			break;
		case 11:
			month = "Dec";
			break;
		default:
			month = "Jan";
	}
	
	var datetime = month+"_"+(currentdate.getDate())+"_H"+hours+"_"+currentdate.getMinutes();
	//var random = Math.random().toString().substring(2,5);
	var fileName = cvjs_FileNameNoExtension+'_'+datetime+'.pdf';

	
	var htmlName = cvjs_FileNameNoExtension+'_'+datetime+'.html';	
	
	
//	var fileName = "tempXXXX.pdf";
	var myfolderFile = cvjs_ServerLocation+fileName; 
//	var myfolderFile = cvjs_ServerLocation+"/"+ fileName; 

//	window.alert(myfolderFile);
	
	var counter = myfolderFile.lastIndexOf(".");
	var svgFile = myfolderFile.substring(0,counter)+".svg";
	
	js_data['file'] = svgFile;
	js_data['file_content'] = myFloorPlan;

	if (cvjs_debug) console.log("make pdf "+svgFile+"  "+cvjs_phpSaveSVGUrlLocation);	
	
	jQuery.ajax({
	  url:cvjs_phpSaveSVGUrlLocation,
	  type: 'post',
	  data: js_data,
	  success: function(html){
		var status ="Save floorplan: "+html;
		
		if (cvjs_debug) console.log(status);
		
		var finalUrl = cvjs_serverHandlersPath + cvjs_serverSVGtoPDFConverterController;
		var filelist_data = {};

		filelist_data['pdf_file'] = myfolderFile;
		filelist_data['svg_file'] = svgFile;

		
		// we hardcode conversion  - test only
		//filelist_data['pdf_file'] = "c:/xampp/htdocs/cadviewer_3_0_1/m4.pdf";
		//filelist_data['svg_file'] = "c:/xampp/htdocs/cadviewer_3_0_1/m4.svg";
	
		
		jQuery.ajax({
		  url:finalUrl,
		  type: 'post',
		  data: filelist_data,
		  success: function(html){
				if (cvjs_debug) console.log("PDF file is now created: "+html);
				
//				if (true) return;
				
				var filelist_data = {};

				filelist_data['pdf_file'] = myfolderFile;

				filelist_data['from_name'] = cvjs_from_name;
				filelist_data['from_mail'] = cvjs_from_mail;
				filelist_data['cc_mail'] = cvjs_cc_mail;
				filelist_data['replyto'] = cvjs_replyto;
				
				
				// replace , with ;
				cvjs_to_mail = cvjs_to_mail.replace(/,/g, ';');
				
				filelist_data['to_mail'] = cvjs_to_mail;
				filelist_data['mail_title'] = cvjs_mail_title;
				filelist_data['mail_message'] = cvjs_mail_message;
				
				var cvjs_phpSendPDFEmail = cvjs_serverHandlersPath + cvjs_serverSendPDFEmailController;
		

//window.alert(filelist_data['pdf_file']);
//if (true) return;
		
				jQuery.ajax({
				  url:cvjs_phpSendPDFEmail,
				  type: 'post',
				  data: filelist_data,
				  success: function(html){

						window.alert("e-mail sent!  "+html);

						}
					});
			
				
		  }
		});

		
		//window.alert(status);
	  },
	  error:function(data_e){console.log("Error "+data_e); return;}
	});
}



/**
 * Brings the dragging background to front - used for drawings with static filled polygons
 * @param {string} floorplan_div - name of Element on which CADViewer is located
 */
function cvjs_dragBackgroundToFront_SVG(floorplan_div){
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div)		
	cvjs_masterBackground[cvjs_active_floorplan_div_nr].before(cvjs_SVGGroup[cvjs_active_floorplan_div_nr]);
}

/**
 * Sends the dragging background to back  - default 
 * @param {string} floorplan_div - name of Element on which CADViewer is located
 */
function cvjs_dragBackgroundToBack_SVG(floorplan_div){
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div)
	cvjs_SVGGroup[cvjs_active_floorplan_div_nr].before(cvjs_masterBackground[cvjs_active_floorplan_div_nr]);
}


/**
 * Save current object as SVG, including redlines and space objects 
 * @param {string} floorplan_div - name of Element on which CADViewer is located
 */

function cvjs_saveAsSVG(floorplan_div){


try{
	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	// make temp file name
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	var bbox = cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox();
	
// 6.2.25	
	var header = '<?xml version="1.0" encoding="utf-8" ?>';
	header +=  ' <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">'; 

//	header +=  '<svg contentScriptType="text/ecmascript" xmlns:xlink="http://www.w3.org/1999/xlink" zoomAndPan="magnify" contentStyleType="text/css" preserveAspectRatio="xMidYMid meet"' ;
//	header += ' width="'+bbox.width+'" height="'+bbox.height+'" viewbox="'+bbox.x+' '+bbox.y+' '+bbox.width+' '+bbox.height+'"';
//	header += ' version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:cvjs="http://www.tailormade.com/" stroke-linecap="butt" stroke-linejoin="round" fill-rule="evenodd" >';
	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
//	var myFloorPlan = header + cvjs_rPaper[cvjs_active_floorplan_div_nr] + "</svg>";		


	// let us get rid of the first <svg>
	var myFloorPlan = ""+cvjs_rPaper[cvjs_active_floorplan_div_nr];

	myFloorPlan = myFloorPlan.substring(myFloorPlan.indexOf("<svg")+4);
	myFloorPlan = myFloorPlan.substring(myFloorPlan.indexOf("<svg")+4);
	myFloorPlan = myFloorPlan.substring(myFloorPlan.indexOf("<svg"));		

	myFloorPlan = header + myFloorPlan;
		
	//3.01.03a   - we have to strip out any assets and swap for /cadviewer nodejs folder, 
	if (cvjs_NodeJSserver)  {	
			myFloorPlan = myFloorPlan.replace(/xlink:href=["]assets[/]cadviewer/g, 'xlink:href=\"'+ServerUrl+"files?file=");	
	}
	
	var  snappos = myFloorPlan.indexOf("<desc>Created with Snap</desc>");
	if (snappos>-1){
	//	<desc>Created with Snap</desc></svg></svg></g>
		var pos1 = myFloorPlan.substring(0, snappos);
		var pos2 = myFloorPlan.substring(snappos+46);

		// we strip out the transformation matrix if present in pos2
		var  matrixpos = pos2.indexOf("transform=");
//		window.alert(matrixpos);
		if (matrixpos>-1){
				var pos3 = pos2.substring(0, matrixpos);
				
//				window.alert(pos3);
				var pos4 = pos2.substring(matrixpos+14);				
				var index4 = pos4.indexOf('\"');
//				window.alert("pos "+pos4.indexOf('\"')+"  "+pos4);
				pos4 = pos4.substring(index4+1);
//				window.alert(pos4);
				pos2 = pos3+pos4;
		}
		
		myFloorPlan = pos1 + pos2;
	}

	//  6.2.25
	//  do the following with myFloorPlan

//remove matrix at bottom:
//transform="matrix(3,0,0,3,-2500,-1314.79)
//remove top <svg> through   <--  tailormade -->
//remove last </svg>
//remove </svg></svg></g> after Created with Snap
	// we use the folder one step above app folder as temp folder
	
	var currentdate = new Date();
	var datetime = "y"+currentdate.getFullYear() +"_m"+(currentdate.getMonth()+1)+"_d"+(currentdate.getDate())+"_h"+currentdate.getHours()+"_m"+currentdate.getMinutes()+"_s"+currentdate.getSeconds();

	var month = "jan";
	var hours = currentdate.getHours(); 
	
	if (hours<10) hours = "0"+hours;
	switch(currentdate.getMonth()) {
		case 0:
			month = "Jan";
			break;
		case 1:
			month = "Feb";
			break;
		case 2:
			month = "Mar";
			break;
		case 3:
			month = "Apr";
			break;
		case 4:
			month = "May";
			break;
		case 5:
			month = "Jun";
			break;
		case 6:
			month = "Jul";
			break;
		case 7:
			month = "Aug";
			break;
		case 8:
			month = "Sep";
			break;
		case 9:
			month = "Oct";
			break;
		case 10:
			month = "Nov";
			break;
		case 11:
			month = "Dec";
			break;
		default:
			month = "Jan";
	}
	
	var datetime = month+"_"+(currentdate.getDate())+"_H"+hours+"_"+currentdate.getMinutes();
	//var random = Math.random().toString().substring(2,5);
	var fileName = cvjs_FileNameNoExtension+'_'+datetime+'.svg';


	
}
catch(err){
	console.log(err);
}	
	
	download(fileName, myFloorPlan);

}	
	
	
function download(filename, text) {
    var pom = this.document.createElement('a');
	pom.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
 
//    pom.setAttribute('href', ServerUrl+"content_dev/thingable/D613R4wB9kx9m4K/_XREF/P1_LG1.dwg");
//window.alert( "pom="+pom)	
 
	pom.setAttribute('download', filename);
	
    if (this.document.createEvent) {
//window.alert( "1");	
        var event = this.document.createEvent('MouseEvents');
        event.initEvent('click', true, true);
        pom.dispatchEvent(event);
    }
    else {
        pom.click();
    }
}	



function downloadFile(filename, file) {
    var pom = this.document.createElement('a');
	pom.setAttribute('href', file);  
	pom.setAttribute('download', filename);
	
    if (this.document.createEvent) {
        var event = this.document.createEvent('MouseEvents');
        event.initEvent('click', true, true);
        pom.dispatchEvent(event);
    }
    else {
        pom.click();
    }
}	


	
function download_link(filename, binaryFile) {


// NEED TO MAKE A DIRECT DOWNLOAD, NOT VIA WINDOW!!!!



//    var pom = this.document.createElement('a');
	
//	console.log("loaded from server length "+binaryFile.length+" "+binaryFile);
	
//	var encode = btoa(unescape(encodeURIComponent(binaryFile)));
	
//	console.log("encoded length "+encode.length+" "+encode);
	
//      pom.setAttribute('href', 'data:application/zip;base64,' + encode);
//    pom.setAttribute('href', 'data:application/zip;base64,' + window.btoa(text));
//    pom.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
//    pom.setAttribute('href', cvjs_ServerLocation+"/converters/files/merged/"+filename);


//    pom.setAttribute('download', filename);
	
	//window.alert("before open window");
	
				printWindow = window.open('', 'CADViewer - Download', 'width='+screen.width*cvjs_print_to_pdf_windowRelativeSize+',height='+ screen.height*cvjs_print_to_pdf_windowRelativeSize);
				var text = "";

				printWindow.document.write('<!DOCTYPE html><html><title>CADViewer - Download</title><head><script src="'+cvjs_defaultJSPath+'/jquery-2.2.3.js" type="text/javascript"></script>');
				text = text + '<!DOCTYPE html><html><title>CADViewer - Download</title><head><script src="'+cvjs_defaultJSPath+'/jquery-2.2.3.js" type="text/javascript"></script>';

				printWindow.document.write('<script type="text/javascript">');
				text = text + '<script type="text/javascript">';
				// file=

				var xfilelocation = cvjs_ServerLocation+"/converters/files/merged/"+filename;
				var filelocation = cvjs_ServerUrl+"/converters/files/merged/"+filename;
				
			
				printWindow.document.write('</script></head><body><div id="dwg">');
				text = text + '</script></head><body><div id="dwg">';

				printWindow.document.write('<a href="'+filelocation+'">Download '+filename+'</a></div></body></html>');

				
				text = text + '<a href="'+filelocation+'">Download '+filename+'</a></div></body></html>';
								
				console.log(text);

				printWindow.document.close(); //this seems to be the thing doing the trick
				printWindow.focus();

	
	//window.alert("after open window");
	
	
	
	
/*	
	

//window.alert( "pom="+pom)	
	
	
    if (this.document.createEvent) {
//window.alert( "1");	
        var event = this.document.createEvent('MouseEvents');
        event.initEvent('click', true, true);
        pom.dispatchEvent(event);
    }
    else {
        pom.click();
    }

*/	
	
	
}	

// 3.2.01g

function cvjs_download_link(filename, filelocation) {


console.log(" in download "+filename+"  "+filelocation);	
//				printWindow = window.open('', 'CADViewer - Download', 'width='+screen.width*cvjs_print_to_pdf_windowRelativeSize+',height='+ screen.height*cvjs_print_to_pdf_windowRelativeSize);
				printWindow = window.open('', 'CADViewer - Download', 'width='+screen.width*cvjs_print_to_pdf_windowRelativeSize+',height=40px');
				var text = "";

				printWindow.document.write('<!DOCTYPE html><html><title>CADViewer - Download</title><head><script src="'+cvjs_defaultJSPath+'/jquery-2.2.3.js" type="text/javascript"></script>');
				text = text + '<!DOCTYPE html><html><title>CADViewer - Download</title><head><script src="'+cvjs_defaultJSPath+'/jquery-2.2.3.js" type="text/javascript"></script>';

				printWindow.document.write('<script type="text/javascript">');
				text = text + '<script type="text/javascript">';
				// file=
	
				printWindow.document.write('</script></head><body><div id="dwg">');
				text = text + '</script></head><body><div id="dwg">';
//				printWindow.document.write('<button class="btn" style="width:100%"><a href="'+filelocation+'" download="'+filename+'">Download '+filename+'</a></button>');
				
				printWindow.document.write('<br><div style="width:100%;background:#B9EAFF;color:#000000;border:1px black"><a style="width:100%;color:#000000;left:50px;border:1px black" href="'+filelocation+'" download="'+filename+'">Download '+filename+'</a></div>');

//				printWindow.document.write('<button class="btn" style="width:100%"><i class="fa fa-download"></i> Download '+filename+'</button>');
			
//				printWindow.document.write('<form method="get" action="'+filelocation+'"><button type="submit">Download: '+filename+'</button></form>');
			
			
			
			
				text = text + '<a href="'+filelocation+'" download="'+filename+'">Download '+filename+'</a></div></body></html>';
					
//				printWindow.document.write('<a href="/path/to/file/test_modified.xlsx"><button type="button"></button></a>');


				printWindow.document.write('</div></body></html>');

					
				console.log("before focus incomplete text: "+text);

				printWindow.document.close(); //this seems to be the thing doing the trick
				printWindow.focus();

		
	
}	




	
	
	
	
	
	
	
	
/**
 * Save current object as SVG, including redlines and space objects 
 * @param {string} floorplan_div - name of Element on which CADViewer is located
 * @param {string} FileLocation - name of file to save
 */

function cvjs_saveAsSVGOnServer(floorplan_div, FileLocation){

// 3.2.02b

try{
	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}


	// make temp file name

//window.alert("cvjs_saveAsSVG");

	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

	var bbox = cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox();
		
	var header = '<?xml version="1.0" encoding="utf-8" ?>';
	header +=  ' <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">'; 
	header +=  '<svg contentScriptType="text/ecmascript" xmlns:xlink="http://www.w3.org/1999/xlink" zoomAndPan="magnify" contentStyleType="text/css" preserveAspectRatio="xMidYMid meet"' ;
	header += ' width="'+bbox.width+'" height="'+bbox.height+'" viewbox="'+bbox.x+' '+bbox.y+' '+bbox.width+' '+bbox.height+'"';
	header += ' version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:cvjs="http://www.tailormade.com/" stroke-linecap="butt" stroke-linejoin="round" fill-rule="evenodd" >';
	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	var myFloorPlan = header + cvjs_rPaper[cvjs_active_floorplan_div_nr] + "</svg>";		

	
	// we use the folder one step above app folder as temp folder
	
	
	var currentdate = new Date();
	var datetime = "y"+currentdate.getFullYear() +"_m"+(currentdate.getMonth()+1)+"_d"+(currentdate.getDate())+"_h"+currentdate.getHours()+"_m"+currentdate.getMinutes()+"_s"+currentdate.getSeconds();

	var month = "jan";
	var hours = currentdate.getHours(); 
	
	if (hours<10) hours = "0"+hours;
	switch(currentdate.getMonth()) {
		case 0:
			month = "Jan";
			break;
		case 1:
			month = "Feb";
			break;
		case 2:
			month = "Mar";
			break;
		case 3:
			month = "Apr";
			break;
		case 4:
			month = "May";
			break;
		case 5:
			month = "Jun";
			break;
		case 6:
			month = "Jul";
			break;
		case 7:
			month = "Aug";
			break;
		case 8:
			month = "Sep";
			break;
		case 9:
			month = "Oct";
			break;
		case 10:
			month = "Nov";
			break;
		case 11:
			month = "Dec";
			break;
		default:
			month = "Jan";
	}
	
	var datetime = month+"_"+(currentdate.getDate())+"_H"+hours+"_"+currentdate.getMinutes();
	//var random = Math.random().toString().substring(2,5);
	var fileName = cvjs_FileNameNoExtension+'_'+datetime+'.svg';

	
}
catch(err){
	console.log(err);
}	
		
		var cvjs_phpSaveRedlineUrlLocation = cvjs_serverHandlersPath + cvjs_serverSaveFileControllerRedlines;

		var js_data = {};
		js_data['file'] = FileLocation+fileName;
		js_data['file_content'] = myFloorPlan;


		jQuery.ajax({
		  url:cvjs_phpSaveRedlineUrlLocation,
		  type: 'post',
		  data: js_data,
		  success: function(html){
			
			console.log("saved "+html);
			
			var fileUrl = FileLocation.substring(FileLocation.indexOf(ServerLocation)+ServerLocation.length);
			
			
			downloadFile(fileName, ServerUrl+fileUrl+fileName);
			
		  },
		  error:function(data_e){console.log("Error "+data_e); return;}

		});

	download(fileName, myFloorPlan);

}	
	
	
	
	
	
	
/*
 * Returns the current redlines and sticky notes as a string object in XMLso the user can do their own server side save
 * bypassing php or servlet code
 * @param {boolean} stickynote_flag - save stickynotes as xml, default true 
 * @return {string} RedlineNote - a string containg the redline, sticky note object
 */

function cvjs_getStickyNotesRedlineXML(stickynote_flag){  //4.1.02a

		var dataUrl="";

		var comma_flag =0;

		dataUrl = dataUrl +"<cvjs_RedlinesStickyNotes>\n";

		var handle = 0;
		
		
		var spc_counter = 0;
		for (spc in vqRedlines)
		{
			if (vqRedlines[spc].data("deleted") == true ){
				// the note is deleted, so no nothing
				//console.log("file.js deleted node "+vqStickyNotes[spc].data("node"));
			}
			else{  // node exists

				spc_counter++;
			}
		}
		dataUrl = dataUrl +" 					<totalRedlines>"+spc_counter+"</totalRedlines>\n";
		
		spc_counter = 0;
		for (spc in vqStickyNotes)
		{
			if (vqStickyNotes[spc].data("deleted") == true ){
				// the note is deleted, so no nothing
				//console.log("file.js deleted node "+vqStickyNotes[spc].data("node"));
			}
			else{  // node exists

				spc_counter++;
			}
		}
		dataUrl = dataUrl +" 					<totalStickyNotes>"+spc_counter+"</totalStickyNotes>\n";
		
		
		
		
		
		
		for (spc in vqRedlines)
		{
			if (vqRedlines[spc].data("deleted") == true ){
				if (cvjs_debug) console.log("file.js deleted node "+vqRedlines[spc].data("node"));
			}
			else{  // node exists

				if (comma_flag == 0){
					comma_flag = 1
				}
				else{
//					dataUrl = dataUrl +"						,\n";
				}

				dataUrl = dataUrl +"					<Redline>\n";
				dataUrl = dataUrl +"						<index>"+spc+"</index>\n";
//				dataUrl = dataUrl +"					"+vqRedlines[spc].data("node")+": {\n";
				dataUrl = dataUrl +"						<node>\""+vqRedlines[spc].data("node")+"\"</node>\n";
				dataUrl = dataUrl +"						<name>\""+vqRedlines[spc].data("name")+"\"</name>\n";
				dataUrl = dataUrl +"						<id>\""+vqRedlines[spc].data("id")+"\"</id>\n";
				dataUrl = dataUrl +"						<layer>\""+vqRedlines[spc].data("layer")+"_"+multiPages[cvjs_active_floorplan_div_nr].pages[vqRedlines[spc].data("currentPage")-1].pageName+"\"</layer>\n";
				dataUrl = dataUrl +"						<group>\""+vqRedlines[spc].data("group")+"\"</group>\n";
				dataUrl = dataUrl +"						<color>\""+vqRedlines[spc].data("color")+"\"</color>\n";
				dataUrl = dataUrl +"						<strokeWidth>\""+vqRedlines[spc].data("strokeWidth")+"\"</strokeWidth>\n";
				dataUrl = dataUrl +"						<fill>\""+vqRedlines[spc].data("fill")+"\"</fill>\n";
				dataUrl = dataUrl +"						<fillOpacity>\""+vqRedlines[spc].data("fill_opacity")+"\"</fillOpacity>\n";
				dataUrl = dataUrl +"						<username>\""+vqRedlines[spc].data("username")+"\"</username>\n";
				dataUrl = dataUrl +"						<userid>\""+vqRedlines[spc].data("userid")+"\"</userid>\n";
				dataUrl = dataUrl +"						<currentPage>"+vqRedlines[spc].data("currentPage")+"</currentPage>\n";
				dataUrl = dataUrl +"						<currentPageName>\""+multiPages[cvjs_active_floorplan_div_nr].pages[vqRedlines[spc].data("currentPage")-1].pageName+"\"</currentPageName>\n";
				dataUrl = dataUrl +"						<triangle_design>\""+vqRedlines[spc].data("triangle_design")+"\"</triangle_design>\n";
				dataUrl = dataUrl +"						<polypath_arrow>\""+vqRedlines[spc].data("polypath_arrow")+"\"</polypath_arrow>\n";
				
				var rText = vqRedlines[spc].data("redline_text");
				var resText = rText.replace("<br>", "<br/>");
				//window.alert(resText);			
				dataUrl = dataUrl +"						<redline_text>\""+resText+"\"</redline_text>\n";
//				dataUrl = dataUrl +"						<redline_text>\""+vqRedlines[spc].data("redline_text")+"\"</redline_text>\n";
				dataUrl = dataUrl +"						<fill_opacity>\""+vqRedlines[spc].data("fill_opacity")+"\"</fill_opacity>\n";
				dataUrl = dataUrl +"						<transform>\""+vqRedlines[spc].data("transform")+"\"</transform>\n";
				dataUrl = dataUrl +"						<drawingRotation>"+vqRedlines[spc].data("drawingRotation")+"</drawingRotation>\n";



				dataUrl = dataUrl +"						<graphics>\n";

				var str_object = vqRedlines[spc].toString();

				if (str_object.indexOf("polyline")>-1){

					// THIS IS AN ARROW
				
//					console.log("this is an arrow!  "+str_object);

					str_object = str_object.substring(str_object.indexOf("points=")+8);
					str_object = str_object.substring(0, str_object.indexOf('\"'));

/****					
					dataUrl = dataUrl +"var "+itemRed+"= paper.g(paper.polyline(\"";
					dataUrl = dataUrl +str_object+" \")";
****/
					var points = str_object.split(" ");					
					str_object = vqRedlines[spc].toString();
					str_object = str_object.substring(str_object.indexOf("matrix(")+8);
					str_object = str_object.substring(0, str_object.indexOf(')'));
					
										
					var transform = vqRedlines[spc].data("transform"); 
					transform = transform.substring(1, transform.indexOf("r"));
					var insert = transform.split(",");					
//					var rot = transformscale.substring(transformscale.indexOf("r")+1);
					var rot = str_object.substring(str_object.indexOf("r")+1);
										
					
					var color = cvjs_getAutoCADColor(vqRedlines[spc].data("color"));
					// 5 handle number  sequential					
					// 40 thickness start
					// 41 thickness end     (per vertex)
					// 70 closed poly
					handle++;
					var hexString = "A"+handle.toString(16);
					currentHandle = hexString;
					


					dataUrl = dataUrl + "						<LWPOLYLINE>\n";
//					dataUrl = dataUrl + "0\nLWPOLYLINE\n";
//					dataUrl = dataUrl + "5\n"+hexString+"\n";
//					dataUrl = dataUrl + "330\n1F\n100\nAcDbEntity\n";		

					dataUrl = dataUrl + "							<isHatched>false</isHatched>\n";
					dataUrl = dataUrl + "							<isFilled>true</isFilled>\n";
					
					var color = cvjs_getAutoCADColor(vqRedlines[spc].data("color"));
					dataUrl = dataUrl + "							<autoCADColor>"+color+"</autoCADColor>\n";
									

					var cvjs_currentRedlineLayerName = vqRedlines[spc].data("layer")+"_"+multiPages[cvjs_active_floorplan_div_nr].pages[(vqRedlines[spc].data("currentPage"))-1].pageName;
//					dataUrl = dataUrl + "8\n"+cvjs_currentRedlineLayerName+"\n62\n"+color+"\n";					
					// ARROW, WE HAVE TO CLOSE POLYGON   70=1
//					dataUrl = dataUrl + "370\n   211\n100\nAcDbPolyline\n 90\n"+(points.length+1)+"        \n 70\n     1\n 43\n0.0\n";
	

					dataUrl = dataUrl + "							<dxf_90>"+(points.length+1)+"</dxf_90>\n							<dxf_70>"+1+"</dxf_70>\n";
	
	
					var linewidth = cvjs_get_dwg_scaled_value(vqRedlines[spc].data("strokeWidth")*cvjs_redlineThickness_scaleFactor, vqRedlines[spc].data("currentPage"));
					
					dataUrl = dataUrl + "							<dxf_40>"+linewidth+"</dxf_40>\n							<dxf_41>"+linewidth+"</dxf_41>\n";						 
					
					for (var i=0; i< points.length; i++){
					     var data = points[i].split(",");
//						 dataUrl = dataUrl + "							<dxf_40>"+linewidth+"</dxf_40>\n							<dxf_41>"+linewidth+"</dxf_41>\n";						 
//						 dataUrl = dataUrl +  "							<pt_"+i+">\n"+"								<dxf_10>"+cvjs_get_dwg_x_coord(Number(insert[0])+Number(data[0]), vqRedlines[spc].data("currentPage"))+"</dxf_10>\n								<dxf_20>"+cvjs_get_dwg_y_coord(Number(insert[1])+Number(data[1]), vqRedlines[spc].data("currentPage"))+"</dxf_20>\n"+ "							</pt_"+i+">\n";								 
						 dataUrl = dataUrl +  "							<pt>\n"+"								<dxf_10>"+cvjs_get_dwg_x_coord(Number(insert[0])+Number(data[0]), vqRedlines[spc].data("currentPage"))+"</dxf_10>\n								<dxf_20>"+cvjs_get_dwg_y_coord(Number(insert[1])+Number(data[1]), vqRedlines[spc].data("currentPage"))+"</dxf_20>\n"+ "							</pt>\n";								 
					}
					
					// we have to make point back to start
					 var data = points[0].split(",");
//						 dataUrl = dataUrl + "							<dxf_40>"+linewidth+"</dxf_40>\n							<dxf_41>"+linewidth+"</dxf_41>\n";						 
//						 dataUrl = dataUrl + "							<pt_"+points.length+">\n"+"								<dxf_10>"+cvjs_get_dwg_x_coord(Number(insert[0])+Number(data[0]), vqRedlines[spc].data("currentPage"))+"</dxf_10>\n								<dxf_20>"+cvjs_get_dwg_y_coord(Number(insert[1])+Number(data[1]), vqRedlines[spc].data("currentPage"))+"</dxf_20>\n"+"							</pt_"+points.length+">\n";								 
						 dataUrl = dataUrl + "							<pt>\n"+"								<dxf_10>"+cvjs_get_dwg_x_coord(Number(insert[0])+Number(data[0]), vqRedlines[spc].data("currentPage"))+"</dxf_10>\n								<dxf_20>"+cvjs_get_dwg_y_coord(Number(insert[1])+Number(data[1]), vqRedlines[spc].data("currentPage"))+"</dxf_20>\n"+"							</pt>\n";								 
					
					// ARROW, MAKE FILLED HATCH

					dataUrl = dataUrl + "						</LWPOLYLINE>\n";
					
					handle++;
					var hexString = "A"+handle.toString(16);

// we are not doing Hatch					
					
					var cvjs_currentRedlineLayerName = vqRedlines[spc].data("layer")+"_"+multiPages[cvjs_active_floorplan_div_nr].pages[(vqRedlines[spc].data("currentPage"))-1].pageName;
//					dataUrl = dataUrl + "0\nHATCH\n  5\n"+hexString+"\n330\n1F\n100\nAcDbEntity\n  8\n"+cvjs_currentRedlineLayerName+"\n 62\n     "+color+"\n370\n    70\n100\nAcDbHatch\n 10\n0.0\n 20\n0.0\n 30\n0.0\n210\n0.0\n220\n0.0\n230\n1.0\n  2\nANSI31\n";
					// FILLED  70=1
//					dataUrl = dataUrl + "  70\n     1\n 71\n     1\n 91\n        1\n 92\n        1\n 93\n       "+points.length+"\n";
 
 					for (var i=0; i< points.length-1; i++){
					     var data1 = points[i].split(",");
					     var data2 = points[i+1].split(",");
//						 dataUrl = dataUrl + "72\n 1\n"					 
//						 dataUrl = dataUrl + "10\n"+cvjs_get_dwg_x_coord(Number(insert[0])+Number(data1[0]))+"\n20\n"+cvjs_get_dwg_y_coord(Number(insert[1])+Number(data1[1]))+"\n";								 
//						 dataUrl = dataUrl + "11\n"+cvjs_get_dwg_x_coord(Number(insert[0])+Number(data2[0]))+"\n21\n"+cvjs_get_dwg_y_coord(Number(insert[1])+Number(data2[1]))+"\n";								 
					}
					
					// we have to make point back to start
					 var data1 = points[points.length-1].split(",");
					 var data2 = points[0].split(",");
//					 dataUrl = dataUrl + "72\n 1\n"					 
//					 dataUrl = dataUrl + "10\n"+cvjs_get_dwg_x_coord(Number(insert[0])+Number(data1[0]))+"\n20\n"+cvjs_get_dwg_y_coord(Number(insert[1])+Number(data1[1]))+"\n";								 
//					 dataUrl = dataUrl + "11\n"+cvjs_get_dwg_x_coord(Number(insert[0])+Number(data2[0]))+"\n21\n"+cvjs_get_dwg_y_coord(Number(insert[1])+Number(data2[1]))+"\n";								 

//					 dataUrl = dataUrl + " 97\n        1\n330\n"+currentHandle+"\n 75\n     0\n 76\n     1\n 52\n0.0\n41\n1.0\n 77\n     0\n 78\n     1\n 53\n45.0\n 43\n0.0\n 44\n0.0\n 45\n-2.245064030267288\n 46\n2.245064030267288\n 79\n     0\n 98\n        1\n 10\n0.0\n 20\n0.0\n1001\nACAD\n1010\n0.0\n1020\n0.0\n1030\n0.0\n";
					
					 currentHandle = hexString;
					
					// Hatch
					// associative

						
									
/***
					dataUrl = dataUrl +".attr({transform: \""+vqRedlines[spc].data("transform")+"\", \"fill\": \""+vqRedlines[spc].data("color")+"\"})";
***/
					str_object = vqRedlines[spc].toString();
					str_object = str_object.substring(str_object.indexOf("d=")+3);
					str_object = str_object.substring(0, str_object.indexOf('\"'));
							
/***					
					
					//console.log(str_object);
					dataUrl = dataUrl +", paper.path(\"";
					dataUrl = dataUrl +str_object+" \")";
					dataUrl = dataUrl +".attr({stroke: \""+vqRedlines[spc].data("color")+"\", \"stroke-width\": \""+vqRedlines[spc].data("strokeWidth")+"\", \"fill\": \""+vqRedlines[spc].data("fill")+"\", \"fill-opacity\": \""+vqRedlines[spc].data("fill_opacity")+"\"}))";
					dataUrl = dataUrl +"\n.data(\"node\",\""+vqRedlines[spc].data("node")+"\");\n";
					dataUrl = dataUrl +"vqRedlines.push("+itemRed+");\n\n";
****/
					//console.log(dataUrl);
										
						var checkClosed = str_object.indexOf("Z");
						
						var isClosed = false;
						if (checkClosed >-1){
							isClosed = true;
						}					
						if (!isClosed) str_object = str_object + "Z";
						var outline = new PathConverter.Outline();
						const parser = new PathConverter.SVGParser(outline);
						parser.parse(str_object);

						var color = cvjs_getAutoCADColor(vqRedlines[spc].data("color"));
						// 40 thickness start
						// 41 thickness end     (per vertex)
						// 70 closed poly
						handle++;
						var hexString = "A"+handle.toString(16);
						var linewidth = cvjs_get_dwg_scaled_value(vqRedlines[spc].data("strokeWidth")*cvjs_redlineThickness_scaleFactor, vqRedlines[spc].data("currentPage"));
						
						
						var lPoints=0;

outline.getShapes().forEach(shape => {shape.points.forEach(p => {[p.main, p.left, p.right].forEach(pt => {if (!pt) return;lPoints++;  });});});
						
						//window.alert("1 number of points in path including Z"+lPoints);
						
						if (!isClosed) lPoints--;

						dataUrl = dataUrl + "						<LWPOLYLINE>\n";

						
						dataUrl = dataUrl + "							<isHatched>false</isHatched>\n";
						dataUrl = dataUrl + "							<isFilled>false</isFilled>\n";
						var color = cvjs_getAutoCADColor(vqRedlines[spc].data("color"));
						dataUrl = dataUrl + "							<autoCADColor>"+color+"</autoCADColor>\n";
						
						
//						dataUrl = dataUrl + "0\nLWPOLYLINE\n";
//						dataUrl = dataUrl + "5\n"+hexString+"\n";
//						dataUrl = dataUrl + "330\n1F\n100\nAcDbEntity\n";	

						var cvjs_currentRedlineLayerName = vqRedlines[spc].data("layer")+"_"+multiPages[cvjs_active_floorplan_div_nr].pages[(vqRedlines[spc].data("currentPage"))-1].pageName;
				
//						dataUrl = dataUrl + "8\n"+cvjs_currentRedlineLayerName+"\n62\n"+color+"\n";
						var closepoly = 0;
						if (isClosed) closepoly = 1;
						
						//dataUrl = dataUrl + "370\n   211\n100\nAcDbPolyline\n 90\n"+lPoints+"        \n 70\n     "+closepoly+"\n 43\n0.0\n";
						dataUrl = dataUrl + "							<dxf_90>"+(points.length+1)+"</dxf_90>\n							<dxf_70>"+closepoly+"</dxf_70>\n";
						
						var linewidth = cvjs_get_dwg_scaled_value(vqRedlines[spc].data("strokeWidth")*cvjs_redlineThickness_scaleFactor, vqRedlines[spc].data("currentPage"));												
						var j=0;

						 dataUrl = dataUrl + "							<dxf_40>"+linewidth+"</dxf_40>\n							<dxf_41>"+linewidth+"</dxf_41>\n";						 


						outline.getShapes().forEach(shape => {
							shape.points.forEach(p => {
								[p.main, p.left, p.right].forEach(pt => {
									if (!pt) return;
									 if (j<lPoints){
//										 dataUrl = dataUrl + "							<dxf_40>"+linewidth+"</dxf_40>\n							<dxf_41>"+linewidth+"<dxf_41>\n";						 
//										 dataUrl = dataUrl + "							<pt_"+j+">\n"+"								<dxf_10>"+cvjs_get_dwg_x_coord(pt.x, vqRedlines[spc].data("currentPage"))+"</dxf_10>\n								<dxf_20>"+cvjs_get_dwg_y_coord(pt.y, vqRedlines[spc].data("currentPage"))+"</dxf_20>\n"+ "							</pt_"+j+">\n";
										 dataUrl = dataUrl + "							<pt>\n"+"								<dxf_10>"+cvjs_get_dwg_x_coord(pt.x, vqRedlines[spc].data("currentPage"))+"</dxf_10>\n								<dxf_20>"+cvjs_get_dwg_y_coord(pt.y, vqRedlines[spc].data("currentPage"))+"</dxf_20>\n"+ "							</pt>\n";
									 }
									 j++;
								});
							});
						});
						// NO HATCH, THIS IS AN ARROW TAIL
						dataUrl = dataUrl + "						</LWPOLYLINE>\n";


/*						
						// here we put in all the attributes

						dataUrl = dataUrl + "1001\n CADVIEWERJS\n";
						dataUrl = dataUrl + "1000\n node: "+vqRedlines[spc].data("node")+"\n";
						dataUrl = dataUrl + "1000\n name: "+vqRedlines[spc].data("name")+"\n";
						dataUrl = dataUrl + "1000\n id: "+vqRedlines[spc].data("id")+"\n";
						dataUrl = dataUrl + "1000\n layer: "+vqRedlines[spc].data("layer")+"\n";
						dataUrl = dataUrl + "1000\n group: "+vqRedlines[spc].data("group")+"\n";
						dataUrl = dataUrl + "1000\n color: "+vqRedlines[spc].data("color")+"\n";
						dataUrl = dataUrl + "1000\n strokeWidth: "+vqRedlines[spc].data("strokeWidth")+"\n";
						dataUrl = dataUrl + "1000\n fill: "+vqRedlines[spc].data("fill")+"\n";
						dataUrl = dataUrl + "1000\n username: "+vqRedlines[spc].data("username")+"\n";
						dataUrl = dataUrl + "1000\n userid: "+vqRedlines[spc].data("userid")+"\n";
						dataUrl = dataUrl + "1000\n currentPage: "+vqRedlines[spc].data("currentPage")+"\n";
						dataUrl = dataUrl + "1000\n triangle_design: "+vqRedlines[spc].data("triangle_design")+"\n";
						dataUrl = dataUrl + "1000\n polypath_arrow: "+"none"+"\n";
						dataUrl = dataUrl + "1000\n redline_text: "+vqRedlines[spc].data("redline_text")+"\n";
						dataUrl = dataUrl + "1000\n fill_opacity: "+vqRedlines[spc].data("fill_opacity")+"\n";
						dataUrl = dataUrl + "1000\n transform: "+vqRedlines[spc].data("transform")+"\n";
						dataUrl = dataUrl + "1000\n drawingRotation: "+vqRedlines[spc].data("drawingRotation")+"\n";
*/						
						
						
				}
				else if (str_object.indexOf("text")>-1){

					//dataUrl = dataUrl +"var "+itemRed+"= paper.text( 0, 0,\""+vqRedlines[spc].data("redline_text")+"\")";
					//dataUrl = dataUrl +".attr({stroke: \""+vqRedlines[spc].data("color")+"\", \"fill\": \""+vqRedlines[spc].data("color")+"\", \"font-size\": \""+cvjs_reference_font_size+"\", \"transform\": \""+vqRedlines[spc].data("transform")+"\"})";
					//dataUrl = dataUrl +"\n.data(\"node\",\""+vqRedlines[spc].data("node")+"\");\n";
					//dataUrl = dataUrl +"vqRedlines.push("+itemRed+");\n\n";
/****
					dataUrl = dataUrl +"var "+itemRed+"= paper.path(\"M0,0\")";
					dataUrl = dataUrl +"\n.data(\"node\",\""+vqRedlines[spc].data("node")+"\");\n";
					dataUrl = dataUrl +"vqRedlines.push("+itemRed+");\n\n";
***/

//						transform: "T615.5240601004703,209.54819432253697   S0.20498583644859775,   615.5240601004703,   209.54819432253697",
					
					var transformscale = vqRedlines[spc].data("transform");				
					var transform = transformscale.substring(1, transformscale.indexOf("S")); 
					var insert = transform.split(",");					
					var scale = transformscale.substring(transformscale.indexOf("S")+1);
					var textscale = scale.split(",");					
					var color = cvjs_getAutoCADColor(vqRedlines[spc].data("color"));
					// 40 thickness start
					// 41 thickness end     (per vertex)
					// 70 closed poly
					handle++;
					var hexString = "A"+handle.toString(16);

					
					var mytext = vqRedlines[spc].data("redline_text");
					var strings =  mytext.split("<br>");
					//window.alert(strings.length);
					var maxchar = 1;
					for (var k=0; k<strings.length; k++){

						if (strings[k].length>maxchar) maxchar = strings[k].length;
					}				
//					window.alert(maxchar);
					var numberofRows = (mytext.match(/<br>/g) || []).length +1;  // number of rows is number of <br> +1
					mytext = "{"+mytext+"}";
					mytext = mytext.replace(/<br>/g, '\\P');		
							
					dataUrl = dataUrl +"						<MTEXT>\n";
					//dataUrl = dataUrl + "5\n"+hexString+"\n";
					var color = cvjs_getAutoCADColor(vqRedlines[spc].data("color"));
					dataUrl = dataUrl + "							<autoCADColor>"+color+"</autoCADColor>\n";

					var cvjs_currentRedlineLayerName = vqRedlines[spc].data("layer")+"_"+multiPages[cvjs_active_floorplan_div_nr].pages[(vqRedlines[spc].data("currentPage"))-1].pageName;

					//dataUrl = dataUrl +"330\n1F\n100\nAcDbEntity\n8\n"+cvjs_currentRedlineLayerName+"\n62\n"+color+"\n100\nAcDbMText\n";
//					dataUrl = dataUrl +"							<nAcDbMText>\n";
					dataUrl = dataUrl +"							<dxf_10>"+cvjs_get_dwg_x_coord(insert[0], vqRedlines[spc].data("currentPage"))+"</dxf_10>\n";
					dataUrl = dataUrl +"							<dxf_20>"+cvjs_get_dwg_y_coord(insert[1], vqRedlines[spc].data("currentPage"))+"</dxf_20>\n";
					dataUrl = dataUrl +"							<dxf_30>0</dxf_30>\n";
					dataUrl = dataUrl +"							<dxf_40>"+cvjs_get_dwg_scaled_value(cvjs_reference_font_size*textscale[0], vqRedlines[spc].data("currentPage"))+"</dxf_40>\n";
					
//		console.log(insert[1]);			
//		console.log(numberofRows);			
//		console.log(cvjs_reference_font_size);			
//		console.log(textscale[0]);	

					var value1 = Number(insert[1])+(Number(numberofRows)*Number(cvjs_reference_font_size)*Number(textscale[0]));
		
	//	console.log(value1);	
	//	console.log(cvjs_get_dwg_scaled_value(value1));	
		
					
					dataUrl = dataUrl +"							<dxf_41>"+cvjs_get_dwg_scaled_value(value1, vqRedlines[spc].data("currentPage"))+"</dxf_41>\n";   // Think this is the yvalue of the end of the box, insertion y + height of text
					//dataUrl = dataUrl +" 71\n     1\n 72\n     5\n  1\n";					
					dataUrl = dataUrl + "							<text>"+mytext +"</text>\n";
					// here we need to adjust 46 and 1040
					
					// Think 1040 is the height of all text + extra   // I think
					// Think 1070 is the width of maximum textstring   // I think
					
					var myBoxWidth = cvjs_get_dwg_scaled_value((cvjs_reference_font_size*textscale[0])*0.8*maxchar, vqRedlines[spc].data("currentPage"));
					
					//dataUrl = dataUrl + " 73\n     1\n 44\n1.0\n1001\nACAD\n1000\nACAD_MTEXT_DEFINED_HEIGHT_BEGIN\n1070\n    "+myBoxWidth+"\n1040\n"+cvjs_get_dwg_scaled_value(numberofRows*cvjs_reference_font_size*textscale[0]*1.2)+"\n1000\nACAD_MTEXT_DEFINED_HEIGHT_END\n"
					
					//dataUrl = dataUrl + " 73\n     1\n 44\n1.0\n1001\nACAD\n1000\nACAD_MTEXT_DEFINED_HEIGHT_BEGIN\n1070\n    "+myBoxWidth+"\n1040\n"+cvjs_get_dwg_scaled_value(numberofRows*cvjs_reference_font_size*textscale[0])+"\n1000\nACAD_MTEXT_DEFINED_HEIGHT_END\n"

					dataUrl = dataUrl +"							<ACAD_MTEXT_DEFINED_HEIGHT>\n";
					dataUrl = dataUrl +"							<dxf_1070>"+myBoxWidth+"</dxf_1070>\n";
					dataUrl = dataUrl +"							<dxf_1040>"+cvjs_get_dwg_scaled_value(numberofRows*cvjs_reference_font_size*textscale[0], vqRedlines[spc].data("currentPage"))+"</dxf_1040>\n";
					dataUrl = dataUrl +"							</ACAD_MTEXT_DEFINED_HEIGHT>\n";
					
					
					
					
					
//					dataUrl = dataUrl +"						</nAcDbMText>\n";
					dataUrl = dataUrl +"						</MTEXT>\n";
					
					
					/*
					dataUrl = dataUrl + "1001\n CADVIEWERJS\n";
					dataUrl = dataUrl + "1000\n node: "+vqRedlines[spc].data("node")+"\n";
					dataUrl = dataUrl + "1000\n name: "+vqRedlines[spc].data("name")+"\n";
					dataUrl = dataUrl + "1000\n id: "+vqRedlines[spc].data("id")+"\n";
					dataUrl = dataUrl + "1000\n layer: "+vqRedlines[spc].data("layer")+"\n";
					dataUrl = dataUrl + "1000\n group: "+vqRedlines[spc].data("group")+"\n";
					dataUrl = dataUrl + "1000\n color: "+vqRedlines[spc].data("color")+"\n";
					dataUrl = dataUrl + "1000\n strokeWidth: "+vqRedlines[spc].data("strokeWidth")+"\n";
					dataUrl = dataUrl + "1000\n fill: "+vqRedlines[spc].data("fill")+"\n";
					dataUrl = dataUrl + "1000\n username: "+vqRedlines[spc].data("username")+"\n";
					dataUrl = dataUrl + "1000\n userid: "+vqRedlines[spc].data("userid")+"\n";
					dataUrl = dataUrl + "1000\n currentPage: "+vqRedlines[spc].data("currentPage")+"\n";
					dataUrl = dataUrl + "1000\n triangle_design: "+vqRedlines[spc].data("triangle_design")+"\n";
					dataUrl = dataUrl + "1000\n polypath_arrow: "+"none"+"\n";
					dataUrl = dataUrl + "1000\n redline_text: "+vqRedlines[spc].data("redline_text")+"\n";
					dataUrl = dataUrl + "1000\n fill_opacity: "+vqRedlines[spc].data("fill_opacity")+"\n";
					dataUrl = dataUrl + "1000\n transform: "+vqRedlines[spc].data("transform")+"\n";
					dataUrl = dataUrl + "1000\n drawingRotation: "+vqRedlines[spc].data("drawingRotation")+"\n";
*/						

		
										
/***					
					dataUrl = dataUrl +"TEXT\n";
					dataUrl = dataUrl + "5\n"+hexString+"\n";

					dataUrl = dataUrl +"8\n0\n62\n"+color+"\n";
//					dataUrl = dataUrl +"10\n"+www.origX+"\n";
//					dataUrl = dataUrl +"20\n"+www.origY+"\n";
					dataUrl = dataUrl +"10\n"+insert[0]+"\n";
					dataUrl = dataUrl +"20\n"+insert[1]+"\n";
					dataUrl = dataUrl +"1\n"+vqRedlines[spc].data("redline_text")+"\n";
//					dataUrl = dataUrl +"40\n"+(www.origHeight/4)+"\n";
//					dataUrl = dataUrl +"7\n"+font.getName()+"n";
					dataUrl = dataUrl +"40\n"+(cvjs_reference_font_size*textscale[0])+"\n";
					dataUrl = dataUrl +"7\n"+"Ariel"+"\n";
					dataUrl = dataUrl +"0\n";
**/



					
					
				}
				else{
					if (str_object.indexOf("path")>-1){

						//window.alert(str_object);
					
						var fillopacity = str_object.substring(str_object.indexOf("fill-opacity")+13);
						
						fillopacity = fillopacity.substring(0, fillopacity.indexOf(";"));
						
//						window.alert(fillopacity+"  "+Number(fillopacity));
						
						var opacityFlag = (Number(fillopacity)>0.02)

						//window.alert(fillopacity+"  "+Number(fillopacity)+"  "+opacityFlag);
						
						
						str_object = str_object.substring(str_object.indexOf("d=")+3);
						str_object = str_object.substring(0, str_object.indexOf('\"'));
						
//console.log("path XXXXXXXXXXX"+str_object+"XXXXXXXXXXXX");	

						var checkClosed = str_object.indexOf("Z");
						
						var isClosed = false;
						if (checkClosed >-1){
							isClosed = true;
						}					
						if (!isClosed) str_object = str_object + "Z";
						var outline = new PathConverter.Outline();
						const parser = new PathConverter.SVGParser(outline);
						parser.parse(str_object);
						
						var color = cvjs_getAutoCADColor(vqRedlines[spc].data("color"));
						// 40 thickness start
						// 41 thickness end     (per vertex)
						// 70 closed poly
						handle++;
						var hexString = "A"+handle.toString(16);
						
						currentHandle = hexString;
						
						var linewidth = vqRedlines[spc].data("strokeWidth")*cvjs_redlineThickness_scaleFactor;

						var lPoints=0;
						outline.getShapes().forEach(shape => {
							shape.points.forEach(p => {
								[p.main, p.left, p.right].forEach(pt => {
									if (!pt) return;
									 lPoints++;									 
								});
							});
						});
						
						//window.alert("2 number of points in path including Z "+lPoints);
						
						if (!isClosed) lPoints--;

						dataUrl = dataUrl + "						<LWPOLYLINE>\n";
						
						if (opacityFlag && isClosed){
							dataUrl = dataUrl + "							<isHatched>true</isHatched>\n";
							dataUrl = dataUrl + "							<isFilled>false</isFilled>\n";
						}
						else{
							dataUrl = dataUrl + "							<isHatched>false</isHatched>\n";
							dataUrl = dataUrl + "							<isFilled>false</isFilled>\n";
						}						
//						dataUrl = dataUrl + "0\nLWPOLYLINE\n";
//						dataUrl = dataUrl + "5\n"+hexString+"\n";
//						dataUrl = dataUrl + "330\n1F\n100\nAcDbEntity\n";	
						var color = cvjs_getAutoCADColor(vqRedlines[spc].data("color"));
						dataUrl = dataUrl + "							<autoCADColor>"+color+"</autoCADColor>\n";

						var cvjs_currentRedlineLayerName = vqRedlines[spc].data("layer")+"_"+multiPages[cvjs_active_floorplan_div_nr].pages[(vqRedlines[spc].data("currentPage"))-1].pageName;
				
//						dataUrl = dataUrl + "8\n"+cvjs_currentRedlineLayerName+"\n62\n"+color+"\n";
						var closepoly = 0;
						if (isClosed) closepoly = 1;
//						dataUrl = dataUrl + "370\n   211\n100\nAcDbPolyline\n 90\n"+lPoints+"        \n 70\n     "+closepoly+"\n 43\n0.0\n";
						dataUrl = dataUrl + "							<dxf_90>"+(lPoints)+"</dxf_90>\n							<dxf_70>"+closepoly+"</dxf_70>\n";
						
						var linewidth = vqRedlines[spc].data("strokeWidth")*cvjs_redlineThickness_scaleFactor;

						dataUrl = dataUrl + "							<dxf_40>"+cvjs_get_dwg_scaled_value(linewidth, vqRedlines[spc].data("currentPage"))+"</dxf_40>\n							<dxf_41>"+cvjs_get_dwg_scaled_value(linewidth, vqRedlines[spc].data("currentPage"))+"</dxf_41>\n";						 

if (cvjs_debug){

	var bbox = cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox();	
	console.log(" bbox.x "+bbox.x+"  bbox.y "+bbox.y+ "  bbox.width "+bbox.width+" bbox.height "+bbox.height); 										 
}						
						
						var j=0;
						outline.getShapes().forEach(shape => {
							shape.points.forEach(p => {
								[p.main, p.left, p.right].forEach(pt => {
									if (!pt) return;
									 if (j<lPoints){
				
if (cvjs_debug) console.log(" pt.x "+pt.x+"  pt.y "+pt.y); 										 


										 
//										 dataUrl = dataUrl + "							<dxf_40>"+cvjs_get_dwg_scaled_value(linewidth, vqRedlines[spc].data("currentPage"))+"</dxf_40>\n							<dxf_41>"+cvjs_get_dwg_scaled_value(linewidth, vqRedlines[spc].data("currentPage"))+"</dxf_41>\n";						 
//										 dataUrl = dataUrl + "40\n"+linewidth+"\n41\n"+linewidth+"\n";						 
//										 dataUrl = dataUrl + "10\n"+pt.x+"\n20\n"+pt.y+"\n";
//										 dataUrl = dataUrl + "							<pt_"+j+">\n"+"								<dxf_10>"+cvjs_get_dwg_x_coord(pt.x, vqRedlines[spc].data("currentPage"))+"</dxf_10>\n								<dxf_20>"+cvjs_get_dwg_y_coord(pt.y, vqRedlines[spc].data("currentPage"))+"</dxf_20>\n"+ "							</pt_"+j+">\n";
										 dataUrl = dataUrl + "							<pt>\n"+"								<dxf_10>"+cvjs_get_dwg_x_coord(pt.x, vqRedlines[spc].data("currentPage"))+"</dxf_10>\n								<dxf_20>"+cvjs_get_dwg_y_coord(pt.y, vqRedlines[spc].data("currentPage"))+"</dxf_20>\n"+ "							</pt>\n";
									 }
									 j++;
								});
							});
						});
	
/**
						dataUrl = dataUrl + "1001\n CADVIEWERJS\n";
						dataUrl = dataUrl + "1000\n node: "+vqRedlines[spc].data("node")+"\n";
						dataUrl = dataUrl + "1000\n name: "+vqRedlines[spc].data("name")+"\n";
						dataUrl = dataUrl + "1000\n id: "+vqRedlines[spc].data("id")+"\n";
						dataUrl = dataUrl + "1000\n layer: "+vqRedlines[spc].data("layer")+"\n";
						dataUrl = dataUrl + "1000\n group: "+vqRedlines[spc].data("group")+"\n";
						dataUrl = dataUrl + "1000\n color: "+vqRedlines[spc].data("color")+"\n";
						dataUrl = dataUrl + "1000\n strokeWidth: "+vqRedlines[spc].data("strokeWidth")+"\n";
						dataUrl = dataUrl + "1000\n fill: "+vqRedlines[spc].data("fill")+"\n";
						dataUrl = dataUrl + "1000\n username: "+vqRedlines[spc].data("username")+"\n";
						dataUrl = dataUrl + "1000\n userid: "+vqRedlines[spc].data("userid")+"\n";
						dataUrl = dataUrl + "1000\n currentPage: "+vqRedlines[spc].data("currentPage")+"\n";
						dataUrl = dataUrl + "1000\n triangle_design: "+vqRedlines[spc].data("triangle_design")+"\n";
						dataUrl = dataUrl + "1000\n polypath_arrow: "+"none"+"\n";
						dataUrl = dataUrl + "1000\n redline_text: "+vqRedlines[spc].data("redline_text")+"\n";
						dataUrl = dataUrl + "1000\n fill_opacity: "+vqRedlines[spc].data("fill_opacity")+"\n";
						dataUrl = dataUrl + "1000\n transform: "+vqRedlines[spc].data("transform")+"\n";
						dataUrl = dataUrl + "1000\n drawingRotation: "+vqRedlines[spc].data("drawingRotation")+"\n";
**/						
	
						dataUrl = dataUrl + "						</LWPOLYLINE>\n";

	
						// the check if fill and transparency
						if (opacityFlag && isClosed  && false){
//						if (opacityFlag && isClosed){
						
						// THIS CAN BE CLOSED OR OPEN
						// IF CLOSED MAKE A HATCH
						// IF TRANSPARANCY MAKE A HATCH
						
							handle++;
							var hexString = "A"+handle.toString(16);

							var cvjs_currentRedlineLayerName = vqRedlines[spc].data("layer")+"_"+multiPages[cvjs_active_floorplan_div_nr].pages[(vqRedlines[spc].data("currentPage"))-1].pageName;

							dataUrl = dataUrl + "0\nHATCH\n  5\n"+hexString+"\n330\n1F\n100\nAcDbEntity\n  8\n"+cvjs_currentRedlineLayerName+"\n 62\n     "+color+"\n370\n    70\n100\nAcDbHatch\n 10\n0.0\n 20\n0.0\n 30\n0.0\n210\n0.0\n220\n0.0\n230\n1.0\n  2\nANSI31\n";
							// HATCH  70=1
							dataUrl = dataUrl + "  70\n     0\n 71\n     1\n 91\n        1\n 92\n        1\n 93\n       "+(lPoints-1)+"\n";
							var pointsx=new Array();
							var pointsy=new Array();
							var j=0;
							outline.getShapes().forEach(shape => {
								shape.points.forEach(p => {
									[p.main, p.left, p.right].forEach(pt => {
										if (!pt) return;										
										pointsx[j] = pt.x; 
										pointsy[j] = pt.y; 
										j++;
									});
								});
							});
							
							for (var i=0; i< pointsx.length-1; i++){
								 dataUrl = dataUrl + "72\n 1\n"					 
//								 dataUrl = dataUrl + "10\n"+pointsx[i]+"\n20\n"+pointsy[i]+"\n";								 
//								 dataUrl = dataUrl + "11\n"+pointsx[i+1]+"\n21\n"+pointsy[i+1]+"\n";								 
								 dataUrl = dataUrl + "10\n"+cvjs_get_dwg_x_coord(pointsx[i])+"\n20\n"+cvjs_get_dwg_y_coord(pointsy[i])+"\n";								 
								 dataUrl = dataUrl + "11\n"+cvjs_get_dwg_x_coord(pointsx[i+1])+"\n21\n"+cvjs_get_dwg_y_coord(pointsy[i+1])+"\n";								 
							}							
							// we have to make point back to start
							 dataUrl = dataUrl + "72\n 1\n"					 
//							 dataUrl = dataUrl + "10\n"+pointsx[pointsx.length-1]+"\n20\n"+pointsy[pointsx.length-1]+"\n";								 
//							 dataUrl = dataUrl + "11\n"+pointsx[0]+"\n21\n"+pointsy[0]+"\n";								 
							 dataUrl = dataUrl + "10\n"+cvjs_get_dwg_x_coord(pointsx[pointsx.length-1])+"\n20\n"+cvjs_get_dwg_y_coord(pointsy[pointsx.length-1])+"\n";								 
							 dataUrl = dataUrl + "11\n"+cvjs_get_dwg_x_coord(pointsx[0])+"\n21\n"+cvjs_get_dwg_y_coord(pointsy[0])+"\n";								 

							 dataUrl = dataUrl + " 97\n        1\n330\n"+currentHandle+"\n 75\n     0\n 76\n     1\n 52\n0.0\n41\n1.0\n 77\n     0\n 78\n     1\n 53\n45.0\n 43\n0.0\n 44\n0.0\n 45\n"+cvjs_get_dwg_scaled_value(-2.245064030267288*3.0)+"\n 46\n"+cvjs_get_dwg_scaled_value(2.245064030267288*3.0)+"\n 79\n     0\n 98\n        1\n 10\n0.0\n 20\n0.0\n1001\nACAD\n1010\n0.0\n1020\n0.0\n1030\n0.0\n";							
							 currentHandle = hexString;
						}	

						
console.log("dataURL TOTAL "+dataUrl+" dataURL TOTAL ");	
					
					
					/*						
						//console.log(str_object);
						dataUrl = dataUrl +"var "+itemRed+"= paper.path(\"";
						dataUrl = dataUrl +str_object+" \")";
						dataUrl = dataUrl +".attr({stroke: \""+vqRedlines[spc].data("color")+"\", \"stroke-width\": \""+vqRedlines[spc].data("strokeWidth")+"\", \"fill\": \""+vqRedlines[spc].data("fill")+"\", \"fill-opacity\": \""+vqRedlines[spc].data("fill_opacity")+"\"})";
						dataUrl = dataUrl +"\n.data(\"node\",\""+vqRedlines[spc].data("node")+"\");\n";
						dataUrl = dataUrl +"vqRedlines.push("+itemRed+");\n\n";
*/
					}
				}

				
				
				dataUrl = dataUrl +"						</graphics>\n";
				
				

				dataUrl = dataUrl +"					</Redline>\n";

			} // case node exists
		}


//		if (vqRedlines.length>0 && vqStickyNotes.length>0)
//			dataUrl = dataUrl +"						,\n";


		comma_flag =0;
		
		if (stickynote_flag)   //4.1.02a
			for (spc in vqStickyNotes)
			{
				if (vqStickyNotes[spc].data("deleted") == true ){
					// do nothing, the note is not there
					//console.log("file.js deleted node "+vqStickyNotes[spc].data("node"));
				}
				else{  // node exists

					if (comma_flag == 0){
						comma_flag = 1
					}
					else{
						dataUrl = dataUrl +"						,\n";
					}

					var notePos = parseInt(spc)+vqRedlines.length;

					dataUrl = dataUrl +"					<StickyNote>\n";
					dataUrl = dataUrl +"						<index>"+notePos+"</index>\n";
	//				dataUrl = dataUrl +"					"+vqStickyNotes[spc].data("node")+": {\n";
					dataUrl = dataUrl +"						<node>\""+vqStickyNotes[spc].data("node")+"\"</node>\n";
					dataUrl = dataUrl +"						<name>\""+vqStickyNotes[spc].data("name")+"\"</name>\n";
					dataUrl = dataUrl +"						<id>\""+vqStickyNotes[spc].data("id")+"\"</id>\n";
					dataUrl = dataUrl +"						<layer>\""+vqStickyNotes[spc].data("layer")+"_"+multiPages[cvjs_active_floorplan_div_nr].pages[vqRedlines[spc].data("currentPage")-1].pageName+"\"</layer>\n";
					dataUrl = dataUrl +"						<group>\""+vqStickyNotes[spc].data("group")+"\"</group>\n";
					dataUrl = dataUrl +"						<text>\""+vqStickyNotes[spc].data("text")+"\"</text>\n";
					dataUrl = dataUrl +"						<userid>\""+vqStickyNotes[spc].data("userid")+"\"</userid>\n";
					dataUrl = dataUrl +"						<currentPage>"+vqStickyNotes[spc].data("currentPage")+"</currentPage>\n";
					dataUrl = dataUrl +"						<currentPageName>\""+multiPages[cvjs_active_floorplan_div_nr].pages[vqStickyNotes[spc].data("currentPage")-1].pageName+"\"</currentPageName>\n";
					dataUrl = dataUrl +"						<date>\""+vqStickyNotes[spc].data("date")+"\"<date>\n";
					dataUrl = dataUrl +"						<linked>"+vqStickyNotes[spc].data("linked")+"<linked>\n";
					dataUrl = dataUrl +"						<transform>\""+vqStickyNotes[spc].data("transform")+"\"</transform>\n";
					dataUrl = dataUrl +"						<drawingRotation>"+vqStickyNotes[spc].data("drawingRotation")+"</drawingRotation>\n";


					var rightadjustment = 0;
					if (vqStickyNotes[spc].data("id")<10) rightadjustment = 3;
					var SNoteTemplate = "paper.group(paper.path(\"M0,0h20v20h-20v-20Z\").attr({stroke: \"#000000\", \"stroke-width\" : \"1.0\"}),"+
						"paper.path(\"M7,12h1.3M9.5,12h3.5M11.25,12v5M9.75,12v1.75M12.75,12v1.75M10.5,17h1.5M7,13.5h1.3M7,15.25h3M7,17.0h2.2\").attr({stroke: \"#000000\", \"stroke-width\" : \"0.5\"}),"+
						"paper.text("+(3+rightadjustment)+",9,\"#"+vqStickyNotes[spc].data("id")+"\").attr({\"font-size\": \"8px\", \"font-style\": \"italic\", stroke: \"#000000\", \"stroke-width\" : \"0.3\", \"stroke\" : \"0.3\", \"fill\" : \"#000000\", \"fill-opacity\" : 1.0}))";
						
						// 2018-03-15
	//					SNoteTemplate = SNoteTemplate + ".attr({\'transform\': \""+vqStickyNotes[spc].data("transform")+"\" , \"opacity\" : \"1\"})";
						
						// we are simply loading in a scaled down image that we then make come "alive"
						SNoteTemplate = SNoteTemplate + ".attr({\'transform\': \"t0,0S0.01\" , \"opacity\" : \"0.1\"})";
						
						
						SNoteTemplate = SNoteTemplate + ".attr({	fill: \'#FFF\', \"fill-opacity\": \"0.8\", stroke: \'#000\', \'stroke-opacity\': \"1\" })";

					dataUrl = dataUrl +"						<graphics>\n";
					dataUrl = dataUrl +"						<stickyNoteTemplate>"+SNoteTemplate+"</stickyNoteTemplate>\n";
					dataUrl = dataUrl +"						</graphics>\n";



					dataUrl = dataUrl +"					</StickyNote>\n";

				} // case node exists
			}

//		dataUrl = dataUrl +"}\n\n";
		dataUrl = dataUrl +"</cvjs_RedlinesStickyNotes>\n\n";

		return(dataUrl);

};


/**
 * Returns the setting of Measurement Units on the current drawing/page from the active floorplan_div
 * @return {string} units -  Measurement Unit (mmn, cm, m, feet, inch)
 */

function cvjs_getCurrentMeasurementUnit(){

	return cvjs_units[cvjs_active_floorplan_div_nr];
}

/**
 * Returns the setting of SVG to World Units on the current drawing/page from the active floorplan_div
 * @return {float} svgToWorldUnits - conversion factor for measurements
 */

function cvjs_getSvgToWorldUnits(){

	return cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr];
}



/**
 * Sets Unit and Measurement World Unit Transformation on current page
 * @param {string} floorplan_div - name of Element on which CADViewer is located
 * @param {string} units - Measurement Unit  (mmn, cm, m, feet, inch)
 * @param {float} svgToWorldUnit - conversion factor for measurements
 */

function cvjs_setCurrentMeasurementUnits(floorplan_div, units, svgToWorldUnit){

	cvjs_svgToWorldUnits[cvjs_rPaperIndex(floorplan_div)] = svgToWorldUnit;
	cvjs_units[cvjs_rPaperIndex(floorplan_div)] = units;
	cvjs_calibratedMeasurement = true;
		
}


/**
 * Reset the initialization of floorplans
 */

function cvjs_resetInitialization_FloorplanDiv(){

	floorplans_divs_Initialized = ["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""];
		
}
	
	
/**
 * Moves the drag background on top, typically for image and text intensive PDF files 
 * @param {string} floorplan_div - name of Element on which CADViewer is located
 */
function cvjs_setDragBackgroundOnTop(floorplan_div){
	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	cvjs_SVGGroup[cvjs_active_floorplan_div_nr].add(cvjs_masterBackground[cvjs_active_floorplan_div_nr]);
}


/**
 * Moves the drag background to its default position, at the back, typically for CAD files 
 * @param {string} floorplan_div - name of Element on which CADViewer is located
 */
function cvjs_setDragBackgroundToBack(floorplan_div){
	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	cvjs_masterBackground[cvjs_active_floorplan_div_nr].add(cvjs_SVGGroup[cvjs_active_floorplan_div_nr]);
}



//3.2.02c
var cvjs_creationInputType = 1;
	
var creation_modal_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];
	

function cvjs_creation_modal_show(floorplan_div){

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	
	//window.alert(cvjs_creationInputType);
	jQuery("#creationModeModal_"+floorplan_div).hide();
	
				
	if (cvjs_supressPopUpModal == true){
		
		cvjs_setCreationMode(cvjs_supressPopUpModal, true);
		hideOnlyPop();
		cvjs_clearDrawing();		
		// 3.2.02c
		cvjs_draw_space_object_names_on_spaces();
		// turn on/off the div in SpaceObjects_C_1_06
		
		cvjs_spaceObjectInputPanel(floorplan_div);
			
		
	}
		
}


function cvjs_creation_modal_hide(floorplan_div){

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	jQuery("#creationModeModal_"+floorplan_div).hide();
	
	cvjs_supressPopUpModal = false;
}



function cvjs_showCreationModeModal(floorplan_div){

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	// move to right location
	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;

	if (creation_modal_offset_flag[cvjs_active_floorplan_div_nr]){
		creation_modal_offset_flag[cvjs_active_floorplan_div_nr] = false;
		// 3.1.21j .appendTo('body');
		jQuery("#creationModeModal_"+floorplan_div).css({position: "fixed"});
		jQuery("#creationModeModal_"+floorplan_div).offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});
	}
	
	jQuery("#creationModeModal_"+floorplan_div).show();
}






var cvjs_ellipseRedlineType = 1;
	
var ellipse_modal_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];
	

function cvjs_drawEllipseViaButton(floorplan_div){

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	
	
	cvjs_redline++;
	cvjs_setCurrentRedlineValues("RED_"+cvjs_redline, "redline"+cvjs_redline, cvjs_redline, "RedLineLayer", "unassigned", cvjs_currentRedline_color, cvjs_currentRedline_strokeWidth, cvjs_currentRotationAngle[cvjs_active_floorplan_div_nr]);
	
	if (cvjs_ellipseRedlineType == 1)
		cvjs_drawSpaceObject_RedlineEllipse(floorplan_div);
	
	if (cvjs_ellipseRedlineType == 2)
		cvjs_drawSpaceObject_RedlineEllipseCloud(floorplan_div);		
	jQuery("#ellipseModal_"+floorplan_div).hide();
}


function cvjs_ellipse_modal_hide(floorplan_div){

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	jQuery("#ellipseModal_"+floorplan_div).hide();
}



function cvjs_drawRedlineEllipseCloud(floorplan_div){

	// 3.3.01a
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}



	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	// move to right location
	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;

	if (ellipse_modal_offset_flag[cvjs_active_floorplan_div_nr]){
		ellipse_modal_offset_flag[cvjs_active_floorplan_div_nr] = false;
		// 3.1.21j .appendTo('body');
		jQuery("#ellipseModal_"+floorplan_div).css({position: "fixed"});
		jQuery("#ellipseModal_"+floorplan_div).offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});
	}
	
	jQuery("#ellipseModal_"+floorplan_div).show();
}



function cvjs_closeAreaMeasurement(){
	
	if (cvjs_addHandleFunc_MeasurementFilledPolygon_started){

		cvjs_addHandleFunc_MeasurementFilledPolygon_started = false;
		
//		cvjs_measurementMultipleSegmentLength = Math.round( (cvjs_currentMeasurementLength)*100)/100;;



		var vmeasurement_x1 = ((firstX_poly_redline1_segment1-delta_x)/global_scale)-area_vertices[area_vertices_counter-1].x;
		var vmeasurement_y1 = ((firstY_poly_redline1_segment1-delta_y)/global_scale)-area_vertices[area_vertices_counter-1].y;

//		console.log(measurement_x1+" "+measurement_y1);
		
		var measurementLength = Math.sqrt( Math.pow( (vmeasurement_x1), 2) + Math.pow( (vmeasurement_y1),2 ))
//		var measurementLength = Math.sqrt( Math.pow( (measurement_x2-measurement_x1), 2) + Math.pow( (measurement_y2-measurement_y1),2 ))
		var mLength = (cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr]*measurementLength).toFixed(2);
		//var mLength = 0;
		
//		console.log("measurement MultipleSegment Length  "+cvjs_measurementMultipleSegmentLength+" mLength  "+mLength);	
			
		cvjs_measurementMultipleSegmentLength = Math.round( (Number(cvjs_measurementMultipleSegmentLength)+Number(mLength))*100)/100;;

//		console.log("again "+cvjs_measurementMultipleSegmentLength+"  "+mLength);

		
								
		lastX_poly_redline1 = 	firstX_poly_redline1_segment1;
		lastY_poly_redline1 = 	firstY_poly_redline1_segment1;
						
		cvjs_measurement_end = true;


		polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale+"L" + (originX_poly_redline1-delta_x)/global_scale + "," + (originY_poly_redline1-delta_y)/global_scale+"Z";   // end polygon
	//	polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
		tPolygon_redline1.attr({'path': polyPath_redline1});


		cvjs_removeHandleFunc_MeasurementFilledPolygon();

		//console.log("update database!! "+tPolygon);

		tRubberBand_poly_redline1.attr({'path': "M0,0"});

		draw_poly_redline1 = false;
		first_point_poly_redline1 = true;

			
		var displayLength = 0.0;
		var lLength = 0.0;
		lLength = cvjs_measurementMultipleSegmentLength;
						
		lLength = Math.round((lLength)*100)/100;
		displayLength = lLength;
		cvjs_currentMeasurementLength = displayLength;

		// CALCULATE AREA   DISPLAY DISTANCE

		// add the first point as the last in the polygon
		var vert_x = (firstX_poly_redline1_segment1-delta_x)/global_scale;
		var vert_y = (firstY_poly_redline1_segment1-delta_y)/global_scale;
		area_vertices[area_vertices_counter] = new Array();
		area_vertices[area_vertices_counter] = {x: vert_x, y: vert_y};

		if (cvjs_debug) console.log(area_vertices_counter+" "+ area_vertices[area_vertices_counter].x+"  "+area_vertices[area_vertices_counter].y+"  "+cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr]);
		area_vertices_counter++;

		cvjs_measurementArea = (calcPolygonArea(area_vertices)*cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr]*cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr]).toFixed(2);;
		
		if (cvjs_callbackMeasurement) cvjs_measurementCallback(cvjs_measurementMultipleSegmentLength , cvjs_measurementArea, cvjs_units[cvjs_active_floorplan_div_nr]);
	
	
		if (cvjs_units[cvjs_active_floorplan_div_nr].indexOf("feet")==0){

			var lint = Math.floor(lLength);
			var fraction = lLength - Math.floor(lLength);
			fraction = Math.round(fraction*16);
			if (fraction == 16){
				lint+=1;
				fraction = 0;
			}
			jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Area+": "+cvjs_measurementArea+" "+cvjs_units[cvjs_active_floorplan_div_nr]+"<sup>2</sup> ("+lint+"\'"+" "+fraction+"/16\")");
		}
		else
			jQuery('#cvjs_measurementLength_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Area+": "+cvjs_measurementArea+" "+cvjs_units[cvjs_active_floorplan_div_nr]+"<sup>2</sup> ("+cvjs_measurementMultipleSegmentLength+" "+cvjs_units[cvjs_active_floorplan_div_nr]+")");

		
			
		
		
		//polygon_finish_redline4();
	}
		
}


/**
 * Build a tree structure in which to be able to load CADViewer dynamically
 * @param {string} FileLocation - location of file tree folder
 * @param {string} DocumentLocation - location of current document
 * @param {string} floorplan_div - name of the Element in which CADViewer is running
 */


function cvjs_buildFolderTree(FileLocation, DocumentLocation, floorplan_div){

//window.alert(FileLocation);

		cvjs_buildFolderTree_crossDomain = true;

		//  HOW TO MAKE THE 
		
		// check file location on php init file		
		// if FileLocation different from php init file, then update php init file and reload with identical URL string
		
		var lastLetter= FileLocation.slice(-1);
		if (lastLetter=='/' || lastLetter=='\\'){
			//window.alert("no problem");
		}
		else{
			FileLocation = FileLocation+ "/";
		}		
		
		var cvjs_phpLoadConfigFile = cvjs_serverHandlersPath + cvjs_serverLoadFileController;
		
		var js_data = {};
		js_data['file'] = myLocation+"/CV-JS_foldertree_settings.php";
		//window.alert(cvjs_phpLoadConfigFile+"  "+js_data['file']);
		jQuery.ajax({
		  url:cvjs_phpLoadConfigFile,
		  type: 'post',
		  data: js_data,
		  success: function(phpconfig){

					var status ="Load php: "+phpconfig;
					if (cvjs_debug) 		console.log(status);
					
					var foldertreestart = phpconfig.lastIndexOf("$FolderTreeLocation");
									
					var sub0 = phpconfig.substring(0, foldertreestart);
					var sub1 = phpconfig.substring(foldertreestart+19);						
//					console.log(sub1);
					var indx2 = sub1.indexOf("=");
					var sub2 = sub1.substring(indx2+1);
//					console.log(sub2);			
					var sub3 = sub2.substring(0, sub2.indexOf(";"));
//					console.log(sub3);
					var serverPath = sub3.trim();

					var sub4 = sub2.substring(sub2.indexOf(";")+1);
					serverPath = serverPath.replace(/['"]+/g, '');				
											
//					window.alert("XX"+serverPath+"XX"+FileLocation);
	
					if (FileLocation.indexOf(serverPath) == 0 && FileLocation.length == serverPath.length ){       // 3.2.01f
						// "bingo! we are ok
						//window.alert("bingo! we are ok");
						
						//return(FileLocation);
						
					}
					else{
						// "we have to update server and reload"
						//window.alert("we have to update server and reload");
						// update phpconfig
												
						phpconfig = sub0+" $FolderTreeLocation = \""+FileLocation+"\";"+sub4; 
						//window.alert(phpconfig);
						
						// overwrite php configuration file on server
						var saveSettingsUrl = cvjs_serverHandlersPath + cvjs_serverSaveFileController; //					var saveSettingsUrl = settings_data_url+'save-file-p1.php';
						var settings_data = {};
						settings_data['file'] = DocumentLocation +"/CV-JS_foldertree_settings.php";
						settings_data['file_content'] = phpconfig;
						
						jQuery.ajax({
						  url:saveSettingsUrl,
						  type: 'post',
						  data: settings_data,
						  success: function(html){

							// We have updated the php settings and are reloading the page with new settings
							//window.alert("reloading "+html);
							// reload document						
							location.reload(); 
						  
						  }  // end success

						});

						
					}

					//cvjs_setUpStickyNotesRedlines(cvjs_rPaper[cvjs_active_floorplan_div_nr]);
				},
		 error:function(data_e){console.log("Error "+data_e); return;}
		});


		// we have to return file location in any case
		return(FileLocation);
		
}


function cvjs_CleanLayout(floorplan_div){
	
	for (var i=0; i<rest_nname[cvjs_active_floorplan_div_nr ].length; i++){
		if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="layout")  {rest_nname[cvjs_active_floorplan_div_nr ][i] = ""; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = "";}
		// cleaning Layour
	}							
	
	
}

// 3.1.21j
function cvjs_selectPageFromList(floorplan_div){
	
// dummy	
}


// 3.2.01e
var cvjs_jsTreeSelectionCurrentData = "";
var cvjs_jsTreeSelectionCurrentDataLength =0;

function cvjs_custom_jsTreeSelection(data, datalength){
	
	cvjs_jsTreeSelectionCurrentData = data;
	cvjs_jsTreeSelectionCurrentDataLength = datalength;
}


// 3.2.01g

/**
 * Sets control parameter for service conversion
 * @param {string} applicationPlatform - 
 * @param {string} applicationPlatformUsername 
 * @param {string} applicationPlatformUserID 
 * @param {string} ServiceToken
 * @param {int} leaveStreamOnServerOnServer 
 */

function cvjs_conversion_setApplicationServiceParameters(applicationPlatform, applicationPlatformUsername, applicationPlatformUserID, ServiceToken, leaveStreamOnServer){

	rest_serviceCall = true;

	rest_applicationPlatform = applicationPlatform; 
	rest_applicationPlatformUsername = applicationPlatformUsername ;
	rest_applicationPlatformUserID = applicationPlatformUserID; 
	rest_ServiceToken = ServiceToken;
	rest_leaveStreamOnServer = leaveStreamOnServer;
}







// 3.2.01i
function cvjs_update_done_edit_location_fields(rmid){


//window.alert(rmid);
				jQuery("#location_s").html("");
				jQuery("#type_s").html("");
				jQuery("#occupancy_s").html("");
				jQuery("#tags_s").html("");

				jQuery("#type_tag").val("");
				
				//window.alert("XHere_3");	
				// 3.2.02c
				jQuery("#type_tag").val(id_main_data_template_type);
									
				
				
				jQuery("#layer_tag").val(id_main_data_layer);
				jQuery("#occupancy_tag").val("");
				jQuery("#other_tags").val("");
				jQuery("#drop_link_spaces").html('None Selected'+'<b class="caret"></b>');
				
				// 3.2.02c				
				if (cvjs_creationInputType==1){
			

							for (var i=0;i<fArr_Name.length;i++)
							{				
								if (fArr_Id[i] == rmid){

									jQuery("#location_s").html(fArr_Name[i]);
									jQuery("#type_s").html(fArr_Type[i]);
									jQuery("#occupancy_s").html(fArr_Occupancy[i]);
									jQuery("#tags_s").html(fArr_Tags[i]);

									jQuery("#type_tag").val(fArr_Type[i]);
									jQuery("#layer_tag").val(fArr_Layer[i]);
									jQuery("#occupancy_tag").val(fArr_Occupancy[i]);
									jQuery("#other_tags").val(fArr_Tags[i]);

									jQuery("#drop_link_spaces").html(fArr_Name[i]+'<b class="caret"></b>');
								}
							
							}



			
				}
				else{

		
					for (spc in vqRooms[cvjs_active_floorplan_div_nr])
					{
						if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == rmid) {
							var node = vqRooms[cvjs_active_floorplan_div_nr][spc].data("node")

							
							
							jQuery("#location_s").html(rmid);
							jQuery("#type_s").html(vqRooms[cvjs_active_floorplan_div_nr][spc].data("type"));
							jQuery("#occupancy_s").html(vqRooms[cvjs_active_floorplan_div_nr][spc].data("occupancy"));
							jQuery("#tags_s").html(vqRooms[cvjs_active_floorplan_div_nr][spc].data("tags"));

							jQuery("#spaces_manual_tag").val(rmid);				
							jQuery("#type_tag").val(vqRooms[cvjs_active_floorplan_div_nr][spc].data("type"));
							jQuery("#occupancy_tag").val(vqRooms[cvjs_active_floorplan_div_nr][spc].data("occupancy"));
							jQuery("#other_tags").val(vqRooms[cvjs_active_floorplan_div_nr][spc].data("tags"));
											

						}

					}

				}
				
}




// 3.2.02c
function cvjs_draw_space_object_names_on_spaces(){


	textLayer1 = cvjs_clearTextLayer(textLayer1);

	var hatchtype = 0;

	// I am making an API call to the function cvjs_getSpaceObjectIdList()
	// this will give me an array with IDs of all Spaces in the drawing
	var spaceObjectIds = cvjs_getSpaceObjectIdList();
	var i=0;

	var spaceObjectNames = cvjs_getSpaceObjectNamesList();
	
	for (spc in spaceObjectIds){
	
		//var  myObject = spaceObjectIds[spc];
		
	
		var textString = new Array(spaceObjectNames[spc]);
		var textStyles = new Array(text_style_arial_9pt_normal);
		var scaleText = new Array("0.15" );
		var hexColorText = new Array("#AB5500");

//window.alert("here");		
		// here we clip the roomlables so they are inside the room polygon
		cvjs_AddTextAndTBorderOnSpaceObjectId(textLayer1, spaceObjectIds[spc], 0.05, textString, textStyles, scaleText, hexColorText, false, true);
	

	}
	
	
}




// 3.3.201b



/**
 * Connect Text Strings; connects two text strings with a line and arrow
 * @param {string} searchString1 - the first text string to search after
 * @param {int} textInstance1 - if multiple entries of text object, load instance, the first instance is 1
 * @param {string} searchString1 - the second text string to search after
 * @param {int} textInstance1 - if multiple entries of text object, load instance, the first instance is 1
 * @param {int} lengthfactor1 - % value, tells how many percentages line should be shorted at first text
 * @param {int} lengthfactor2 - % value, tells how many percentages line should be shorted at end text
 */


function cvjs_connectTextInstances(textString1, textInstance1, textString2, textInstance2, lengthfactor1, lengthfactor2){

	var xx1 =0;
	var yy1 =0; 
	var xx2 =0;
	var yy2 =0; 
		
	var instance = 0;
	var flag = false;
	jQuery("text").each(function( index ) {

		  if ( ((jQuery( this ).text()).toLowerCase()).indexOf(textString1.toLowerCase())>-1){
				instance ++;
				if (instance == textInstance1){

					xx1 = jQuery( this ).attr('x');
					yy1 = jQuery( this ).attr('y')

					// if we have an SVG with an unknown coordiante system we return directly
					if (cvjs_svgWidthHeight100percent) return;

					// this is an SVG file with a different coordinate system, we translate into the parents coordinate system
					if (cvjs_svgTransX != "" && cvjs_svgTransX != ""){
						xx1 = (cvjs_svgTransX + Number(xx))*cvjs_svgScale;
						yy1 = (cvjs_svgTransY + Number(yy))*cvjs_svgScale;
					}
					flag = true;
				}
		  }
	});

	
	
	instance = 0;
	flag = false;
	jQuery("text").each(function( index ) {
		  if ( ((jQuery( this ).text()).toLowerCase()).indexOf(textString2.toLowerCase())>-1){
				instance ++;
				if (instance == textInstance2){

					xx2 = jQuery( this ).attr('x');
					yy2 = jQuery( this ).attr('y')

					// if we have an SVG with an unknown coordiante system we return directly
					if (cvjs_svgWidthHeight100percent) return;

					// this is an SVG file with a different coordinate system, we translate into the parents coordinate system
					if (cvjs_svgTransX != "" && cvjs_svgTransX != ""){
						xx2 = (cvjs_svgTransX + Number(xx))*cvjs_svgScale;
						yy2 = (cvjs_svgTransY + Number(yy))*cvjs_svgScale;
					}
					flag = true;
				}
		  }
	});
	
	
console.log(xx1+" "+yy1+"  "+xx2+"  "+yy2);	

	// draw a redline arrow. 
	
	// change the start and end point as part of the straight line
		
	cvjs_redline++;
	cvjs_setCurrentRedlineValues("RED_"+cvjs_redline, "redline"+cvjs_redline, cvjs_redline, "RedLineLayer", "unassigned", cvjs_currentRedline_color, cvjs_currentRedline_strokeWidth, cvjs_currentRotationAngle[cvjs_active_floorplan_div_nr]);
	

/**	
	var mycoordinate = polyPath_redline1.substring(0, polyPath_redline1.lastIndexOf("L"));
	//console.log(mycoordinate);
	mycoordinate = mycoordinate.substring(0, mycoordinate.lastIndexOf("L"));
	//console.log(mycoordinate);
	mycoordinate = mycoordinate.substring(mycoordinate.lastIndexOf("L")+1);

	if (mycoordinate.indexOf("M")>-1)   // only one line in arrow
		mycoordinate = mycoordinate.substring(mycoordinate.lastIndexOf("M")+1);

	//console.log(mycoordinate);
	var res = mycoordinate.split(",");
**/
//	var xCor = Number(res[0]);
//	var yCor = Number(res[1]);

	var xCor = xx1;
	var yCor = yy1;
	
	var scaleTriangle = cvjs_currentRedline_strokeWidth;

	if (cvjs_currentRedline_strokeWidth>3)
		scaleTriangle = 3 + (cvjs_currentRedline_strokeWidth-3)/2;

	scaleTriangle = scaleTriangle*cvjs_redlineThickness_scaleFactor;

  	var triangle_design= -4.5*scaleTriangle+","+5.5*scaleTriangle+" "+0.5*scaleTriangle+","+-4.5*scaleTriangle+" "+5.5*scaleTriangle+","+5.5*scaleTriangle;

//   var dX = (lastX_poly_redline1-delta_x)/global_scale - xCor;
//	var dY = (lastY_poly_redline1-delta_y)/global_scale - yCor;

	var dX = parseFloat(xx2) - parseFloat(xCor);
	var dY = parseFloat(yy2) - parseFloat(yCor);
	
	
    //console.log(dX+" "+dY);
    var angleInDegrees = ( Math.atan2(dY,dX) / Math.PI * 180.0);

	// new coordinates

	var fullLength = Math.sqrt( dX*dX + dY*dY );
	
//window.alert(lengthfactor/100.0+"  2 angle "+angleInDegrees+"  "+Math.cos(angleInDegrees/180.0*Math.PI));	

	xx1 = parseFloat(xCor)  + parseFloat(Math.cos(angleInDegrees/180.0*Math.PI)*fullLength*lengthfactor1/100.0);
	yy1 = parseFloat(yCor)  + parseFloat(Math.sin(angleInDegrees/180.0*Math.PI)*fullLength*lengthfactor1/100.0);
	
	xx2 = parseFloat(xCor)  +  parseFloat(Math.cos(angleInDegrees/180.0*Math.PI)*fullLength*(1.0-lengthfactor2/100.0));
	yy2 = parseFloat(yCor)  +  parseFloat(Math.sin(angleInDegrees/180.0*Math.PI)*fullLength*(1.0-lengthfactor2/100.0));
	

console.log(triangle_design+" degrees "+angleInDegrees);

//
//	  Triangle.transform('T' + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale + 'r' + (angleInDegrees - 270));

	  var Ttrans = 'T' + xx2 + "," + yy2 + 'r' + (angleInDegrees - 270);

console.log(Ttrans)

	  var Triangle = cvjs_rPaper[cvjs_active_floorplan_div_nr].polyline(triangle_design);
	  Triangle.attr({
		fill: cvjs_currentRedline_color,
		transform: Ttrans
	  });

	 polyPath_redline1 = "M " + xx1 +", "+yy1+" L " + xx2 + "," + yy2;

console.log(polyPath_redline1)

	tPolygon_redline1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polyPath_redline1).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "#FFF", "fill-opacity": "0.01"});


	 tPolygon_redline1.attr({'path': polyPath_redline1});

	  var Triangle = cvjs_rPaper[cvjs_active_floorplan_div_nr].polyline(triangle_design);
	 
console.log(tPolygon_redline1+"  "+polyPath_redline1);	 

	var triangleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].g( Triangle, tPolygon_redline1 ); // Group polyline

	//console.log(triangleGroup);

//	cvjs_addVqRedlinesGraphics_newNode(cvjs_currentRedline_underbar, tPolygon_redline1);
	cvjs_addVqRedlinesGraphics_newNodeTrans(cvjs_currentRedline_underbar, triangleGroup, Ttrans, triangle_design, polyPath_redline1);

	cvjs_graphicalObjectCreated('RedlineArrowPolyline');
	

	  Triangle.attr({
		fill: cvjs_currentRedline_color,
		transform: "M0,09S0"
	  });
	

}








/// NEW - MAKE SPACES ON FLOORPLAN FOR SPACE MANAGEMENT


var spaceInsertion_x = 0;
var spaceInsertion_y = 0;

var spaceLL_x = 0;
var spaceLL_y = 0;
var spaceUL_x = 0;
var spaceUL_y = 0;

var spaceLR_x = 0;
var spaceLR_y = 0;
var spaceUR_x = 0;
var spaceUR_y = 0;




var space_fill_arr = [];
var space_rows = 1000;
var space_columns = 3;
var spaceArrayCounter = 0;



function fill2DimensionsArray(arr, rows, columns){
    for (var i = 0; i < rows; i++) {
        arr.push([0])
        for (var j = 0; j < columns; j++) {
            arr[i][j] = 0;
        }
    }
}


function find_borders(x,y){

	if (x<=spaceLL_x ){spaceLL_x = x; }
	if (y<=spaceLL_y ){spaceLL_y = y; }
	if (x<=spaceUL_x ){spaceUL_x = x; }
	if (y>=spaceUL_y ){spaceUL_y = y; }
	if (x>=spaceUR_x ){spaceUR_x = x; }
	if (y>=spaceUR_y ){spaceUR_y = y; }
	if (x>=spaceLR_x ){spaceLR_x = x; }
	if (y<=spaceLR_y ){spaceLR_y = y; }
}



function getPixel(imageData, x, y) {
  if (x < 0 || y < 0 || x >= imageData.width || y >= imageData.height) {
    return [-1, -1, -1, -1];  // impossible color
  } else {
    const offset = (y * imageData.width + x) * 4;
    return imageData.data.slice(offset, offset + 4);
  }
}

function setPixel(imageData, x, y, color) {
  const offset = (y * imageData.width + x) * 4;
  imageData.data[offset + 0] = color[0];
  imageData.data[offset + 1] = color[1];
  imageData.data[offset + 2] = color[2];
  imageData.data[offset + 3] = color[0];
}

function colorsMatch(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}

// added 
function colorsMatch_3fields(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
}

/*
function create_polygon(){

	var cvjs_tempcanvas = jQuery("#tempCanvas").getContext('2d');
	const imageData = ctx.getImageData(0, 0, rows, columns);

	// create polygon
	
	// transform to SVG coordinates
	
	// make XML grammer for DwgMerge process    xdata - altname process
		

}
*/
var cvjs_ctx_helper;


function floodFill(ctx, ctx_helper, x, y, fillColor, borderColor) {


	x = Math.round(x);
	y = Math.round(y);


	spaceInsertion_x = x;
	spaceInsertion_y = y;

	spaceLL_x = spaceInsertion_x;
	spaceLL_y = spaceInsertion_y;
	spaceUL_x = spaceInsertion_x;
	spaceUL_y = spaceInsertion_y;

	spaceLR_x = spaceInsertion_x;
	spaceLR_y = spaceInsertion_y;
	spaceUR_x = spaceInsertion_x;
	spaceUR_y = spaceInsertion_y;


	// read the pixels in the canvas
	const imageData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);
	const imageData2 = ctx_helper.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);
	
	// get the color we're filling
	const targetColor = getPixel(imageData, x, y);
	console.log("First: targetColor "+targetColor[0] +" "+targetColor[1] +" "+targetColor[2] +" "+targetColor[3]+"x="+x+" y="+y);
  
	if ( targetColor[0] == -1) {console.log(" this is not working, return"); return;}
  
  // check we are actually filling a different color
  if (!colorsMatch(targetColor, fillColor)) {
  
    const pixelsToCheck = [x, y];
    while (pixelsToCheck.length > 0) {
      const y = pixelsToCheck.pop();
      const x = pixelsToCheck.pop();
      
      const currentColor = getPixel(imageData, x, y);
      if (colorsMatch(currentColor, targetColor)) {
        setPixel(imageData, x, y, fillColor);
		// find border corners
		find_borders(x,y);
			
        pixelsToCheck.push(x + 1, y);
        pixelsToCheck.push(x - 1, y);
        pixelsToCheck.push(x, y + 1);
        pixelsToCheck.push(x, y - 1);
      }
	  else {  // color is not the target color
			if (!colorsMatch_3fields(currentColor, fillColor)){ // we are at the border ...  or inside .... if not filled with fillColor
				setPixel(imageData2, x, y, borderColor);
				
			}	  
	  }	  
    }
 
 ctx.putImageData(imageData, 0, 0);
    ctx_helper.putImageData(imageData2, 0, 0);
		
  }
}


var cvjs_spaceFloodFill = false;

var cvjs_spacePolygonFillLayer = "layer_PolygonLayer";
//var cvjs_spaceIDLayer = "layer_TextIDLayer";
//var cvjs_spaceIDLayer = "layer_ROOM_TXT";

var cvjs_spaceIDLayer = "None Selected";


var paint_room_id = false;

var canv_width_global =1;
var canv_height_global =1;
var base_adjust=1;


var drawing_aspect_ratio;
var canvas_aspect_ratio;



function cvjs_floodfill(cvjs_ctx, canv_width, canv_height, widthHeightFactorSVG, widthHeightFactorSVGless1){


	// keeping track on insertion point, of room ID and name
	fill2DimensionsArray(space_fill_arr, space_rows, space_columns);


	canv_width_global = canv_width;
	canv_height_global = canv_height;

	jQuery('#tempCanvas_space').height(canv_height);
	jQuery('#tempCanvas_space').width(canv_width);
	cvjs_ctx_helper = jQuery('#tempCanvas_space')[0].getContext('2d');
		
		
	cvjs_ctx_helper.beginPath();
	cvjs_ctx_helper.strokeStyle = "white";
	cvjs_ctx_helper.fillStyle = "white";
	cvjs_ctx_helper.rect(0, 0, canv_width, canv_height);	
	cvjs_ctx_helper.fill();
	
	var x_svg = viewBox[cvjs_active_floorplan_div_nr].X;
	var y_svg = viewBox[cvjs_active_floorplan_div_nr].Y;
	var width_svg_box = viewBoxWidth[cvjs_active_floorplan_div_nr];
	var height_svg_box = viewBoxHeight[cvjs_active_floorplan_div_nr];

	// FILL SPACES	
	// Identify all objects on the System ID Layer
	// Find the insertion point of each object
	// translate that insertion point into flood-fill

	
console.log("BEFORE "+cvjs_spaceIDLayer+"  ");
	
	var sizeWidth = cvjs_ctx.canvas.clientWidth;
	var sizeHeight = cvjs_ctx.canvas.clientHeight;
   
	// ASPECT RATIO AND PLACEMENT OF DRAWING IN CANVAS
	drawing_aspect_ratio =  height_svg_box/width_svg_box;
	canvas_aspect_ratio =  sizeHeight/sizeWidth;
	
	var oArr = {};
	jQuery("."+cvjs_spaceIDLayer).find('[id^=cv_]').each(function() {
		var id = jQuery(this).attr('id');
			try{
				var searchString = "[id^="+floorplan_div_Array[cvjs_active_floorplan_div_nr]+"]";
				var svgID = jQuery("#"+id).parents(searchString).attr('id');
				if (svgID == floorplan_div_Array[cvjs_active_floorplan_div_nr])
					if (!oArr[id]) oArr[id] = true;

			}catch(err) {console.log(err);}
	});

	var flag= true;	
	var flag2= true;	
	var location_x = 0;
	var location_y = 0;
	
	for (var prop in oArr){
		try{
			var target = "#"+prop;
			var text = jQuery(target).html();
			var x = jQuery(target).attr('x');
			var y = jQuery(target).attr('y');			

			if (flag){
				space_fill_arr[spaceArrayCounter][0] = x;
				space_fill_arr[spaceArrayCounter][1] = y;
				space_fill_arr[spaceArrayCounter][2] = text;
				spaceArrayCounter++;
				cvjs_floodfillWrapper(x, y, text, canv_width, canv_height, cvjs_ctx, sizeWidth, sizeHeight);
			}

		}	
		catch(err){console.log(err);}						
	}	

  // NEW : second loop over redline text

	for (i=0; i<vqRedlines.length; i++){
	
		console.log("redline "+i)
		if (vqRedlines[i].data("redline_text")!="none"){
			console.log("we have a redline ID! "+vqRedlines[i].data("redline_text"));
			console.log(vqRedlines[i].data("transform"));
			console.log(vqRedlines[i].data("redline_text"));
			
			var coordinates = vqRedlines[i].data("transform").substring(1,vqRedlines[i].data("transform").indexOf("S"));
			
			console.log(coordinates);
			
			space_fill_arr[spaceArrayCounter][0] = Math.floor(coordinates.substring(0,coordinates.indexOf(",")));
			space_fill_arr[spaceArrayCounter][1] = Math.floor(coordinates.substring(coordinates.indexOf(",")+1));
			space_fill_arr[spaceArrayCounter][2] = vqRedlines[i].data("redline_text");
			console.log(space_fill_arr[spaceArrayCounter][0]+" "+space_fill_arr[spaceArrayCounter][1]+" "+space_fill_arr[spaceArrayCounter][2]);
			cvjs_floodfillWrapper( space_fill_arr[spaceArrayCounter][0], space_fill_arr[spaceArrayCounter][1], space_fill_arr[spaceArrayCounter][2], canv_width, canv_height, cvjs_ctx, sizeWidth, sizeHeight);

			spaceArrayCounter++;

		}		
	}

	
	// here we create the second object for outlines only
	
	var imageData2 = cvjs_ctx_helper.getImageData(0, 0, cvjs_ctx_helper.canvas.width, cvjs_ctx_helper.canvas.height);
	// move the contours over to the initial image
	cvjs_ctx.putImageData(imageData2, 0, 0);
		
}


function cvjs_floodfillWrapper(x,y,text, canv_width, canv_height, cvjs_ctx, sizeWidth, sizeHeight){


				var x1 = x - actualLLX[cvjs_active_floorplan_div_nr];				
				var y1 = y - actualLLY[cvjs_active_floorplan_div_nr];
				if (drawing_aspect_ratio<=canvas_aspect_ratio){
//				console.log("HERE HERE HERE drawing_aspect_ratio: "+drawing_aspect_ratio+" canvas_aspect_ratio: "+canvas_aspect_ratio);
				
					location_x = canv_width*(x1/rpWidth[cvjs_active_floorplan_div_nr]);								
	// we make this based on the same scale factor as the determinating direction
					location_y = canv_width*(y1/rpWidth[cvjs_active_floorplan_div_nr]);								
					// The image gets centered in the height direction if the drawing aspect ratio is smaller than the canvas box
					
					// ASPECT RATIO AND PLACEMENT OF DRAWING IN CANVAS
					var canvas_drawing_height_in_aspect = drawing_aspect_ratio*sizeWidth; 					
					var white_spaces = sizeHeight-canvas_drawing_height_in_aspect; 
					base_adjust = white_spaces/2;			   
					
					if (paint_room_id){
						cvjs_ctx_helper.strokeStyle = "green";
						cvjs_ctx_helper.strokeStyle = "blue";
						cvjs_ctx_helper.beginPath();
						cvjs_ctx_helper.arc(Math.round(location_x), Math.round(location_y+base_adjust), 4, 0, 2 * Math.PI);		
						cvjs_ctx_helper.stroke();
					}					
					
					floodFill(cvjs_ctx, cvjs_ctx_helper, Math.round(location_x), Math.round(location_y+base_adjust), [10, 10, 0, 0], [255, 0, 0, 255]);					
				
				}
			   else{
			   // if width adjust of base_adjust needed

//				console.log("222  HERE HERE HERE drawing_aspect_ratio: "+drawing_aspect_ratio+" canvas_aspect_ratio: "+canvas_aspect_ratio);
			   
					location_x = canv_height*(x1/rpHeight[cvjs_active_floorplan_div_nr]);								
	// we make this based on the same scale factor as the determinating direction
					location_y = canv_height*(y1/rpHeight[cvjs_active_floorplan_div_nr]);								

					
					// The image gets centered in the width direction if the drawing aspect ratio is bigger than the canvas box
					
					// ASPECT RATIO AND PLACEMENT OF DRAWING IN CANVAS
					var canvas_drawing_width_in_aspect = sizeHeight/drawing_aspect_ratio; 					
					var white_spaces = sizeWidth-canvas_drawing_width_in_aspect; 
					base_adjust = white_spaces/2.0;  //let us adjust it based on the height/width factor and see what happens
//					base_adjust = white_spaces/2.0/canvas_aspect_ratio;  //let us adjust it based on the height/width factor and see what happens
					
					floodFill(cvjs_ctx, cvjs_ctx_helper, Math.round(location_x+base_adjust), Math.round(location_y), [10, 10, 0, 0], [255, 0, 0, 255]);										
				}

}




function cvjs_pngForSVG(htmlPrintFile){


	// hide the temporary print object, that can be done by setting the print control variable to false
	jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();



//window.alert("We got this:"+htmlPrintFile);

	console.log(htmlPrintFile);
	var myfile = htmlPrintFile.substring(htmlPrintFile.lastIndexOf("/")+1);
	console.log(myfile);
	var myoutputfile = myfile.substring(0, myfile.lastIndexOf("."));
	console.log(myoutputfile);
	
	// first make to png	
	var cvjs_phpConvert64Location = cvjs_serverHandlersPath + "convert_base64.php";

	var js_data = {};
	js_data['input_file'] = ServerLocation+"php/"+cvjs_printObjectPath+myfile;
	js_data['output_file'] = ServerLocation+"php/"+cvjs_printObjectPath+myoutputfile;

//console.log(cvjs_phpSaveRedlineUrlLocation+"  "+cvjs_StickyNoteSaveRedlineUrl);

		jQuery.ajax({
		  url:cvjs_phpConvert64Location,
		  type: 'post',
		  data: js_data,
		  success: function(html){

			console.log("we have converted to png: "+html);
			// then vectorize
				ImageTracer.imageToSVG(
					cvjs_serverHandlersPath+cvjs_printObjectPath+myoutputfile,
					function(svgstr){ 
						// here we massage the SVG before we append it
						
						// 3.3.02a
						cvjs_serverSavePrintModeController = 0;   // set back to 0
						
//						jQuery("#tempCanvas_space").hide();
						
						var node = 0;
						var cv_id = 100000;						
						var splitSVG = svgstr.split("<path");						
						var splitLength = splitSVG.length;
//						console.log(splitLength);
						
						for (var i=1; i<splitLength; i++){
							if ( splitSVG[i].indexOf("d=\"M 0 0") > -1){
								splitSVG[i] = "<path></path>";  
							}
							else{
								splitSVG[i] = "<path "+ splitSVG[i].substring(0, splitSVG[i].indexOf(" Z")) +" Z \"></path>";
								
								var rgbIndex1 = splitSVG[i].indexOf("rgb(");
								var sub1 = splitSVG[i].substring(0, rgbIndex1+4);
								var sub0 = splitSVG[i].substring(0, rgbIndex1);
								
								var rgbIndex2 = splitSVG[i].indexOf(")",rgbIndex1);
								var sub2 = splitSVG[i].substring(rgbIndex2);
								var sub3 = splitSVG[i].substring(rgbIndex2+2);

								r = 0;
								g = 0;
								b = 0;
								var z = i % 3;
								
								if ( z == 0) r= 255;
								if ( z == 1) g= 255;
								if ( z == 2) b= 255;

// <path fill="rgb(0,255,0)" stroke="rgb(255,0,0)" stroke-width="1" opacity="1" d="M 3116.5 306 L 3178.5 306 L 3197 309.5 L 3196 429.5 L 3197 503.5 L 3192.5 505 L 3190.5 504 L 3136 505 L 3134.5 519 L 3121 527.5 L 3118 542.5 L 3124.5 553 L 3131 556.5 L 3122 562.5 Q 3116.5 567.5 3118 579.5 L 3123 589 L 3136 595.5 L 3134.5 613 Q 3123.5 615.5 3121 609.5 L 3113.5 596 L 3098 589.5 L 3099 416.5 L 3098 309.5 L 3116.5 306 Z "></path>							
// id="cv_1" stroke="rgb(204,204,204)" fill="none" class=" sHB cvjs_handles" cvjs:node='NODE_1' cvjs:handle='BR210' cvjs:area="18053529.22"
								
//								splitSVG[i] = sub1 + "" + r +"," + g+","+b+sub2; 
								cv_id++;
								node++;
								splitSVG[i] = sub0 + "rgb(220,220,220)\" " +  "id=\"cv_"+cv_id+"\" class=\" sHB cvjs_handles\" cvjs:node=\'NODE_"+node+"\' cvjs:handle=\'"+node+"\' cvjs:area=\"not calculated\" " + sub3; 

//								console.log(i+" new path" +splitSVG[i]);
	
								var polyPath = splitSVG[i].substring(splitSVG[i].indexOf(" d=")+4);
								polyPath = polyPath.substring(0, polyPath.lastIndexOf("\""));
//								console.log(polyPath);
								
								// split polygon
								var splitPoly = polyPath.split(" ");								
								var polyLength = splitPoly.length;								
								// now we loop through
								var xvalue = true;
								
								if (true){
									for (j=0; j<polyLength; j++){
									
										 // find a value
										 var temp = splitPoly[j];
										 temp = temp.toString();
										 var vval = parseFloat(temp);
										 //console.log(splitPoly[j]+"  "+temp+"  vval="+vval+"  ");
										 if (!isNaN(vval)){
											// we have a value 
											 if (xvalue){
											 // if xflag we transform as x-coordinates
											 
												if (drawing_aspect_ratio<=canvas_aspect_ratio){
													splitPoly[j] = vval/canv_width_global*rpWidth[cvjs_active_floorplan_div_nr];
												}
												else{
													splitPoly[j] = (vval-base_adjust)/canv_height_global*rpHeight[cvjs_active_floorplan_div_nr];
												}
												
												console.log(vval+" x transform: "+splitPoly[j]+" canv_width_global "+canv_width_global+" rpWidth "+rpWidth[cvjs_active_floorplan_div_nr]);
											 }
											 else{
											 // if !xflag we transform as y-coordinate
												if (drawing_aspect_ratio<=canvas_aspect_ratio){
													splitPoly[j] = (vval-base_adjust)/canv_width_global*rpWidth[cvjs_active_floorplan_div_nr];
												}
												else{
													splitPoly[j] = (vval)/canv_height_global*rpHeight[cvjs_active_floorplan_div_nr];												
												}
											 }
											 xvalue = !xvalue;											 
										 }
									}
																		
									polyPath = "";
									for (j=0; j<polyLength; j++){
										polyPath = polyPath+" "+splitPoly[j];
									}
									
									//console.log("IN i=="+i+" new polyPath ="+polyPath);								
								    //return;
								}
	

								var tPolygon = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polyPath).attr({stroke: "#b00000", fill: "none"});
								
// What is happening here 3.3.02a
// The change of default color of white is controlled in the Handler in data_host_connectors/js/custom_host_parser
								
								tPolygon.attr({fill: '#ff9999', "fill-opacity": "0.5", stroke: '#00ff00', 'stroke-opacity': "0.7"});						
//								tPolygon.attr({fill: '#ff0000', "fill-opacity": "0.9", stroke: '#00ff00', 'stroke-opacity': "0.7"});

								
								cvjs_currentNode_underbar = "NODE_" +i;

								cvjs_currentNode_id = "NODE_"+i;
								cvjs_currentNode_name = "NewSpace_"+i;
								cvjs_currentNode_layer = "SpaceLayer";
								cvjs_currentNode_group = "unassigned";
								cvjs_currentNode_attributes = "unassigned";
								cvjs_currentNode_attributeStatus = "unpopulated";  // 3.2.02b
								cvjs_currentNode_type = "A new Space";
								cvjs_currentNode_tags = "unassigned";
								cvjs_currentNode_tags = "unassigned";
								cvjs_currentNode_linked = true;
								
								console.log("CURRENT NODE: "+cvjs_currentNode_underbar);

								var x_arr = new Array();
								var y_arr = new Array();
								var array_count = 0;
								
								area_vertices = new Array();
								
								for (m=0;m<polyLength; m++){								
									if (splitPoly[m]=="M" || splitPoly[m]=="L" || splitPoly[m]=="Q"){
										x_arr[array_count] = splitPoly[m+1]; 
										y_arr[array_count] = splitPoly[m+2];

										area_vertices[array_count] = new Array();
										area_vertices[array_count] = {x: x_arr[array_count], y: y_arr[array_count]};
										
										array_count++;
									}
								}
								area_vertices[array_count] = new Array();
								area_vertices[array_count] = {x: x_arr[0], y: y_arr[0]};
								array_count++;

/**																
								try{
									cvjs_units[cvjs_active_floorplan_div_nr] = worldUnits.units;
									cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr] = worldUnits.svgToWorld;

								}catch (err){

											console.log(err);

								}
**/
								
								console.log("AREA:    "+calcPolygonArea(area_vertices)+"   cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr] "+cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr]);
								
								var cvjs_measurementArea = (calcPolygonArea(area_vertices)*cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr]*cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr]).toFixed(2);;
								
								// here we have to determine which space we have found								
								for (k=0;k<spaceArrayCounter; k++){
								
									if (isInside(x_arr, y_arr, x_arr.length, space_fill_arr[k][0], space_fill_arr[k][1])){
									    console.log("MATCH polygon "+k+"   "+space_fill_arr[k][2]);
										cvjs_currentNode_id = space_fill_arr[k][2];
										cvjs_currentNode_name = space_fill_arr[k][2];
										 if (cvjs_units[cvjs_active_floorplan_div_nr]=="mm"){ 
											cvjs_currentNode_type = "Space<br>"+((cvjs_measurementArea/1000.0/1000.0).toFixed(2))+" m2";
										 }
										 else if (cvjs_units[cvjs_active_floorplan_div_nr]=="cm"){ 
											cvjs_currentNode_type = "Space<br>"+((cvjs_measurementArea/100.0/100.0).toFixed(2))+" m2";

										 }
										 else
											cvjs_currentNode_type = "Space<br>"+(cvjs_measurementArea).toFixed(2)+" "+cvjs_units[cvjs_active_floorplan_div_nr]+"2";

										k=spaceArrayCounter;
									}
								}
	

								cvjs_addVqRoomsGraphics_newNode_polygon(cvjs_currentNode_underbar, tPolygon);
								cvjs_setUpVqRooms_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentNode_underbar);


							}
						}
						
						/**** we do not append back in
						
						// glueing back together
						var newSVG = "";
						for (var i=0; i<splitLength; i++){
							newSVG = newSVG + splitSVG[i];
						}
						newSVG = newSVG + "</svg>";
						//console.log("NEW SVG:" +newSVG);
						ImageTracer.appendSVGString( newSVG, 'svgcontainer' ); 

						***/
						
						// let us hide all temp canvas
						
						jQuery("#tempCanvas_space").hide();
						
						
						// let us go back into normal mode
						cvjs_spaceFloodFill = false;
						
						// we do not know about the debug flag ..... //3.3.02a
						printDebugFlag = false;
												

						// let us turn back on Space Layer and Redline ID 						
						cvjs_LayerOn(cvjs_spaceIDLayer);

						// we add back in the ID redlines
						for (i=0; i<vqRedlines.length; i++){
							console.log("redline "+i)
							if (vqRedlines[i].data("redline_text")!="none"){

								var dTransform = vqRedlines[i].data("transform");
								vqRedlines[i].attr({'transform': dTransform, "opacity" : "1"});
							}		
						}
						
						// let us unblock the space
						 // 3.3.02b
						// hide the overlay again and allow interaction
						document.getElementById("cvjs_overlay").style.display = "none";	


						 // 3.3.02b  - we build the custom PopUp
						try{
								custom_host_parser_PopUpMenu()						
						}
						catch(err){console.log(err);}
		
						
						
						cvjs_resetZoomPan("floorPlan");
						
					},
					{ ltres: 4, qtres: 4, scale:1.0, strokewidth:1, roundcoords: 1 }

				);
			
			
			
			
		  },
		  error:function(data_e){console.log("Error "+data_e); return;}

		});
}





/**
 * Add a Pin Marker Space Object  
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 * @param {string} spaceObjectId - Unique ID of the space object. NOTE!
 * @param {string} spaceObjectName - Name of the space object.
 * @param {string} spaceObjectType - Type of the object
 * @param {string} layer - the associated layer of the object
 */
  
function cvjs_addPinMarker(floorplan_div, spaceObjectId, spaceObjectName, spaceObjectType, spaceObjectLayer){

	// 3.2.02b
	
	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	



	cvjs_hidePop();
	Node_id = cvjs_currentMaxNodeId();
	//console.log("xurrent Node_id="+Node_id);

	Node_id++;
	currentNode_underbar = Node_underbar+Node_id;
	currentNode_id = spaceObjectId;
	currentNode_name = spaceObjectName;
	currentNode_layer = spaceObjectLayer;
	currentNode_group = "none";
	currentNode_attributes = "none";
	currentNode_attributeStatus = "unpopulated";
	currentNode_type = spaceObjectType;
	currentNode_tags = "unassigned";
	currentNode_linked = false;
	
	cvjs_setCurrentNodeValues(currentNode_underbar, currentNode_name, currentNode_id, currentNode_layer, currentNode_group, currentNode_attributes, currentNode_attributeStatus, currentNode_type, currentNode_tags, currentNode_tags, currentNode_linked);
	cvjs_addHandleFunc_PinMarker(spaceObjectId, spaceObjectName, spaceObjectType);

}


/**
 * Interactively draws a custom wallpaper. The data object of the rectangle is defined as a Space Object. Prior to calling this method, cvjs_setCurrentSpaceObjectNodeValues() should be called.
 */
 
function cvjs_drawSpaceObject_PinMarker(spaceObjectId, spaceObjectName, spaceObjectType) {
		cvjs_addHandleFunc_PinMarker(spaceObjectId, spaceObjectName, spaceObjectType);
}

var cvjs_customSvgImagePath = "";
var cvjs_customSpaceObjectId = "";
var cvjs_customSpaceObjectType = "";
var cvjs_customSpaceObjectName = "";

var cvjs_mouseMoveSVGCustomImage = false;
var cvjs_scaleFactorPin = 2400;


function cvjs_addHandleFunc_PinMarker(spaceObjectId, spaceObjectName, spaceObjectType) {

//	cvjs_customSvgImagePath = svgImagePath;
	cvjs_customSpaceObjectId = spaceObjectId;
	cvjs_customSpaceObjectType = spaceObjectType;
	cvjs_customSpaceObjectName = spaceObjectName;
	
//window.alert("cvjs_svgImagePath" +cvjs_svgImagePath);	

	tPath_r = "M" + firstX_r + "," + firstY_r;
	tRubberBand_r = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_r).attr({stroke: "#b00000", fill : "none"});

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,90, '');

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


//	console.log("svg canvas"+canvas_width+" "+canvas_height+" "+global_scale);
//	console.log("handle group"+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])+" "+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
//	console.log("viewBox"+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]);

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});

	

	handleGroup.mouseup(stop_cvjs_create_custom_svg_image);
	cvjs_mouseMoveSVGCustomImage = false;
	handleGroup.mousemove(move_cvjs_create_custom_svg_image);

//	handleGroup.drag(move_cvjs_create_custom_svg_image,start_cvjs_create_custom_svg_image,stop_cvjs_create_custom_svg_image);
}


function cvjs_removeHandleFunc_CustomSVGImage() {
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("handler removed");
}


var start_cvjs_create_custom_svg_image = function() {

	flag_rectangle= false;
	tRubberBand_r.attr({stroke: "#b00000", fill : "none"});
}

var tTransform_pin = "";


var move_cvjs_create_custom_svg_image = function(e,x,y){

//var move_cvjs_create_custom_svg_image = function(dx,dy,x,y) {


	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;

	console.log(delta_x+"  "+delta_y);





	x = x+document.body.scrollLeft;  // test - moving click outside of note, cannot make note appear behind handleGroup, therefore translate
	y = y+document.body.scrollTop;   // test 
			
	scaleNote = 1;

	 if ( (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])> (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr]))
	 	scaleNote = (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr])/cvjs_scaleFactorPin;
	 else
	 	scaleNote = (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])/cvjs_scaleFactorPin;
	
	
	
//	console.log(" x "+ x+"  x-delta_x "+ (x-delta_x)+"  "+scaleNote+"  "+global_scale);
	

	
	if (cvjs_mouseMoveSVGCustomImage == false){

		cvjs_mouseMoveSVGCustomImage = true;
		tRubberBand_sn = cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M38.55 127.89 c-5.55 -0.44 -10.43 -1.76 -15.30 -4.14 -14.57 -7.12 -23.70 -22.23 -23.22 -38.40 0.19 -6.05 1.52 -11.55 4.06 -16.80 1.09 -2.25 1.83 -3.53 3.31 -5.75 0.65 -0.96 8.56 -13.69 17.60 -28.27 9.03 -14.59 16.46 -26.53 16.50 -26.53 0.04 0 7.47 11.94 16.50 26.52 9.04 14.59 16.95 27.32 17.60 28.28 1.48 2.22 2.22 3.50 3.31 5.75 4.21 8.69 5.20 18.69 2.79 28.21 -2.44 9.58 -8.22 17.95 -16.40 23.71 -6.96 4.91 -15.51 7.59 -24.04 7.52 -0.94 -0.01 -2.16 -0.05 -2.71 -0.10z m6.35 -17.64 c4.40 -0.80 8.13 -2.71 11.20 -5.75 7.69 -7.61 8.25 -19.80 1.30 -28.12 -3.35 -4.02 -8.17 -6.63 -13.44 -7.28 -1.14 -0.14 -3.78 -0.14 -4.92 0 -8.53 1.05 -15.50 7.15 -17.64 15.44 -1.41 5.45 -0.52 11.36 2.43 16.13 3.30 5.31 8.62 8.76 14.97 9.68 1.30 0.19 4.81 0.13 6.10 -0.10z").attr({stroke: "#ff2222", "stroke-width" : "1.0","fill" : "#ff0000"});
	}
	tTransform_pin = "T" + ((x-delta_x)/global_scale - scaleNote*50.0)  + "," + ((y+scaleNote*0*global_scale-delta_y)/global_scale - scaleNote*150.0);
	tTransform_pin += "S"+(scaleNote);               
	tTransform_pin += "R"+(180);               
	
//console.log(tTransform_pin);	
			
	tRubberBand_sn.attr({'transform': tTransform_pin});	

	var text = x+" "+y+" dx="+dx+" dy="+dy;

//	myText.attr({'text': text});

		if (!flag_rectangle){
			firstX_r = x;
			firstY_r = y;
			lastX_r = dx;
			lastY_r = dy;
			flag_rectangle = true;
		}
		else{
			lastX_r = dx;
			lastY_r = dy;

		}

	tPath_r = "M" + (firstX_r-delta_x)/global_scale + "," + (firstY_r-delta_y)/global_scale;
	tPath_r += "h" + lastX_r/global_scale + "v" + lastY_r/global_scale+"h"+(-lastX_r/global_scale)+"v"+(-lastY_r/global_scale+" Z");
	tRubberBand_r.attr({'path': tPath_r});

// here we replace with the code from StickyNote scale of objects. 
}

var stop_cvjs_create_custom_svg_image = function() {


	cvjs_removeHandleFunc_CustomSVGImage();

	if (cvjs_mouseMoveSVGCustomImage){

		tTransform_c = "t0,0S"+(scaleNote/100);
		tRubberBand_sn.attr({'transform': tTransform_c , "opacity" : "0.0"});
		tRubberBand_sn.attr({fill: 'none', "fill-opacity": "0.0", stroke: '#000', 'stroke-opacity': "0.0" });
		
		// 3.1.21j
		tRubberBand_sn.remove();
	}


//	window.alert(tTransform_pin);

	// we scale and draw the custom object   
//	var icon = cvjs_rPaper[cvjs_active_floorplan_div_nr].image(cvjs_customSvgImagePath, (firstX_r-delta_x)/global_scale, (firstY_r-delta_y)/global_scale, Math.abs((lastX_r)/global_scale), Math.abs((lastY_r)/global_scale));
	// make a new icon
	var icon = cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M38.55 127.89 c-5.55 -0.44 -10.43 -1.76 -15.30 -4.14 -14.57 -7.12 -23.70 -22.23 -23.22 -38.40 0.19 -6.05 1.52 -11.55 4.06 -16.80 1.09 -2.25 1.83 -3.53 3.31 -5.75 0.65 -0.96 8.56 -13.69 17.60 -28.27 9.03 -14.59 16.46 -26.53 16.50 -26.53 0.04 0 7.47 11.94 16.50 26.52 9.04 14.59 16.95 27.32 17.60 28.28 1.48 2.22 2.22 3.50 3.31 5.75 4.21 8.69 5.20 18.69 2.79 28.21 -2.44 9.58 -8.22 17.95 -16.40 23.71 -6.96 4.91 -15.51 7.59 -24.04 7.52 -0.94 -0.01 -2.16 -0.05 -2.71 -0.10z m6.35 -17.64 c4.40 -0.80 8.13 -2.71 11.20 -5.75 7.69 -7.61 8.25 -19.80 1.30 -28.12 -3.35 -4.02 -8.17 -6.63 -13.44 -7.28 -1.14 -0.14 -3.78 -0.14 -4.92 0 -8.53 1.05 -15.50 7.15 -17.64 15.44 -1.41 5.45 -0.52 11.36 2.43 16.13 3.30 5.31 8.62 8.76 14.97 9.68 1.30 0.19 4.81 0.13 6.10 -0.10z").attr({stroke: "#ff0000", "stroke-width" : "1.0","fill" : "#ff2222"});
	icon.attr({'transform': tTransform_pin});
	icon.attr({'id': 'cv_'+cvjs_currentNode_underbar+'_image' });
	
	// we finds the extents of the icon	
	// use that as envelope for newPath 
	
	var bbox = icon.getBBox();
	
	
	//if (true) return;
	//window.alert(bbox.x+"  "+bbox.y);
	
	// we have rotated 180 which it does not handle
	
	tPath_r = "M" + bbox.x + "," + bbox.y;
	tPath_r += "h" + bbox.width + "v" + bbox.height +"h"+ -bbox.width +"v"+ -bbox.height+" Z";

//	window.alert(tPath_r);
		
	var newPath = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_r).attr({stroke: "#b00000", fill : "none"});
	newPath.attr({'path': tPath_r});
//	newPath.attr({'transform': tTransform_c});
	newPath.attr({fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1"});

	newPath.attr({'id': 'cv_'+cvjs_currentNode_underbar, 'cvjs:node': cvjs_currentNode_underbar, 'cvjs:roomId': cvjs_customSpaceObjectId, 'cvjs:name': cvjs_customSpaceObjectName, 'class': 'cvjs_nodes', 'cvjs:type' : cvjs_customSpaceObjectType });


//	if (true) return;
	
	cvjs_addVqRoomsGraphics_newNode_polygon(cvjs_currentNode_underbar, newPath);
	cvjs_setUpVqRooms_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentNode_underbar);
	cvjs_graphicalObjectCreated('Rectangle');
	
	// 3.2.02b  - find the highest cv_ in the drawing, and insert the image behind that.
	
	
//	window.alert("floorplan_div"+floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	var oArr = {};
	jQuery("*[id]").each(function() {
		try{
			var id = jQuery(this).attr('id');
//			var searchString = "[id^="+floorplan_div+"]";
			var searchString = "[id^="+floorplan_div_Array[cvjs_active_floorplan_div_nr]+"]";
			var svgID = jQuery("#"+id).parents(searchString).attr('id');
			
			if (svgID == floorplan_div_Array[cvjs_active_floorplan_div_nr]){
			   if (!oArr[id]) oArr[id] = true;
			}
		}
		catch (err) { 
		 	console.log(err+" XX"+id+"XX");
		}
	});
	
	var maxId = 0;
	
	for (var prop in oArr){
		try{
			var target = "#"+prop;
			var myID = jQuery(target).attr("id");
			if (myID.indexOf("cv_")==0  && myID.indexOf("cv_NODE")!=0){

// 3.3.02d    we strip off the 
			  var onlyvalue = 0;
			  if (myID.indexOf("cv_")==0) onlyvalue = myID.substring(3);
			  
			  var value = parseInt(onlyvalue);

				 //3.3.02d
//				if (jQuery(target).attr("id") > maxId){
				if (value> maxId){
					maxId = value; 
//					maxId = jQuery(target).attr("id"); 
//					console.log(maxId);
// 

				}			
			}
		}
		catch (err) { 
			console.log(err+" XX"+id+"XX");
		}
	};
	maxId = "cv_" + maxId;
	
//	window.alert(maxId+"  "+cvjs_currentNode_underbar);
	
	
//	jQuery('#cv_'+cvjs_currentNode_underbar+'_image').insertAfter('#'+ maxId);
	// 3.3.02d
	jQuery('#cv_'+cvjs_currentNode_underbar+'_image').insertBefore('#cv_'+cvjs_currentNode_underbar);

	

	// we do 3.2.02a   - here we make a counter and based on a flag we set the id	
/**	
	cvjs_currentNode_underbar = currentNode_underbar;
	cvjs_currentNode_name = currentNode_name;
	cvjs_currentNode_id = currentNode_id;
	cvjs_currentNode_layer = currentNode_layer;
	cvjs_currentNode_group = currentNode_group;
	cvjs_currentNode_attributes = currentNode_attributes;
	cvjs_currentNode_attributeStatus = currentNode_attributeStatus;
	cvjs_currentNode_type = currentNode_type;
	cvjs_currentNode_tags = currentNode_tags;
	cvjs_currentNode_occupancy = currentNode_occupancy;
	cvjs_currentNode_linked = currentNode_linked;
**/	
	
	

};

// END - Draw Custom Rectangle


var varPunchList=0;
var varPunchListArray = new Array();	
var varPunchList_Populated_Array = new Array();	


function cvjs_PinMarker(){
	
	 varPunchList++;
	 varPunchListArray[varPunchList-1] = "P_"+varPunchList;
	 varPunchList_Populated_Array[varPunchList-1] = false;
	
	//cvjs_supressPopUpModal = true;
	cvjs_supressPopUpModal_callback_JS = true;
//			cvjs_addCustomSpaceObject("floorPlan_svg", ServerUrl+"content_dev/pin_01.svg", "P_"+varPunchList, "PunchList_"+varPunchList, "List Item");
	cvjs_addPinMarker("floorPlan_svg", "P_"+varPunchList, "PunchList_"+varPunchList, "List Item");
		
}


// 3.3.02c    -  cvjs_mergeQR

var cvjs_PercentXFromLowerLeft = 87;
var cvjs_PercentYFromLowerLeft = 15;
var cvjs_widthPercent = 10;
var cvjs_mergeOnOff = false;

// function - set percentages in size


function makeCode (text_element) {		
	qrcode.makeCode(text_element);
}



var waitforQRCodeVar = true;

var waitforCounter = 0;

function waitforQRCode(floorplan_div) {
	
	console.log("In waitforQRCodeVar.. ");

	waitforCounter++;
	
	try{
		var parts = (jQuery("#cvjs_qrcode_"+floorplan_div).html()).split(';base64,');
		var test = parts[1];
		waitforQRCodeVar = false;
	}
	catch(err){
		console.log(err);
		waitforQRCodeVar = true;
	}
	
	if (waitforCounter == 5) waitforQRCodeVar = false;

}	


/**
 * Function to merge a QR into a drawing for download
 * @param {String} floorPlan_div - name of the div that contains CADViewer
 */

function cvjs_mergeQR(floorplan_div){


	waitforQRCodeVar = true;

	var floorPlan_Modal = floorplan_div;
	
	if (floorPlan_Modal.indexOf("_svg")==-1)
		floorplan_div = floorPlan_Modal+"_svg";
	

	
	jQuery('#cvjs_wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html('<table class=\"waitlooperTable\" width=\"100\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr><td><div id=\"looper_image_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\"></div></td></tr><tr><td><div class=\"cvjs_wait_text_4\" id=\"cvjs_wait_looper_text_id_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\">'+languageTable.languages[cvjs_currentLanguage].WaitModal.MergeDWG+'</div></td></tr></table>');
	cvjs_setLooperPosition();	
	// 4.1.02b
	jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).fadeIn(10);
	
	
	
	qrcode = new QRCode(document.getElementById("cvjs_qrcode_"+floorplan_div), {
		width : 200,
		height : 200
	});
	
		
	cvjs_mergeOnOff = !cvjs_mergeOnOff;
	
	// 3.3.05a
	var noconvertedfile = false
	
	if (cvjs_mergeOnOff){	
				
		if(cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ]==""){		
			console.log("Source file not DWG!");
			
			noconvertedfile = true;
			
			// return;
		}			
		
		var random = Math.random().toString().substring(2,5);
		var merge_fileName = cvjs_ServerLocation+"/converters/files/merged/"+'mergeQR_'+random+'.xml';

		var downloadFileName = cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ];		
		// 3.3.05a
		if (noconvertedfile)			
				downloadFileName = currentLoadedDrawingFullName; 

		
				
		if (downloadFileName.indexOf('/')>-1) 
			downloadFileName = downloadFileName.substring(downloadFileName.lastIndexOf('/')+1);
		
		// here we have to make a server call to pick up the QR text code, associated with this file 
		
	
		var cvjs_phpQRLocation = cvjs_serverHandlersPath + cvjs_serverGetQRCodeController; 

		var js_data = {};
		js_data['file'] = cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ];
										
		if (noconvertedfile)			
			js_data['file'] = currentLoadedDrawingFullName; 
		
				
		jQuery.ajax({
		  url:cvjs_phpQRLocation,
		  type: 'post',
		  data: js_data,
		  success: function(qrcode_text){

				var use_as_QR_code_bitmap_flag = false;
				var use_as_QR_code_bitmap_filename = "";
				
				if (cvjs_debug) console.log("this is the code we program into the drawing "+qrcode_text);
								
				//4.1.02d
				if (qrcode_text.indexOf("<no_QR_code_available>")>-1){
					// There is no QR code returned, therefore we make a modal and abort
//					window.alert("NO QR code");
					cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], languageTable.languages[cvjs_currentLanguage].InfoMessageModal.NoQRCode);				
					jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
					cvjs_mergeOnOff = !cvjs_mergeOnOff;
					return true;
				}
				//4.1.02d
								
				if (qrcode_text.indexOf("<use_as_QR_code_bitmap>")>-1){
					
					console.log("QR is the file!!!!");
					
					use_as_QR_code_bitmap_flag = true;				
					use_as_QR_code_bitmap_filname = qrcode_text.substring(0, qrcode_text.indexOf("<use_as_QR_code_bitmap>"));
								
				}
				
				
				// here we do the ajax call to merge the QR code				
				// let us make the merge XML file
							
				// NOTE-NOTE-NOTE !!!!!!   
				// here we make the QR code with the download file-name
				// this has been picked up from Server
				
				jQuery("#cvjs_qrcode_"+floorplan_div).show();
			
				if (cvjs_debug) console.log("before qrcode ");
				makeCode(qrcode_text);				

				if (cvjs_debug) console.log("before body");
				
				// 3.3.04e
				jQuery("body").on('DOMSubtreeModified', "#cvjs_qrcode_"+floorplan_div, function() {
					// code here
					console.log("now QRcode is changed!"+jQuery("#cvjs_qrcode_"+floorplan_div).html());
								
					waitforQRCode(floorplan_div);
					
					// we have to wait for the QR code to be generated 
					if (!waitforQRCodeVar){  // we have a bitmap generated.
						
						// an alternative is an API method to let the user enter the QR test
						
				//		var cvjs_mergeQfilename = cvjs_ServerLocation+"/converters/files/merged/"+"tms_qr.png";
						var cvjs_mergeQfilename = cvjs_ServerLocation+"/converters/files/merged/"+'mergeQR_'+random+'.png';
												
						// 
						if (use_as_QR_code_bitmap_flag == true){
						
							cvjs_mergeQfilename = use_as_QR_code_bitmap_filname;
						}
						
												
				/**		
						<cvjs_RedlinesStickyNotes>
						  <totalRedlines>0</totalRedlines>
						  <totalStickyNotes>0</totalStickyNotes>
						  <totalBitmaps>1</totalBitmaps>
						  <Bitmap>
							<index>0</index>
							<name>QRcode_01</name>
							<layer>cvjs_QRcodeLayer</layer>
							<currentPageName>ModelSpace</currentPageName>
							<filename>"c:\xampp\htdocs\cadviewer_3_3_0\converters\dwgmerge2019\windows\dev\tms_qr.png"</filename>
							<location>
							  <PercentXFromLowerLeft>87</PercentXFromLowerLeft>
							  <PercentYFromLowerLeft>32</PercentYFromLowerLeft>
							  <widthPercent>10</widthPercent>
							</location>
						  </Bitmap>
						</cvjs_RedlinesStickyNotes>		
				**/		
								
						var cvjs_mergeXML = "<cvjs_RedlinesStickyNotes>\n<totalRedlines>0</totalRedlines>\n<totalStickyNotes>0</totalStickyNotes>\n<totalBitmaps>1</totalBitmaps>\n<Bitmap>\n";
						cvjs_mergeXML = cvjs_mergeXML + "<index>0</index>\n<name>QRcode_01</name>\n<layer>cvjs_QRcodeLayer</layer>\n<currentPageName>ModelSpace</currentPageName>\n";
						cvjs_mergeXML = cvjs_mergeXML + "<filename>"+cvjs_mergeQfilename+"</filename>\n";
						cvjs_mergeXML = cvjs_mergeXML +	"<location>\n<PercentXFromLowerLeft>"+cvjs_PercentXFromLowerLeft+"</PercentXFromLowerLeft>\n<PercentYFromLowerLeft>"+cvjs_PercentYFromLowerLeft+"</PercentYFromLowerLeft>\n<widthPercent>"+cvjs_widthPercent+"</widthPercent>\n</location>\n</Bitmap>\n</cvjs_RedlinesStickyNotes>\n";		

						//window.alert(cvjs_mergeXML);
						//console.log(cvjs_mergeXML);		
						//window.alert(cvjs_active_floorplan_div_nr+"  "+cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ]);
						
						var cvjs_phpSaveLocation = cvjs_serverHandlersPath + cvjs_serverSaveFileController;

						var js_data = {};
						js_data['file'] = merge_fileName;
						js_data['file_content'] = cvjs_mergeXML;

						jQuery.ajax({
						  url:cvjs_phpSaveLocation,
						  type: 'post',
						  data: js_data,
						  success: function(html){

								
								var parts = (jQuery("#cvjs_qrcode_"+floorplan_div).html()).split(';base64,');
								var png_base = parts[1].substring(0,parts[1].indexOf('\"')); 				
								jQuery("#cvjs_qrcode_"+floorplan_div).hide();


								// 5.1.03g
								if (use_as_QR_code_bitmap_flag){   // <use_as_QR_code_bitmap>

								
									var cvjs_phpMergeLocation = cvjs_serverHandlersPath + cvjs_serverMergeDWGController;
									var js_data = {};
									js_data['base_file'] = cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ];
									
									if (noconvertedfile)			
										js_data['base_file'] = currentLoadedDrawingFullName; 
									
									js_data['merge_file'] = merge_fileName;
									js_data['out_file'] = cvjs_ServerLocation+"/converters/files/merged/"+downloadFileName;
									
									// 4.1.01j  - zip content										
									js_data['zip_output'] = "true";
									js_data['QR_code'] = "true";
									
									
									console.log("base: "+js_data['base_file']+" merge: "+js_data['merge_file']+" out: "+js_data['out_file']);

									// 4.1.01j  - zip content										
									console.log("zip_output: "+js_data['zip_output']+" QR_code: "+js_data['QR_code']);

									var downloadURL ="";
									
									jQuery.ajax({
									  url:cvjs_phpMergeLocation,
									  type: 'post',
									  data: js_data,
									  success: function(html){
										if (cvjs_debug) console.log(html);		

										// 4.1.02c  - standard case 
										downloadURL = cvjs_ServerUrl+"/converters/files/merged/"+downloadFileName;
										
										if (html.indexOf("<customoutfilename>")>-1){								
											var new_name = html.substring(html.indexOf("<customoutfilename>")+19);  // 4.1.01j
											new_name = new_name.substring(0,new_name.indexOf("</customoutfilename>"));												
											// 4.1.02a   4.1.02b												
											// we have two cases, call back is http / https , or just filename
											if (new_name.indexOf("http")==0){   // newname = url
												downloadURL = new_name;
												downloadFileName = new_name.substring(new_name.lastIndexOf("/")+1);
											}
											else{  // standard case   new_name = filename
												downloadFileName = new_name;
												downloadURL = cvjs_ServerUrl+"/converters/files/merged/"+downloadFileName;
											}
											
											if (cvjs_debug) console.log("XXXX"+new_name+"XXX");		
										}
													
										jQuery("#topDownloadButtonPane"+"_"+floorplan_div).show();	
										cvjs_topDownloadButtonPane = true;	
																				
										jQuery("#downloadrow").show();
										jQuery("#downloadbutton").html('<a href="'+downloadURL+'" download="'+downloadFileName+'"><button class="btn" style="width:70%"><i class="fa fa-download"></i> Download: <i><b>'+downloadFileName+'</b></i> - with QR code</button></a>');   // </div>
										
										jQuery("#downloadbutton").click(function() {
											jQuery("#topDownloadButtonPane"+"_"+floorplan_div).hide();	
											cvjs_topDownloadButtonPane = false;		
											// 4.4.01j
											cvjs_gMenu_pos_y -= 50;
											cvjs_resizeWindow_position("floorPlan" );
											cvjs_resizeWindow_position("floorPlan" );
											cvjs_mergeOnOff = false;						
										});

										// 4.4.01j
										cvjs_gMenu_pos_y += 50;
															
										cvjs_resizeWindow_position("floorPlan" );
										cvjs_resizeWindow_position("floorPlan" );
																					
										// 4.1.02b
										jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
										
									  },
									  error:function(data_ee){console.log("Error Merge "+data_ee); return;}
									});		
									
								}
								else{  // Normal QR Code procedure

								
									js_data = {};
									js_data['file'] = cvjs_ServerLocation+"/converters/files/merged/"+'mergeQR_'+random+'.png';
									js_data['file_content'] = png_base;
									js_data['base64'] = 1;

									jQuery.ajax({
									  url:cvjs_phpSaveLocation,
									  type: 'post',
									  data: js_data,
									  success: function(html){
					//						window.alert("bytes saved!");

											var cvjs_phpMergeLocation = cvjs_serverHandlersPath + cvjs_serverMergeDWGController;
											var js_data = {};
											js_data['base_file'] = cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ];
											
											if (noconvertedfile)			
												js_data['base_file'] = currentLoadedDrawingFullName; 
											
											
											js_data['merge_file'] = merge_fileName;
											js_data['out_file'] = cvjs_ServerLocation+"/converters/files/merged/"+downloadFileName;
											
											// 4.1.01j  - zip content										
											js_data['zip_output'] = "true";
											js_data['QR_code'] = "true";
											
											
											console.log("base: "+js_data['base_file']+" merge: "+js_data['merge_file']+" out: "+js_data['out_file']);

											// 4.1.01j  - zip content										
											console.log("zip_output: "+js_data['zip_output']+" QR_code: "+js_data['QR_code']);

											var downloadURL ="";
											
											jQuery.ajax({
											  url:cvjs_phpMergeLocation,
											  type: 'post',
											  data: js_data,
											  success: function(html){
												if (cvjs_debug) console.log(html);		

												// 4.1.02c  - standard case 
												downloadURL = cvjs_ServerUrl+"/converters/files/merged/"+downloadFileName;
												
																						
												
												if (html.indexOf("<customoutfilename>")>-1){								
													var new_name = html.substring(html.indexOf("<customoutfilename>")+19);  // 4.1.01j
													new_name = new_name.substring(0,new_name.indexOf("</customoutfilename>"));												
													// 4.1.02a   4.1.02b												
													// we have two cases, call back is http / https , or just filename
													if (new_name.indexOf("http")==0){   // newname = url
														downloadURL = new_name;
														downloadFileName = new_name.substring(new_name.lastIndexOf("/")+1);
													}
													else{  // standard case   new_name = filename
														downloadFileName = new_name;
														downloadURL = cvjs_ServerUrl+"/converters/files/merged/"+downloadFileName;
													}
													
													if (cvjs_debug) console.log("XXXX"+new_name+"XXX");		
												}
															
												jQuery("#topDownloadButtonPane"+"_"+floorplan_div).show();	
												cvjs_topDownloadButtonPane = true;	
																						
												jQuery("#downloadrow").show();
												jQuery("#downloadbutton").html('<a href="'+downloadURL+'" download="'+downloadFileName+'"><button class="btn" style="width:70%"><i class="fa fa-download"></i> Download: <i><b>'+downloadFileName+'</b></i> - with QR code</button></a>');   // </div>
												
												jQuery("#downloadbutton").click(function() {
													jQuery("#topDownloadButtonPane"+"_"+floorplan_div).hide();	
													cvjs_topDownloadButtonPane = false;		
													// 4.4.01j
													cvjs_gMenu_pos_y -= 50;
													cvjs_resizeWindow_position("floorPlan" );
													cvjs_resizeWindow_position("floorPlan" );
													cvjs_mergeOnOff = false;						
												});

												// 4.4.01j
												cvjs_gMenu_pos_y += 50;
																	
												cvjs_resizeWindow_position("floorPlan" );
												cvjs_resizeWindow_position("floorPlan" );
																							
												// 4.1.02b
												jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
												
											  },
											  error:function(data_ee){console.log("Error Merge "+data_ee); return;}
											});		

									  },
									  error:function(data_ee){console.log("Error Merge "+data_ee); return;}
									});							
								
								
								
								}
								
								
								
								
								
										
													  
						  },
						  error:function(data_e){console.log("Error Save "+data_e); return;}

						});  
											
					} // end of the div monitor
				
				});
		  },
		  error:function(data_e){console.log("Error Save "+data_e); return;}

		});
	
	
		
	

	
		// when the ajax call is returned, the embedded QR code is done we can do this part				
/*		
				// change link so drawing is removed on download. 				
				var downloadFile = contentStreamData.replace("remainOnServer=1", "remainOnServer=0");
								
				//window.alert(downloadFile);							
				var downloadFileName = 	cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].substring(0, cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].lastIndexOf(".")+1)+"svg";

				if (downloadFileName.indexOf('/')>-1) 
					downloadFileName = downloadFileName.substring(downloadFileName.lastIndexOf('/')+1);
				
				
				
*/
	
	}
	else{
		jQuery("#topDownloadButtonPane"+"_"+floorplan_div).hide();	
		cvjs_topDownloadButtonPane = false;	
		cvjs_resizeWindow_position("floorPlan" );
		cvjs_resizeWindow_position("floorPlan" );
	}	
}




/**
 * Sets the direct content of the file load modal instead of scanning through a designated folder
 * @param {object} custom_modal_dir_listing - a structure containing filename, url, and path
 * @param {String} floorPlan_div - name of the div that contains the floorplan
 */

function cvjs_CompareFiles_setFileModalContent(custom_modal_dir_listing, floorPlan_div){

		// first we set the variable true;
		cvjs_CompareFiles_CustomFileModalContent_flag = true;
		// then we parse the custom_modal_dir_listing
		// we need to make this, so that the files can be in one path only
		cvjs_CompareFiles_CustomFileModalContent = custom_modal_dir_listing;
		
		
if (cvjs_debug) console.log("cvjs_CompareFiles_setFileModalContent "+cvjs_CompareFiles_CustomFileModalContent_flag+"  "+cvjs_CompareFiles_CustomFileModalContent);		
		
		var arr_length =  custom_modal_dir_listing.length;
		var url = "";
		var serverpath = "";
		
		if (arr_length >0 ){
		
			url = custom_modal_dir_listing[0].url;
			serverpath = custom_modal_dir_listing[0].path;

			url = url.substring(0, url.lastIndexOf("/"));
			serverpath = serverpath.substring(0, serverpath.lastIndexOf("/"));
			
			if (cvjs_debug) console.log(arr_length+"  "+custom_modal_dir_listing[0].url+"  "+custom_modal_dir_listing[0].path);
			if (cvjs_debug) console.log(" url  "+url+" serverpath "+serverpath);
			
			// here we set the file modal path to the location of the manual file settings
			cvjs_setServerFileLocation_AbsolutePaths( serverpath+'/', url+'/',"","");
			
			// in the file load modal, we now have to pass over the content of 
	
		}
}			




// NEW  control of vqrooms as redlines. 

// 3.3.06e

function setUpVqRoomsGeneric(){

	vqBuilding = "BUILDING_NAME_GOES_HERE";		
	var current_selected_filename = id_publish_location.substring(id_publish_location.lastIndexOf("/")+1);
	var current_selected_shortname = current_selected_filename.substring(0, current_selected_filename.lastIndexOf("."));
	
	vqFloor = current_selected_shortname;    //space_objects_01
		
	vqRooms[cvjs_active_floorplan_div_nr] = new Array();
	console.log("before "+cvjs_active_floorplan_div_nr+" called!");		
	buildings = drawPathsGeneric(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_active_floorplan_div_nr, vqRooms, buildings);
	
console.log("length "+vqRooms[cvjs_active_floorplan_div_nr].length)	
console.log("buildings "+buildings.BUILDING_NAME_GOES_HERE.floors.current_selected_shortname)	;
console.log("buildings "+buildings.BUILDING_NAME_GOES_HERE.FacMgr);	

	setUpVqRooms(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_active_floorplan_div_nr);
		
}

var currentSelectedId = -1;

var cvjs_changeSpaceObject_ManualCreationMode = true;

// 3.3.07a
function cvjs_createSpaceOutput_JSfile_Legacy(){
	

	var current_selected_filename = id_publish_location.substring(id_publish_location.lastIndexOf("/")+1);
	var building_data_identifier = "BUILDING_NAME_GOES_HERE";
	var current_selected_shortname = current_selected_filename.substring(0, current_selected_filename.lastIndexOf("."));
	
	var firstpart = cvjs_currentLoadedDrawingAsString.substring(0, cvjs_currentLoadedDrawingAsString.indexOf("var buildings"));
	
	var dataUrl = firstpart+"\n";
	dataUrl = dataUrl +" var buildings = {\n";
	dataUrl = dataUrl +" 	 "+building_data_identifier+": {\n";
	dataUrl = dataUrl +"		name: \""+ building_name + "\",\n";
	dataUrl = dataUrl +"		company: \""+ company+"\",\n";
	dataUrl = dataUrl +"		address: \""+ address+"\",\n";
	dataUrl = dataUrl +"		city: \""+ city +"\",\n";
	dataUrl = dataUrl +"		state: \""+ state +"\",\n";
	dataUrl = dataUrl +"		zipcode: \""+ zipcode +"\",\n";
	dataUrl = dataUrl +"		country: \""+ country +"\",\n";
	dataUrl = dataUrl +"		FacMgr: \""+FacMgr_name+"\",\n";
	dataUrl = dataUrl +"		FacMgr_title: \""+FacMgr_title+"\",\n";
	dataUrl = dataUrl +"		FacMgr_email: \""+FacMgr_email+"\",\n";
	dataUrl = dataUrl +"		FacMgr_phone: \""+FacMgr_phone+"\",\n";
	dataUrl = dataUrl +"		floors: {\n";

	var str_x = current_selected_shortname;
	n_str = "space_"+str_x;    // 2013-04-08, prepend  "space_"
	n_str = n_str.replace(/[\|&;\$%@"<>\(\)\+?#,.]/g, "_");
	n_str = n_str.replace(/ /g,"_");
	n_str = n_str.replace(/-/g,"_");

	vqfloor_name = n_str;
if (cvjs_debug) console.log("vqfloor_name "+vqfloor_name);
	dataUrl = dataUrl +"			"+ vqfloor_name +" : {\n";
	dataUrl = dataUrl +"				name: \""+current_selected_shortname+"\",\n";
	dataUrl = dataUrl +"				file: \""+current_selected_filename+"\",\n";
	dataUrl = dataUrl +"				rooms: {\n";

	// make a loop over all spaces
	// write out the layers what are assocated with spaces
	// write the id, space name

	var comma_flag =0;

	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("deleted") == true ){
			if (cvjs_debug) console.log("file.js deleted node "+vqRooms[cvjs_active_floorplan_div_nr][spc].data("node"));
		}
		else{  // node exists

			if (comma_flag == 0){
				comma_flag = 1
			}
			else{
				dataUrl = dataUrl +"						,\n";
			}

			dataUrl = dataUrl +"					"+vqRooms[cvjs_active_floorplan_div_nr][spc].data("node")+": {\n";
			dataUrl = dataUrl +"						name: \""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("name")+"\",\n";

			if (isNaN(vqRooms[cvjs_active_floorplan_div_nr][spc].data("id")))
				dataUrl = dataUrl +"						id: \""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("id")+"\",\n";
			else
				dataUrl = dataUrl +"						id: "+vqRooms[cvjs_active_floorplan_div_nr][spc].data("id")+",\n";

			dataUrl = dataUrl +"						layer: \""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("layer")+"\",\n";
			dataUrl = dataUrl +"						group: \""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("group")+"\",\n";
			dataUrl = dataUrl +"						occupancy: \""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("occupancy")+"\",\n";
			dataUrl = dataUrl +"						type: \""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("type")+"\",\n";

			var str_2 = "{ ";
			var ii = 1;
			var c_flag = true;

			while (ii<10) {
				var tag_i = "tag"+ii;
//									if (vqRooms[cvjs_active_floorplan_div_nr][spc].data(tag_i)!="undefined"){
				if ( typeof vqRooms[cvjs_active_floorplan_div_nr][spc].data(tag_i)==='undefined'){
					// do nothing
				}
				else{
					// if the content is "undefined" then get rid of it also
					if (  vqRooms[cvjs_active_floorplan_div_nr][spc].data(tag_i).toString().indexOf("undefined")==-1){
						if (c_flag){
							str_2 = str_2 +" "+ii+": \""+vqRooms[cvjs_active_floorplan_div_nr][spc].data(tag_i)+"\"";
							c_flag=false;
						}
						else
							str_2 = str_2 +" ,"+ii+": \""+vqRooms[cvjs_active_floorplan_div_nr][spc].data(tag_i)+"\"";

					}
				}
				ii++;
			}

			str_2 = str_2 +" }";
			dataUrl = dataUrl +"						tags:  "+str_2+", \n";
			dataUrl = dataUrl +"						attributes: [],\n";

			if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("linked") == true || vqRooms[cvjs_active_floorplan_div_nr][spc].data("linked") == false )
				dataUrl = dataUrl +"						linked: "+vqRooms[cvjs_active_floorplan_div_nr][spc].data("linked")+",\n";
			else
				dataUrl = dataUrl +"						linked: false, \n";
			try{ // 3.2.02e							
//									console.log(vqRooms[cvjs_active_floorplan_div_nr][spc].data("handle"));
			
				if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("handle")){
					dataUrl = dataUrl +"						handle: "+vqRooms[cvjs_active_floorplan_div_nr][spc].data("handle")+"\n";
				}
				if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("handle")!=""){
					// if handle is != "", that is, we start with a handle
					if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("handle")!=vqRooms[cvjs_active_floorplan_div_nr][spc].data("id")){
					// if handle is different from id, we want to update
					handleUpdates++;
					dataHandleString = dataHandleString +"<updateHandle>\n<handle>"+vqRooms[cvjs_active_floorplan_div_nr][spc].data("handle")+"</handle>\n<altName>"+vqRooms[cvjs_active_floorplan_div_nr][spc].data("id")+"</altName>\n</updateHandle>\n"
//<cvjsAddXdataToHandle>
//	<totalUpdateHandles>1</totalUpdateHandles>
//	<updateHandle>
//		<handle>2901</handle>
//		<altName>myNewHandle_01</altName>
//	</updateHandle>
//</cvjsAddXdataToHandle>

					}
					
					
				}
				
				
			}catch(err){ console.log(err); }
			
			
			dataUrl = dataUrl +"					}\n";

		} // case node exists
	}

	// finish up the file

	dataUrl = dataUrl +"					}\n";
	dataUrl = dataUrl +"				}\n";
	dataUrl = dataUrl +"			}\n";
	dataUrl = dataUrl +"		}\n";
	dataUrl = dataUrl +"	}\n\n";

	dataUrl = dataUrl +"var vqBuilding = \""+building_data_identifier+"\";\n";
	dataUrl = dataUrl +"var vqFloor = \""+ vqfloor_name +"\";\n";   // n_str -> vqFloor
	dataUrl = dataUrl +"var vqRooms = new Array(); \n";
	dataUrl = dataUrl +"var vqTBorder = new Array(); \n";
	dataUrl = dataUrl +"var vqText = new Array(); \n";
	dataUrl = dataUrl +"var vqURLs = new Array(); \n";
	dataUrl = dataUrl +"function drawPaths (paper){ \n";
	dataUrl = dataUrl +"\n";
	dataUrl = dataUrl +"vqRooms.length = 0;\n";
	dataUrl = dataUrl +"vqTBorder.length = 0;\n";
	dataUrl = dataUrl +"vqText.length = 0;\n";
	dataUrl = dataUrl +"vqURLs.length = 0;\n";
	dataUrl = dataUrl +"\n";

	var citem = "uItem";
	spc_counter = 0;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("deleted") == true ){
			if (cvjs_debug) console.log(" -nodes.js deleted node "+vqRooms[cvjs_active_floorplan_div_nr][spc].data("node"));
		}
		else{  // node exists

			spc_counter++;
			var item = "uItem"+spc_counter;
			var str_object = vqRooms[cvjs_active_floorplan_div_nr][spc].toString();

			if (str_object.indexOf("path")>-1){
				str_object = str_object.substring(str_object.indexOf("d=")+3);
				str_object = str_object.substring(0, str_object.indexOf('\"'));
				//console.log(str_object);
				dataUrl = dataUrl +"var "+item+"= paper.path(\"";
				dataUrl = dataUrl +str_object+" \")\n.data(\"node\",\""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("node")+"\");\n";
				dataUrl = dataUrl +"vqRooms[cvjs_active_floorplan_div_nr].push("+item+");\n\n";
			}
			else{//v3www
				if (str_object.indexOf("circle")>-1){

					var p_cx = str_object.indexOf(" cx=");
					var s1_cx = str_object.substring(p_cx+5);
					var p2_cx = s1_cx.indexOf("\"");
					cx = s1_cx.substring(0, p2_cx)

					var p_cy = str_object.indexOf(" cy=");
					var s1_cy = str_object.substring(p_cy+5);
					var p2_cy = s1_cy.indexOf("\"");
					cy = s1_cy.substring(0, p2_cy)

					var p_r = str_object.indexOf(" r=");
					var s1_r = str_object.substring(p_r+4);
					var p2_r = s1_r.indexOf("\"");
					r = s1_r.substring(0, p2_r)

					dataUrl = dataUrl +"var "+item+"= paper.circle("+cx+","+cy+","+r+","+r+")";
					dataUrl = dataUrl +"\n.data(\"node\",\""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("node")+"\");\n";
					dataUrl = dataUrl +"vqRooms[cvjs_active_floorplan_div_nr].push("+item+");\n\n";
				}
				else{
					
					// 3.1.21g
					if (str_object.indexOf("ellipse")>-1){

						var p_cx = str_object.indexOf(" cx=");
						var s1_cx = str_object.substring(p_cx+5);
						var p2_cx = s1_cx.indexOf("\"");
						cx = s1_cx.substring(0, p2_cx)

						var p_cy = str_object.indexOf(" cy=");
						var s1_cy = str_object.substring(p_cy+5);
						var p2_cy = s1_cy.indexOf("\"");
						cy = s1_cy.substring(0, p2_cy)

						var p_r = str_object.indexOf(" r=");
						var s1_r = str_object.substring(p_r+4);
						var p2_r = s1_r.indexOf("\"");
						r = s1_r.substring(0, p2_r)

						dataUrl = dataUrl +"var "+item+"= paper.circle("+cx+","+cy+","+r+","+r+")";
						dataUrl = dataUrl +"\n.data(\"node\",\""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("node")+"\");\n";
						dataUrl = dataUrl +"vqRooms[cvjs_active_floorplan_div_nr].push("+item+");\n\n";
					}
					else
					if (cvjs_debug) console.log("note: not path, not circle, ..save not implemented! "+str_object);
					
					
				}

			}

		}
	}

	if (spc_counter>0) dataUrl = dataUrl +"}\n";

	var lastpart = cvjs_currentLoadedDrawingAsString.substring(cvjs_currentLoadedDrawingAsString.indexOf("var layer_thumb;"));
	dataUrl = dataUrl + lastpart;

	return dataUrl;
	
}






// 3.3.07a
function cvjs_createSpaceOutput_JSfile(){
	

	var current_selected_filename = id_publish_location.substring(id_publish_location.lastIndexOf("/")+1);
	var building_data_identifier = "BUILDING_NAME_GOES_HERE";
	var current_selected_shortname = current_selected_filename.substring(0, current_selected_filename.lastIndexOf("."));
	
	
	// 3.3.07b , we set the current selected filed filename, as the current file name
	

	
	var	dataUrl ="function drawPathsGeneric(paper, cvjs_active_floorplan_div_nr, vqRooms, buildings){ \n";
	dataUrl = dataUrl +"\n";
	dataUrl = dataUrl +"\n";
	dataUrl = dataUrl +" var buildings = {\n";
	dataUrl = dataUrl +" 	 "+building_data_identifier+": {\n";
	dataUrl = dataUrl +"		name: \""+ building_name + "\",\n";
	dataUrl = dataUrl +"		company: \""+ company+"\",\n";
	dataUrl = dataUrl +"		address: \""+ address+"\",\n";
	dataUrl = dataUrl +"		city: \""+ city +"\",\n";
	dataUrl = dataUrl +"		state: \""+ state +"\",\n";
	dataUrl = dataUrl +"		zipcode: \""+ zipcode +"\",\n";
	dataUrl = dataUrl +"		country: \""+ country +"\",\n";
	dataUrl = dataUrl +"		FacMgr: \""+FacMgr_name+"\",\n";
	dataUrl = dataUrl +"		FacMgr_title: \""+FacMgr_title+"\",\n";
	dataUrl = dataUrl +"		FacMgr_email: \""+FacMgr_email+"\",\n";
	dataUrl = dataUrl +"		FacMgr_phone: \""+FacMgr_phone+"\",\n";
	dataUrl = dataUrl +"		floors: {\n";

	var str_x = current_selected_shortname;
	n_str = str_x;    // 2013-04-08, prepend  "space_"
//	n_str = "space_"+str_x;    // 2013-04-08, prepend  "space_"
	n_str = n_str.replace(/[\|&;\$%@"<>\(\)\+?#,.]/g, "_");
	n_str = n_str.replace(/ /g,"_");
	n_str = n_str.replace(/-/g,"_");

	vqfloor_name = n_str;
if (cvjs_debug) console.log("vqfloor_name "+vqfloor_name);
	dataUrl = dataUrl +"			"+ vqfloor_name +" : {\n";
	dataUrl = dataUrl +"				name: \""+current_selected_shortname+"\",\n";
	dataUrl = dataUrl +"				file: \""+current_selected_shortname+".js"+"\",\n";
//	dataUrl = dataUrl +"				file: \""+current_selected_filename+"\",\n";
	dataUrl = dataUrl +"				rooms: {\n";

	// make a loop over all spaces
	// write out the layers what are assocated with spaces
	// write the id, space name

	var comma_flag =0;

	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("deleted") == true ){
			if (cvjs_debug) console.log("file.js deleted node "+vqRooms[cvjs_active_floorplan_div_nr][spc].data("node"));
		}
		else{  // node exists

			if (comma_flag == 0){
				comma_flag = 1
			}
			else{
				dataUrl = dataUrl +"						,\n";
			}

			dataUrl = dataUrl +"					"+vqRooms[cvjs_active_floorplan_div_nr][spc].data("node")+": {\n";
			dataUrl = dataUrl +"						name: \""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("name")+"\",\n";

			if (isNaN(vqRooms[cvjs_active_floorplan_div_nr][spc].data("id")))
				dataUrl = dataUrl +"						id: \""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("id")+"\",\n";
			else
				dataUrl = dataUrl +"						id: "+vqRooms[cvjs_active_floorplan_div_nr][spc].data("id")+",\n";

			dataUrl = dataUrl +"						layer: \""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("layer")+"\",\n";
			dataUrl = dataUrl +"						group: \""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("group")+"\",\n";
			dataUrl = dataUrl +"						occupancy: \""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("occupancy")+"\",\n";
			dataUrl = dataUrl +"						type: \""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("type")+"\",\n";

			var str_2 = "{ ";
			var ii = 1;
			var c_flag = true;

			while (ii<10) {
				var tag_i = "tag"+ii;
//									if (vqRooms[cvjs_active_floorplan_div_nr][spc].data(tag_i)!="undefined"){
				if ( typeof vqRooms[cvjs_active_floorplan_div_nr][spc].data(tag_i)==='undefined'){
					// do nothing
				}
				else{
					// if the content is "undefined" then get rid of it also
					if (  vqRooms[cvjs_active_floorplan_div_nr][spc].data(tag_i).toString().indexOf("undefined")==-1){
						if (c_flag){
							str_2 = str_2 +" "+ii+": \""+vqRooms[cvjs_active_floorplan_div_nr][spc].data(tag_i)+"\"";
							c_flag=false;
						}
						else
							str_2 = str_2 +" ,"+ii+": \""+vqRooms[cvjs_active_floorplan_div_nr][spc].data(tag_i)+"\"";

					}
				}
				ii++;
			}

			str_2 = str_2 +" }";
			dataUrl = dataUrl +"						tags:  "+str_2+", \n";
			dataUrl = dataUrl +"						attributes: [],\n";

			if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("linked") == true || vqRooms[cvjs_active_floorplan_div_nr][spc].data("linked") == false )
				dataUrl = dataUrl +"						linked: "+vqRooms[cvjs_active_floorplan_div_nr][spc].data("linked")+",\n";
			else
				dataUrl = dataUrl +"						linked: false, \n";
			try{ // 3.2.02e							
//									console.log(vqRooms[cvjs_active_floorplan_div_nr][spc].data("handle"));
			
				if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("handle")){
					dataUrl = dataUrl +"						handle: "+vqRooms[cvjs_active_floorplan_div_nr][spc].data("handle")+"\n";
				}
				if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("handle")!=""){
					// if handle is != "", that is, we start with a handle
					if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("handle")!=vqRooms[cvjs_active_floorplan_div_nr][spc].data("id")){
					// if handle is different from id, we want to update
					handleUpdates++;
					dataHandleString = dataHandleString +"<updateHandle>\n<handle>"+vqRooms[cvjs_active_floorplan_div_nr][spc].data("handle")+"</handle>\n<altName>"+vqRooms[cvjs_active_floorplan_div_nr][spc].data("id")+"</altName>\n</updateHandle>\n"
//<cvjsAddXdataToHandle>
//	<totalUpdateHandles>1</totalUpdateHandles>
//	<updateHandle>
//		<handle>2901</handle>
//		<altName>myNewHandle_01</altName>
//	</updateHandle>
//</cvjsAddXdataToHandle>

					}
					
					
				}
				
				
			}catch(err){ console.log(err); }
			
			
			dataUrl = dataUrl +"					}\n";

		} // case node exists
	}

	// finish up the file

	dataUrl = dataUrl +"					}\n";
	dataUrl = dataUrl +"				}\n";
	dataUrl = dataUrl +"			}\n";
	dataUrl = dataUrl +"		}\n";
	dataUrl = dataUrl +"	}\n\n";

	
	dataUrl = dataUrl +"\n";

	
	
	
	var citem = "uItem";
	spc_counter = 0;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("deleted") == true ){
			if (cvjs_debug) console.log(" -nodes.js deleted node "+vqRooms[cvjs_active_floorplan_div_nr][spc].data("node"));
		}
		else{  // node exists

			spc_counter++;
			var item = "uItem"+spc_counter;
			var str_object = vqRooms[cvjs_active_floorplan_div_nr][spc].toString();

			if (str_object.indexOf("path")>-1){
				str_object = str_object.substring(str_object.indexOf("d=")+3);
				str_object = str_object.substring(0, str_object.indexOf('\"'));
				//console.log(str_object);
				dataUrl = dataUrl +"var "+item+"= paper.path(\"";
				dataUrl = dataUrl +str_object+" \")\n.data(\"node\",\""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("node")+"\");\n";
				dataUrl = dataUrl +"vqRooms[cvjs_active_floorplan_div_nr].push("+item+");\n\n";
			}
			else{//v3www
				if (str_object.indexOf("circle")>-1){

					var p_cx = str_object.indexOf(" cx=");
					var s1_cx = str_object.substring(p_cx+5);
					var p2_cx = s1_cx.indexOf("\"");
					cx = s1_cx.substring(0, p2_cx)

					var p_cy = str_object.indexOf(" cy=");
					var s1_cy = str_object.substring(p_cy+5);
					var p2_cy = s1_cy.indexOf("\"");
					cy = s1_cy.substring(0, p2_cy)

					var p_r = str_object.indexOf(" r=");
					var s1_r = str_object.substring(p_r+4);
					var p2_r = s1_r.indexOf("\"");
					r = s1_r.substring(0, p2_r)

					dataUrl = dataUrl +"var "+item+"= paper.circle("+cx+","+cy+","+r+","+r+")";
					dataUrl = dataUrl +"\n.data(\"node\",\""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("node")+"\");\n";
					dataUrl = dataUrl +"vqRooms[cvjs_active_floorplan_div_nr].push("+item+");\n\n";
				}
				else{
					
					// 3.1.21g
					if (str_object.indexOf("ellipse")>-1){

						var p_cx = str_object.indexOf(" cx=");
						var s1_cx = str_object.substring(p_cx+5);
						var p2_cx = s1_cx.indexOf("\"");
						cx = s1_cx.substring(0, p2_cx)

						var p_cy = str_object.indexOf(" cy=");
						var s1_cy = str_object.substring(p_cy+5);
						var p2_cy = s1_cy.indexOf("\"");
						cy = s1_cy.substring(0, p2_cy)

						var p_r = str_object.indexOf(" r=");
						var s1_r = str_object.substring(p_r+4);
						var p2_r = s1_r.indexOf("\"");
						r = s1_r.substring(0, p2_r)

						dataUrl = dataUrl +"var "+item+"= paper.circle("+cx+","+cy+","+r+","+r+")";
						dataUrl = dataUrl +"\n.data(\"node\",\""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("node")+"\");\n";
						dataUrl = dataUrl +"vqRooms[cvjs_active_floorplan_div_nr].push("+item+");\n\n";
					}
					else
					if (cvjs_debug) console.log("note: not path, not circle, ..save not implemented! "+str_object);
					
					
				}

			}

		}
	}

	//if (spc_counter>0) dataUrl = dataUrl +"}\n";

	dataUrl = dataUrl +"return (buildings);\n";
	dataUrl = dataUrl +"}\n";
	dataUrl = dataUrl +"\n";
	dataUrl = dataUrl +"jQuery(document).ready(function() { \n";
	dataUrl = dataUrl +"	setUpVqRoomsGeneric(); \n";
	dataUrl = dataUrl +"}); \n";
	
	return dataUrl;
}


// 3.3.07a
function cvjs_loadSpaceObjectsUser(floorplan_div){
	
	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;

if (cvjs_debug) 	console.log("cvjs_openRedlineLoadModal ");

	cvjs_fileLoaderRedlineMode = true;

	cvjs_filename_list_status = 3;
	filesonserver = 0;


	if (fileload_offset_flag[cvjs_active_floorplan_div_nr]){
		fileload_offset_flag[cvjs_active_floorplan_div_nr] = false;
		// 3.1.21j .appendTo('body');
		jQuery("#cvjs_serverFileLoadModal").css({position: "fixed"});
		jQuery("#cvjs_serverFileLoadModal").offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});
	}


	jQuery('#attention_bitmap').hide();

	jQuery('#SelectFloorPlan').hide();
	jQuery('#SelectFloorPlanPanel').hide();

	jQuery('#SelectFloorPlanEdit').hide();
	jQuery('#SelectFloorPlanPanelEdit').hide();

	jQuery( "#cvjs_cvRoomTextLayersOnLoad").html("");


/*	
					OpenSpaceObjectModal: {
					  	Header: 'CADViewer - Open Space Objects',
					  	SpaceObjectFilename: 'SPACE OBJECT / FILENAME',
						EditSpaceObjectInfo: 'Edit Space Object Info',
					},
*/					
	
	
	
	jQuery( "#serverFileModalName" ).html(languageTable.languages[cvjs_currentLanguage].OpenSpaceObjectModal.Header);
	jQuery( "#addFloorPlanTable").hide();
	jQuery( "#add_br_not_addFloorPlanTable").show();
	
	
	jQuery( "#addRedlineTable").hide();
	jQuery( "#infoFileModalNameDrawing" ).html(languageTable.languages[cvjs_currentLanguage].OpenSpaceObjectModal.SpaceObjectFilename);


	jQuery( "#editFloorPlanInfoText" ).html(languageTable.languages[cvjs_currentLanguage].OpenSpaceObjectModal.EditSpaceObjectInfo);
	jQuery( "#infoFloorPlanInfoText" ).html(languageTable.languages[cvjs_currentLanguage].OpenSpaceObjectModal.SpaceObjectFilename);

/*
	jQuery( "#serverFileModalName" ).html("CADViewer - Open Redline");
	jQuery( "#addFloorPlanTable").hide();
	jQuery( "#addRedlineTable").hide();
	jQuery( "#infoFileModalNameDrawing" ).html("REDLINE / FILENAME");


	jQuery( "#editFloorPlanInfoText" ).html("Edit Redline Info");
	jQuery( "#infoFloorPlanInfoText" ).html("REDLINE / FILENAME");
*/

if (cvjs_debug) console.log("cvjs_openRedlineLoadModal cvjs_loadServerFileList(3)");

 	cvjs_loadServerFileList(3);
	
	
}

// 3.3.07a
var cvjs_spaceObjectsRelativePath = "";
var cvjs_filepathServerSpaceObjects = "";
var cvjs_spaceObjectsAbsolutePathOnly = false;

var cvjs_SpaceObjectUrl = "";

// 3.3.07a
		
/**
 * Sets the absolute path for the space object location, relative path is not used
 * @param {string} path - abslute URL to the space object location
 * @param {string} serverPath - absolute path to the space object location, "/home/cadviewerjs/spaceObjects/"
 */
function cvjs_setSpaceObjectsAbsolutePath(path,serverPath){

	cvjs_spaceObjectsRelativePath = path;
	cvjs_filepathServerSpaceObjects = serverPath;
	cvjs_spaceObjectsAbsolutePathOnly = true;

}
	
// 3.3.07a

/**
 * Sets the name and url of the Space Object file to load, The Space Object file is has the extension .js
 * @param {string} file - String containg url and name of space_object.js file
 */

function cvjs_setSpaceObjectUrl(file){
	
	cvjs_SpaceObjectUrl = file;
}
	


// 3.3.07a

/**
 * Loads Space Object to the location defined through parameter settings
 * @param {String} floorplan_div - div of the CADViewerJS canvas
 */

function cvjs_loadSpaceObjects(floorplan_div){

cvjs_loadRedlinesFileControllerFlag = true;   // 6.1.09f forcing sync loading for callback coloring


if (cvjs_debug) console.log("cvjs_loadSpaceObjects cvjs_loadRedlinesFileControllerFlag"+cvjs_loadRedlinesFileControllerFlag);

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}


	if (floorplan_div== undefined)
		cvjs_active_floorplan_div_nr = 0;
	else
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

	if (cvjs_debug) console.log("!!!!!!!!!!!!!!!!!!!!!!!!   cvjs_loadStickyNotesRedlines "+ cvjs_active_floorplan_div_nr+"  "+floorplan_div);


	if (!cvjs_loadRedlinesFileControllerFlag){   // standard load of redlines

		stickynotesRedlines_loaded = false;
		if (current_redline_js_initialized == 0){
			current_redline_js_initialized = 1;
			current_jsRedlinename = cvjs_SpaceObjectUrl;
if (cvjs_debug) 	console.log("before loadJSbase redline "+cvjs_SpaceObjectUrl);
			loadJSbase(cvjs_SpaceObjectUrl);
		}else{
if (cvjs_debug) 	console.log("replace "+current_jsRedlinename+"  "+cvjs_SpaceObjectUrl);
			replacejscssfile(current_jsRedlinename, cvjs_SpaceObjectUrl, "js");
			current_jsRedlinename = cvjs_SpaceObjectUrl;
		}
		cvjs_loadStickyNotesRedlinesTimer();

	}else{

		var cvjs_phpLoadRedlineUrlLocation = cvjs_serverHandlersPath + cvjs_serverLoadFileControllerRedlines;
if (cvjs_debug) 		console.log("brach 2 "+ cvjs_phpLoadRedlineUrlLocation+"  file="+cvjs_SpaceObjectUrl);

		var js_data = {};
		js_data['file'] = cvjs_SpaceObjectUrl;
//console.log(cvjs_phpSaveRedlineUrlLocation+"  "+cvjs_StickyNoteSaveRedlineUrl);
		jQuery.ajax({
		  url:cvjs_phpLoadRedlineUrlLocation,
		  type: 'post',
		  async: false,  //6.1.09f
		  data: js_data,
		  success: function(html){

					var status ="Load redlines: "+html;
					if (cvjs_debug) 		console.log(status);
					cvjs_clearCurrentRedline(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
					cvjs_addInlineScript(html);

					stickynotesRedlines_loaded = true;
					
					// cvjs_loadStickyNotesRedlinesTimer();   // commented out 9.1.09f

					//cvjs_setUpStickyNotesRedlines(cvjs_rPaper[cvjs_active_floorplan_div_nr]);
				},
		 error:function(data_e){console.log("Error "+data_e); return;}
		});

	}

}

// moved from custom_host_parser to make non-server connected Space Objects work
// 3.3.07b
var id_publish_location = cvjs_ServerLocation + "content/SpaceObjects/space_objects_01.js";
var id_datalayer2_name = "Space ID";
var id_main_data_layer = "cvjs_Data_Layer";
var id_main_data_template_type = "Space";

var building_name = "";
var company = "";
var address = "";
var city = "";
var zipcode = "";
var state = "Test1";
var country = "";
var FacMgr_name = "Hello 2!";
var FacMgr_title = "";
var FacMgr_email = "";
var FacMgr_phone = "";



//  3.3.07b  - this is for the creation interface Space Objects
var textLayer1;	     // The text layer for text in rooms
		



var cvjs_supressPopUpModal = false;		
/**
 * Controls the appearance of pop up modal when space object is clicked
 * @param {boolean} modal_mode - flag to make popup modal disappear , false is default and display, true for supressed
 */

function cvjs_supressPopUpModalMode(modal_mode){

	cvjs_setCreationMode(modal_mode, false);
}	




var cvjs_supressSingleSpaceHighLight = false;

/**
 * Controls the highlight appearance when space object is clicked. Used for custom control of multiple selections, etc.
 * @param {boolean} modal_mode - flag to make highlight disappear , false is default highlight, true for supressed highlight of space
 */

function cvjs_supressSingleSpaceHighlight(modal_mode){

	cvjs_supressSingleSpaceHighLight = modal_mode;

}	








// 6.1.38


/**
 * Add a Fixed Size Space Object Custom Rectangle at coordinates x, y
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 * @param {string} svgImagePath - name of path containing wallpaper object
 * @param {string} spaceObjectId - Unique ID of the space object. NOTE!
 * @param {string} spaceObjectName - Name of the space object.
 * @param {string} spaceObjectType - Type of the object
 * @param {int} coordinate_flag - 0 is SVG coordinates, 1 is DWG coordinates, 0 is default
 * @param {int} xcor - x coordinate 
 * @param {int} ycor - y coordinate 
 * @param {Object} textArray - array with lines of text content in Space Object
 * @param {float} scaleFactor - scale factor at insertion, 1.0 is default
 * @param {Object} colorObject - object containing colors and style of default setting of Space Object, "none" provides standard default color
 * @param {Object} textStyles - object containing colors and style of each line of text in the Space Object
 * @param {Array} scaleText - array containing relative size af each line of text in the Space Object
 * @param {Array} hexColorText - array containing color of each line of text in the Space Object
 * @param {float} leftFactor - left adjustment factor of text in the Space Object
 */

function cvjs_addSpaceObjectDirectXY(floorplan_div, svgImagePath, spaceObjectId, spaceObjectName, spaceObjectType, coordinate_flag, xcor, ycor, textArray, scaleFactor, colorObject, textStyles, scaleText, hexColorText, leftFactor){

	// add position
	// set dwg position to zero
		
	cvjs_addFixedSizeCustomSpaceObjectXY(floorplan_div, svgImagePath, spaceObjectId , spaceObjectId, spaceObjectType, "", xcor, ycor, coordinate_flag, textArray, scaleFactor, textStyles, scaleText, hexColorText, leftFactor );
	
	// reuse code for standard placement
	// copy current code and rename



	//  make sure code content corresponds
	cvjs_highlightSpaceObjectDirect(floorplan_div, spaceObjectId, colorObject);
	

}



var cvjs_addSpaceDWGFlag = false;
var cvjs_addSpaceTextArrayFlag = false;
var cvjs_addSpaceTextArray;
var cvjs_addSpaceScaleFactor = 1.0;
var cvjs_textStyles;
var cvjs_scaleText;
var cvjs_hexColorText;
var cvjs_leftFactor;
var cvjs_spaceObjectDirect_svgx=0;
var cvjs_spaceObjectDirect_svgy=0;
var cvjs_spaceObjectDirect_dwgx=0;
var cvjs_spaceObjectDirect_dwgy=0;


// 6.1.40

/**
 * Add a Fixed Size Space Object Custom Rectangle at coordinates x, y
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 * @param {string} svgImagePath - name of path containing wallpaper object
 * @param {string} spaceObjectId - Unique ID of the space object. NOTE!
 * @param {string} spaceObjectName - Name of the space object.
 * @param {string} spaceObjectType - Type of the object
 * @param {string} layer - the associated layer of the object
 * @param {int} xcor - x coordinate 
 * @param {int} ycor - y coordinate 
 * @param {int} coordinate_flag - 0 is SVG coordinates, 1 is DWG coordinates, 0 is default
 * @param {Object} textArray - array with lines of text content in Space Object
 * @param {float} scaleFactor - scale factor at insertion, 1.0 is default
 * @param {Object} textStyles - object containing colors and style of each line of text in the Space Object
 * @param {Array} scaleText - array containing relative size af each line of text in the Space Object
 * @param {Array} hexColorText - array containing color of each line of text in the Space Object
 * @param {float} leftFactor - left adjustment factor of text in the Space Object
 */
  
function cvjs_addFixedSizeCustomSpaceObjectXY(floorplan_div, svgImagePath, spaceObjectId, spaceObjectName, spaceObjectType, spaceObjectLayer, xcor, ycor, coordinate_flag, textArray, scaleFactor, textStyles, scaleText, hexColorText, leftFactor ){

	cvjs_addSpaceTextArrayFlag = false;
	cvjs_addSpaceDWGFlag = false; 
	cvjs_addSpaceScaleFactor = 1.0;
		
	if ( coordinate_flag != null) 
		if ( coordinate_flag == 1) cvjs_addSpaceDWGFlag = true;

	if ( textArray != null){
			cvjs_addSpaceTextArrayFlag = true;
			cvjs_addSpaceTextArray = textArray;
	}	

	if ( scaleFactor != null) 
		cvjs_addSpaceScaleFactor = scaleFactor;

	if ( textStyles != null) 
		cvjs_textStyles = textStyles;

	if ( scaleText != null) 
		cvjs_scaleText = scaleText;

	if ( hexColorText != null) 
		cvjs_hexColorText = hexColorText;

	if ( leftFactor != null) 
		cvjs_leftFactor = leftFactor;



	if (cvjs_addSpaceDWGFlag){
		// getting the current page...
		var page = multiPages[cvjs_active_floorplan_div_nr].currentPage;

		cvjs_spaceObjectDirect_dwgx = xcor;
		cvjs_spaceObjectDirect_dwgy = ycor;

		var x = xcor;
		var y = ycor;
		// retrieve coordinates DWG
		// transform to SVG
		var svgDx = cvjs_drawingCoordinates[page].SVG.upperRight.x - cvjs_drawingCoordinates[page].SVG.lowerLeft.x;
		var dwgDx = cvjs_drawingCoordinates[page].DWG.upperRight.x - cvjs_drawingCoordinates[page].DWG.lowerLeft.x;
		var dwgpX =  (x - cvjs_drawingCoordinates[page].DWG.lowerLeft.x)/dwgDx;
		var svgPx =  cvjs_drawingCoordinates[page].SVG.lowerLeft.x+(dwgpX*svgDx);

		var svgDy = cvjs_drawingCoordinates[page].SVG.upperRight.y - cvjs_drawingCoordinates[page].SVG.lowerLeft.y;
		var dwgDy = cvjs_drawingCoordinates[page].DWG.upperRight.y - cvjs_drawingCoordinates[page].DWG.lowerLeft.y;
		var dwgpY =  (y - cvjs_drawingCoordinates[page].DWG.lowerLeft.y)/dwgDy;
		var svgPy =  cvjs_drawingCoordinates[page].SVG.lowerLeft.y+(dwgpY*svgDy);
		
		xcor = svgPx;
		ycor = svgPy;
		
		cvjs_spaceObjectDirect_svgx = svgPx;
		cvjs_spaceObjectDirect_svgy = svgPy;
	}
	else{
		cvjs_spaceObjectDirect_dwgx = 0;
		cvjs_spaceObjectDirect_dwgy = 0;
		cvjs_spaceObjectDirect_svgx = xcor;
		cvjs_spaceObjectDirect_svgy = ycor;
		
	}

	
	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	



	cvjs_hidePop();
	Node_id = cvjs_currentMaxNodeId();
	//console.log("xurrent Node_id="+Node_id);

	Node_id++;
	currentNode_underbar = Node_underbar+Node_id;
	currentNode_id = spaceObjectId;
	currentNode_name = spaceObjectName;
	currentNode_layer = spaceObjectLayer;
	currentNode_group = "none";
	currentNode_attributes = "none";
	currentNode_attributeStatus = "unpopulated";
	currentNode_type = spaceObjectType;
	currentNode_tags = "unassigned";
	currentNode_linked = false;
	
	cvjs_setCurrentNodeValues(currentNode_underbar, currentNode_name, currentNode_id, currentNode_layer, currentNode_group, currentNode_attributes, currentNode_attributeStatus, currentNode_type, currentNode_tags, currentNode_tags, currentNode_linked);
	cvjs_addHandleFunc_FixedSizeXY(svgImagePath, spaceObjectId, spaceObjectName, spaceObjectType, xcor, ycor);

}





/**
 * Add a Fixed Size Space Object Custom Rectangle at coordinates x, y
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 * @param {string} svgImagePath - name of path containing wallpaper object
 * @param {string} spaceObjectId - Unique ID of the space object. NOTE!
 * @param {string} spaceObjectName - Name of the space object.
 * @param {string} spaceObjectType - Type of the object
 * @param {string} layer - the associated layer of the object
 * @param {int} xcor - x coordinate in SVG coordinates
 * @param {int} ycor - y coordinate in SVG coordinates
 */
  
function cvjs_moveFixedSizeCustomSpaceObjectXY(floorplan_div, spaceObjectId, xcor, ycor){

	// 3.2.02b
	
	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	

	cvjs_hidePop();
	
	// make transformation only	
	//window.alert("cvjs_moveFixedSizeCustomSpaceObjectXY "+spaceObjectId);
	
	jQuery("#"+spaceObjectId).attr({'path': "M"+xcor+","+ycor});
	
//	cvjs_addHandleFunc_FixedSizeXY(svgImagePath, spaceObjectId, spaceObjectName, spaceObjectType, xcor, ycor);

}








/**
 * Add a Fixed Size Space Object Custom Rectangle
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 * @param {string} svgImagePath - name of path containing wallpaper object
 * @param {string} spaceObjectId - Unique ID of the space object. NOTE!
 * @param {string} spaceObjectName - Name of the space object.
 * @param {string} spaceObjectType - Type of the object
 * @param {string} layer - the associated layer of the object
 */
  
function cvjs_addFixedSizeCustomSpaceObject(floorplan_div, svgImagePath, spaceObjectId, spaceObjectName, spaceObjectType, spaceObjectLayer){

	// 3.2.02b
	
	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	



	cvjs_hidePop();
	Node_id = cvjs_currentMaxNodeId();
	//console.log("xurrent Node_id="+Node_id);

	Node_id++;
	currentNode_underbar = Node_underbar+Node_id;
	currentNode_id = spaceObjectId;
	currentNode_name = spaceObjectName;
	currentNode_layer = spaceObjectLayer;
	currentNode_group = "none";
	currentNode_attributes = "none";
	currentNode_attributeStatus = "unpopulated";
	currentNode_type = spaceObjectType;
	currentNode_tags = "unassigned";
	currentNode_linked = false;
	
	cvjs_setCurrentNodeValues(currentNode_underbar, currentNode_name, currentNode_id, currentNode_layer, currentNode_group, currentNode_attributes, currentNode_attributeStatus, currentNode_type, currentNode_tags, currentNode_tags, currentNode_linked);
	cvjs_addHandleFunc_FixedSize(svgImagePath, spaceObjectId, spaceObjectName, spaceObjectType);

}



/**
 * Draws a fixed size space and add a custom wallpaper. The data object of the rectangle is defined as a Space Object. Prior to calling this method, cvjs_setCurrentSpaceObjectNodeValues() should be called.
 */
function cvjs_drawSpaceObject_FixedSize(svgImagePath, spaceObjectId, spaceObjectName, spaceObjectType) {
		cvjs_addHandleFunc_FixedSize(svgImagePath, spaceObjectId, spaceObjectName, spaceObjectType);
}

var cvjs_customSvgImagePath = "";
var cvjs_customSpaceObjectId = "";
var cvjs_customSpaceObjectType = "";
var cvjs_customSpaceObjectName = "";


// 5.1.04d  - insertion of a custom image object, at coordinates x,y
function cvjs_addHandleFunc_FixedSizeXY(svgImagePath, spaceObjectId, spaceObjectName, spaceObjectType, xcor, ycor) {

	cvjs_customSvgImagePath = svgImagePath;
	cvjs_customSpaceObjectId = spaceObjectId;
	cvjs_customSpaceObjectType = spaceObjectType;
	cvjs_customSpaceObjectName = spaceObjectName;
	
//window.alert("cvjs_svgImagePath" +cvjs_svgImagePath);	

	tPath_r = "M" + firstX_r + "," + firstY_r;
	tRubberBand_r = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_r).attr({stroke: "#b00000", fill : "none"});

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,90, '');

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});
	
//	handleGroup.mousedown(mousedown_imagelink);
//	handleGroup.mousedown(stop_cvjs_create_fixed_rectangle);
	mouseMoveStickyNote = false;
//	handleGroup.mousemove(move_cvjs_create_fixed_rectangle);	


	stop_cvjs_create_fixed_rectangle_XY(xcor, ycor);		
}




function stop_cvjs_create_fixed_rectangle_XY(xcor, ycor) {

	var floorplan_div = floorplan_div_Array[cvjs_active_floorplan_div_nr];

	var scaleNote = 1;
	var scaleFactorNotes = 600; // 300

	 if ( (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])> (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr]))
	 	scaleNote = (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	 else
	 	scaleNote = (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])/scaleFactorNotes;

	cvjs_removeHandleFunc_FixedRectangle();
	if (cvjs_debug) console.log("scaleNotescaleNotescaleNote "+scaleNote);
	
	var localscalefac = cvjs_addSpaceScaleFactor*20.0;	
	lastX_r = scaleNote*localscalefac*global_scale ;
	lastY_r = scaleNote*localscalefac*global_scale ;

	lastX_r_imageframe = scaleNote*localscalefac*0.05*global_scale ;

	
	//window.alert(" "+ cvjs_customSvgImagePath +"  "+cvjs_customSvgImagePath.length);
	if (cvjs_customSvgImagePath.length == 0) lastY_r = 0;	
	var textstep = scaleNote*localscalefac*0.25*global_scale;

	var size;
	var lastY_rText;
	var newText = new Array();
	tPath_r = "M" + xcor + "," + ycor;
	
	if (cvjs_addSpaceTextArrayFlag){
		size = cvjs_addSpaceTextArray.length;		
		lastY_rText = lastY_r + textstep * size;
		tPath_r += "h" + lastX_r/global_scale + "v" + lastY_rText/global_scale+"h"+(-lastX_r/global_scale)+"v"+(-lastY_rText/global_scale+" Z");
	}
	else
		tPath_r += "h" + lastX_r/global_scale + "v" + lastY_r/global_scale+"h"+(-lastX_r/global_scale)+"v"+(-lastY_r/global_scale+" Z");
		
	if (cvjs_debug) console.log(tPath_r);
	
	// we scale and draw the custom object   
//	var icon = cvjs_rPaper[cvjs_active_floorplan_div_nr].image(cvjs_customSvgImagePath, (firstX_r-delta_x)/global_scale, (firstY_r-delta_y)/global_scale, Math.abs((lastX_r)/global_scale), Math.abs((lastY_r)/global_scale));

	var newPath = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_r).attr({stroke: "#b00000", fill : "none"});
	var icon  = cvjs_rPaper[cvjs_active_floorplan_div_nr].image(cvjs_customSvgImagePath, xcor+lastX_r_imageframe/global_scale, ycor+lastX_r_imageframe/global_scale, Math.abs((lastX_r-2*lastX_r_imageframe)/global_scale), Math.abs((lastY_r-2*lastX_r_imageframe)/global_scale))


	var text_style_dialog = {
				'text-font' : "Dialog",
				'font-family' : "Dialog",
				'font-size' : "7pt",
				'text-anchor' : "start",
				'font-weight': "normal",
				'font-style': "italic",
				stroke : "#88539B",
				fill : "#88539B"
			};

	for (var i=size; i<3; i++){
		cvjs_addSpaceTextArray[i] = "";
		cvjs_textStyles[i] = text_style_dialog; 
		cvjs_hexColorText[i] = "#FFFFFF";
		cvjs_scaleText[i] = 0.1;
	}
	size_all = 3;


	if (cvjs_addSpaceTextArrayFlag){		
		var ystep = ycor+lastY_r/global_scale;
		var xstep = xcor + lastX_r/global_scale*cvjs_leftFactor; 
		for (var i=0; i<size_all; i++){			
//			 var ystep = ycor+lastY_r/global_scale+((i+1)*textstep/global_scale);
			
console.log("i="+i+"  "+cvjs_addSpaceTextArray[i]+"  "+ystep+"  "+xcor);			
			if (i== 0){ 
//				newText1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(xcor, ystep, cvjs_addSpaceTextArray[i]).attr({stroke: cvjs_currentRedline_color, fill: cvjs_currentRedline_color, 'font-size': cvjs_current_font_size });

//				fontheight1 = lastY_rText/global_scale*scaleText[i];

				fontheight1 = textstep*size/global_scale*cvjs_scaleText[i];
				ystep = ystep +fontheight1;
			
				newText1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(xstep, ystep, cvjs_addSpaceTextArray[i]).attr(cvjs_textStyles[i]);
				newText1.attr({'font-size' : fontheight1});
				strokewidth = fontheight1/15;
				newText1.attr({'stroke-width' : strokewidth});
				newText1.attr({'stroke' : cvjs_hexColorText[i]});
				newText1.attr({'fill' : cvjs_hexColorText[i]});
				newText1.attr({'id': 'cv_'+cvjs_currentNode_underbar+'_text1' });
			
			}
			if (i== 1){ 
//				newText2 = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(xcor, ystep, cvjs_addSpaceTextArray[i]).attr({stroke: cvjs_currentRedline_color, fill: cvjs_currentRedline_color, 'font-size': cvjs_current_font_size });

				fontheight1 = textstep*size/global_scale*cvjs_scaleText[i];
//				fontheight1 = lastY_rText/global_scale*scaleText[i];
				ystep = ystep +fontheight1*1.05;
				newText2 = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(xstep, ystep, cvjs_addSpaceTextArray[i]).attr(cvjs_textStyles[i]);
				newText2.attr({'font-size' : fontheight1});
				strokewidth = fontheight1/15;
				newText2.attr({'stroke-width' : strokewidth});
				newText2.attr({'stroke' : cvjs_hexColorText[i]});
				newText2.attr({'fill' : cvjs_hexColorText[i]});
				newText2.attr({'id': 'cv_'+cvjs_currentNode_underbar+'_text2' });
			}
			if (i== 2){ 
//				newText3 = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(xcor, ystep, cvjs_addSpaceTextArray[i]).attr({stroke: cvjs_currentRedline_color, fill: cvjs_currentRedline_color, 'font-size': cvjs_current_font_size });

				fontheight1 = textstep*size/global_scale*cvjs_scaleText[i];

//				fontheight1 = lastY_rText/global_scale*scaleText[i];
				ystep = ystep +fontheight1*1.05;
				newText3 = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(xstep, ystep, cvjs_addSpaceTextArray[i]).attr(cvjs_textStyles[i]);
				newText3.attr({'font-size' : fontheight1});
				strokewidth = fontheight1/15;
				newText3.attr({'stroke-width' : strokewidth});
				newText3.attr({'stroke' : cvjs_hexColorText[i]});
				newText3.attr({'fill' : cvjs_hexColorText[i]});
				newText3.attr({'id': 'cv_'+cvjs_currentNode_underbar+'_text3' });
			}
		}
	}






	
	
	newPath.attr({'path': tPath_r});
	newPath.attr({fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1"});

	newPath.attr({'id': 'cv_'+cvjs_currentNode_underbar, 'cvjs:node': cvjs_currentNode_underbar, 'cvjs:roomId': cvjs_customSpaceObjectId, 'cvjs:name': cvjs_customSpaceObjectName, 'class': 'cvjs_nodes', 'cvjs:type' : cvjs_customSpaceObjectType });
	icon.attr({'id': 'cv_'+cvjs_currentNode_underbar+'_image' });
	
	
	cvjs_addVqRoomsGraphics_newNode_polygon(cvjs_currentNode_underbar, newPath);
	cvjs_setUpVqRooms_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentNode_underbar);
	cvjs_graphicalObjectCreated('Rectangle');
	// 3.2.02b  - find the highest cv_ in the drawing, and insert the image behind that.
						
	// now we define the coordinates	
	var rm = findFixture(cvjs_customSpaceObjectId);
	vqRooms[cvjs_active_floorplan_div_nr][rm].data("svgx", cvjs_spaceObjectDirect_svgx);		
	vqRooms[cvjs_active_floorplan_div_nr][rm].data("svgy", cvjs_spaceObjectDirect_svgy);		
	vqRooms[cvjs_active_floorplan_div_nr][rm].data("dwgx", cvjs_spaceObjectDirect_dwgx);		
	vqRooms[cvjs_active_floorplan_div_nr][rm].data("dwgy", cvjs_spaceObjectDirect_dwgy);		
	vqRooms[cvjs_active_floorplan_div_nr][rm].data("translatex", 0);		
	vqRooms[cvjs_active_floorplan_div_nr][rm].data("translatey", 0);		
		
		
//	window.alert("floorplan_div"+floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	var oArr = {};
	jQuery("*[id]").each(function() {
		try{
			var id = jQuery(this).attr('id');
//			var searchString = "[id^="+floorplan_div+"]";
			var searchString = "[id^="+floorplan_div_Array[cvjs_active_floorplan_div_nr]+"]";
			var svgID = jQuery("#"+id).parents(searchString).attr('id');
			
			if (svgID == floorplan_div_Array[cvjs_active_floorplan_div_nr]){
			   if (!oArr[id]) oArr[id] = true;
			}
		}
		catch (err) { 
		 	console.log(err+" XX"+id+"XX");
		}
	});
	
	var maxId = 0;
	
	for (var prop in oArr){
		try{
			var target = "#"+prop;
			var myID = jQuery(target).attr("id");
			if (myID.indexOf("cv_")==0  && myID.indexOf("cv_NODE")!=0){

// 3.3.02d    we strip off the 
			  var onlyvalue = 0;
			  if (myID.indexOf("cv_")==0) onlyvalue = myID.substring(3);
			  
			  var value = parseInt(onlyvalue);

				 //3.3.02d
//				if (jQuery(target).attr("id") > maxId){
				if (value> maxId){
					maxId = value; 
//					maxId = jQuery(target).attr("id"); 
//					console.log(maxId);
// 

				}			
			}
		}
		catch (err) { 
			console.log(err+" XX"+id+"XX");
		}
	};
	maxId = "cv_" + maxId;
		
	// 6.1.37		
	var newgroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].group().attr({id: "cvjs_"+cvjs_customSpaceObjectId});	
	jQuery('#cv_'+cvjs_currentNode_underbar+'_image').insertBefore('#cv_'+cvjs_currentNode_underbar);
	jQuery('#cvjs_'+cvjs_customSpaceObjectId).insertBefore('#cv_'+cvjs_currentNode_underbar+'_image');

	if (size == 1){
		jQuery('#cv_'+cvjs_currentNode_underbar+'_text1').insertBefore('#cvjs_'+cvjs_customSpaceObjectId);		
	}

	if (size == 2){
		jQuery('#cv_'+cvjs_currentNode_underbar+'_text1').insertBefore('#cvjs_'+cvjs_customSpaceObjectId);
		jQuery('#cv_'+cvjs_currentNode_underbar+'_text2').insertBefore('#cv_'+cvjs_currentNode_underbar+'_text1');
	}

	if (size == 3){
		jQuery('#cv_'+cvjs_currentNode_underbar+'_text1').insertBefore('#cvjs_'+cvjs_customSpaceObjectId);
		jQuery('#cv_'+cvjs_currentNode_underbar+'_text2').insertBefore('#cv_'+cvjs_currentNode_underbar+'_text1');
		jQuery('#cv_'+cvjs_currentNode_underbar+'_text3').insertBefore('#cv_'+cvjs_currentNode_underbar+'_text2');
	}
		
	//jQuery('#cv_'+cvjs_currentNode_underbar).append(jQuery('#cv_'+cvjs_currentNode_underbar+'_image'));
	jQuery('#cvjs_'+cvjs_customSpaceObjectId).append(jQuery('#cv_'+cvjs_currentNode_underbar));
	jQuery('#cvjs_'+cvjs_customSpaceObjectId).append(jQuery('#cv_'+cvjs_currentNode_underbar+'_image'));

	jQuery('#cv_'+cvjs_currentNode_underbar+'_image').css('pointer-events', 'none');

//qqqq	

	if (size == 1){
		jQuery('#cvjs_'+cvjs_customSpaceObjectId).append(jQuery('#cv_'+cvjs_currentNode_underbar+'_text1'));
		jQuery('#cv_'+cvjs_currentNode_underbar+'_text1').css('pointer-events', 'none');
	}

	if (size == 2){
		jQuery('#cvjs_'+cvjs_customSpaceObjectId).append(jQuery('#cv_'+cvjs_currentNode_underbar+'_text1'));
		jQuery('#cvjs_'+cvjs_customSpaceObjectId).append(jQuery('#cv_'+cvjs_currentNode_underbar+'_text2'));
		jQuery('#cv_'+cvjs_currentNode_underbar+'_text1').css('pointer-events', 'none');
		jQuery('#cv_'+cvjs_currentNode_underbar+'_text2').css('pointer-events', 'none');
	}

	if (size == 3){
		jQuery('#cvjs_'+cvjs_customSpaceObjectId).append(jQuery('#cv_'+cvjs_currentNode_underbar+'_text1'));
		jQuery('#cvjs_'+cvjs_customSpaceObjectId).append(jQuery('#cv_'+cvjs_currentNode_underbar+'_text2'));
		jQuery('#cvjs_'+cvjs_customSpaceObjectId).append(jQuery('#cv_'+cvjs_currentNode_underbar+'_text3'));
		jQuery('#cv_'+cvjs_currentNode_underbar+'_text1').css('pointer-events', 'none');
		jQuery('#cv_'+cvjs_currentNode_underbar+'_text2').css('pointer-events', 'none');
		jQuery('#cv_'+cvjs_currentNode_underbar+'_text3').css('pointer-events', 'none');
	}
		
};
// END - Draw Custom Rectangle





function cvjs_addHandleFunc_FixedSize(svgImagePath, spaceObjectId, spaceObjectName, spaceObjectType) {

	cvjs_customSvgImagePath = svgImagePath;
	cvjs_customSpaceObjectId = spaceObjectId;
	cvjs_customSpaceObjectType = spaceObjectType;
	cvjs_customSpaceObjectName = spaceObjectName;
	
//window.alert("cvjs_svgImagePath" +cvjs_svgImagePath);	

	tPath_r = "M" + firstX_r + "," + firstY_r;
	tRubberBand_r = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_r).attr({stroke: "#b00000", fill : "none"});

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,90, '');

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});

	
//	handleGroup.mousedown(mousedown_imagelink);
	handleGroup.mousedown(stop_cvjs_create_fixed_rectangle);
	mouseMoveStickyNote = false;
	handleGroup.mousemove(move_cvjs_create_fixed_rectangle);	
	
}


function cvjs_removeHandleFunc_FixedRectangle() {
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("handler removed");
}


var start_cvjs_create_fixed_rectangle = function() {

	flag_rectangle= false;
	tRubberBand_r.attr({stroke: "#b00000", fill : "none"});
}


var move_cvjs_create_fixed_rectangle = function(e,x,y) {

	x = x+document.body.scrollLeft;
	y = y+document.body.scrollTop;

	// 3.1.21k
	var scaleNote = 1;
	var scaleFactorNotes = 600; //300

	 if ( (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])> (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr]))
	 	scaleNote = (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	 else
	 	scaleNote = (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
		
	// 6.01.09j
	scaleNote = scaleNote * cvjs_globalScaleNote;

	var scaleNote20 = scaleNote*(20.0);
	var scaleNote19 = scaleNote*(20-1.5);
	var scaleNote1 = scaleNote*1.5;
	//6.1.15
	var mypath = "M0,"+scaleNote1+"h"+scaleNote19+"v"+scaleNote20+"h-"+scaleNote20+"v-"+scaleNote19+"h"+scaleNote1+"v-"+scaleNote1+" Z";

	if (mouseMoveStickyNote == false){
		tRubberBand_sn = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path(mypath).attr({stroke: "#000000", "stroke-width" : 0.5*scaleNote ,"fill" : "none"}))   ;
		mouseMoveStickyNote = true;
	}
	
	tTransform_c = "T" + ((x-delta_x)/global_scale  + scaleNote1) + "," + ((y-delta_y)/global_scale - scaleNote1); // 10->2
	tRubberBand_sn.attr({'transform': tTransform_c});
}



var stop_cvjs_create_fixed_rectangle = function(e,x,y) {

	var floorplan_div = floorplan_div_Array[cvjs_active_floorplan_div_nr];

	tTransform_c = "t0,0S"+(scaleNote/100);
	tRubberBand_sn.attr({'transform': tTransform_c , "opacity" : "0.0"});
	tRubberBand_sn.attr({fill: 'none', "fill-opacity": "0.0", stroke: '#000', 'stroke-opacity': "0.0" });
	tRubberBand_sn.remove();  // 3.1.21j
	
	x = x+document.body.scrollLeft;
	y = y+document.body.scrollTop;

	var scaleNote = 1;
	var scaleFactorNotes = 600; // 300

	 if ( (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])> (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr]))
	 	scaleNote = (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	 else
	 	scaleNote = (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])/scaleFactorNotes;


	// 6.01.09j
	scaleNote = scaleNote * cvjs_globalScaleNote;


	cvjs_removeHandleFunc_FixedRectangle();

	firstX_r = x;
	firstY_r = y;
	lastX_r = scaleNote*20.0*global_scale ;
	lastY_r = scaleNote*20.0*global_scale ;
	tPath_r = "M" + (firstX_r-delta_x)/global_scale + "," + (firstY_r-delta_y)/global_scale;
	tPath_r += "h" + lastX_r/global_scale + "v" + lastY_r/global_scale+"h"+(-lastX_r/global_scale)+"v"+(-lastY_r/global_scale+" Z");

	if (cvjs_debug) console.log("scaleNotescaleNotescaleNote "+scaleNote+"  "+tPath_r);
	
	
	// we scale and draw the custom object   
	var icon = cvjs_rPaper[cvjs_active_floorplan_div_nr].image(cvjs_customSvgImagePath, (firstX_r-delta_x)/global_scale, (firstY_r-delta_y)/global_scale, Math.abs((lastX_r)/global_scale), Math.abs((lastY_r)/global_scale));
	var newPath = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_r).attr({stroke: "#b00000", fill : "none"});

	newPath.attr({'path': tPath_r});
	newPath.attr({fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1"});

	newPath.attr({'id': 'cv_'+cvjs_currentNode_underbar, 'cvjs:node': cvjs_currentNode_underbar, 'cvjs:roomId': cvjs_customSpaceObjectId, 'cvjs:name': cvjs_customSpaceObjectName, 'class': 'cvjs_nodes', 'cvjs:type' : cvjs_customSpaceObjectType });
	icon.attr({'id': 'cv_'+cvjs_currentNode_underbar+'_image' });
		
	// 6.1.42
	jQuery('#cv_'+cvjs_currentNode_underbar+'_image').css('pointer-events', 'none');
	

	
	cvjs_addVqRoomsGraphics_newNode_polygon(cvjs_currentNode_underbar, newPath);
	cvjs_setUpVqRooms_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentNode_underbar);
	cvjs_graphicalObjectCreated('Rectangle');
	
	// 3.2.02b  - find the highest cv_ in the drawing, and insert the image behind that.
	
	
//	window.alert("floorplan_div"+floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	var oArr = {};
	jQuery("*[id]").each(function() {
		try{
			var id = jQuery(this).attr('id');
//			var searchString = "[id^="+floorplan_div+"]";
			var searchString = "[id^="+floorplan_div_Array[cvjs_active_floorplan_div_nr]+"]";
			var svgID = jQuery("#"+id).parents(searchString).attr('id');
			
			if (svgID == floorplan_div_Array[cvjs_active_floorplan_div_nr]){
			   if (!oArr[id]) oArr[id] = true;
			}
		}
		catch (err) { 
		 	console.log(err+" XX"+id+"XX");
		}
	});
	
	var maxId = 0;
	
	for (var prop in oArr){
		try{
			var target = "#"+prop;
			var myID = jQuery(target).attr("id");
			if (myID.indexOf("cv_")==0  && myID.indexOf("cv_NODE")!=0){

// 3.3.02d    we strip off the 
			  var onlyvalue = 0;
			  if (myID.indexOf("cv_")==0) onlyvalue = myID.substring(3);
			  
			  var value = parseInt(onlyvalue);

				 //3.3.02d
//				if (jQuery(target).attr("id") > maxId){
				if (value> maxId){
					maxId = value; 
//					maxId = jQuery(target).attr("id"); 
//					console.log(maxId);
// 

				}			
			}
		}
		catch (err) { 
			console.log(err+" XX"+id+"XX");
		}
	};
	maxId = "cv_" + maxId;
		
	// 3.3.02d
	jQuery('#cv_'+cvjs_currentNode_underbar+'_image').insertBefore('#cv_'+cvjs_currentNode_underbar);

	
};
// END - Draw Custom Rectangle




// 4.1.02e
/**
 * Delete a Space Image Object
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */  	

function cvjs_deleteSpaceImageObject(floorplan_div){

// 4.1.02e

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	

		// check if space edit mode is on
	
		
	if (cvjs_changeSpaceObject_ManualCreationMode){
		cluster_host_flag = 1;
				
		cvjs_supressPopUpModal = true;	
		cvjs_creationInputType = 2;

		cvjs_setCreationMode(cvjs_supressPopUpModal, true);
		
		hideOnlyPop();
		cvjs_clearDrawing();
	}
	
		icon_command_active = 33;
}



// 4.1.02e
/**
 * Resize a Space Image Object
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */  	

function cvjs_resizeSpaceImageObject(floorplan_div){

	// 4.1.02e

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	

	// check if space edit mode is on
		
	if (cvjs_changeSpaceObject_ManualCreationMode){
		cluster_host_flag = 1;
				
		cvjs_supressPopUpModal = true;	
		cvjs_creationInputType = 2;

		cvjs_setCreationMode(cvjs_supressPopUpModal, true);
		
		hideOnlyPop();
		cvjs_clearDrawing();
	}
		icon_command_active = 34;
}




// 4.1.02g

var resize_node  = "";
var resize_rmid  = "";
var resize_image_height = 0;
var resize_image_width = 0;
var resize_image_x = 0;
var resize_image_y = 0;
var resize_path_d = "";

var resize_color_layer; 
var resize_fplan = "";


function cvjs_addHandleFunc_ResizeImageSpace(node, rmid, image_height, image_width, image_x, image_y, path_d) {

	resize_node  = node;
	resize_rmid  = rmid;
	resize_image_height = image_height;
	resize_image_width = image_width;
	resize_image_x = image_x;
	resize_image_y = image_y;
	resize_path_d = path_d;


	resize_fplan = floorplan_div_Array[cvjs_active_floorplan_div_nr];
	
	if (resize_fplan.lastIndexOf("_svg") == resize_fplan.length-4)
	{ 
		resize_fplan = resize_fplan.substring(0, resize_fplan.length-4);
	} 
 
 //window.alert(fplan);
 
	resize_color_layer = cvjs_clearLayer(resize_color_layer);
	cvjs_highlightSpaceObjectIdDiv(resize_rmid, highlight_colorgrade_A_5 , resize_color_layer, resize_fplan);

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,90, '');

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;

	
	
	lastY_r = image_height;
	lastX_r = image_width;
	firstX_r = image_x;
	firstY_r = image_y;
	
	tPath_r = "M" + image_x + "," + image_y;
	tPath_r += "h" + image_width + "v" + image_height+"h"+(-image_width)+"v"+(-image_height)+" Z";

//	tPath_r = "M" + (firstX_r-delta_x)/global_scale + "," + (firstY_r-delta_y)/global_scale;
//	tPath_r += "h" + lastX_r/global_scale + "v" + lastY_r/global_scale+"h"+(-lastX_r/global_scale)+"v"+(-lastY_r/global_scale+" Z");

	tRubberBand_r = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_r).attr({stroke: "#b00000", fill : "none"});	
	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});

	
console.log("BASE "+tPath_r+"  BASE ");	
	
		
	handleGroup.drag(move_cvjs_resize_custom_image_rectangle,start_cvjs_resize_custom_image_rectangle,stop_cvjs_resize_custom_image_rectangle);
	
	//handleGroup.mousemove(move_cvjs_resize_custom_image_rectangle);
	//handleGroup.mouseup(stop_cvjs_resize_custom_image_rectangle);	
	
	
}


function cvjs_removeHandleFunc_ResizeImageSpace() {
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("handler removed");
}


var start_cvjs_resize_custom_image_rectangle = function() {

//	flag_rectangle= false;
	tRubberBand_r.attr({stroke: "#b00000", fill : "none"});
}

//var move_cvjs_resize_custom_image_rectangle = function(e,x,y) {
var move_cvjs_resize_custom_image_rectangle = function(dx,dy,x,y) {

	var text = x+" "+y;//+" dx="+dx+" dy="+dy;

//	console.log(text);
	
	tPath_r = "M" + resize_image_x + "," + resize_image_y;
	var d1 = (+resize_image_width)+(dx/global_scale);
	var d2 = (+resize_image_height)+(dy/global_scale);
	var d3 = -d1;
	var d4 = -d2;	
	tPath_r += "h" + d1 + "v" + d2 +"h"+ d3 +"v"+d4 +" Z";

	var image_id = "#cv_"+resize_node+"_image";
	var path_id = "#cv_"+resize_node;

	try{

		if (d1>0) jQuery( image_id ).attr("width", d1); 
		if( d2>0) jQuery( image_id ).attr("height", d2); 		
		jQuery( path_id ).attr("d", tPath_r);

	}
	catch(err){}
//console.log(tPath_r);	

	tRubberBand_r.attr({'path': tPath_r});

	resize_color_layer = cvjs_clearLayer(resize_color_layer);
	cvjs_highlightSpaceObjectIdDiv(resize_rmid, highlight_colorgrade_A_5 , resize_color_layer, resize_fplan);
		
}

var stop_cvjs_resize_custom_image_rectangle = function() {


/**  default color for standard Space Object selection mode  - not selected   */
	defaultColor = {
            fill: '#FFF',
            "fill-opacity": "0.1",
            stroke: '#CCC',
            'stroke-width': 1,
            'stroke-linejoin': 'round',
        };
/**  default color for standard Space Object selection mode  - highlighted   */
	highlight = {
            fill: '#a4d7f4',
            "fill-opacity": "0.5",
            stroke: '#a4d7f4',
            'stroke-width': 3
        };
/**  default color for standard Space Object selection mode  - selrcted   */
	selectColor = {
            fill: '#5BBEF6',
            "fill-opacity": "0.5",
            stroke: '#5BBEF6',
            'stroke-width': 3
        };



	// 3.2.02b
	tRubberBand_r.remove();

	cvjs_removeHandleFunc_ResizeImageSpace();	
	resize_color_layer = cvjs_clearLayer(resize_color_layer);

	// rebuild all vqArrays
	
	// make standard mode again
	cvjs_supressPopUpModal = false;	
	cvjs_creationMode = false;
	cvjs_standardHighLightColors = true;


	for (var room in vqRooms[cvjs_active_floorplan_div_nr]){

		var htitle = "<table width=\"100%\"><tr><td class=\"cvjs_modal_header_1\" onclick=\"cvjs_popupTitleClick(\'"+vqRooms[cvjs_active_floorplan_div_nr][room].data("id")+"\');\">"+vqRooms[cvjs_active_floorplan_div_nr][room].data("name")+"</td>"+
			"<td class=\"cvjs_modal_header_info_1\" onclick=\"hideOnlyPop("+room+");\"><i class=\"fa fa-times\"></i></td></tr>"+
			"<tr><td cols=\"2\"><h4 id=\"cvjs_modal_header_info_2\">"+vqRooms[cvjs_active_floorplan_div_nr][room].data("type")+"</h4></td></tr></table>";

	//console.log("dual_hbody_flag "+dual_hbody_flag+"  floor.rooms[bRoom].id   "+floor.rooms[bRoom].id);

		if (dual_hbody_flag){
			if ( parseInt(cvjs_currentNode_id) >=-1){
				jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
					style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
					position: {my: 'bottom center', at: 'top left'}, //   my: 'bottom center', at: 'top center'
					hideOnHTMLClick: 'false'});
			}else{
				jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody_2, title: htitle},
					style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
					position: {my: 'bottom center', at: 'top left'}, //   my: 'bottom center', at: 'top center'
					hideOnHTMLClick: 'false'});
			}
		}

		if (!dual_hbody_flag){
				jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
					style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
					position: {my: 'bottom center', at: 'top left'},
					hideOnHTMLClick: 'false'});
		}
			
	}
	
	hideOnlyPop();
	cvjs_clearDrawing();

};
// END - Draw Custom Rectangle


// 5.1.04d 
/**
 * Add a Fixed Size Image Space Object with
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 * @param {int} xcor - x coordinate in SVG coordinates
 * @param {int} ycor - y coordinate in SVG coordinates
 
 */
  
function cvjs_addFixedSizeImageSpaceObjectXY(floorplan_div, xcor, ycor){

	cvjs_loadSpaceImage_UserConfiguration(floorplan_div);
	cvjs_addFixedSizeCustomSpaceObjectXY(floorplan_div, cvjs_loadSpaceImage_Location, cvjs_loadSpaceImage_ID , cvjs_loadSpaceImage_ID, cvjs_loadSpaceImage_Type, "", xcor, ycor);

}




// 4.1.02i
/**
 * Add a Fixed Size Image Space Object with
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */
  
function cvjs_addFixedSizeImageSpaceObject(floorplan_div){

	cvjs_loadSpaceImage_UserConfiguration(floorplan_div);
	cvjs_addFixedSizeCustomSpaceObject(floorplan_div, cvjs_loadSpaceImage_Location, cvjs_loadSpaceImage_ID , cvjs_loadSpaceImage_ID, cvjs_loadSpaceImage_Type, "");

}


// 4.1.02i
/**
 * Add a Drag Size Size Image Space Object
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */
  
function cvjs_addDragRectangleImageSpaceObject(floorplan_div){

	cvjs_loadSpaceImage_UserConfiguration(floorplan_div);
	cvjs_addRectangleCustomSpaceObject(floorplan_div, cvjs_loadSpaceImage_Location, cvjs_loadSpaceImage_ID , cvjs_loadSpaceImage_ID, cvjs_loadSpaceImage_Type, "");

}




/**
 * CADViewer Pro Initialization class, to be called as part of init of base version
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

function cvjs_initCADViewerPro_Section01(floorplan_div){


/// PAGE 1        TOOLTIPS
	if (cvjs_devMode)
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<map name=\"cvjsToolbarMap_p1_8"+"_"+floorplan_div+"\"><area id=\"previousIconPage_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\"  coords=\"6,5,20,20\" href=\"javascript:cvjs_changePreviousIconPage(\'"+floorplan_div+"\');\"/><area id=\"nextIconPage_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"41,5,56,20\" href=\"javascript:cvjs_changeNextIconPage(\'"+floorplan_div+"\');\"/><area id=\"layerList_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,29,29,53\" href=\"javascript:cvjs_LayerList();\"/><area id=\"print_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,29,57,53\" href=\"javascript:cvjs_Print(\""+floorplan_div+"\");\"/><area id=\"zoomin_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,57,29,80\" href=\"javascript:cvjs_zoomIn(\""+floorplan_div+"\");\"/><area id=\"zoomout_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,57,56,80\" href=\"javascript:cvjs_zoomOut();\"/><area id=\"zoomextents_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\"  coords=\"6,84,29,107\" href=\"javascript:cvjs_resetZoomPan();\"/><area id=\"zoomwindow_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"33,84,57,107\" onclick=\"cvjs_zoomWindow();\"  /><area id=\"toggle_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,111,29,135\" href=\"javascript:cvjs_toggleBlackWhite();\"/><area id=\"background_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,111,57,135\" href=\"javascript:cvjs_setBackgroundColor();\"/><area id=\"fileload_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,138,29,161\" href=\"javascript:cvjs_openFileLoadToServer();\"/><area id=\"search_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,138,56,161\" href=\"javascript:cvjs_interactiveSearchText();\"/><area id=\"about_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\"  coords=\"5,164,29,188\" href=\"javascript:cvjs_displayInformationModal_Mode(\'0\');\"/><area id=\"layeroff_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,164,56,188\" href=\"javascript:cvjs_interactiveLayerOff();\"/><area id=\"swap_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,191,29,216\" href=\"javascript:cvjs_swapLayersInDrawing();\"/><area id=\"alllayerson_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\"  coords=\"32,191,56,216\" href=\"javascript:cvjs_allLayersInDrawingOn();\"/><area id=\"measurement_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\"  coords=\"5,219,29,242\" href=\"javascript:cvjs_Measurement();\"/><area id=\"calibrate_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\"  coords=\"32,219,56,242\" href=\"javascript:cvjs_calibrateMeasurement();\"/><area id=\"bird_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\"  coords=\"5,246,29,269\" href=\"javascript:cvjs_displayMagnifyingGlass(\""+floorplan_div+"\");\"/><area area id=\"thickness_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\"  coords=\"32,246,56,269\" href=\"javascript:cvjs_activateLineThicknessModal();\"/></map>");
	else
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<map name=\"cvjsToolbarMap_p1_8"+"_"+floorplan_div+"\"><area id=\"previousIconPage_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\"  coords=\"6,5,20,20\" onclick=\"cvjs_changePreviousIconPage(\'"+floorplan_div+"\');\"/><area id=\"nextIconPage_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"41,5,56,20\" onclick=\"cvjs_changeNextIconPage(\'"+floorplan_div+"\');\"/><area id=\"layerList_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,29,29,53\" onclick=\"cvjs_LayerList(\'"+floorplan_div+"\');\"/><area id=\"print_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,29,57,53\" onclick=\"cvjs_Print(\'"+floorplan_div+"\');\"/><area id=\"zoomin_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,57,29,80\" onclick=\"cvjs_zoomIn(\'"+floorplan_div+"\');\"/><area id=\"zoomout_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,57,56,80\" onclick=\"cvjs_zoomOut(\'"+floorplan_div+"\');\"/><area id=\"zoomextents_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\"  coords=\"6,84,29,107\" onclick=\"cvjs_resetZoomPan(\'"+floorplan_div+"\');\"/><area id=\"zoomwindow_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"33,84,57,107\" onclick=\"cvjs_zoomWindow(\'"+floorplan_div+"\');\"  /><area id=\"toggle_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,111,29,135\" onclick=\"cvjs_toggleBlackWhite(\'"+floorplan_div+"\');\"/><area id=\"background_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,111,57,135\" onclick=\"cvjs_setBackgroundColor(\'"+floorplan_div+"\');\"/><area id=\"fileload_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,138,29,161\" onclick=\"cvjs_openFileLoadToServer(\'"+floorplan_div+"\');\"/><area id=\"search_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,138,56,161\" onclick=\"cvjs_interactiveSearchText(\'"+floorplan_div+"\');\"/><area id=\"about_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\"  coords=\"5,164,29,188\" onclick=\"cvjs_displayInformationModal_Mode(\'0\');\"/><area id=\"layeroff_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,164,56,188\" onclick=\"cvjs_interactiveLayerOff(\'"+floorplan_div+"\');\"/><area id=\"swap_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,191,29,216\" onclick=\"cvjs_swapLayersInDrawing(\'"+floorplan_div+"\');\"/><area id=\"alllayerson_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\"  coords=\"32,191,56,216\" onclick=\"cvjs_allLayersInDrawingOn(\'"+floorplan_div+"\');\"/><area id=\"measurement_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\"  coords=\"5,219,29,242\" onclick=\"cvjs_Measurement(\'"+floorplan_div+"\');\"/><area id=\"calibrate_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\"  coords=\"32,219,56,242\" onclick=\"cvjs_calibrateMeasurement(\'"+floorplan_div+"\');\"/><area id=\"bird_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\"  coords=\"5,246,29,269\" onclick=\"cvjs_displayMagnifyingGlass(\'"+floorplan_div+"\');\"/><area area id=\"thickness_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\"  coords=\"32,246,56,269\" onclick=\"cvjs_activateLineThicknessModal(\'"+floorplan_div+"\');\"/></map>");


	jQuery('#previousIconPage_p1_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "previousIconPage_p1_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
						
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.PreviousPage);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top-12);
		});

	jQuery('#previousIconPage_p1_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#nextIconPage_p1_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "nextIconPage_p1_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.NextPage);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+20).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top-12);
		});

	jQuery('#nextIconPage_p1_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#layerList_p1_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "layerList_p1_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);

			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.LayerList);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+15);
		});

	jQuery('#layerList_p1_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#print_p1_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "print_p1_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
	
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.Print);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+39);
		});

	jQuery('#print_p1_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#zoomin_p1_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "zoomin_p1_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			


			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.ZoomIn);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+41);
		});

	jQuery('#zoomin_p1_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#zoomout_p1_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "zoomout_p1_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
		
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.ZoomOut);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+66);
		});

	jQuery('#zoomout_p1_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#zoomextents_p1_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "zoomextents_p1_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
		
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.ZoomExtents);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+68);
		});

	jQuery('#zoomextents_p1_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#zoomwindow_p1_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "zoomwindow_p1_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
								
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.ZoomWindow);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+93);
		});

	jQuery('#zoomwindow_p1_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});



	jQuery('#toggle_p1_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "toggle_p1_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
						
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.Toggle);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+95);
		});

	jQuery('#toggle_p1_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#background_p1_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "background_p1_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.Background);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+120);
		});

	jQuery('#background_p1_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});



	jQuery('#fileload_p1_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "fileload_p1_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.FileLoad);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+122);
		});

	jQuery('#fileload_p1_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#search_p1_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "search_p1_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.Search);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+147);
		});

	jQuery('#search_p1_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#about_p1_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "about_p1_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.About);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+149);
		});

	jQuery('#about_p1_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#layeroff_p1_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "layeroff_p1_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.LayerOff);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+174);
		});

	jQuery('#layeroff_p1_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#swap_p1_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "swap_p1_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.SwapLayers);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+176);
		});

	jQuery('#swap_p1_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#alllayerson_p1_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "alllayerson_p1_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.AllLayersOn);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+201);
		});

	jQuery('#alllayerson_p1_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#measurement_p1_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "measurement_p1_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.Measurement);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+203);
		});

	jQuery('#measurement_p1_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#calibrate_p1_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "calibrate_p1_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.Calibrate);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+228);
		});

	jQuery('#calibrate_p1_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#bird_p1_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "bird_p1_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.BirdsEye);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+230);
		});

	jQuery('#bird_p1_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#thickness_p1_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "thickness_p1_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.LineThickness);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+255);
		});

	jQuery('#thickness_p1_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


/// PAGE 1 - END



/// PAGE 2        TOOLTIPS

	if (cvjs_devMode)
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<map name=\"cvjsToolbarMap_p2_8"+"_"+floorplan_div+"\"><area id=\"previousIconPage_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"6,5,20,20\" href=\"javascript:cvjs_changePreviousIconPage(\'"+floorplan_div+"\");\'/><area id=\"nextIconPage_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\"  coords=\"41,5,56,20\" href=\"javascript:cvjs_changeNextIconPage(\'"+floorplan_div+"\');\"/><area id=\"saveredline_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,29,29,53\" href=\"javascript:cvjs_saveStickyNotesRedlinesUser();\"/><area id=\"loadredline_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,29,57,53\" href=\"javascript:cvjs_loadStickyNotesRedlinesUser();\"/><area id=\"deletesingle_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,57,29,80\" href=\"javascript:cvjs_deleteSingleRedline();\"/><area id=\"deletelast_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,57,56,80\" href=\"javascript:cvjs_deleteLastRedline();\"/><area id=\"color_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"6,84,29,107\" href=\"javascript:cvjs_setRedlineColor();\"/><area id=\"thickness_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"33,84,57,107\" href=\"javascript:cvjs_setRedlineThickness();\"/><area id=\"stickynote_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,111,29,135\" href=\"javascript:cvjs_drawStickyNote();\"/><area id=\"clear_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,111,57,135\" href=\"javascript:cvjs_clearCurrentRedline("+floorplan_div+");\"/><area id=\"freehand_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,138,29,161\" href=\"javascript:cvjs_drawRedline_Freehand();\"/><area id=\"cloud_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,138,56,161\" href=\"javascript:cvjs_drawRedlineEllipseCloud();\"/><area id=\"filledpolygon_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,164,29,188\" href=\"javascript:cvjs_drawRedlineFilledPolygon();\"/><area id=\"polyline_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,164,56,188\" href=\"javascript:cvjs_drawRedlinePolyline();\"/><area id=\"filledrect_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,191,29,216\" href=\"javascript:cvjs_drawRedlineFilledRectangle();\"/><area id=\"rect_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,191,56,216\" href=\"javascript:cvjs_drawRedlineRectangle();\"/><area id=\"arrow_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,219,29,242\" href=\"javascript:cvjs_drawRedlineArrow();\"/><area id=\"text_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\"  coords=\"32,219,56,242\" href=\"javascript:cvjs_drawRedlineText();\"/><area id=\"extents_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,246,29,269\" href=\"javascript:cvjs_resetZoomPan();\"/><area id=\"zoomwindow_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,246,56,269\" href=\"javascript:cvjs_zoomWindow();\"/></map>");
	else
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<map name=\"cvjsToolbarMap_p2_8"+"_"+floorplan_div+"\"><area id=\"previousIconPage_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"6,5,20,20\" onclick=\"cvjs_changePreviousIconPage(\'"+floorplan_div+"\');\"/><area id=\"nextIconPage_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\"  coords=\"41,5,56,20\" onclick=\"cvjs_changeNextIconPage(\'"+floorplan_div+"\');\"/><area id=\"saveredline_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,29,29,53\" onclick=\"cvjs_saveStickyNotesRedlinesUser(\'"+floorplan_div+"\');\"/><area id=\"loadredline_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,29,57,53\" onclick=\"cvjs_loadStickyNotesRedlinesUser(\'"+floorplan_div+"\');\"/><area id=\"deletesingle_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,57,29,80\" onclick=\"cvjs_deleteSingleRedline(\'"+floorplan_div+"\');\"/><area id=\"deletelast_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,57,56,80\" onclick=\"cvjs_deleteLastRedline(\'"+floorplan_div+"\');\"/><area id=\"color_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"6,84,29,107\" onclick=\"cvjs_setRedlineColor(\'"+floorplan_div+"\');\"/><area id=\"thickness_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"33,84,57,107\" onclick=\"cvjs_setRedlineThickness(\'"+floorplan_div+"\');\"/><area id=\"stickynote_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,111,29,135\" onclick=\"cvjs_drawStickyNote(\'"+floorplan_div+"\');\"/><area id=\"clear_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,111,57,135\" onclick=\"cvjs_clearCurrentRedline(\'"+floorplan_div+"\');\"/><area id=\"freehand_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,138,29,161\" onclick=\"cvjs_drawRedline_Freehand(\'"+floorplan_div+"\');\"/><area id=\"cloud_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,138,56,161\" onclick=\"cvjs_drawRedlineEllipseCloud(\'"+floorplan_div+"\');\"/><area id=\"filledpolygon_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,164,29,188\" onclick=\"cvjs_drawRedlineFilledPolygon(\'"+floorplan_div+"\');\"/><area id=\"polyline_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,164,56,188\" onclick=\"cvjs_drawRedlinePolyline(\'"+floorplan_div+"\');\"/><area id=\"filledrect_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,191,29,216\" onclick=\"cvjs_drawRedlineFilledRectangle(\'"+floorplan_div+"\');\"/><area id=\"rect_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,191,56,216\" onclick=\"cvjs_drawRedlineRectangle(\'"+floorplan_div+"\');\"/><area id=\"arrow_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,219,29,242\" onclick=\"cvjs_drawRedlineArrow(\'"+floorplan_div+"\');\"/><area id=\"text_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\"  coords=\"32,219,56,242\" onclick=\"cvjs_drawRedlineText(\'"+floorplan_div+"\');\"/><area id=\"merge_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,246,29,269\" onclick=\"cvjs_mergeDXFDWG(\'"+floorplan_div+"\');\"/><area id=\"publishpdf_p2_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,246,56,269\" onclick=\"cvjs_publishPDF(\'"+floorplan_div+"\');\"/></map>");


	jQuery('#previousIconPage_p2_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "previousIconPage_p2_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.PreviousPage);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top-12);
		});

	jQuery('#previousIconPage_p2_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#nextIconPage_p2_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "nextIconPage_p2_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.NextPage);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+20).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top-12);
		});

	jQuery('#nextIconPage_p2_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#saveredline_p2_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "saveredline_p2_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.SaveRedline);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+15);
		});

	jQuery('#saveredline_p2_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#loadredline_p2_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "loadredline_p2_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.LoadRedline);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+39);
		});

	jQuery('#loadredline_p2_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#deletesingle_p2_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "deletesingle_p2_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.DeleteSingle);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+41);
		});

	jQuery('#deletesingle_p2_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#deletelast_p2_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "deletelast_p2_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.DeleteLast);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+66);
		});

	jQuery('#deletelast_p2_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#color_p2_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "color_p2_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.Color);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+68);
		});

	jQuery('#color_p2_8'+"_"+floorplan_div).mouseout(function()
		{

			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#thickness_p2_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "thickness_p2_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.Thickness);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+93);
		});

	jQuery('#thickness_p2_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});



	jQuery('#stickynote_p2_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "stickynote_p2_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.StickyNote);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+95);
		});

	jQuery('#stickynote_p2_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#clear_p2_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "clear_p2_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.ClearAll);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+120);
		});

	jQuery('#clear_p2_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});



	jQuery('#freehand_p2_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "freehand_p2_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.Freehand);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+122);
		});

	jQuery('#freehand_p2_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#cloud_p2_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "cloud_p2_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.Cloud);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+147);
		});

	jQuery('#cloud_p2_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#filledpolygon_p2_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "filledpolygon_p2_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.FilledPolygon);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+149);
		});

	jQuery('#filledpolygon_p2_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#polyline_p2_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "polyline_p2_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.Polyline);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+174);
		});

	jQuery('#polyline_p2_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#filledrect_p2_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "filledrect_p2_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.FilledRectangle);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+176);
		});

	jQuery('#filledrect_p2_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#rect_p2_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "rect_p2_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.Rectangle);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+201);
		});

	jQuery('#rect_p2_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#arrow_p2_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "arrow_p2_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.Arrow);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+203);
		});

	jQuery('#arrow_p2_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#text_p2_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "text_p2_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.Text);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+228);
		});

	jQuery('#text_p2_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#merge_p2_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "merge_p2_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.MergeAsDXF);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+230);
		});

	jQuery('#merge_p2_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#publishpdf_p2_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "publishpdf_p2_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.PublishAsPDF);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+255);
		});

	jQuery('#publishpdf_p2_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


/// PAGE 2       END


/// PAGE 3        TOOLTIPS

//	if (cvjs_devMode)
//		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<map name=\"cvjsToolbarMap_p3_8"+"_"+floorplan_div+"\"><area id=\"previousIconPage_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"6,5,20,20\" href=\"javascript:cvjs_changePreviousIconPage(\'"+floorplan_div+"\');\"/><area id=\"nextIconPage_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"41,5,56,20\" href=\"javascript:cvjs_changeNextIconPage(\'"+floorplan_div+"\');\"/><area id=\"loadlink_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,29,29,53\" href=\"javascript:cvjs_loadAllImageLinks();\"/><area id=\"insertlink_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,29,57,53\" href=\"javascript:cvjs_insertImageLink();\"/><area id=\"savelink_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,57,29,80\" href=\"javascript:cvjs_saveAllImageLinks();\"/><area id=\"clearlink_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,57,56,80\" href=\"javascript:cvjs_clearAllImageLinks();\"/><area id=\"quickcount_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"6,84,29,107\" href=\"javascript:cvjs_quickCount();\"/><area id=\"countsum_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"33,84,57,107\" href=\"javascript:cvjs_showMeCounts(\'"+floorplan_div+"\');\"/><area id=\"clearcount_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,111,29,135\" href=\"javascript:cvjs_clearQuickCounts();\"/><area id=\"free2_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,111,57,135\" href=\"javascript:cvjs_displayInformationModal_Mode(\'1\');\"/><area id=\"compare1_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,138,29,161\" href=\"javascript:cvjs_compareDrawings_LoadSecondDrawing();\"/><area id=\"compare3_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,138,56,161\" href=\"javascript:cvjs_compareDrawings_ToggleDrawings();\"/><area id=\"compare4_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,164,29,188\" href=\"javascript:cvjs_compareDrawings_ToggleDrawingOverlay();\"/><area id=\"compare5_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,164,56,188\" href=\"javascript:cvjs_exitCompareDrawings();\"/><area id=\"joincollab_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,191,29,216\" href=\"javascript:cvjs_start_collab();\"/><area id=\"makepresenter_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,191,56,216\" href=\"javascript:cvjs_make_collab_presenter();\"/><area id=\"clearcollab_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,219,29,242\" href=\"javascript:cvjs_clear_collab_redline();\"/><area id=\"stopcollab_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,219,56,242\" href=\"javascript:cvjs_stop_collab();\"/><area id=\"extents_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,246,29,269\" href=\"javascript:cvjs_resetZoomPan();\"/><area id=\"zoomwindow_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,246,56,269\" href=\"javascript:cvjs_zoomWindow();\"/></map>");
//	else
//		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<map name=\"cvjsToolbarMap_p3_8"+"_"+floorplan_div+"\"><area id=\"previousIconPage_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"6,5,20,20\" onclick=\"cvjs_changePreviousIconPage(\'"+floorplan_div+"\');\"/><area id=\"nextIconPage_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"41,5,56,20\" onclick=\"cvjs_changeNextIconPage(\'"+floorplan_div+"\');\"/><area id=\"loadlink_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,29,29,53\" onclick=\"cvjs_loadAllImageLinks(\'"+floorplan_div+"\');\"/><area id=\"insertlink_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,29,57,53\" onclick=\"cvjs_insertImageLink(\'"+floorplan_div+"\');\"/><area id=\"savelink_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,57,29,80\" onclick=\"cvjs_saveAllImageLinks(\'"+floorplan_div+"\');\"/><area id=\"clearlink_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,57,56,80\" onclick=\"cvjs_clearAllImageLinks(\'"+floorplan_div+"\');\"/><area id=\"quickcount_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"6,84,29,107\" onclick=\"cvjs_quickCount(\'"+floorplan_div+"\');\"/><area id=\"countsum_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"33,84,57,107\" onclick=\"cvjs_showMeCounts(\'"+floorplan_div+"\');\"/><area id=\"clearcount_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,111,29,135\" onclick=\"cvjs_clearQuickCounts(\'"+floorplan_div+"\');\"/><area id=\"free2_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,111,57,135\" onclick=\"cvjs_displayInformationModal_Mode(\'1\');\"/><area id=\"compare1_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,138,29,161\" onclick=\"cvjs_compareDrawings_LoadSecondDrawing(\'"+floorplan_div+"\');\"/><area id=\"compare3_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,138,56,161\" onclick=\"cvjs_compareDrawings_ToggleDrawings(\'"+floorplan_div+"\');\"/><area id=\"compare4_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,164,29,188\" onclick=\"cvjs_compareDrawings_ToggleDrawingOverlay(\'"+floorplan_div+"\');\"/><area id=\"compare5_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,164,56,188\" onclick=\"cvjs_exitCompareDrawings(\'"+floorplan_div+"\');\"/><area id=\"joincollab_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,191,29,216\" onclick=\"cvjs_start_collab(\'"+floorplan_div+"\');\"/><area id=\"makepresenter_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,191,56,216\" onclick=\"cvjs_make_collab_presenter(\'"+floorplan_div+"\');\"/><area id=\"clearcollab_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,219,29,242\" onclick=\"cvjs_clear_collab_redline(\'"+floorplan_div+"\');\"/><area id=\"stopcollab_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,219,56,242\" onclick=\"cvjs_stop_collab(\'"+floorplan_div+"\');\"/><area id=\"extents_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,246,29,269\" onclick=\"cvjs_resetZoomPan(\'"+floorplan_div+"\');\"/><area id=\"zoomwindow_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,246,56,269\" onclick=\"cvjs_zoomWindow(\'"+floorplan_div+"\');\"/></map>");


	
	jQuery("#cvjs_modals"+"_"+floorplan_div).append("<map name=\"cvjsToolbarMap_p3_8"+"_"+floorplan_div+"\"><area id=\"previousIconPage_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"6,5,20,20\" onclick=\"cvjs_changePreviousIconPage(\'"+floorplan_div+"\');\"/><area id=\"nextIconPage_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"41,5,56,20\" onclick=\"cvjs_changeNextIconPage(\'"+floorplan_div+"\');\"/><area id=\"loadlink_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,56,29,79\" onclick=\"cvjs_loadAllImageLinks(\'"+floorplan_div+"\');\"/><area id=\"insertlink_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,57,57,80\" onclick=\"cvjs_insertImageLink(\'"+floorplan_div+"\');\"/><area id=\"savelink_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,83,29,107\" onclick=\"cvjs_saveAllImageLinks(\'"+floorplan_div+"\');\"/><area id=\"clearlink_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,83,56,107\" onclick=\"cvjs_clearAllImageLinks(\'"+floorplan_div+"\');\"/><area id=\"quickcount_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,111,29,134\" onclick=\"cvjs_quickCount(\'"+floorplan_div+"\');\"/><area id=\"countsum_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"33,110,57,134\" onclick=\"cvjs_showMeCounts(\'"+floorplan_div+"\');\"/><area id=\"clearcount_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,136,29,161\" onclick=\"cvjs_clearQuickCounts(\'"+floorplan_div+"\');\"/><area id=\"free3_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,138,57,161\" onclick=\"cvjs_displayInformationModal_Mode(\'1\');\"/><area id=\"publishpdf_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,246,56,269\" onclick=\"cvjs_publishPDF(\'"+floorplan_div+"\');\"/><area id=\"free2_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,28,56,53\" onclick=\"cvjs_displayInformationModal_Mode(\'1\');\"/><area id=\"free4_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,164,29,188\" onclick=\"cvjs_displayInformationModal_Mode(\'1\');\"/><area id=\"free5_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,164,56,188\" onclick=\"cvjs_displayInformationModal_Mode(\'1\');\"/><area id=\"free6_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,191,29,216\" onclick=\"cvjs_displayInformationModal_Mode(\'1\');\"/><area id=\"free7_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,191,56,216\" onclick=\"cvjs_displayInformationModal_Mode(\'1\');\"/><area id=\"free8_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,219,29,242\" onclick=\"cvjs_displayInformationModal_Mode(\'1\');\"/><area id=\"free9_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,219,56,242\" onclick=\"cvjs_displayInformationModal_Mode(\'1\');\"/><area id=\"free10_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,246,29,269\" onclick=\"cvjs_displayInformationModal_Mode(\'1\');\"/><area id=\"free11_p3_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,28,29,53\" onclick=\"cvjs_displayInformationModal_Mode(\'1\');\"/></map>");
	
	
	
	
	jQuery('#previousIconPage_p3_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "previousIconPage_p3_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.PreviousPage);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top-12);
		});

	jQuery('#previousIconPage_p3_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#nextIconPage_p3_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "nextIconPage_p3_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.NextPage);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+20).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top-12);
		});

	jQuery('#nextIconPage_p3_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#loadlink_p3_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "loadlink_p3_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.LoadLink);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+41);
		});

	jQuery('#loadlink_p3_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#insertlink_p3_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "insertlink_p3_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.InsertLink);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+66);
		});

	jQuery('#insertlink_p3_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#savelink_p3_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "savelink_p3_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.SaveLink);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+68);
		});

	jQuery('#savelink_p3_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#clearlink_p3_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "clearlink_p3_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.ClearLink);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+93);
		});

	jQuery('#clearlink_p3_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});




	jQuery('#quickcount_p3_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "quickcount_p3_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.QuickCount);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+95);   // 95
		});

	jQuery('#quickcount_p3_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#countsum_p3_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "countsum_p3_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.CountSum);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+120);  // 120
		});

	jQuery('#countsum_p3_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});



	jQuery('#clearcount_p3_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "clearcount_p3_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.ClearCount);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+122);  // 122
		});

	jQuery('#clearcount_p3_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#publishpdf_p3_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "publishpdf_p3_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.PublishAsPDF);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+255);
			
																										// 0, 15
		});

	jQuery('#publishpdf_p3_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#free3_p3_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "free3_p3_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.Free);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+147);  // 93   // 68
		});

	jQuery('#free3_p3_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#free2_p3_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "free2_p3_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.Free);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+39);  // 93
		});

	jQuery('#free2_p3_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});



	jQuery('#free4_p3_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "free4_p3_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.Free);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+149);
		});

	jQuery('#free4_p3_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#free5_p3_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "free5_p3_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.Free);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+174);
		});

	jQuery('#free5_p3_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#free6_p3_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "free6_p3_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.Free);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+176);
		});

	jQuery('#free6_p3_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#free7_p3_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "free7_p3_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.CollaborationTakeControl);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+201);
		});

	jQuery('#free7_p3_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#free8_p3_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "free8_p3_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.Free);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+203);
		});

	jQuery('#free8_p3_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#free9_p3_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "free9_p3_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.Free);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+228);
		});

	jQuery('#free9_p3_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#free10_p3_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "free10_p3_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.Free);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+230);
		});

	jQuery('#free10_p3_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#free11_p3_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "free11_p3_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.Free);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+0).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+15);
		});

	jQuery('#free11_p3_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});
/// PAGE 3       END





/// PAGE 4        TOOLTIPS

//	if (cvjs_devMode)
//		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<map name=\"cvjsToolbarMap_p4_8"+"_"+floorplan_div+"\"><area id=\"previousIconPage_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"6,5,20,20\" href=\"javascript:cvjs_changePreviousIconPage(\'"+floorplan_div+"\');\"/><area id=\"nextIconPage_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"41,5,56,20\" href=\"javascript:cvjs_changeNextIconPage(\'"+floorplan_div+"\');\"/><area id=\"loadlink_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,29,29,53\" href=\"javascript:cvjs_loadAllImageLinks();\"/><area id=\"insertlink_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,29,57,53\" href=\"javascript:cvjs_insertImageLink();\"/><area id=\"savelink_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,57,29,80\" href=\"javascript:cvjs_saveAllImageLinks();\"/><area id=\"clearlink_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,57,56,80\" href=\"javascript:cvjs_clearAllImageLinks();\"/><area id=\"quickcount_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"6,84,29,107\" href=\"javascript:cvjs_quickCount();\"/><area id=\"countsum_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"33,84,57,107\" href=\"javascript:cvjs_showMeCounts(\'"+floorplan_div+"\');\"/><area id=\"clearcount_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,111,29,135\" href=\"javascript:cvjs_clearQuickCounts();\"/><area id=\"free2_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,111,57,135\" href=\"javascript:cvjs_displayInformationModal_Mode(\'1\');\"/><area id=\"compare1_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,138,29,161\" href=\"javascript:cvjs_compareDrawings_LoadSecondDrawing();\"/><area id=\"compare3_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,138,56,161\" href=\"javascript:cvjs_compareDrawings_ToggleDrawings();\"/><area id=\"compare4_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,164,29,188\" href=\"javascript:cvjs_compareDrawings_ToggleDrawingOverlay();\"/><area id=\"compare5_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,164,56,188\" href=\"javascript:cvjs_exitCompareDrawings();\"/><area id=\"joincollab_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,191,29,216\" href=\"javascript:cvjs_start_collab();\"/><area id=\"makepresenter_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,191,56,216\" href=\"javascript:cvjs_make_collab_presenter();\"/><area id=\"clearcollab_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,219,29,242\" href=\"javascript:cvjs_clear_collab_redline();\"/><area id=\"stopcollab_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,219,56,242\" href=\"javascript:cvjs_stop_collab();\"/><area id=\"extents_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,246,29,269\" href=\"javascript:cvjs_resetZoomPan();\"/><area id=\"zoomwindow_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,246,56,269\" href=\"javascript:cvjs_zoomWindow();\"/></map>");
//	else
//		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<map name=\"cvjsToolbarMap_p4_8"+"_"+floorplan_div+"\"><area id=\"previousIconPage_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"6,5,20,20\" onclick=\"cvjs_changePreviousIconPage(\'"+floorplan_div+"\');\"/><area id=\"nextIconPage_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"41,5,56,20\" onclick=\"cvjs_changeNextIconPage(\'"+floorplan_div+"\');\"/><area id=\"loadlink_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,29,29,53\" onclick=\"cvjs_loadAllImageLinks(\'"+floorplan_div+"\');\"/><area id=\"insertlink_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,29,57,53\" onclick=\"cvjs_insertImageLink(\'"+floorplan_div+"\');\"/><area id=\"savelink_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,57,29,80\" onclick=\"cvjs_saveAllImageLinks(\'"+floorplan_div+"\');\"/><area id=\"clearlink_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,57,56,80\" onclick=\"cvjs_clearAllImageLinks(\'"+floorplan_div+"\');\"/><area id=\"quickcount_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"6,84,29,107\" onclick=\"cvjs_quickCount(\'"+floorplan_div+"\');\"/><area id=\"countsum_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"33,84,57,107\" onclick=\"cvjs_showMeCounts(\'"+floorplan_div+"\');\"/><area id=\"clearcount_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,111,29,135\" onclick=\"cvjs_clearQuickCounts(\'"+floorplan_div+"\');\"/><area id=\"free2_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,111,57,135\" onclick=\"cvjs_displayInformationModal_Mode(\'1\');\"/><area id=\"compare1_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,138,29,161\" onclick=\"cvjs_compareDrawings_LoadSecondDrawing(\'"+floorplan_div+"\');\"/><area id=\"compare3_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,138,56,161\" onclick=\"cvjs_compareDrawings_ToggleDrawings(\'"+floorplan_div+"\');\"/><area id=\"compare4_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,164,29,188\" onclick=\"cvjs_compareDrawings_ToggleDrawingOverlay(\'"+floorplan_div+"\');\"/><area id=\"compare5_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,164,56,188\" onclick=\"cvjs_exitCompareDrawings(\'"+floorplan_div+"\');\"/><area id=\"joincollab_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,191,29,216\" onclick=\"cvjs_start_collab(\'"+floorplan_div+"\');\"/><area id=\"makepresenter_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,191,56,216\" onclick=\"cvjs_make_collab_presenter(\'"+floorplan_div+"\');\"/><area id=\"clearcollab_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,219,29,242\" onclick=\"cvjs_clear_collab_redline(\'"+floorplan_div+"\');\"/><area id=\"stopcollab_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,219,56,242\" onclick=\"cvjs_stop_collab(\'"+floorplan_div+"\');\"/><area id=\"extents_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,246,29,269\" onclick=\"cvjs_resetZoomPan(\'"+floorplan_div+"\');\"/><area id=\"zoomwindow_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,246,56,269\" onclick=\"cvjs_zoomWindow(\'"+floorplan_div+"\');\"/></map>");

	
	jQuery("#cvjs_modals"+"_"+floorplan_div).append("<map name=\"cvjsToolbarMap_p4_8"+"_"+floorplan_div+"\"><area id=\"previousIconPage_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"6,5,20,20\" onclick=\"cvjs_changePreviousIconPage(\'"+floorplan_div+"\');\"/><area id=\"nextIconPage_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"41,5,56,20\" onclick=\"cvjs_changeNextIconPage(\'"+floorplan_div+"\');\"/><area id=\"free3_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,138,29,161\" onclick=\"cvjs_displayInformationModal_Mode(\'1\');\"/><area id=\"free4_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,138,56,161\" onclick=\"cvjs_displayInformationModal_Mode(\'1\');\"/><area id=\"free5_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,164,29,188\" onclick=\"cvjs_displayInformationModal_Mode(\'1\');\"/><area id=\"free6_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,164,56,188\" onclick=\"cvjs_displayInformationModal_Mode(\'1\');\"/><area id=\"free7_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"6,84,29,107\" onclick=\"cvjs_displayInformationModal_Mode(\'1\');\"/><area id=\"free8_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"33,84,57,107\" onclick=\"cvjs_displayInformationModal_Mode(\'1\');\"/><area id=\"free9_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,111,29,135\" onclick=\"cvjs_displayInformationModal_Mode(\'1\');\"/><area id=\"free2_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,111,57,135\" onclick=\"cvjs_displayInformationModal_Mode(\'1\');\"/><area id=\"compare1_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,29,29,53\" onclick=\"cvjs_compareDrawings_LoadSecondDrawing(\'"+floorplan_div+"\');\"/><area id=\"compare3_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,29,57,53\" onclick=\"cvjs_compareDrawings_ToggleDrawings(\'"+floorplan_div+"\');\"/><area id=\"compare4_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,57,29,80\" onclick=\"cvjs_compareDrawings_ToggleDrawingOverlay(\'"+floorplan_div+"\');\"/><area id=\"compare5_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,57,56,80\" onclick=\"cvjs_exitCompareDrawings(\'"+floorplan_div+"\');\"/><area id=\"joincollab_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,191,29,216\" onclick=\"cvjs_start_collab(\'"+floorplan_div+"\');\"/><area id=\"makepresenter_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,191,56,216\" onclick=\"cvjs_make_collab_presenter(\'"+floorplan_div+"\');\"/><area id=\"clearcollab_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,219,29,242\" onclick=\"cvjs_clear_collab_redline(\'"+floorplan_div+"\');\"/><area id=\"stopcollab_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,219,56,242\" onclick=\"cvjs_stop_collab(\'"+floorplan_div+"\');\"/><area id=\"extents_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,246,29,269\" onclick=\"cvjs_resetZoomPan(\'"+floorplan_div+"\');\"/><area id=\"zoomwindow_p4_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,246,56,269\" onclick=\"cvjs_zoomWindow(\'"+floorplan_div+"\');\"/></map>");
		
	
	
	jQuery('#previousIconPage_p4_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "previousIconPage_p4_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.PreviousPage);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top-12);
		});

	jQuery('#previousIconPage_p4_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#nextIconPage_p4_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "nextIconPage_p4_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.NextPage);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+20).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top-12);
		});

	jQuery('#nextIconPage_p4_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#free3_p4_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "free3_p4_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.Free);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+122); // 122
		});

	jQuery('#free3_p4_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#free4_p4_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "free4_p4_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.Free);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+147);  //147
		});

	jQuery('#free4_p4_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#free5_p4_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "free5_p4_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.Free);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+149);  //149 41
		});

	jQuery('#free5_p4_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#free6_p4_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "free6_p4_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.Free);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+174);  // 174 66
		});

	jQuery('#free6_p4_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});




	jQuery('#free7_p4_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "free7_p4_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.Free);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+68);   // 95
		});

	jQuery('#free7_p4_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#free8_p4_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "free8_p4_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.Free);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+93);  // 120
		});

	jQuery('#free8_p4_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});



	jQuery('#free9_p4_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "free9_p4_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.ClearCount);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+95);  // 122
		});

	jQuery('#free9_p4_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#compare3_p4_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "compare3_p4_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.CompareToggle);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+39);  // 147
		});

	jQuery('#compare3_p4_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#compare1_p4_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "compare1_p4_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.CompareLoad);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+15) // 122;  // 93   // 68
		});

	jQuery('#compare1_p4_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#free2_p4_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "free2_p4_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.Free);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+120);  // 93
		});

	jQuery('#free2_p4_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});



	jQuery('#compare4_p4_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "compare4_p4_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.CompareToggleOverlay);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+41); //149 41
		});

	jQuery('#compare4_p4_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#compare5_p4_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "compare5_p4_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.CompareExit);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+66); //174 66
		});

	jQuery('#compare5_p4_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#joincollab_p4_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "joincollab_p4_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.CollaborationJoinSession);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+176);
		});

	jQuery('#joincollab_p4_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#makepresenter_p4_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "makepresenter_p4_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.CollaborationTakeControl);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+201);
		});

	jQuery('#makepresenter_p4_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#clearcollab_p4_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "clearcollab_p4_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.CollaborationClearSession);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+203);
		});

	jQuery('#clearcollab_p4_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#stopcollab_p4_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "stopcollab_p4_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.CollaborationLeaveSession);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+228);
		});

	jQuery('#stopcollab_p4_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#extents_p4_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "extents_p4_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.ZoomExtents);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+230);
		});

	jQuery('#extents_p4_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#zoomwindow_p4_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "zoomwindow_p4_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
			
			
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.ZoomWindow);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+255);
		});

	jQuery('#zoomwindow_p4_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});
/// PAGE 4      END




/// PAGE 5        TOOLTIPS

	if (cvjs_devMode)
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<map name=\"cvjsToolbarMap_p5_8"+"_"+floorplan_div+"\"><area id=\"previousIconPage_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"6,5,20,20\" href=\"javascript:cvjs_changePreviousIconPage(\'"+floorplan_div+"\');\"/><area id=\"nextIconPage_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"41,5,56,20\" href=\"javascript:cvjs_changeNextIconPage(\'"+floorplan_div+"\');\"/><area id=\"settings_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,29,29,53\" href=\"javascript:cvjs_spaceObjectSettings();\"/><area id=\"mode_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,29,57,53\" href=\"javascript:cvjs_changeSpaceObjectDisplayMode();\"/><area id=\"load_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,57,29,80\" href=\"javascript:cvjs_loadDrawingsWithSpaceObjects();\"/><area id=\"layerlist_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,57,56,80\" href=\"javascript:cvjs_LayerListSpaceObject();\"/><area id=\"rect_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"6,84,29,107\" href=\"javascript:cvjs_addRectangleSpaceObject();\"/><area id=\"polygon_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"33,84,57,107\" href=\"javascript:cvjs_addPolygonSpaceObject();\"/><area id=\"circle_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,111,29,135\" href=\"javascript:cvjs_addCircleSpaceObject();\"/><area id=\"copycircle_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,111,57,135\" href=\"javascript:cvjs_copyCircleSpaceObject();\"/><area id=\"delete_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,138,29,161\" href=\"javascript:cvjs_deleteSpaceObject();\"/><area id=\"selectpolygon_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,138,56,161\" href=\"javascript:cvjs_setSpacePolygonOnLayer();\"/><area id=\"publish_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,164,29,188\" href=\"javascript: cvjs_displaySpaceObjectsStructure();\"/><area id=\"free1_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,164,56,188\" href=\"javascript:cvjs_displayInformationModal_Mode(\'1\');\"/><area id=\"free2_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,191,29,216\" href=\"javascript:cvjs_displayInformationModal_Mode(\'1\');\"/><area id=\"layeroff_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,191,56,216\" href=\"javascript:cvjs_interactiveLayerOff();\"/><area id=\"swap_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,219,29,242\" href=\"javascript:cvjs_swapLayersInDrawing();\"/><area id=\"alllayerson_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,219,56,242\" href=\"javascript:cvjs_allLayersInDrawingOn();\"/><area id=\"zoomextents_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,246,29,269\" href=\"javascript:cvjs_resetZoomPan();\"/><area id=\"zoomwindow_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,246,56,269\" href=\"javascript:cvjs_zoomWindow();\"/></map>");
	else
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<map name=\"cvjsToolbarMap_p5_8"+"_"+floorplan_div+"\"><area id=\"previousIconPage_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"6,5,20,20\" onclick=\"cvjs_changePreviousIconPage(\'"+floorplan_div+"\');\"/><area id=\"nextIconPage_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"41,5,56,20\" onclick=\"cvjs_changeNextIconPage(\'"+floorplan_div+"\');\"/><area id=\"settings_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,29,29,53\" onclick=\"cvjs_spaceObjectSettings(\'"+floorplan_div+"\');\"/><area id=\"mode_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,29,57,53\" onclick=\"cvjs_changeSpaceObjectDisplayMode(\'"+floorplan_div+"\');\"/><area id=\"load_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,57,29,80\" onclick=\"cvjs_loadDrawingsWithSpaceObjects(\'"+floorplan_div+"\');\"/><area id=\"layerlist_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,57,56,80\" onclick=\"cvjs_LayerListSpaceObject(\'"+floorplan_div+"\');\"/><area id=\"rect_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"6,84,29,107\" onclick=\"cvjs_addRectangleSpaceObject(\'"+floorplan_div+"\');\"/><area id=\"polygon_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"33,84,57,107\" onclick=\"cvjs_addPolygonSpaceObject(\'"+floorplan_div+"\');\"/><area id=\"circle_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,111,29,135\" onclick=\"cvjs_addCircleSpaceObject(\'"+floorplan_div+"\');\"/><area id=\"copycircle_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,111,57,135\" onclick=\"cvjs_copyCircleSpaceObject(\'"+floorplan_div+"\');\"/><area id=\"delete_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,138,29,161\" onclick=\"cvjs_deleteSpaceObject(\'"+floorplan_div+"\');\"/><area id=\"selectpolygon_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,138,56,161\" onclick=\"cvjs_setSpacePolygonOnLayer(\'"+floorplan_div+"\');\"/><area id=\"publish_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,164,29,188\" onclick=\" cvjs_displaySpaceObjectsStructure(\'"+floorplan_div+"\');\"/><area id=\"downloadsvg_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,164,56,188\" onclick=\"cvjs_saveAsSVG(\'"+floorplan_div+"\');\"/><area id=\"free2_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,191,29,216\" onclick=\"cvjs_displayInformationModal_Mode(\'1\');\"/><area id=\"layeroff_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,191,56,216\" onclick=\"cvjs_interactiveLayerOff(\'"+floorplan_div+"\');\"/><area id=\"swap_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,219,29,242\" onclick=\"cvjs_swapLayersInDrawing(\'"+floorplan_div+"\');\"/><area id=\"alllayerson_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,219,56,242\" onclick=\"cvjs_allLayersInDrawingOn(\'"+floorplan_div+"\');\"/><area id=\"zoomextents_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"5,246,29,269\" onclick=\"cvjs_resetZoomPan(\'"+floorplan_div+"\');\"/><area id=\"zoomwindow_p5_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" coords=\"32,246,56,269\" onclick=\"cvjs_zoomWindow(\'"+floorplan_div+"\');\"/></map>");


	jQuery('#previousIconPage_p5_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "previousIconPage_p5_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);
						
		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.PreviousPage);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top-12);
		});

	jQuery('#previousIconPage_p5_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#nextIconPage_p5_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "nextIconPage_p5_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);


		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.NextPage);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+20).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top-12);
		});

	
	jQuery('#publish_p5_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "publish_p5_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);


		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Publish);
			tip[cvjs_active_floorplan_div_nr].show();
//			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+5);
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+134);
		});

	jQuery('#publish_p5_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#load_p5_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "load_p5_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);


		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Load);
			tip[cvjs_active_floorplan_div_nr].show();
//			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+39);
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+41);
		});

	jQuery('#load_p5_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#settings_p5_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "settings_p5_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);


		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Settings);
			tip[cvjs_active_floorplan_div_nr].show();
//			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+41);
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+12);
		});

	jQuery('#settings_p5_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#selectobject_p5_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "selectobject_p5_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);


		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.SelectObject);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+66);
		});

	jQuery('#selectobject_p5_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#rect_p5_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "rect_p5_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);


		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Rect);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+68);
		});

	jQuery('#rect_p5_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#polygon_p5_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "polygon_p5_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);


		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Polygon);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+93);
		});

	jQuery('#polygon_p5_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});



	jQuery('#circle_p5_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "circle_p5_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);


		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Circle);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+95);
		});

	jQuery('#circle_p5_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#copycircle_p5_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "copycircle_p5_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);


		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.CopyCircle);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+120);
		});

	jQuery('#copycircle_p5_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});



	jQuery('#delete_p5_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplad_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "delete_p5_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);


		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Delete);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+122);
		});

	jQuery('#delete_p5_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#layerlist_p5_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "layerlist_p5_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);


		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.LayerList);
			tip[cvjs_active_floorplan_div_nr].show();
//			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+147);
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+66);

		});

	jQuery('#layerlist_p5_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#mode_p5_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "mode_p5_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);


		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Mode);
			tip[cvjs_active_floorplan_div_nr].show();
//			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+134);
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+39);
		});

	jQuery('#mode_p5_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#selectpolygon_p5_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "selectpolygon_p5_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);


		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.SelectPolygon);
			tip[cvjs_active_floorplan_div_nr].show();
//			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+174);
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+147);

		});

	jQuery('#selectpolygon_p5_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});

		
		
	jQuery('#nextIconPage_p5_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});

		
	jQuery('#downloadsvg_p5_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "downloadsvg_p5_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);


		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.DownloadSVG);
			tip[cvjs_active_floorplan_div_nr].show();
//			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+5);
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+174);
		});

	jQuery('#downloadsvg_p5_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});

		
		
		

	jQuery('#free1_p5_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "free1_p5_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);


		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Free);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+174);
		});

	jQuery('#free1_p5_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});



	jQuery('#free2_p5_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "free2_p5_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);


		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Free);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+176);
		});

	jQuery('#free2_p5_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#layeroff_p5_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "layeroff_p5_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);


		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.LayerOff);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+201);
		});

	jQuery('#layeroff_p5_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#swap_p5_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "swap_p5_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);


		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.SwapLayers);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+203);
		});

	jQuery('#swap_p5_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#alllayerson_p5_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "alllayerson_p5_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);


		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.AllLayersOn);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+228);
		});

	jQuery('#alllayerson_p5_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#zoomextents_p5_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "zoomextents_p5_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);


		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.ZoomExtents);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+230);
		});

	jQuery('#zoomextents_p5_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});


	jQuery('#zoomwindow_p5_8'+"_"+floorplan_div).mouseover(function()
		{
			try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
			var thisDiv = "zoomwindow_p5_8";
			var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
			//console.log(thisFloorplan);
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
			//console.log(cvjs_active_floorplan_div_nr);


		  	jQuery(this).css('cursor','pointer'); tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});					
			tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.ZoomWindow);
			tip[cvjs_active_floorplan_div_nr].show();
			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+73).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+255);
		});

	jQuery('#zoomwindow_p5_8'+"_"+floorplan_div).mouseout(function()
		{
			tip[cvjs_active_floorplan_div_nr].hide();
		});

/// PAGE 5       END

	//icon interface when pagechange model is hidden
	jQuery("#cvjs_modals"+"_"+floorplan_div).append("<map name=\"cvjsToolbarMap_p1\"><area shape=\"rect\" alt=\"\" title=\"Previous Icon Page\" coords=\"6,5,20,20\" href=\"javascript:cvjs_changePreviousIconPage(\""+floorplan_div+"\");\"/><area shape=\"rect\" alt=\"\" title=\"Next Icon Page\" coords=\"41,5,56,20\" href=\"javascript:cvjs_changeNextIconPage(\""+floorplan_div+"\");\"/><area shape=\"rect\" alt=\"\" title=\"Layer List\" coords=\"5,29,29,53\" href=\"javascript:cvjs_LayerList();\"/><area shape=\"rect\" alt=\"\" title=\"Print\" coords=\"32,29,57,53\" href=\"javascript:cvjs_Print();\"/><area shape=\"rect\" alt=\"\" title=\"Zoom In\" coords=\"5,57,29,80\" href=\"javascript:cvjs_zoomIn(\""+floorplan_div+"\");\"/><area shape=\"rect\" alt=\"\" title=\"Zoom Out\" coords=\"32,57,56,80\" href=\"javascript:cvjs_zoomOut();\"/><area shape=\"rect\" alt=\"\" title=\"Zoom Extents\" coords=\"6,84,29,107\" href=\"javascript:cvjs_resetZoomPan();\"/><area shape=\"rect\" alt=\"\" title=\"Zoom Window\" coords=\"33,84,57,107\" href=\"javascript:cvjs_zoomWindow();\"/><area shape=\"rect\" alt=\"\" title=\"About\" coords=\"5,111,29,135\" href=\"javascript:cvjs_displayInformationModal_Mode(\'0\');\"/><area shape=\"rect\" alt=\"\" title=\"Background Color\" coords=\"32,111,57,135\" href=\"javascript:cvjs_setBackgroundColor();\"/><area shape=\"rect\" alt=\"\" title=\"File Load\" coords=\"5,138,29,161\" href=\"javascript:cvjs_openFileLoadToServer();\"/><area shape=\"rect\" alt=\"\" title=\"Search Text\" coords=\"32,138,56,161\" href=\"javascript:cvjs_interactiveSearchText();\"/><area shape=\"rect\" alt=\"\" title=\"Free\" coords=\"5,164,29,188\" href=\"javascript:cvjs_displayInformationModal_Mode(\'1');\"/><area shape=\"rect\" alt=\"\" title=\"Layer Off\" coords=\"32,164,56,188\" href=\"javascript:cvjs_interactiveLayerOff();\"/><area shape=\"rect\" alt=\"\" title=\"Swap Layers\" coords=\"5,191,29,216\" href=\"javascript:cvjs_swapLayersInDrawing();\"/><area shape=\"rect\" alt=\"\" title=\"All Layers On\" coords=\"32,191,56,216\" href=\"javascript:cvjs_allLayersInDrawingOn();\"/><area shape=\"rect\" alt=\"\" title=\"Measurement\" coords=\"5,219,29,242\" href=\"javascript:cvjs_Measurement();\"/><area shape=\"rect\" alt=\"\" title=\"Calibrate Measurement\" coords=\"32,219,56,242\" href=\"javascript:cvjs_calibrateMeasurement();\"/><area shape=\"rect\" alt=\"\" title=\"Load Previous Page\" coords=\"5,246,29,269\" href=\"javascript:cvjs_previousPage();\"/><area shape=\"rect\" alt=\"\" title=\"Load Next Page\" coords=\"32,246,56,269\" href=\"javascript:cvjs_nextPage();\"/><area shape=\"rect\" alt=\"\" title=\"Load First Page\" coords=\"5,273,29,297\" href=\"javascript:cvjs_firstPage();\"/><area shape=\"rect\" alt=\"\" title=\"Load Last Page\" coords=\"32,273,56,297\" href=\"javascript:cvjs_lastPage();\"/></map>");
	jQuery("#cvjs_modals"+"_"+floorplan_div).append("<map name=\"cvjsToolbarMap_p2\"><area shape=\"rect\" alt=\"\" title=\"Previous Icon Page\" coords=\"6,5,20,20\" href=\"javascript:cvjs_changePreviousIconPage(\""+floorplan_div+"\");\"/><area shape=\"rect\" alt=\"\" title=\"Next Icon Page\" coords=\"41,5,56,20\" href=\"javascript:cvjs_changeNextIconPage(\""+floorplan_div+"\");\"/><area shape=\"rect\" alt=\"\" title=\"Save Redline\" coords=\"5,29,29,53\" href=\"javascript:cvjs_saveStickyNotesRedlinesUser();\"/><area shape=\"rect\" alt=\"\" title=\"Load Redline\" coords=\"32,29,57,53\" href=\"javascript:cvjs_loadStickyNotesRedlinesUser();\"/><area shape=\"rect\" alt=\"\" title=\"Delete Single Redline\" coords=\"5,57,29,80\" href=\"javascript:cvjs_deleteSingleRedline();\"/><area shape=\"rect\" alt=\"\" title=\"Delete Last Redline\" coords=\"32,57,56,80\" href=\"javascript:cvjs_deleteLastRedline();\"/><area shape=\"rect\" alt=\"\" title=\"Redline Color\" coords=\"6,84,29,107\" href=\"javascript:cvjs_setRedlineColor();\"/><area shape=\"rect\" alt=\"\" title=\"Redline Thickness\" coords=\"33,84,57,107\" href=\"javascript:cvjs_setRedlineThickness();\"/><area shape=\"rect\" alt=\"\" title=\"Make Stickynote\" coords=\"5,111,29,135\" href=\"javascript:cvjs_drawStickyNote();\"/><area shape=\"rect\" alt=\"\" title=\"Free\" coords=\"32,111,57,135\" href=\"javascript:cvjs_displayInformationModal_Mode('1');\"/><area shape=\"rect\" alt=\"\" title=\"Freehand Redline\" coords=\"5,138,29,161\" href=\"javascript:cvjs_drawRedline_Freehand();\"/><area shape=\"rect\" alt=\"\" title=\"Redline Cloud\" coords=\"32,138,56,161\" href=\"javascript:cvjs_drawRedlineCloud();\"/><area shape=\"rect\" alt=\"\" title=\"Redline Filled Polygon\" coords=\"5,164,29,188\" href=\"javascript:cvjs_drawRedlineFilledPolygon();\"/><area shape=\"rect\" alt=\"\" title=\"Redline Polyline\" coords=\"32,164,56,188\" href=\"javascript:cvjs_drawRedlinePolyline();\"/><area shape=\"rect\" alt=\"\" title=\"Redline Filled Rectangle\" coords=\"5,191,29,216\" href=\"javascript:cvjs_drawRedlineFilledRectangle();\"/><area shape=\"rect\" alt=\"\" title=\"Redline Rectangle\" coords=\"32,191,56,216\" href=\"javascript:cvjs_drawRedlineRectangle();\"/><area shape=\"rect\" alt=\"\" title=\"Redline Arrow\" coords=\"5,219,29,242\" href=\"javascript:cvjs_drawRedlineArrow();\"/><area shape=\"rect\" alt=\"\" title=\"Redline Text\" coords=\"32,219,56,242\" href=\"javascript:cvjs_drawRedlineText();\"/><area shape=\"rect\" alt=\"\" title=\"Load Previous Page\" coords=\"5,246,29,269\" href=\"javascript:cvjs_previousPage();\"/><area shape=\"rect\" alt=\"\" title=\"Load Next Page\" coords=\"32,246,56,269\" href=\"javascript:cvjs_nextPage();\"/><area shape=\"rect\" alt=\"\" title=\"Load First Page\" coords=\"5,273,29,297\" href=\"javascript:cvjs_firstPage();\"/><area shape=\"rect\" alt=\"\" title=\"Load Last Page\" coords=\"32,273,56,297\" href=\"javascript:cvjs_lastPage();\"/></map>");
	jQuery("#cvjs_modals"+"_"+floorplan_div).append("<map name=\"cvjsToolbarMap_p3\"><area shape=\"rect\" alt=\"\" title=\"Previous Icon Page\" coords=\"6,5,20,20\" href=\"javascript:cvjs_changePreviousIconPage(\""+floorplan_div+"\");\"/><area shape=\"rect\" alt=\"\" title=\"Next Icon Page\" coords=\"41,5,56,20\" href=\"javascript:cvjs_changeNextIconPage(\""+floorplan_div+"\");\"/><area shape=\"rect\" alt=\"\" title=\"Publish Space Object Structure\" coords=\"5,29,29,53\" href=\"javascript:cvjs_displaySpaceObjectsStructure();\"/><area shape=\"rect\" alt=\"\" title=\"Load Floorplan and create Space Objects\" coords=\"32,29,57,53\" href=\"javascript:cvjs_loadDrawingsWithSpaceObjects();\"/><area shape=\"rect\" alt=\"\" title=\"Settings\" coords=\"5,57,29,80\" href=\"javascript:cvjs_spaceObjectSettings();\"/><area shape=\"rect\" alt=\"\" title=\"Select Object\" coords=\"32,57,56,80\" href=\"javascript:cvjs_SelectSpaceObject();\"/><area shape=\"rect\" alt=\"\" title=\"Rectangle Space Object\" coords=\"6,84,29,107\" href=\"javascript:cvjs_addRectangleSpaceObject();\"/><area shape=\"rect\" alt=\"\" title=\"Polygon Space Object\" coords=\"33,84,57,107\" href=\"javascript:cvjs_addPolygonSpaceObject();\"/><area shape=\"rect\" alt=\"\" title=\"Circle Space Object\" coords=\"5,111,29,135\" href=\"javascript:cvjs_addCircleSpaceObject();\"/><area shape=\"rect\" alt=\"\" title=\"Copy Circle Space Object\" coords=\"32,111,57,135\" href=\"javascript:cvjs_copyCircleSpaceObject();\"/><area shape=\"rect\" alt=\"\" title=\"Delete Space Object\" coords=\"5,138,29,161\" href=\"javascript:cvjs_deleteSpaceObject();\"/><area shape=\"rect\" alt=\"\" title=\"Free\" coords=\"32,138,56,161\" href=\"javascript:cvjs_displayInformationModal_Mode(\'1\');\"/><area shape=\"rect\" alt=\"\" title=\"Layer List\" coords=\"5,164,29,188\" href=\"javascript:cvjs_LayerListSpaceObject();\"/><area shape=\"rect\" alt=\"\" title=\"Free\" coords=\"32,164,56,188\" href=\"javascript:cvjs_displayInformationModal_Mode(\'1\');\"/><area shape=\"rect\" alt=\"\" title=\"Free\" coords=\"5,191,29,216\" href=\"javascript:cvjs_displayInformationModal_Mode(\'1\');\"/><area shape=\"rect\" alt=\"\" title=\"Layer Off\" coords=\"32,191,56,216\" href=\"javascript:cvjs_interactiveLayerOff();\"/><area shape=\"rect\" alt=\"\" title=\"cvjs_swapLayersInDrawing()\" coords=\"5,219,29,242\" href=\"javascript:cvjs_swapLayersInDrawing();\"/><area shape=\"rect\" alt=\"\" title=\"All Layers On\" coords=\"32,219,56,242\" href=\"javascript:cvjs_allLayersInDrawingOn();\"/><area shape=\"rect\" alt=\"\" title=\"Load Previous Page\" coords=\"5,246,29,269\" href=\"javascript:cvjs_previousPage();\"/><area shape=\"rect\" alt=\"\" title=\"Load Next Page\" coords=\"32,246,56,269\" href=\"javascript:cvjs_nextPage();\"/><area shape=\"rect\" alt=\"\" title=\"Load First Page\" coords=\"5,273,29,297\" href=\"javascript:cvjs_firstPage();\"/><area shape=\"rect\" alt=\"\" title=\"Load Last Page\" coords=\"32,273,56,297\" href=\"javascript:cvjs_lastPage();\"/></map>");

	// modal interface when pagechange model is visible
	jQuery("#cvjs_modals"+"_"+floorplan_div).append("<map name=\"cvjsToolbarMap_p1_3\"><area shape=\"rect\" alt=\"\" title=\"Previous Icon Page\" coords=\"6,5,20,20\" href=\"javascript:cvjs_changePreviousIconPage(\""+floorplan_div+"\");\"/><area shape=\"rect\" alt=\"\" title=\"Next Icon Page\" coords=\"41,5,56,20\" href=\"javascript:cvjs_changeNextIconPage(\""+floorplan_div+"\");\"/><area shape=\"rect\" alt=\"\" title=\"Layer List\" coords=\"5,29,29,53\" href=\"javascript:cvjs_LayerList();\"/><area shape=\"rect\" alt=\"\" title=\"Print\" coords=\"32,29,57,53\" href=\"javascript:cvjs_Print();\"/><area shape=\"rect\" alt=\"\" title=\"Zoom In\" coords=\"5,57,29,80\" href=\"javascript:cvjs_zoomIn(\""+floorplan_div+"\");\"/><area shape=\"rect\" alt=\"\" title=\"Zoom Out\" coords=\"32,57,56,80\" href=\"javascript:cvjs_zoomOut();\"/><area shape=\"rect\" alt=\"\" title=\"Zoom Extents\" coords=\"6,84,29,107\" href=\"javascript:cvjs_resetZoomPan();\"/><area shape=\"rect\" alt=\"\" title=\"Zoom Window\" coords=\"33,84,57,107\" href=\"javascript:cvjs_zoomWindow();\"/><area shape=\"rect\" alt=\"\" title=\"About\" coords=\"5,111,29,135\" href=\"javascript:cvjs_displayInformationModal_Mode(\'0');\"/><area shape=\"rect\" alt=\"\" title=\"Background Color\" coords=\"32,111,57,135\" href=\"javascript:cvjs_setBackgroundColor();\"/><area shape=\"rect\" alt=\"\" title=\"File Load\" coords=\"5,138,29,161\" href=\"javascript:cvjs_openFileLoadToServer();\"/><area shape=\"rect\" alt=\"\" title=\"Search Text\" coords=\"32,138,56,161\" href=\"javascript:cvjs_interactiveSearchText();\"/><area shape=\"rect\" alt=\"\" title=\"Free\" coords=\"5,164,29,188\" href=\"javascript:cvjs_displayInformationModal_Mode(\'1\');\"/><area shape=\"rect\" alt=\"\" title=\"Layer Off\" coords=\"32,164,56,188\" href=\"javascript:cvjs_interactiveLayerOff();\"/><area shape=\"rect\" alt=\"\" title=\"Swap Layers\" coords=\"5,191,29,216\" href=\"javascript:cvjs_swapLayersInDrawing();\"/><area shape=\"rect\" alt=\"\" title=\"All Layers On\" coords=\"32,191,56,216\" href=\"javascript:cvjs_allLayersInDrawingOn();\"/><area shape=\"rect\" alt=\"\" title=\"Measurement\" coords=\"5,219,29,242\" href=\"javascript:cvjs_Measurement();\"/><area shape=\"rect\" alt=\"\" title=\"Calibrate Measurement\" coords=\"32,219,56,242\" href=\"javascript:cvjs_calibrateMeasurement();\"/><area shape=\"rect\" alt=\"\" title=\"Free\" coords=\"5,246,29,269\" href=\"javascript:cvjs_displayInformationModal_Mode(\'1');\"/><area shape=\"rect\" alt=\"\" title=\"Free\" coords=\"32,246,56,269\" href=\"javascript:cvjs_displayInformationModal_Mode(\'1\');\"/></map>");
	jQuery("#cvjs_modals"+"_"+floorplan_div).append("<map name=\"cvjsToolbarMap_p2_3\"><area shape=\"rect\" alt=\"\" title=\"Previous Icon Page\" coords=\"6,5,20,20\" href=\"javascript:cvjs_changePreviousIconPage(\""+floorplan_div+"\");\"/><area shape=\"rect\" alt=\"\" title=\"Next Icon Page\" coords=\"41,5,56,20\" href=\"javascript:cvjs_changeNextIconPage(\""+floorplan_div+"\");\"/><area shape=\"rect\" alt=\"\" title=\"Save Redline\" coords=\"5,29,29,53\" href=\"javascript:cvjs_saveStickyNotesRedlinesUser();\"/><area shape=\"rect\" alt=\"\" title=\"Load Redline\" coords=\"32,29,57,53\" href=\"javascript:cvjs_loadStickyNotesRedlinesUser();\"/><area shape=\"rect\" alt=\"\" title=\"Delete Single Redline\" coords=\"5,57,29,80\" href=\"javascript:cvjs_deleteSingleRedline();\"/><area shape=\"rect\" alt=\"\" title=\"Delete Last Redline\" coords=\"32,57,56,80\" href=\"javascript:cvjs_deleteLastRedline();\"/><area shape=\"rect\" alt=\"\" title=\"Redline Color\" coords=\"6,84,29,107\" href=\"javascript:cvjs_setRedlineColor();\"/><area shape=\"rect\" alt=\"\" title=\"Redline Thickness\" coords=\"33,84,57,107\" href=\"javascript:cvjs_setRedlineThickness();\"/><area shape=\"rect\" alt=\"\" title=\"Make Stickynote\" coords=\"5,111,29,135\" href=\"javascript:cvjs_drawStickyNote();\"/><area shape=\"rect\" alt=\"\" title=\"Free\" coords=\"32,111,57,135\" href=\"javascript:cvjs_displayInformationModal_Mode(\'1\');\"/><area shape=\"rect\" alt=\"\" title=\"Freehand Redline\" coords=\"5,138,29,161\" href=\"javascript:cvjs_drawRedline_Freehand();\"/><area shape=\"rect\" alt=\"\" title=\"Redline Cloud\" coords=\"32,138,56,161\" href=\"javascript:cvjs_drawRedlineCloud();\"/><area shape=\"rect\" alt=\"\" title=\"Redline Filled Polygon\" coords=\"5,164,29,188\" href=\"javascript:cvjs_drawRedlineFilledPolygon();\"/><area shape=\"rect\" alt=\"\" title=\"Redline Polyline\" coords=\"32,164,56,188\" href=\"javascript:cvjs_drawRedlinePolyline();\"/><area shape=\"rect\" alt=\"\" title=\"Redline Filled Rectangle\" coords=\"5,191,29,216\" href=\"javascript:cvjs_drawRedlineFilledRectangle();\"/><area shape=\"rect\" alt=\"\" title=\"Redline Rectangle\" coords=\"32,191,56,216\" href=\"javascript:cvjs_drawRedlineRectangle();\"/><area shape=\"rect\" alt=\"\" title=\"Redline Arrow\" coords=\"5,219,29,242\" href=\"javascript:cvjs_drawRedlineArrow();\"/><area shape=\"rect\" alt=\"\" title=\"Redline Text\" coords=\"32,219,56,242\" href=\"javascript:cvjs_drawRedlineText();\"/><area shape=\"rect\" alt=\"\" title=\"Free\" coords=\"5,246,29,269\" href=\"javascript:cvjs_displayInformationModal_Mode(\'1\');\"/><area shape=\"rect\" alt=\"\" title=\"Clear Visible Redlines\" coords=\"32,246,56,269\" href=\"javascript:cvjs_clearCurrentRedline();\"/></map>");
	jQuery("#cvjs_modals"+"_"+floorplan_div).append("<map name=\"cvjsToolbarMap_p3_3\"><area shape=\"rect\" alt=\"\" title=\"Previous Icon Page\" coords=\"6,5,20,20\" href=\"javascript:cvjs_changePreviousIconPage(\""+floorplan_div+"\");\"/><area shape=\"rect\" alt=\"\" title=\"Next Icon Page\" coords=\"41,5,56,20\" href=\"javascript:cvjs_changeNextIconPage(\""+floorplan_div+"\");\"/><area shape=\"rect\" alt=\"\" title=\"Publish Space Object Structure\" coords=\"5,29,29,53\" href=\"javascript:cvjs_displaySpaceObjectsStructure();\"/><area shape=\"rect\" alt=\"\" title=\"Load Floorplan and create Space Objects\" coords=\"32,29,57,53\" href=\"javascript:cvjs_loadDrawingsWithSpaceObjects();\"/><area shape=\"rect\" alt=\"\" title=\"Settings\" coords=\"5,57,29,80\" href=\"javascript:cvjs_spaceObjectSettings();\"/><area shape=\"rect\" alt=\"\" title=\"Select Object\" coords=\"32,57,56,80\" href=\"javascript:cvjs_SelectSpaceObject();\"/><area shape=\"rect\" alt=\"\" title=\"Rectangle Space Object\" coords=\"6,84,29,107\" href=\"javascript:cvjs_addRectangleSpaceObject();\"/><area shape=\"rect\" alt=\"\" title=\"Polygon Space Object\" coords=\"33,84,57,107\" href=\"javascript:cvjs_addPolygonSpaceObject();\"/><area shape=\"rect\" alt=\"\" title=\"Cirle Space Object\" coords=\"5,111,29,135\" href=\"javascript:cvjs_addCircleSpaceObject();\"/><area shape=\"rect\" alt=\"\" title=\"Copy Circle Space Object\" coords=\"32,111,57,135\" href=\"javascript:cvjs_copyCircleSpaceObject();\"/><area shape=\"rect\" alt=\"\" title=\"Delete Space Object\" coords=\"5,138,29,161\" href=\"javascript:cvjs_deleteSpaceObject();\"/><area shape=\"rect\" alt=\"\" title=\"Free\" coords=\"32,138,56,161\" href=\"javascript:cvjs_displayInformationModal_Mode(\'1\');\"/><area shape=\"rect\" alt=\"\" title=\"Layer List\" coords=\"5,164,29,188\" href=\"javascript:cvjs_LayerListSpaceObject();\"/><area shape=\"rect\" alt=\"\" title=\"Free\" coords=\"32,164,56,188\" href=\"javascript:cvjs_displayInformationModal_Mode(\'1\');\"/><area shape=\"rect\" alt=\"\" title=\"Free\" coords=\"5,191,29,216\" href=\"javascript:cvjs_displayInformationModal_Mode(\'1\');\"/><area shape=\"rect\" alt=\"\" title=\"Layer Off\" coords=\"32,191,56,216\" href=\"javascript:cvjs_interactiveLayerOff();\"/><area shape=\"rect\" alt=\"\" title=\"cvjs_swapLayersInDrawing()\" coords=\"5,219,29,242\" href=\"javascript:cvjs_swapLayersInDrawing();\"/><area shape=\"rect\" alt=\"\" title=\"All Layers On\" coords=\"32,219,56,242\" href=\"javascript:cvjs_allLayersInDrawingOn();\"/><area shape=\"rect\" alt=\"\" title=\"Free\" coords=\"5,246,29,269\" href=\"javascript:cvjs_displayInformationModal_Mode(\'1\');\"/><area shape=\"rect\" alt=\"\" title=\"Free\" coords=\"32,246,56,269\" href=\"javascript:cvjs_displayInformationModal_Mode(\'1\');\"/></map>");

	// modal interface when pagechange model is visible - update 08-11-2016, added new page for image uploads
//	jQuery("#cvjs_modals").append("<map name=\"cvjsToolbarMap_p1_8"+"_"+floorplan_div+"\"><area id=\"previousIconPage_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\"  coords=\"6,5,20,20\" href=\"javascript:cvjs_changePreviousIconPage(\""+floorplan_div+"\");\"/><area id=\"nextIconPage_p1_8"+"_"+floorplan_div+"\" shape=\"rect\" alt=\"\" title=\"Next Icon Page\" coords=\"41,5,56,20\" href=\"javascript:cvjs_changeNextIconPage(\""+floorplan_div+"\");\"/><area shape=\"rect\" alt=\"\" title=\"Layer List\" coords=\"5,29,29,53\" href=\"javascript:cvjs_LayerList();\"/><area shape=\"rect\" alt=\"\" title=\"Print\" coords=\"32,29,57,53\" href=\"javascript:cvjs_Print();\"/><area shape=\"rect\" alt=\"\" title=\"Zoom In\" coords=\"5,57,29,80\" href=\"javascript:cvjs_zoomIn(\""+floorplan_div+"\");\"/><area shape=\"rect\" alt=\"\" title=\"Zoom Out\" coords=\"32,57,56,80\" href=\"javascript:cvjs_zoomOut();\"/><area shape=\"rect\" alt=\"\" title=\"Zoom Extents\" coords=\"6,84,29,107\" href=\"javascript:cvjs_resetZoomPan();\"/><area shape=\"rect\" alt=\"\" title=\"Zoom Window\" coords=\"33,84,57,107\" href=\"javascript:cvjs_zoomWindow();\"/><area shape=\"rect\" alt=\"\" title=\"Toggle Black/White\" coords=\"5,111,29,135\" href=\"javascript:cvjs_toggleBlackWhite();\"/><area shape=\"rect\" alt=\"\" title=\"Background Color\" coords=\"32,111,57,135\" href=\"javascript:cvjs_setBackgroundColor();\"/><area shape=\"rect\" alt=\"\" title=\"File Load\" coords=\"5,138,29,161\" href=\"javascript:cvjs_openFileLoadToServer();\"/><area shape=\"rect\" alt=\"\" title=\"Search Text\" coords=\"32,138,56,161\" href=\"javascript:cvjs_interactiveSearchText();\"/><area shape=\"rect\" alt=\"\" title=\"About\" coords=\"5,164,29,188\" href=\"javascript:cvjs_displayInformationModal_Mode(\'0\');\"/><area shape=\"rect\" alt=\"\" title=\"Layer Off\" coords=\"32,164,56,188\" href=\"javascript:cvjs_interactiveLayerOff();\"/><area shape=\"rect\" alt=\"\" title=\"Swap Layers\" coords=\"5,191,29,216\" href=\"javascript:cvjs_swapLayersInDrawing();\"/><area shape=\"rect\" alt=\"\" title=\"All Layers On\" coords=\"32,191,56,216\" href=\"javascript:cvjs_allLayersInDrawingOn();\"/><area shape=\"rect\" alt=\"\" title=\"Measurement\" coords=\"5,219,29,242\" href=\"javascript:cvjs_Measurement();\"/><area shape=\"rect\" alt=\"\" title=\"Calibrate Measurement\" coords=\"32,219,56,242\" href=\"javascript:cvjs_calibrateMeasurement();\"/><area shape=\"rect\" alt=\"\" title=\"Toggle Birds-Eye Window\" coords=\"5,246,29,269\" href=\"javascript:cvjs_displayMagnifyingGlass();\"/><area shape=\"rect\" alt=\"\" title=\"Adjust Line Thickeness\" coords=\"32,246,56,269\" href=\"javascript:cvjs_activateLineThicknessModal();\"/></map>");

}

	
	
/**
 * CADViewer Pro Initialization class, to be called as part of init of base version
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

function cvjs_initCADViewerPro_Section02(floorplan_div){
	
	
	jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div id=\"cvjs_spaceObjectAdminSettings"+"_"+floorplan_div+"\"></div><div id=\"cvjs_spaceObjectInputPanel"+"_"+floorplan_div+"\"></div>");
	jQuery("#cvjs_spaceObjectAdminSettings"+"_"+floorplan_div).hide();   // 2017-12-07 - hidden
	jQuery("#cvjs_spaceObjectInputPanel"+"_"+floorplan_div).hide(); // 2017-12-07 - hidden

	jQuery("#cvjs_modals"+"_"+floorplan_div).append("<table id=\"floorPlanCanvasObjectSpace_table"+"_"+floorplan_div+"\"><tr><td><canvas id=\"floorPlanCanvasObjectSpace"+"_"+floorplan_div+"\" width=\"10\" height=\"10\"></canvas></td></tr></table>");


// 4.1.01b	
	jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div id=\"floatCompareDrawingMenu_"+floorplan_div+"\" class=\"compareDrawingbox1\"><div class=\"compareDrawingbox1Text1\" id=\"compareDrawingMenuText1_"+floorplan_div+"\">xxxxxxx</div><div class=\"compareDrawingbox1Text2\" id=\"compareDrawingMenuText2_"+floorplan_div+"\"></div></div>");	
	jQuery("#floatCompareDrawingMenu"+"_"+floorplan_div).css({'z-index': 2 });
	jQuery("#floatCompareDrawingMenu"+"_"+floorplan_div).css({display: 'block'});
	jQuery("#floatCompareDrawingMenu"+"_"+floorplan_div).css({position: 'absolute'});
	jQuery("#floatCompareDrawingMenu"+"_"+floorplan_div).css({overflow: 'visible'});
	jQuery("#floatCompareDrawingMenu"+"_"+floorplan_div).draggable();
	jQuery("#floatCompareDrawingMenu"+"_"+floorplan_div).hide();	

		
}		



/**
 * CADViewer Pro Initialization class, to be called as part of init of base version
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

function cvjs_initCADViewerPro_Section03(floorplan_div){



////////// COLLECT ALL PRO STUFF
// Down


		var cvjs_currentStickyNote_id = "x1";
		var stickynote = 1;
		

		var htitle = "<table width=\"100%\"><tr><td><a href=\"http://cadviewer.com\"><img src=\""+cvjs_imagesLocation+"logoJS.png\" border=\"2\" width=\"20\" height=\"20\" /></a></td><td cols=\"3\">"+"<td id=\"cvjs_imageObject\">imageObject</td>"+
			// 3.0.13g
			"<td class=\"cvjs_modal_header_insert_image_info_1\" id=\"imageNoteIcon3\" onclick=\"cvjs_add_image("+stickynote+");\"   onmouseover=\"javascript:cvjs_showIconnoteTip(\'"+languageTable.languages[cvjs_currentLanguage].ImageObjectModal.LoadImage+"\',3,"+stickynote+");\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" ><i class=\"fa fa-picture-o\"></i></td>"+
			"<td class=\"cvjs_modal_header_insert_image_info_1\" id=\"imageNoteIcon2\" onclick=\"cvjs_delete_image("+stickynote+");\"  onmouseover=\"javascript:cvjs_showIconnoteTip(\'"+languageTable.languages[cvjs_currentLanguage].ImageObjectModal.RemoveImageNote+"\',2,"+stickynote+");\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\"><i class=\"fa fa-trash-o\"></i></td>"+
	//		"<td class=\"cvjs_modal_header_insert_image_info_2\" id=\"imageNoteIcon1\" onclick=\"cvjs_hide_image_note("+stickynote+");\" ><i class=\"fa fa-times\"></i></td></tr>"+
			"<td class=\"cvjs_modal_header_insert_image_info_2\" id=\"imageNoteIcon1\" onclick=\"cvjs_hide_image_note("+stickynote+");\" onmouseover=\"javascript:cvjs_showIconnoteTip(\'"+languageTable.languages[cvjs_currentLanguage].ImageObjectModal.MinimizeImageNote+"\',1,"+stickynote+");\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\"><i class=\"fa fa-times\"></i></td></tr>"+
			
			"</table>";

		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div id=\"cvjs_floorPlanInsertImageEncapsulate_"+floorplan_div+"\"><table><tr><td><div id=\"cvjs_floorPlanInsertImageTop\">"+htitle+"</div></tr></td><tr><td><div id=\"cvjs_floorPlanInsertImage\"></div></td></tr></table></div>");


		cvjs_layerlistspaceModal_content = "<table class=\"layerListTable\" ><tr><td><div class=\"layerListHeader pagechangeListHeaderLayers\"><a class=\"modalIconLogo\" href=\"https://cadviewer.com\"><img class=\"cvjs_img\" src=\""+cvjs_imagesLocation+"logoJS.png\" /></a><div class=\"modalHeaderText\"  id=\"cvjs_layerListTextHeaderSpace\">"+languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.Header+"</div>"
//		cvjs_layerlistspaceModal_content = "<table class=\"layerListTable\" ><tr><td><div class=\"layerListHeader\"><a class=\"modalIconLogo\" href=\"https://cadviewer.com\"><img class=\"cvjs_img\" src=\""+cvjs_imagesLocation+"logoJS.png\" /></a><div class=\"modalHeaderText\"  id=\"cvjs_layerListTextHeaderSpace\">"+languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.Header+"</div>"
		+"<input class=\"cvjs_new_header_button\" type=\"button\" value=\"&times;\" onClick=\"cvjs_exit_layerlist_spaceobjects(\'"+floorplan_div+"\');\">"
//		+"<button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_exit_layerlist_spaceobjects(\'"+floorplan_div+"\');\">&times;<b class=\"top_bar_gray_underbar\">_</b></button>"
		+"</div></td></tr><tr><td><canvas id=\"dummy\" width=\"30\" height=\"8\"></canvas></td></tr><tr><td><canvas id=\"dummy\" width=\"30\" height=\"4\"></canvas><input id=\"cvjs_layer_search_space_field\" class=\"search cvjs_search\" placeholder=\""+languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.Search+"\" /><canvas id=\"dummy\" width=\"30\" height=\"4\"></canvas><button id=\"cvjs_layer_sort_button_space\" class=\"sort cvjs_sort\" data-sort=\"layer\">"+languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.Sort+"</button></td></tr><tr><td><canvas id=\"dummy\" width=\"30\" height=\"4\"></canvas></td></tr><tr><td><ul class=\"list cvjs_list\" id=\"layerlist_id_space\"></ul><canvas id=\"dummy\" width=\"30\" height=\"20\"></canvas><input id=\"cvjs_layer_settings_space_button1\" class=\"cvjs_input\" type=\"button_layer\" name=\"Button3\" value=\""+languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.AllLayerOn+"\" onClick=\"modal_all_layer_on_space();\" ><canvas id=\"dummy\" width=\"30\" height=\"20\"></canvas><input id=\"cvjs_layer_settings_space_button2\" class=\"cvjs_input\" type=\"button_layer\" name=\"Button3\" value=\""+languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.AllLayerOff+"\" onClick=\"modal_all_layer_off_space();\" ><canvas id=\"dummy\" width=\"30\" height=\"20\"></canvas><input id=\"cvjs_layer_settings_space_button3\" class=\"cvjs_input\" type=\"button_layer\" name=\"Button3\" value=\""+languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.SwapLayers+"\" onClick=\"modal_swap_layers_on_off_space();\" ></td></tr><tr><td><canvas id=\"dummy\" width=\"5\" height=\"4\"><></td></tr></table>";
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div id=\"layerListSpaceObject_"+floorplan_div+"\" class=\"cvjs_listwrapper\"></div>");
		jQuery("#layerListSpaceObject_"+floorplan_div).html(cvjs_layerlistspaceModal_content);



		cvjs_collabStartModal_content = "<table class=\"collabStartModalanguageTable\"><tr><td><div class=\"collabStartHeader\"><a class=\"modalIconLogo\" href=\"https://cadviewer.com\"><img class=\"cvjs_img\" src=\""+cvjs_imagesLocation+"logoJS.png\" /></a><div class=\"modalHeaderText\"  id=\"cvjs_CollabHeader\">"+languageTable.languages[cvjs_currentLanguage].CollaborationStartModal.Header+"</div>"

		+"<input class=\"cvjs_new_header_button\" type=\"button\" value=\"&times;\" onClick=\"cvjs_exit_layerlist_spaceobjects(\'"+floorplan_div+"\');\">"

		+"<input class=\"cvjs_new_header_button\" type=\"button\" value=\"&times;\" onClick=\"cvjs_exit_startcollabmodal(\'"+floorplan_div+"\');\">"
//		+"<button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_exit_startcollabmodal(\'"+floorplan_div+"\');\">&times;<b class=\"top_bar_gray_underbar\">_</b></button>"
		+"</div></td></tr><tr><td><br><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><font id=\"collab_start_text\">"+languageTable.languages[cvjs_currentLanguage].CollaborationStartModal.Session+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"mySession\" id=\"cvjs_collabSessionInput\" class=\"cvjs_input_collabStartModal\"><canvas id=\"dummy\" width=\"70\" height=\"5\"></canvas><input id=\"cvjs_collabStart_button\" type=\"button\" name=\"bPrint\" value=\""+languageTable.languages[cvjs_currentLanguage].CollaborationStartModal.OK+"\" onClick=\"cvjs_start_collab_button();\"><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td></tr></table>";
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div class=\"collabStartModal\" id=\"collabStartModal_"+floorplan_div+"\"></div>");
		jQuery("#collabStartModal_"+floorplan_div).html(cvjs_collabStartModal_content);

		jQuery( function() {
			jQuery("#collabStartModal_"+floorplan_div).draggable({
					containment: [ jQuery('#'+floorplan_div).position().left - cvjs_containmentModalLeft , jQuery('#'+floorplan_div).position().top - cvjs_containmentModalTop, jQuery('#'+floorplan_div).position().left+ jQuery('#'+floorplan_div).width()- jQuery("#collabStartModal_"+floorplan_div).width() + cvjs_containmentModalRight, jQuery('#'+floorplan_div).position().top + jQuery('#'+floorplan_div).height() - jQuery("#collabStartModal_"+floorplan_div).height() + cvjs_containmentModalBottom  ]
				})
		} );


		cvjs_redlineColorModal_content = "<table class=\"colorModalanguageTable\"><tr><td><div class=\"colorModalHeader\" id=\"colorModalHeader\"><a class=\"modalIconLogo\" href=\"https://cadviewer.com\"><img class=\"cvjs_img\" src=\""+cvjs_imagesLocation+"logoJS.png\" /></a><div class=\"modalHeaderText\"  id=\"cvjs_redlineColorHeader\">"+languageTable.languages[cvjs_currentLanguage].RedlineColorModal.Header+"</div>"
		+"<input class=\"cvjs_new_header_button\" type=\"button\" value=\"&times;\" onClick=\"cvjs_color_modal_hide(\'"+floorplan_div+"\');\">"
//		+"<button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_color_modal_hide(\'"+floorplan_div+"\');\">&times;<b class=\"top_bar_gray_underbar\">_</b></button>"
		+"</div></td></tr><tr><td><br><canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas><font id=\"cvjs_redline_color_pickcolor\">"+languageTable.languages[cvjs_currentLanguage].RedlineColorModal.PickColor+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input id=\"cvjs_colorPickerValue\" value=\"FF0000\" class=\"cvjs_inputRedlineColorModal jscolor {width:101, padding:10, shadow:false, borderWidth:0, backgroundColor:\'transparent\', insetColor:\'#000\',closable:true, closeText:'Close Color Picker!', onFineChange:\'cvjs_setRedlineColorFromPicker(this)\'}\"><canvas id=\"dummy\" width=\"20\" height=\"10\"></canvas><font id=\"cvjs_redline_color_selectcolor\">"+languageTable.languages[cvjs_currentLanguage].RedlineColorModal.SelectColor+"</font><canvas id=\"dummy\" width=\"20\" height=\"10\"></canvas><input class=\"radioColor1\" id=\"radioColor1_"+floorplan_div+"\" type=\"radio\" name=\"radioColor\" value=\"1\" checked=\"checked\"><img id=\"cvjs_radioColor1_img\" src=\""+cvjs_imagesLocation+"blue_color.png\" border=\"1\"/><label id=\"cvjs_radio1\" for=\"radio1\"><font id=\"cvjs_radio1_text_red\">"+languageTable.languages[cvjs_currentLanguage].RedlineColorModal.Blue+"</font></label><canvas id=\"dummy\" width=\"26\" height=\"10\"></canvas><input class=\"radioColor2\" id=\"radioColor2_"+floorplan_div+"\" type=\"radio\" name=\"radioColor\" value=\"2\"><img id=\"cvjs_radioColor2_img\" src=\""+cvjs_imagesLocation+"red_color.png\" border=\"1\"/><label id=\"cvjs_radio2\" for=\"radio2\"><font id=\"cvjs_radio2_text_red\">"+languageTable.languages[cvjs_currentLanguage].RedlineColorModal.Red+"</font></label></td></tr><tr><td><canvas id=\"dummy\" width=\"303\" height=\"10\"></canvas><input class=\"radioColor3\" id=\"radioColor3_"+floorplan_div+"\" type=\"radio\" name=\"radioColor\" value=\"3\"><img id=\"cvjs_radioColor3_img\" src=\""+cvjs_imagesLocation+"orange_color.png\" border=\"1\"/><label id=\"cvjs_radio3\" for=\"radio3\"><font id=\"cvjs_radio3_text_red\">"+languageTable.languages[cvjs_currentLanguage].RedlineColorModal.Orange+"</font></label><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input class=\"radioColor4\" id=\"radioColor4_"+floorplan_div+"\" type=\"radio\" name=\"radioColor\" value=\"4\"><img id=\"cvjs_radioColor4_img\" src=\""+cvjs_imagesLocation+"yellow_color.png\" border=\"1\"/><label id=\"cvjs_radio4\" for=\"radio4\"><font id=\"cvjs_radio4_text_red\">"+languageTable.languages[cvjs_currentLanguage].RedlineColorModal.Yellow+"</font></label></td></tr><tr><td><canvas id=\"dummy\" width=\"303\" height=\"10\"></canvas><input class=\"radioColor5\" id=\"radioColor5_"+floorplan_div+"\" type=\"radio\" name=\"radioColor\" value=\"5\"><img id=\"cvjs_radioColor5_img\" src=\""+cvjs_imagesLocation+"green_color.png\" border=\"1\"/><label id=\"cvjs_radio5\" for=\"radio5\"><font id=\"cvjs_radio5_text_red\">"+languageTable.languages[cvjs_currentLanguage].RedlineColorModal.Green+"</font></label><canvas id=\"dummy\" width=\"17\" height=\"10\"></canvas><input class=\"radioColor6\" id=\"radioColor6_"+floorplan_div+"\" type=\"radio\" name=\"radioColor\" value=\"6\"><img id=\"cvjs_radioColor6_img\" src=\""+cvjs_imagesLocation+"purple_color.png\" border=\"1\"/><label id=\"cvjs_radio6\" for=\"radio6\"><font id=\"cvjs_radio6_text_red\">"+languageTable.languages[cvjs_currentLanguage].RedlineColorModal.Purple+"</font></label></td></tr><tr><td><canvas id=\"dummy\" width=\"303\" height=\"10\"></canvas><input class=\"radioColor7\" id=\"radioColor7_"+floorplan_div+"\" type=\"radio\" name=\"radioColor\" value=\"7\"><img id=\"cvjs_radioColor7_img\" src=\""+cvjs_imagesLocation+"gray_color.png\" border=\"1\"/><label id=\"cvjs_radio7\" for=\"radio7\"><font id=\"cvjs_radio7_text_red\">"+languageTable.languages[cvjs_currentLanguage].RedlineColorModal.Gray+"</font></label><canvas id=\"dummy\" width=\"24\" height=\"10\"></canvas><input class=\"radioColor8\" id=\"radioColor8_"+floorplan_div+"\" type=\"radio\" name=\"radioColor\" value=\"8\"><img id=\"cvjs_radioColor8_img\" src=\""+cvjs_imagesLocation+"brown_color.png\" border=\"1\"/><label id=\"cvjs_radio8\" for=\"radio8\"><font id=\"cvjs_radio8_text_red\">"+languageTable.languages[cvjs_currentLanguage].RedlineColorModal.Brown+"</font></label> </td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input id=\"cvjs_redlinecolor_button\" type=\"button\" name=\"bPrint\" value=\""+languageTable.languages[cvjs_currentLanguage].RedlineColorModal.OK+"\" onClick=\"cvjs_setRedlineColorViaButton(\'"+floorplan_div+"\');\"><canvas id=\"dummy\" width=\"10\" height=\"10\"></td></tr></table>";
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div  class=\"colorModal\"  id=\"colorModal_"+floorplan_div+"\"></div>");
		jQuery("#colorModal_"+floorplan_div).html(cvjs_redlineColorModal_content);
			
			
		cvjs_redlineEllipseModal_content = "<table class=\"ellipseModalanguageTable\"><tr><td><div class=\"ellipseModalHeader\" id=\"ellipseModalHeader\"><a class=\"modalIconLogo\" href=\"https://cadviewer.com\"><img class=\"cvjs_img\" src=\""+cvjs_imagesLocation+"logoJS.png\" /></a><div class=\"modalHeaderText\"  id=\"cvjs_redlineEllipseHeader\">"+languageTable.languages[cvjs_currentLanguage].RedlineEllipseModal.Header+"</div>"
		+"<input class=\"cvjs_new_header_button\" type=\"button\" value=\"&times;\" onClick=\"cvjs_ellipse_modal_hide(\'"+floorplan_div+"\');\">"
//		+"<button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_ellipse_modal_hide(\'"+floorplan_div+"\');\">&times;<b class=\"top_bar_gray_underbar\">_</b></button>"
		+"</div></td></tr><tr><td><br><canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas><font id=\"cvjs_redline_ellipse_type\">"+languageTable.languages[cvjs_currentLanguage].RedlineEllipseModal.SelectType+"</font><canvas id=\"dummy\" width=\"20\" height=\"10\"></canvas><input class=\"radioEllipse1\" id=\"radioEllipse1_"+floorplan_div+"\" type=\"radio\" name=\"radioEllipse\" value=\"1\" checked=\"checked\"><label id=\"cvjs_ellipse1\" for=\"ellipse1\"><font id=\"cvjs_redline_ellipse_textellipse\">"+languageTable.languages[cvjs_currentLanguage].RedlineEllipseModal.Ellipse+"</font></label></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input class=\"radioEllipse2\" id=\"radioEllipse2_"+floorplan_div+"\" type=\"radio\" name=\"radioEllipse\" value=\"2\"><label id=\"cvjs_ellipse2\" for=\"radio2\"><font id=\"cvjs_redline_ellipse_textcloud\">"+languageTable.languages[cvjs_currentLanguage].RedlineEllipseModal.Cloud+"</font></label><canvas id=\"dummy\" width=\"10\" height=\"10\"></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input id=\"cvjs_ellipse_button\" type=\"button\" name=\"bPrint\" value=\""+languageTable.languages[cvjs_currentLanguage].RedlineEllipseModal.OK+"\" onClick=\"cvjs_drawEllipseViaButton(\'"+floorplan_div+"\');\"><canvas id=\"dummy\" width=\"10\" height=\"10\"></td></tr></table>";
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div  class=\"ellipseModal\"  id=\"ellipseModal_"+floorplan_div+"\"></div>");
		jQuery("#ellipseModal_"+floorplan_div).html(cvjs_redlineEllipseModal_content);

		jQuery("#ellipseModal_"+floorplan_div).hide();

		jQuery( function() {
			jQuery("#ellipseModal_"+floorplan_div).draggable({
					containment: [ jQuery('#'+floorplan_div).position().left - cvjs_containmentModalLeft , jQuery('#'+floorplan_div).position().top - cvjs_containmentModalTop, jQuery('#'+floorplan_div).position().left+ jQuery('#'+floorplan_div).width()- jQuery("#ellipseModal_"+floorplan_div).width() + cvjs_containmentModalRight, jQuery('#'+floorplan_div).position().top + jQuery('#'+floorplan_div).height() - jQuery("#ellipseModal_"+floorplan_div).height() + cvjs_containmentModalBottom  ]
				})
		} );

		// not multilanguate prepared!			
		cvjs_creationModeModal_content = "<table class=\"creationModalanguageTable\"><tr><td><div class=\"creationModalHeader\" id=\"creationModalHeader\"><a class=\"modalIconLogo\" href=\"https://cadviewer.com\"><img class=\"cvjs_img\" src=\""+cvjs_imagesLocation+"logoJS.png\" /></a><div class=\"modalHeaderText\"  id=\"cvjs_redlineEllipseHeader\">"+languageTable.languages[cvjs_currentLanguage].CreationModeModal.Header+"</div>"
		+"<input class=\"cvjs_new_header_button\" type=\"button\" value=\"&times;\" onClick=\"cvjs_creation_modal_hide(\'"+floorplan_div+"\');\">"
//		+"<button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_creation_modal_hide(\'"+floorplan_div+"\');\">&times;<b class=\"top_bar_gray_underbar\">_</b></button>"
		+"</div></td></tr><tr><td><br><canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas>"+languageTable.languages[cvjs_currentLanguage].CreationModeModal.SelectType+"<canvas id=\"dummy\" width=\"20\" height=\"10\"></canvas><input class=\"radioCreation1\" id=\"radioCreation1_"+floorplan_div+"\" type=\"radio\" name=\"radioCreation\" value=\"1\" checked=\"checked\"><label id=\"cvjs_ellipse1\" for=\"ellipse1\">"+languageTable.languages[cvjs_currentLanguage].CreationModeModal.DataSource+"</label></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input class=\"radioCreation2\" id=\"radioCreation2_"+floorplan_div+"\" type=\"radio\" name=\"radioCreation\" value=\"2\"><label id=\"cvjs_ellipse2\" for=\"radio2\">"+languageTable.languages[cvjs_currentLanguage].CreationModeModal.Manually+"</label><canvas id=\"dummy\" width=\"10\" height=\"10\"></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input id=\"cvjs_ellipse_button\" type=\"button\" name=\"bPrint\" value=\""+languageTable.languages[cvjs_currentLanguage].CreationModeModal.OK+"\" onClick=\"cvjs_creation_modal_show(\'"+floorplan_div+"\');\"><canvas id=\"dummy\" width=\"10\" height=\"10\"></td></tr></table>";
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div  class=\"creationModal\"  id=\"creationModeModal_"+floorplan_div+"\"></div>");
		jQuery("#creationModeModal_"+floorplan_div).html(cvjs_creationModeModal_content);
		jQuery("#collabStartModal_"+floorplan_div).hide();
		
		cvjs_mergeDXFModal_content = "<table class=\"mergeDXFModalanguageTable\"><tr><td><div class=\"mergeDXFModalHeader\" id=\"mergeDXFModalHeader\"><a class=\"modalIconLogo\" href=\"https://cadviewer.com\"><img class=\"cvjs_img\" src=\""+cvjs_imagesLocation+"logoJS.png\" /></a><div class=\"modalHeaderText\"  id=\"cvjs_mergeDXFHeader\">"+languageTable.languages[cvjs_currentLanguage].MergeDXFModal.Header+"</div>"
		+"<input class=\"cvjs_new_header_button\" type=\"button\" value=\""+"&times;"+"\" onClick=\"cvjs_mergeDXF_modal_hide(\'"+floorplan_div+"\');\">"
//		+"<button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_mergeDXF_modal_hide(\'"+floorplan_div+"\');\">&times;<b class=\"top_bar_gray_underbar\">_</b></button>"
		+"</div></td></tr><tr><td><br><br><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><font id=\"cvjs_publish_dxf_selectmode\">"+languageTable.languages[cvjs_currentLanguage].MergeDXFModal.SelectMode+"</font><canvas id=\"dummy\" width=\"20\" height=\"10\"></canvas><input class=\"radioMergeDXF1\" id=\"radioMergeAsDXF1_"+floorplan_div+"\" type=\"radio\" name=\"radioColor\" value=\"1\" checked=\"checked\"><label id=\"cvjs_mergedxfmode1\" for=\"radio1\">"+languageTable.languages[cvjs_currentLanguage].MergeDXFModal.Mode1+"</label><canvas id=\"dummy\" width=\"26\" height=\"10\"></canvas><input class=\"radioMergeDXF2\" id=\"radioMergeAsDXF2_"+floorplan_div+"\" type=\"radio\" name=\"radioColor\" value=\"2\"><label id=\"cvjs_mergedxfmode2\" for=\"radio2\">"+languageTable.languages[cvjs_currentLanguage].MergeDXFModal.Mode2+"</label><canvas id=\"dummy\" width=\"303\" height=\"10\"></canvas><input class=\"radioMergeDXF3\" id=\"radioMergeAsDXF3_"+floorplan_div+"\" type=\"radio\" name=\"radioColor\" value=\"3\"><label id=\"cvjs_mergedxfmode3\" for=\"radio3\">"+languageTable.languages[cvjs_currentLanguage].MergeDXFModal.Mode3+"</label></td></tr><tr id=\"mergeDXFModal_row2_"+floorplan_div+"\" ><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><font id=\"cvjs_entiredoc_checkbox_text_dxf\">"+languageTable.languages[cvjs_currentLanguage].MergeDXFModal.EntireDoc+"</font><input type=\"checkbox\" id=\"cvjs_entiredoc_checkbox\" value=\"grayscale_status\"></td></tr> <tr id=\"mergeDXFModal_row3_"+floorplan_div+"\" ><td></td></tr> <tr class=\"mergeDXFModal_row4\" id=\"mergeDXFModal_row4_"+floorplan_div+"\" ><td><table id=\"enter_email_content_table\">         <tr><td><canvas id=\"dummy\" width=\"10\" height=\"20\"></canvas><font id=\"cvjs_entiredoc_checkbox_text_recep_dxf\">"+languageTable.languages[cvjs_currentLanguage].MergeDXFModal.Recipient+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"email\" id=\"cvjs_mergeDXFemailrecipient_"+floorplan_div+"\" class=\"cvjs_mergeDXFemailrecipient\"></td></tr>        <tr><td><canvas id=\"dummy\" width=\"10\" height=\"20\"></canvas><font id=\"cvjs_entiredoc_checkbox_title_dxf\">"+languageTable.languages[cvjs_currentLanguage].MergeDXFModal.Title+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"title\" id=\"cvjs_mergeDXFemailtitle_"+floorplan_div+"\" class=\"cvjs_mergeDXFemailtitle\"></td></tr>                <tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas>    <table><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><font id=\"cvjs_entiredoc_checkbox_message_dxf\">"+languageTable.languages[cvjs_currentLanguage].MergeDXFModal.Message+"</font></td></tr><tr><td></td></tr></table>    <textarea class=\"cvjs_mergedxfmail_edit_text_1\" id=\"mergedxfmail_text\" cols=\"43\" rows=\"3\"></textarea></td></tr>                         </table></td></tr> <tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input id=\"cvjs_publish_redline_to_dxf_button\" type=\"button\" name=\"bPrint\" value=\""+languageTable.languages[cvjs_currentLanguage].MergeDXFModal.OK+"\" onClick=\"cvjs_mergeDXFViaButton(\'"+floorplan_div+"\');\"><canvas id=\"dummy\" width=\"10\" height=\"10\"></td></tr><tr></tr></table>";
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div  class=\"mergeDXFModal\"  id=\"mergeDXFModal_"+floorplan_div+"\"></div>");
		jQuery("#mergeDXFModal_"+floorplan_div).html(cvjs_mergeDXFModal_content);

		jQuery("#mergeDXFModal_"+floorplan_div).hide();

		jQuery( function() {
			jQuery("#mergeDXFModal_"+floorplan_div).draggable({
					containment: [ jQuery('#'+floorplan_div).position().left - cvjs_containmentModalLeft , jQuery('#'+floorplan_div).position().top - cvjs_containmentModalTop, jQuery('#'+floorplan_div).position().left+ jQuery('#'+floorplan_div).width()- jQuery("#colorModal_"+floorplan_div).width() + cvjs_containmentModalRight, jQuery('#'+floorplan_div).position().top + jQuery('#'+floorplan_div).height() - jQuery("#colorModal_"+floorplan_div).height() + cvjs_containmentModalBottom  ]
				})
		} );
		

		cvjs_redlineThicknessModal_content = "<table class=\"thicknessModalanguageTable\"><tr><td><div class=\"thicknessHeader\"><a class=\"modalIconLogo\" href=\"https://cadviewer.com\"><img class=\"cvjs_img\" src=\""+cvjs_imagesLocation+"logoJS.png\" /></a><div class=\"modalHeaderText\"  id=\"cvjs_redlineThicknessHeader\">"+languageTable.languages[cvjs_currentLanguage].RedlineThicknessModal.Header+"</div>"
		+"<input class=\"cvjs_new_header_button\" type=\"button\" value=\"&times;\" onClick=\"cvjs_exit_redlinethicknessmodal(\'"+floorplan_div+"\');\">"
//		+"<button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_exit_redlinethicknessmodal(\'"+floorplan_div+"\');\">&times;<b class=\"top_bar_gray_underbar\">_</b></button>"
		+"</div></td></tr><tr><td><br><canvas id=\"dummy\" width=\"10\" height=\"24\"></canvas><font id=\"cvjs_redline_thickness_thickness\">"+languageTable.languages[cvjs_currentLanguage].RedlineThicknessModal.Thickness+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"3\" id=\"cvjs_redlineThicknessInput_"+floorplan_div+"\" class=\"cvjs_inputThicknessModal\"><canvas id=\"dummy\" width=\"70\" height=\"5\"></canvas><input id=\"cvjs_thickness_button\" type=\"button\" name=\"bPrint\" value=\""+languageTable.languages[cvjs_currentLanguage].RedlineThicknessModal.OK+"\" onClick=\"cvjs_setRedlineThicknessViaButton(\'"+floorplan_div+"\');\"><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td></tr></table>";
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div class=\"thicknessModal\" id=\"thicknessModal_"+floorplan_div+"\"></div>");
		jQuery("#thicknessModal_"+floorplan_div).html(cvjs_redlineThicknessModal_content);
		
		jQuery("#thicknessModal_"+floorplan_div).hide();

		jQuery( function() {
			jQuery("#thicknessModal_"+floorplan_div).draggable({
					containment: [ jQuery('#'+floorplan_div).position().left - cvjs_containmentModalLeft , jQuery('#'+floorplan_div).position().top - cvjs_containmentModalTop, jQuery('#'+floorplan_div).position().left+ jQuery('#'+floorplan_div).width()- jQuery("#thicknessModal_"+floorplan_div).width() + cvjs_containmentModalRight, jQuery('#'+floorplan_div).position().top + jQuery('#'+floorplan_div).height() - jQuery("#thicknessModal_"+floorplan_div).height() + cvjs_containmentModalBottom  ]
				})
		} );


		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div id=\"imageObjectUpload_"+floorplan_div+"\"><input id=\"upfile_image\" type=\"file\" value=\"upload\" onchange=\"add_file_object_image(this)\"/></div>");
		jQuery("#imageObjectUpload_"+floorplan_div).hide();

		
		cvjs_redlinetextModal_content = "<table class=\"redlinetextModalanguageTable\"><tr><td><div class=\"redlinetextModalHeader\"><a class=\"modalIconLogo\" href=\"https://cadviewer.com\"><img class=\"cvjs_img\" src=\""+cvjs_imagesLocation+"logoJS.png\" /></a><div class=\"modalHeaderText\"  id=\"cvjs_redlineTextHeader\">"+languageTable.languages[cvjs_currentLanguage].RedlineTextModal.Header+"</div>"
		+"<input class=\"cvjs_new_header_button\" type=\"button\" value=\"&times;\" onClick=\"cvjs_hide_redline_text_modal(\'"+floorplan_div+"\');\">"
//		+"<button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_hide_redline_text_modal(\'"+floorplan_div+"\');\">&times;<b class=\"top_bar_gray_underbar\">_</b></button>"
		+"</div></td></tr><tr><td><br><canvas id=\"dummy\" width=\"10\" height=\"24\"></canvas><font id=\"cvjs_redline_text_fontsize\">"+languageTable.languages[cvjs_currentLanguage].RedlineTextModal.FontSize+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"11\" id=\"cvjs_redlineFontSizeInput_"+floorplan_div+"\" class=\"cvjs_inputRedlineTextModal\"><canvas id=\"dummy\" width=\"70\" height=\"5\"></canvas><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"76\"></canvas><textarea class=\"cvjs_redlines_edit_text_1\" id=\"redline_text\" cols=\"33\" rows=\"3\"></textarea><canvas id=\"dummy\" width=\"10\" height=\"5\"></canvas><input id=\"cvjs_redlinetext_button\" type=\"button\" name=\"bPrint\" value=\""+languageTable.languages[cvjs_currentLanguage].RedlineTextModal.OK+"\" onClick=\"cvjs_initiateInsertRedlineText(\'"+floorplan_div+"\');\"></td></tr><tr><td><div id=\"cvjs_calibrationModalText\"><canvas id=\"dummy\" width=\"0\" height=\"13\"></canvas><font id=\"cvjs_redline_text_inserttext\">"+languageTable.languages[cvjs_currentLanguage].RedlineTextModal.Text+"</font></div></td></tr></table>";
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div class=\"redlinetextModal\" id=\"redlinetextModal_"+floorplan_div+"\"></div>");
		jQuery("#redlinetextModal_"+floorplan_div).html(cvjs_redlinetextModal_content);


		jQuery( function() {
			jQuery("#cvjs_floorPlanInsertImageEncapsulate_"+floorplan_div).draggable({
					containment: [ jQuery('#'+floorplan_div).position().left - cvjs_containmentModalLeft , jQuery('#'+floorplan_div).position().top - cvjs_containmentModalTop, jQuery('#'+floorplan_div).position().left+ jQuery('#'+floorplan_div).width()- jQuery("#cvjs_floorPlanInsertImageEncapsulate_"+floorplan_div).width() + cvjs_containmentModalRight, jQuery('#'+floorplan_div).position().top + jQuery('#'+floorplan_div).height() - jQuery("#cvjs_floorPlanInsertImageEncapsulate_"+floorplan_div).height() + cvjs_containmentModalBottom  ]
				})
		} );

		
		// 3.3.01e
		jQuery("#cvjs_floorPlanInsertImageEncapsulate_"+floorplan_div).css("left", jQuery('#'+floorplan_div).position().left+50).css("top", jQuery('#'+floorplan_div).position().top+50);
		
		
		jQuery( "#cvjs_floorPlanInsertImageEncapsulate_"+floorplan_div ).hide();


		jQuery('#imageNoteIcon3_'+floorplan_div).mouseover(function()
			{
				tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].ImageObject.InsertReplace);
				tip[cvjs_active_floorplan_div_nr].show();
				tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#cvjs_floorPlanInsertImageEncapsulate_'+floorplan_div).position().left+490).css("top", jQuery('#cvjs_floorPlanInsertImageEncapsulate_'+floorplan_div).position().top-25);
			});


		jQuery('#imageNoteIcon2_'+floorplan_div).mouseover(function()
			{
				tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].ImageObject.Delete);
				tip[cvjs_active_floorplan_div_nr].show();
				tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#cvjs_floorPlanInsertImageEncapsulate_'+floorplan_div).position().left+500).css("top", jQuery('#cvjs_floorPlanInsertImageEncapsulate_'+floorplan_div).position().top-25);
			});


		jQuery('#imageNoteIcon1_'+floorplan_div).mouseover(function()
			{
				tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].ImageObject.Minimize);
				tip[cvjs_active_floorplan_div_nr].show();
				tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#cvjs_floorPlanInsertImageEncapsulate_'+floorplan_div).position().left+535).css("top", jQuery('#cvjs_floorPlanInsertImageEncapsulate_'+floorplan_div).position().top-25);
			});




		  jQuery( function() {
			jQuery( "#layerListSpaceObject_"+floorplan_div ).draggable({
					containment: [ jQuery('#'+floorplan_div).position().left - cvjs_containmentModalLeft*2 , jQuery('#'+floorplan_div).position().top - cvjs_containmentModalTop*2, jQuery('#'+floorplan_div).position().left+ jQuery('#'+floorplan_div).width()- jQuery("#layerListSpaceObject_"+floorplan_div).width() + cvjs_containmentModalRight*2, jQuery('#'+floorplan_div).position().top + jQuery('#'+floorplan_div).height() - jQuery("#layerListSpaceObject_"+floorplan_div).height() + cvjs_containmentModalBottom*2  ]
				})
		  } );

		  jQuery("#layerListSpaceObject_"+floorplan_div ).css("position","absolute");

		jQuery("#layerListSpaceObject_"+floorplan_div).hide();




		jQuery('#layerlist_id_space_'+floorplan_div).mouseover(function()
			{
				jQuery("#layerListSpaceObject_"+floorplan_div).draggable({ disabled: true });
			});

		jQuery('#layerlist_id_space_'+floorplan_div).mouseout(function()
			{
				jQuery("#layerListSpaceObject_"+floorplan_div).draggable({ disabled: false });
			});



		jQuery("#exit_layerlist_space").click(function(){

			cvjs_layerListSpace.clear();
			jQuery("#layerListSpaceObject").hide();

			cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;

		});
		jQuery('#exit_layerlist_space').mouseover(function()
			{
				jQuery('#exit_layerlistSpaceObject').css("filter", "alpha(opacity=70)");
				jQuery('#exit_layerlistSpaceObject').css("opacity", "0.7");
			});
		jQuery('#exit_layerlist_space').mouseout(function()
			{
				jQuery('#exit_layerlistSpaceObject').css("filter", "alpha(opacity=100)");
				jQuery('#exit_layerlistSpaceObject').css("opacity", "1.0");
			});



		jQuery( function() {
			jQuery( "#redlinetextModal_"+floorplan_div ).draggable({
					containment: [ jQuery('#'+floorplan_div).position().left - cvjs_containmentModalLeft , jQuery('#'+floorplan_div).position().top - cvjs_containmentModalTop, jQuery('#'+floorplan_div).position().left+ jQuery('#'+floorplan_div).width()- jQuery("#redlinetextModal_"+floorplan_div).width() + cvjs_containmentModalRight, jQuery('#'+floorplan_div).position().top + jQuery('#'+floorplan_div).height() - jQuery("#redlinetextModal_"+floorplan_div).height() + cvjs_containmentModalBottom  ]
				})
		} );

		jQuery( "#redlinetextModal_"+floorplan_div ).hide();




// UP
////////// COLLECT ALL PRO STUFF





}









	


/**
 * CADViewer Pro Initialization class, to be called as part of init of base version
 * FileLoad Module
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */
 
function cvjs_initCADViewerPro_FileLoadModal(floorplan_div){


var serverfileModalString = "<table  class=\"cvjs_serverFileLoadModalanguageTable\" id=\"cvjs_serverFileLoadModal_table\" ><tr><td><div id=\"cvjs_serverFileLoadModal\" class=\"measurement_modal-body\" ><div class=\"cadviewer_modal-content\"><div class=\"cadviewer_modal-header\"><table><tr><td><a class=\"modalIconLogoFileModal\" href=\"https://cadviewer.com\"><img src=\""+cvjs_imagesLocation+"logoJS.png\" width=\"30\" height=\"30\" alt=\"CADViewer Logo\" /></a></td><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td><td><h4><div class=\"modalHeaderTextFileModal\" id=\"serverFileModalName\">XXX</div></h4></td><td></td></tr></table><div id=\"cvjs_FileModalXButton\">"
		+"<input class=\"cvjs_new_header_button_filemodal\" type=\"button\" value=\"&times;\" onClick=\"cvjs_exitServerFileLoadModal(\'"+floorplan_div+"\');\">"
//+"<button type=\"button\"  class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_exitServerFileLoadModal();\">&times;</button>"
+"</div></div><hr id=\"id_filemodal_hr\"class=\"cvjs_filemodal_hr\">";

	serverfileModalString += "<div id=\"modalHeaderAdjustment\">x<div><div id=\"SelectFloorPlanPanel\"><div id=\"add_br_not_addFloorPlanTable\"\"><br></div><div id=\"addFloorPlanTable\"><table id=\"\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" id=\"location_tags\"><tr><td class=\"fb_12\"><img class=\"select_file_image\" id=\"select_file\" src=\""+cvjs_imagesLocation+"tools/addDrawing.png\" border=\"0\" width=\"497\" height=\"29\" alt=\"Select File\" /><div style=\'height: 0px;width: 0px; overflow:hidden;\'><input id=\"cvjs_upfile\" type=\"file\" multiple value=\"Reset form\" onchange=\"cvjs_add_file_object('cvjs_upfile');\"/></div></td></tr><tr height=\"10\"><td height=\"10\"><img id=\"dummy2\" src=\""+cvjs_imagesLocation+"10x10.png\" border=\"1\" width=\"10\" height=\"10\" /></td><td height=\"10\"><img id=\"dummy2\" src=\""+cvjs_imagesLocation+"10x10.png\" border=\"1\" width=\"10\" height=\"10\" /></td></tr></table></div>";
//	serverfileModalString += "<div id=\"addRedlineTable\"><table id=\"select_save_changes\" width=\"100%\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr><td><img src=\""+cvjs_imagesLocation+"5x5.png\" border=\"1\" width=\"3\" height=\"3\" /></td><td class=\"select_tag_text_upload_redline\">"+languageTable.languages[cvjs_currentLanguage].SaveRedlineModal.Upload+"</td><td><div id=\"inputRedlineFileName\">Name goes here</div></td><td><img src=\""+cvjs_imagesLocation+"10x10.png\" border=\"1\" width=\"50\" height=\"10\" /></td><td><div ><div id=\"button2-no_upload_redline\"><img id=\"uploadredline_modal_cancel_image\" class=\"icon_img\" src=\""+cvjs_imagesLocation+"tools/Cancel_Inactive_4.png\" border=\"0\"></div></div></td><td><td><div style=\"width: 111px\" ><div id=\"button1-upload_redline\"><img id=\"uploadredline_modal_proceed_image\" class=\"icon_img\" src=\""+cvjs_imagesLocation+"tools/Proceed_111x28_Up.png\" border=\"0\"></div></div></td><td><img src=\""+cvjs_imagesLocation+"10x10.png\" border=\"1\" width=\"30\" height=\"10\" /></td></tr><tr><td><img src=\""+cvjs_imagesLocation+"10x10.png\" border=\"1\" width=\"10\" height=\"20\" /></td></tr></table></div>";
	serverfileModalString += "<div id=\"addRedlineTable\"><table id=\"select_save_changes\" width=\"100%\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr><td><img src=\""+cvjs_imagesLocation+"5x5.png\" border=\"1\" width=\"3\" height=\"3\" /></td><td class=\"select_tag_text_upload_redline\">"+languageTable.languages[cvjs_currentLanguage].SaveRedlineModal.Upload+"</td><td><div id=\"inputRedlineFileName\">Name goes here</div></td><td><div id=\"button2-no_upload_redline\"><img id=\"uploadredline_modal_cancel_image\" class=\"icon_img\" src=\""+cvjs_imagesLocation+"tools/Cancel_Inactive_4.png\" border=\"0\"></div></td><td><td><div style=\"width: 111px\" ><div id=\"button1-upload_redline\"><img id=\"uploadredline_modal_proceed_image\" class=\"icon_img\" src=\""+cvjs_imagesLocation+"tools/Proceed_111x28_Up.png\" border=\"0\"></div></div></td><td><img src=\""+cvjs_imagesLocation+"10x10.png\" border=\"1\" width=\"30\" height=\"10\" /></td></tr><tr><td><img src=\""+cvjs_imagesLocation+"10x10.png\" border=\"1\" width=\"10\" height=\"20\" /></td></tr></table></div>";
	serverfileModalString += "<table id=\"filterByInfoTablex\" width=\"100%\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" id=\"location_tags\"><tr><td class=\"fb_112\"><div id=\"cvjs_cvRoomTextLayersOnLoad\" class=\"select_tag_text_top\"></div></td></tr></table>";

//window.alert("cvjs_fileModalEditMode "+cvjs_fileModalEditMode);
	// 6.1.25
	if (cvjs_fileModalEditMode)
		serverfileModalString += "<table id=\"filterByInfoTable\" width=\"100%\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" id=\"location_tags\"><tr><td><img src=\""+cvjs_imagesLocation+"5x5.png\" border=\"1\" width=\"3\" height=\"3\" /></td><td class=\"fb_112\"><div id=\"infoFileModalNameDrawing\" class=\"select_tag_text_top\">DRAWING / FILENAME</div></td><td class=\"fb_3\"><div id=\"editing\" class=\"select_tag_text_blue\">Edit</div></td><td><img src=\""+cvjs_imagesLocation+"10x10.png\" border=\"1\" width=\"7\" height=\"7\" /></td></tr></table><div class=\"cvjs_filemodal_horizontal_line\"></div>";
	else
		serverfileModalString += "<table id=\"filterByInfoTable\" width=\"100%\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" id=\"location_tags\"><tr><td><img src=\""+cvjs_imagesLocation+"5x5.png\" border=\"1\" width=\"3\" height=\"3\" /></td><td class=\"fb_112\"><div id=\"infoFileModalNameDrawing\" class=\"select_tag_text_top\">DRAWING / FILENAME</div></td><td class=\"fb_3\"><div id=\"editing\" class=\"select_tag_text_blue\"></div></td><td><img src=\""+cvjs_imagesLocation+"10x10.png\" border=\"1\" width=\"7\" height=\"7\" /></td></tr></table><div class=\"cvjs_filemodal_horizontal_line\"></div>";
// 6.2.61 make Edit = ""
//		serverfileModalString += "<table id=\"filterByInfoTable\" width=\"100%\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" id=\"location_tags\"><tr><td><img src=\""+cvjs_imagesLocation+"5x5.png\" border=\"1\" width=\"3\" height=\"3\" /></td><td class=\"fb_112\"><div id=\"infoFileModalNameDrawing\" class=\"select_tag_text_top\">DRAWING / FILENAME</div></td><td class=\"fb_3\"></td><td><img src=\""+cvjs_imagesLocation+"10x10.png\" border=\"1\" width=\"7\" height=\"7\" /></td></tr></table><div class=\"cvjs_filemodal_horizontal_line\"></div>";

	serverfileModalString += "<div id=\"attention_bitmap\" ><table id=\"filterByTable_attention\" width=\"100%\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\"><tr><td><img src=\""+cvjs_imagesLocation+"10x10y.png\" border=\"1\" width=\"10\" height=\"10\" /></td><td class=\"fb_11\"><div id=\"attention_1\" class=\"select_file_text_attention\">Attention</div></td><td class=\"fb_11\"><div style=\"float:right;margin-right:18px;margin-top:0px;\" id=\"CloseAttentionBitmap\"><img src=\""+cvjs_imagesLocation+"crossXy.png\" border=\"0\"></div></td></tr></table>";
	serverfileModalString += "<table id=\"filterByInfoTable_attention\" width=\"100%\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" id=\"location_tags\"><tr><td><img src=\""+cvjs_imagesLocation+"10x10y.png\" border=\"1\" width=\"10\" height=\"10\" /></td><td class=\"fb_1\"><div id=\"attention_2\" class=\"select_tag_text_attention\">For best results, use a vector drawing or a grayscale bitmap to ensure legibility.</div></td></tr><tr><td><img src=\""+cvjs_imagesLocation+"6x6y.png\" border=\"1\" width=\"6\" height=\"6\" /></td></tr></table><div class=\"horizontal_line_yellow\"></div></div>";
	serverfileModalString += "<div id=\"SelectFloorPlan\">";
	
	// 6.1.30	
	for (i=1; i<=cvjs_maxfiles; i++){
		serverfileModalString += "<div id=\"1floor"+i+"\" ><table id=\"filterByTableFileInput\" width=\"100%\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\"><tr><td><img src=\""+cvjs_imagesLocation+"10x10.png\" border=\"1\" width=\"10\" height=\"10\" /></td><td class=\"fb_11\"><div id=\"1floor"+i+"_1\" class=\"select_file_text\">Floor Tag</div></td></tr></table><table id=\"filterByInfoTable\" width=\"100%\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" id=\"location_tags\"><tr><td><img src=\""+cvjs_imagesLocation+"10x10.png\" border=\"1\" width=\"10\" height=\"10\"/></td><td class=\"fb_1\"><div id=\"1floor"+i+"_2\" class=\"select_tag_text\">filename1.ext</div></td></tr></table><div class=\"horizontal_dotted_line\"></div></div>";
	}	
//	serverfileModalString += "<div id=\"1floor1\" ><table id=\"filterByTableFileInput\" width=\"100%\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\"><tr><td><img src=\""+cvjs_imagesLocation+"10x10.png\" border=\"1\" width=\"10\" height=\"10\" /></td><td class=\"fb_11\"><div id=\"1floor1_1\" class=\"select_file_text\">Floor Tag</div></td></tr></table><table id=\"filterByInfoTable\" width=\"100%\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" id=\"location_tags\"><tr><td><img src=\""+cvjs_imagesLocation+"10x10.png\" border=\"1\" width=\"10\" height=\"10\"/></td><td class=\"fb_1\"><div id=\"1floor1_2\" class=\"select_tag_text\">filename1.ext</div></td></tr></table><div class=\"horizontal_dotted_line\"></div></div>";
	
	serverfileModalString += "<br><br></div></div>";


//	serverfileModalString += "<div id=\"SelectFloorPlanPanelEdit\"><table id=\"filterByInfoTable\" width=\"100%\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" id=\"location_tags\"><tr><td><img src=\""+cvjs_imagesLocation+"5x5.png\" border=\"1\" width=\"1\" height=\"3\" /></td><td class=\"fb_112\"><div id=\"editFloorPlanInfoText\" class=\"select_tag_text_top_big\">Edit Floor Plan Info</div></td><td><img src=\""+cvjs_imagesLocation+"7x7.png\" border=\"0\" width=\"7\" height=\"7\" /></td></tr><tr><td><img src=\""+cvjs_imagesLocation+"5x5.png\" border=\"1\" width=\"5\" height=\"10\" /></td></tr></table>";
	serverfileModalString += "<div id=\"modalHeaderAdjustment\">x<div><div id=\"SelectFloorPlanPanelEdit\"><table id=\"filterByInfoTable\" width=\"100%\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" id=\"location_tags\"><tr><td><img src=\""+cvjs_imagesLocation+"5x5.png\" border=\"1\" width=\"1\" height=\"3\" /></td><td class=\"fb_112\"><div id=\"editFloorPlanInfoText\" class=\"select_tag_text_top_big\">Edit Floor Plan Info</div></td></tr></table>";
	serverfileModalString += "<div id=\"modalHeaderAdjustment\">x<div><table id=\"filterByInfoTable\" width=\"100%\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" id=\"location_tags\"><tr><td><img src=\""+cvjs_imagesLocation+"5x5.png\" border=\"1\" width=\"3\" height=\"3\" /></td><td class=\"fb_112\"><div id=\"infoFloorPlanInfoText\" class=\"select_tag_text_top\">DRAWING / FILENAME</div></td><td class=\"fb_3\"><div id=\"done_editing\" class=\"select_tag_text_blue\">Done Editing</div></td><td><img src=\""+cvjs_imagesLocation+"7x7.png\" border=\"0\" width=\"7\" height=\"7\" /></td></tr></table><div id=\"id__filemodal_horizontal_line\" class=\"cvjs_filemodal_horizontal_line\"></div>";

	// NOTE:  we rename id=sortable to id=xsortable, and sort out sorting later!!!   2017-01-12
	serverfileModalString += "<div id=\"xsortable\"><div id=\"SelectFloorPlanEdit\">";


	// 6.1.30	
	for (i=1; i<=cvjs_maxfiles; i++){
		serverfileModalString += "<div id=\"2floor"+i+"\"><table id=\"filterByTable2\" width=\"100%\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" id=\"location_tags\"><tr><td style=\"padding-left:6px;cursor:ns-resize;\"><img src=\""+cvjs_imagesLocation+"tools/FlrPlanReorderGrip2.png\" border=\"1\" width=\"27\" height=\"44\" /></td><td class=\"fb_112\"><div id=\"2floor"+i+"_1\" class=\"select_file_text_2a\">Floor Tag</div><div id=\"2floor"+i+"_4\" class=\"display_tag_text2\">filename1.ext</div></td><td class=\"fb_22\"><div id=\"2floor"+i+"_2\" class=\"rename_tag_text_blue1\">Rename</div></td><td><img src=\""+cvjs_imagesLocation+"blueDot.png\" border=\"0\" width=\"12\" height=\"17\" /></td><td class=\"fb_22_2\"><div id=\"2floor"+i+"_2_2\" class=\"unlink_tag_text_blue1\">Unlink</div></td><td><img src=\""+cvjs_imagesLocation+"blueDot.png\" border=\"0\" width=\"12\" height=\"17\" /></td><td class=\"fb_22_3\"><div id=\"2floor"+i+"_2_3\" class=\"clear_tag_text_blue1\">Clear</div></td><td><img src=\""+cvjs_imagesLocation+"7x7.png\" border=\"1\" width=\"7\" height=\"7\" /></td><td><img src=\""+cvjs_imagesLocation+"5x5.png\" border=\"1\" width=\"3\" height=\"3\" /></td><td><div id=\"2floor"+i+"_3\" class=\"delete_tag_image\"><img id=\"2floor"+i+"_3_image\" src=\""+cvjs_imagesLocation+"tools/Trash_2.png\" border=\"0\" width=\"14\" height=\"17\"></div></td><td><img src=\""+cvjs_imagesLocation+"7x7.png\" border=\"1\" width=\"7\" height=\"7\" /></td></table><div class=\"horizontal_dotted_line\"></div></div>";
	}	
//	serverfileModalString += "<div id=\"2floor1\"><table id=\"filterByTable2\" width=\"100%\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" id=\"location_tags\"><tr><td style=\"padding-left:6px;cursor:ns-resize;\"><img src=\""+cvjs_imagesLocation+"tools/FlrPlanReorderGrip2.png\" border=\"1\" width=\"27\" height=\"44\" /></td><td class=\"fb_112\"><div id=\"2floor1_1\" class=\"select_file_text_2a\">Floor Tag</div><div id=\"2floor1_4\" class=\"display_tag_text2\">filename1.ext</div></td><td class=\"fb_22\"><div id=\"2floor1_2\" class=\"rename_tag_text_blue1\">Rename</div></td><td><img src=\""+cvjs_imagesLocation+"blueDot.png\" border=\"0\" width=\"12\" height=\"17\" /></td><td class=\"fb_22_2\"><div id=\"2floor1_2_2\" class=\"unlink_tag_text_blue1\">Unlink</div></td><td><img src=\""+cvjs_imagesLocation+"blueDot.png\" border=\"0\" width=\"12\" height=\"17\" /></td><td class=\"fb_22_3\"><div id=\"2floor1_2_3\" class=\"clear_tag_text_blue1\">Clear</div></td><td><img src=\""+cvjs_imagesLocation+"7x7.png\" border=\"1\" width=\"7\" height=\"7\" /></td><td><img src=\""+cvjs_imagesLocation+"5x5.png\" border=\"1\" width=\"3\" height=\"3\" /></td><td><div id=\"2floor1_3\" class=\"delete_tag_image\"><img id=\"2floor1_3_image\" src=\""+cvjs_imagesLocation+"tools/Trash_2.png\" border=\"0\" width=\"14\" height=\"17\"></div></td><td><img src=\""+cvjs_imagesLocation+"7x7.png\" border=\"1\" width=\"7\" height=\"7\" /></td></table><div class=\"horizontal_dotted_line\"></div></div>";
	serverfileModalString += "</div></div></div></td></tr></table>";


	
	if (cvjs_modalsInitialized_FileLoadModal){
		jQuery("#cvjs_serverFileLoadModal_table").remove();   // remove the previous instance
		cvjs_modalsInitialized_FileLoadModal = false;
	}
		
	
	if (!cvjs_modalsInitialized_FileLoadModal){   // we only make the file load modal once

		jQuery("#cvjs_modals"+"_"+floorplan_div).append(serverfileModalString);
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<form id=\"delete_form\" style=\"display:none\"><table width=\"100%\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr></tr><tr><td><img src=\""+cvjs_imagesLocation+"7x7.png\" border=\"1\" width=\"7\" height=\"7\" /></td><td><div id=\"delete_Modal_header\" class=\"select_file_text_modal\">Delete</div></td><td><img src=\""+cvjs_imagesLocation+"7x7.png\" border=\"1\" width=\"7\" height=\"7\" /></td><td><div class=\'select_file_text_close\'><div id=\"modal_close_cross\">&times;</div></div></td></tr></table><div class=\"horizontal_modal_line\"></div><table id=\"text_modal_table\" class=\"text_modal_table_class\" width=\"100%\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr><td><img src=\""+cvjs_imagesLocation+"7x7.png\" border=\"1\" width=\"7\" height=\"7\" /></td><td><div class=\"select_tag_text_modal\"><div id=\"delete_modal_file_name1\">Delete</div></div></td></tr></table><table id=\"select_save_changes\" width=\"100%\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr><td><img src=\""+cvjs_imagesLocation+"10x10.png\" border=\"1\" width=\"10\" height=\"10\" /></td><td><img src=\""+cvjs_imagesLocation+"7x7.png\" border=\"1\" width=\"5\" height=\"5\" /></td><td><img src=\""+cvjs_imagesLocation+"white28x10.png\" border=\"1\" width=\"28\" height=\"10\" /></td><td><img src=\""+cvjs_imagesLocation+"white28x10.png\" border=\"1\" width=\"28\" height=\"10\" /></td><td><div style=\"width: 60px\" ><div id=\"button2-nodelete\"><img id=\"delete_modal_cancel_image\" class=\"icon_img\" src=\""+cvjs_imagesLocation+"tools/Cancel_Inactive_4.png\" border=\"0\"></div></div></td><td><td div style=\"height: 10px\" ><img src=\""+cvjs_imagesLocation+"10x10.png\" border=\"1\" width=\"10\" height=\"10\" /></td><td><div style=\"width: 111px\" ><div id=\"button1-delete\"><img id=\"delete_modal_proceed_image\" class=\"icon_img\" src=\""+cvjs_imagesLocation+"tools/Proceed_111x28_Up.png\" border=\"0\"></div></div></td></tr></table></form>");
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<form id=\"clear_form\" style=\"display:none\"><table width=\"100%\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr></tr><tr><td><img src=\""+cvjs_imagesLocation+"7x7.png\" border=\"1\" width=\"7\" height=\"7\" /></td><td><div id=\"clear_Modal_header\" class=\"select_file_text_modal\">Clear</div></td><td><img src=\""+cvjs_imagesLocation+"7x7.png\" border=\"1\" width=\"7\" height=\"7\" /></td><td><div class=\'select_file_text_close\'><div id=\"clear_modal_close_cross\">&times;</div></div></td></tr></table><div class=\"horizontal_modal_line\"></div><table id=\"text_modal_table\" class=\"text_modal_table_class\" width=\"100%\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr><td><img src=\""+cvjs_imagesLocation+"7x7.png\" border=\"1\" width=\"7\" height=\"7\" /></td><td><div class=\"select_tag_text_modal\"><div id=\"clear_modal_file\">Do you want to clear all locations in,</div></div></td><td><img src=\""+cvjs_imagesLocation+"7x7.png\" border=\"1\" width=\"7\" height=\"7\" /></td></tr></table><table id=\"select_save_changes\" width=\"100%\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" id=\"location_tags\"><tr><td><img src=\""+cvjs_imagesLocation+"10x10.png\" border=\"1\" width=\"10\" height=\"10\" /></td><td><img src=\""+cvjs_imagesLocation+"7x7.png\" border=\"1\" width=\"5\" height=\"5\" /></td><td><img src=\""+cvjs_imagesLocation+"white28x10.png\" border=\"1\" width=\"28\" height=\"10\" /></td><td><img src=\""+cvjs_imagesLocation+"white28x10.png\" border=\"1\" width=\"28\" height=\"10\" /></td><td><div style=\"width: 60px\" ><div id=\"button2-noclear\"><img id=\"clear_modal_cancel_image\" class=\"icon_img\" src=\""+cvjs_imagesLocation+"tools/Cancel_Inactive_4.png\" border=\"0\"></div></div></td><td><td div style=\"height: 10px\" ><img src=\""+cvjs_imagesLocation+"10x10.png\" border=\"1\" width=\"10\" height=\"10\" /></td><td><div style=\"width: 111px\" ><div id=\"button1-clear\"><img id=\"clear_modal_proceed_image\" class=\"icon_img\" src=\""+cvjs_imagesLocation+"tools/Proceed_111x28_Up.png\" border=\"0\"></div></div></td></tr><tr><td><img src=\""+cvjs_imagesLocation+"10x10.png\" border=\"1\" width=\"7\" height=\"7\" /></td></tr></table></form>");
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<form id=\"unlink_form\" style=\"display:none\"><table width=\"100%\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr></tr><tr><td><img src=\""+cvjs_imagesLocation+"7x7.png\" border=\"1\" width=\"7\" height=\"7\" /></td><td><div id=\"unlink_Modal_header\" class=\"select_file_text_modal\">Unlink</div></td><td><img src=\""+cvjs_imagesLocation+"7x7.png\" border=\"1\" width=\"7\" height=\"7\" /></td><td><div class=\'select_file_text_close\'><div id=\"unlink_modal_close_cross\">&times;</div></div></td></tr></table><div class=\"horizontal_modal_line\"></div><table id=\"text_modal_table\" class=\"text_modal_table_class\" width=\"100%\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr><td><img src=\""+cvjs_imagesLocation+"7x7.png\" border=\"1\" width=\"7\" height=\"7\" /></td><td><div class=\"select_tag_text_modal\"><div id=\"unlink_modal_file\">Do you want to unlink all locations in,</div></div></td><td><img src=\""+cvjs_imagesLocation+"7x7.png\" border=\"1\" width=\"7\" height=\"7\" /></td></tr></table><table id=\"select_save_changes\" width=\"100%\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" id=\"location_tags\"><tr><td><img src=\""+cvjs_imagesLocation+"10x10.png\" border=\"1\" width=\"10\" height=\"10\" /></td><td><img src=\""+cvjs_imagesLocation+"7x7.png\" border=\"1\" width=\"5\" height=\"5\" /></td><td><img src=\""+cvjs_imagesLocation+"white28x10.png\" border=\"1\" width=\"28\" height=\"10\" /></td><td><img src=\""+cvjs_imagesLocation+"white28x10.png\" border=\"1\" width=\"28\" height=\"10\" /></td><td><div style=\"width: 60px\" ><div id=\"button2-nounlink\"><img id=\"unlink_modal_cancel_image\" class=\"icon_img\" src=\""+cvjs_imagesLocation+"tools/Cancel_Inactive_4.png\" border=\"0\"></div></div></td><td><td div style=\"height: 10px\" ><img src=\""+cvjs_imagesLocation+"10x10.png\" border=\"1\" width=\"10\" height=\"10\" /></td><td><div style=\"width: 111px\" ><div id=\"button1-unlink\"><img id=\"unlink_modal_proceed_image\" class=\"icon_img\" src=\""+cvjs_imagesLocation+"tools/Proceed_111x28_Up.png\" border=\"0\"></div></div></td></tr><tr><td><img src=\""+cvjs_imagesLocation+"10x10.png\" border=\"1\" width=\"7\" height=\"7\" /></td></tr></table></form>");
	
	}
	
	// 6.2.43
}	






var cvjs_RedlinesLayer = "cvjs_Redlines_01";


/*
 * Returns the current redlines and sticky notes as a string object in DXF so the user can do their own server side save
 * bypassing php or servlet code
 * @return {string} RedlineNote - a string containg the redline, sticky note object
 */

function cvjs_getStickyNotesRedlineDXF(){




// DraftSight template DXF

/******
{ "DWG": 
    { "lowerLeft": { "x": -20.5184, "y" : -11}, 
      "upperRight": { "x": 20.5184, "y" : 11} 
    }
,
 "SVG": 
    { "lowerLeft": { "x": 58.2846, "y" : 125.442}, 
      "upperRight": { "x": 2423.72, "y" : 1393.56} 
    }
}	
*******/

/***

  0
APPID
  2
CADVIEWERJS
 70
     0

***/


	var appdata = " 0\nAPPID\n  2\nCADVIEWERJS\n 70\n     0\n"

	var currentHandle = "";

	var str = " 0\nSECTION\n  2\nHEADER\n  9\n$ACADVER\n  1\nAC1015\n  9\n$ACADMAINTVER\n 70\n     6\n  9\n$DWGCODEPAGE\n  3\nANSI_1252\n  9\n$INSBASE\n 10\n0.0\n 20\n0.0\n 30\n0.0\n"
	var bbox = cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox();
//	var extents = "  9\n$EXTMIN\n 10\n"+bbox.x+"\n 20\n"+bbox.y+"\n 30\n0.0\n  9\n$EXTMAX\n 10\n"+(bbox.x+bbox.width)+"\n 20\n"+(bbox.y+bbox.height)+"\n 30\n0.0\n";
	var extents = "  9\n$EXTMIN\n 10\n"+cvjs_drawingCoordinates[0].DWG.lowerLeft.x+"\n 20\n"+cvjs_drawingCoordinates[0].DWG.lowerLeft.y+"\n 30\n0.0\n  9\n$EXTMAX\n 10\n"+cvjs_drawingCoordinates[0].DWG.upperRight.x+"\n 20\n"+cvjs_drawingCoordinates[0].DWG.upperRight.y+"\n 30\n0.0\n";
	var str2 = "  9\n$LIMMIN\n 10\n0.0\n 20\n0.0\n  9\n$LIMMAX\n 10\n420.0\n 20\n297.0\n  9\n$ORTHOMODE\n 70\n     0\n  9\n$REGENMODE\n 70\n     1\n  9\n$FILLMODE\n 70\n     1\n  9\n$QTEXTMODE\n 70\n     0\n  9\n$MIRRTEXT\n 70\n     0\n  9\n$LTSCALE\n 40\n1.0\n  9\n$ATTMODE\n 70\n     1\n  9\n$TEXTSIZE\n 40\n2.5\n  9\n$TRACEWID\n 40\n1.0\n  9\n$TEXTSTYLE\n  7\nStandard\n  9\n$CLAYER\n  8\n0\n  9\n$CELTYPE\n  6\nByLayer\n  9\n$CECOLOR\n 62\n   256\n  9\n$CELTSCALE\n 40\n1.0\n  9\n$DISPSILH\n 70\n     0\n  9\n$DIMSCALE\n 40\n1.0\n  9\n$DIMASZ\n 40\n2.5\n  9\n$DIMEXO\n 40\n0.625\n  9\n$DIMDLI\n 40\n3.75\n  9\n$DIMRND\n 40\n0.0\n  9\n$DIMDLE\n 40\n0.0\n  9\n$DIMEXE\n 40\n1.25\n  9\n$DIMTP\n 40\n0.0\n  9\n$DIMTM\n 40\n0.0\n  9\n$DIMTXT\n 40\n2.5\n  9\n$DIMCEN\n 40\n2.5\n  9\n$DIMTSZ\n 40\n0.0\n  9\n$DIMTOL\n 70\n     0\n  9\n$DIMLIM\n 70\n     0\n  9\n$DIMTIH\n 70\n     0\n  9\n$DIMTOH\n 70\n     0\n  9\n$DIMSE1\n 70\n     0\n  9\n$DIMSE2\n 70\n     0\n  9\n$DIMTAD\n 70\n     1\n  9\n$DIMZIN\n 70\n     8\n  9\n$DIMBLK\n  1\n\n  9\n$DIMASO\n 70\n     1\n  9\n$DIMSHO\n 70\n     1\n  9\n$DIMPOST\n  1\n\n  9\n$DIMAPOST\n  1\n\n  9\n$DIMALT\n 70\n     0\n  9\n$DIMALTD\n 70\n     3\n  9\n$DIMALTF\n 40\n0.03937007874016\n  9\n$DIMLFAC\n 40\n1.0\n  9\n$DIMTOFL\n 70\n     1\n  9\n$DIMTVP\n 40\n0.0\n  9\n$DIMTIX\n 70\n     0\n  9\n$DIMSOXD\n 70\n     0\n  9\n$DIMSAH\n 70\n     0\n  9\n$DIMBLK1\n  1\n\n  9\n$DIMBLK2\n  1\n\n  9\n$DIMSTYLE\n  2\nISO-25\n  9\n$DIMCLRD\n 70\n     0\n  9\n$DIMCLRE\n 70\n     0\n  9\n$DIMCLRT\n 70\n     0\n  9\n$DIMTFAC\n 40\n1.0\n  9\n$DIMGAP\n 40\n0.625\n  9\n$DIMJUST\n 70\n     0\n  9\n$DIMSD1\n 70\n     0\n  9\n$DIMSD2\n 70\n     0\n  9\n$DIMTOLJ\n 70\n     0\n  9\n$DIMTZIN\n 70\n     8\n  9\n$DIMALTZ\n 70\n     0\n  9\n$DIMALTTZ\n 70\n     0\n  9\n$DIMUPT\n 70\n     0\n  9\n$DIMDEC\n 70\n     2\n  9\n$DIMTDEC\n 70\n     2\n  9\n$DIMALTU\n 70\n     2\n  9\n$DIMALTTD\n 70\n     3\n  9\n$DIMTXSTY\n  7\nStandard\n  9\n$DIMAUNIT\n 70\n     0\n  9\n$DIMADEC\n 70\n     0\n  9\n$DIMALTRND\n 40\n0.0\n  9\n$DIMAZIN\n 70\n     0\n  9\n$DIMDSEP\n 70\n    44\n  9\n$DIMATFIT\n 70\n     3\n  9\n$DIMFRAC\n 70\n     0\n  9\n$DIMLDRBLK\n  1\n\n  9\n$DIMLUNIT\n 70\n     2\n  9\n$DIMLWD\n 70\n    -2\n  9\n$DIMLWE\n 70\n    -2\n  9\n$DIMTMOVE\n 70\n     0\n  9\n$LUNITS\n 70\n     2\n  9\n$LUPREC\n 70\n     3\n  9\n$SKETCHINC\n 40\n1.0\n  9\n$FILLETRAD\n 40\n10.0\n  9\n$AUNITS\n 70\n     0\n  9\n$AUPREC\n 70\n     0\n  9\n$MENU\n  1\n.\n  9\n$ELEVATION\n 40\n0.0\n  9\n$PELEVATION\n 40\n0.0\n  9\n$THICKNESS\n 40\n0.0\n  9\n$LIMCHECK\n 70\n     0\n  9\n$CHAMFERA\n 40\n10.0\n  9\n$CHAMFERB\n 40\n10.0\n  9\n$CHAMFERC\n 40\n20.0\n  9\n$CHAMFERD\n 40\n0.0\n  9\n$SKPOLY\n 70\n     0\n  9\n$TDCREATE\n 40\n2455022.720692847\n  9\n$TDUCREATE\n 40\n2455022.637359514\n  9\n$TDUPDATE\n 40\n2458234.855757477\n  9\n$TDUUPDATE\n 40\n2458234.772424144\n  9\n$TDINDWG\n 40\n0.0048455208\n  9\n$TDUSRTIMER\n 40\n0.0004155903\n  9\n$USRTIMER\n 70\n     1\n  9\n$ANGBASE\n 50\n0.0\n  9\n$ANGDIR\n 70\n     0\n  9\n$PDMODE\n 70\n     0\n  9\n$PDSIZE\n 40\n0.0\n  9\n$PLINEWID\n 40\n0.0\n  9\n$SPLFRAME\n 70\n     0\n  9\n$SPLINETYPE\n 70\n     6\n  9\n$SPLINESEGS\n 70\n     8\n  9\n$HANDSEED\n  5\n1AD\n  9\n$SURFTAB1\n 70\n     6\n  9\n$SURFTAB2\n 70\n     6\n  9\n$SURFTYPE\n 70\n     6\n  9\n$SURFU\n 70\n     6\n  9\n$SURFV\n 70\n     6\n  9\n$UCSBASE\n  2\n\n  9\n$UCSNAME\n  2\n\n  9\n$UCSORG\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  9\n$UCSXDIR\n 10\n1.0\n 20\n0.0\n 30\n0.0\n  9\n$UCSYDIR\n 10\n0.0\n 20\n1.0\n 30\n0.0\n  9\n$UCSORTHOREF\n  2\n\n  9\n$UCSORTHOVIEW\n 70\n     0\n  9\n$UCSORGTOP\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  9\n$UCSORGBOTTOM\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  9\n$UCSORGLEFT\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  9\n$UCSORGRIGHT\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  9\n$UCSORGFRONT\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  9\n$UCSORGBACK\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  9\n$PUCSBASE\n  2\n\n  9\n$PUCSNAME\n  2\n\n  9\n$PUCSORG\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  9\n$PUCSXDIR\n 10\n1.0\n 20\n0.0\n 30\n0.0\n  9\n$PUCSYDIR\n 10\n0.0\n 20\n1.0\n 30\n0.0\n  9\n$PUCSORTHOREF\n  2\n\n  9\n$PUCSORTHOVIEW\n 70\n     0\n  9\n$PUCSORGTOP\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  9\n$PUCSORGBOTTOM\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  9\n$PUCSORGLEFT\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  9\n$PUCSORGRIGHT\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  9\n$PUCSORGFRONT\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  9\n$PUCSORGBACK\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  9\n$USERI1\n 70\n     0\n  9\n$USERI2\n 70\n     0\n  9\n$USERI3\n 70\n     0\n  9\n$USERI4\n 70\n     0\n  9\n$USERI5\n 70\n     0\n  9\n$USERR1\n 40\n0.0\n  9\n$USERR2\n 40\n0.0\n  9\n$USERR3\n 40\n0.0\n  9\n$USERR4\n 40\n0.0\n  9\n$USERR5\n 40\n0.0\n  9\n$WORLDVIEW\n 70\n     1\n  9\n$SHADEDGE\n 70\n     3\n  9\n$SHADEDIF\n 70\n    70\n  9\n$TILEMODE\n 70\n     1\n  9\n$MAXACTVP\n 70\n    64\n  9\n$PINSBASE\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  9\n$PLIMCHECK\n 70\n     0\n  9\n$PEXTMIN\n 10\n1.000000000000000E+20\n 20\n1.000000000000000E+20\n 30\n1.000000000000000E+20\n  9\n$PEXTMAX\n 10\n-1.000000000000000E+20\n 20\n-1.000000000000000E+20\n 30\n-1.000000000000000E+20\n  9\n$PLIMMIN\n 10\n0.0\n 20\n0.0\n  9\n$PLIMMAX\n 10\n0.0\n 20\n0.0\n  9\n$UNITMODE\n 70\n     0\n  9\n$VISRETAIN\n 70\n     1\n  9\n$PLINEGEN\n 70\n     0\n  9\n$PSLTSCALE\n 70\n     1\n  9\n$TREEDEPTH\n 70\n  3020\n  9\n$CMLSTYLE\n  2\nStandard\n  9\n$CMLJUST\n 70\n     0\n  9\n$CMLSCALE\n 40\n20.0\n  9\n$PROXYGRAPHICS\n 70\n     1\n  9\n$MEASUREMENT\n 70\n     1\n  9\n$CELWEIGHT\n370\n    -1\n  9\n$ENDCAPS\n280\n     0\n  9\n$JOINSTYLE\n280\n     0\n  9\n$LWDISPLAY\n290\n     0\n  9\n$INSUNITS\n 70\n     4\n  9\n$HYPERLINKBASE\n  1\n\n  9\n$STYLESHEET\n  1\n\n  9\n$XEDIT\n290\n     1\n  9\n$CEPSNTYPE\n380\n     0\n  9\n$PSTYLEMODE\n290\n     1\n  9\n$FINGERPRINTGUID\n  2\n{EC6BB858-51AA-46EC-B484-6C9CC7AB3E2E}\n  9\n$VERSIONGUID\n  2\n{FAEB1C32-E019-11D5-929B-00C0DF256EC4}\n  9\n$EXTNAMES\n290\n     1\n  9\n$PSVPSCALE\n 40\n0.0\n  9\n$OLESTARTUP\n290\n     0\n  0\nENDSEC\n  0\nSECTION\n  2\nCLASSES\n  0\nCLASS\n  1\nACDBDICTIONARYWDFLT\n  2\nAcDbDictionaryWithDefault\n  3\nObjectDBX Classes\n 90\n        0\n280\n     0\n281\n     0\n  0\nCLASS\n  1\nSCALE\n  2\nAcDbScale\n  3\nObjectDBX Classes\n 90\n     1153\n280\n     0\n281\n     0\n  0\nCLASS\n  1\nVISUALSTYLE\n  2\nAcDbVisualStyle\n  3\nObjectDBX Classes\n 90\n     4095\n280\n     0\n281\n     0\n  0\nCLASS\n  1\nMATERIAL\n  2\nAcDbMaterial\n  3\nObjectDBX Classes\n 90\n     1153\n280\n     0\n281\n     0\n  0\nCLASS\n  1\nTABLESTYLE\n  2\nAcDbTableStyle\n  3\nObjectDBX Classes\n 90\n     4095\n280\n     0\n281\n     0\n  0\nCLASS\n  1\nMLEADERSTYLE\n  2\nAcDbMLeaderStyle\n  3\nACDB_MLEADERSTYLE_CLASS\n 90\n     4095\n280\n     0\n281\n     0\n  0\nCLASS\n  1\nACDBPLACEHOLDER\n  2\nAcDbPlaceHolder\n  3\nObjectDBX Classes\n 90\n        0\n280\n     0\n281\n     0\n  0\nCLASS\n  1\nLAYOUT\n  2\nAcDbLayout\n  3\nObjectDBX Classes\n 90\n        0\n280\n     0\n281\n     0\n  0\nENDSEC\n  0\nSECTION\n  2\nTABLES\n  0\nTABLE\n  2\nVPORT\n  5\n8\n330\n0\n100\nAcDbSymbolanguageTable\n 70\n     1\n  0\nVPORT\n  5\n29\n330\n8\n100\nAcDbSymbolanguageTableRecord\n100\nAcDbViewportTableRecord\n  2\n*Active\n 70\n     0\n 10\n0.0\n 20\n0.0\n 11\n1.0\n 21\n1.0\n 12\n409.7886626127411\n 22\n161.5087387190685\n 13\n0.0\n 23\n0.0\n 14\n10.0\n 24\n10.0\n 15\n10.0\n 25\n10.0\n 16\n0.0\n 26\n0.0\n 36\n1.0\n 17\n-134.1869158878503\n 27\n0.0\n 37\n0.0\n 40\n235.9700856768558\n 41\n1.958515283842795\n 42\n50.0\n 43\n0.0\n 44\n0.0\n 50\n0.0\n 51\n0.0\n 71\n    16\n 72\n  1000\n 73\n     1\n 74\n     3\n 75\n     0\n 76\n     0\n 77\n     0\n 78\n     0\n281\n     0\n 65\n     1\n110\n0.0\n120\n0.0\n130\n0.0\n111\n1.0\n121\n0.0\n131\n0.0\n112\n0.0\n122\n1.0\n132\n0.0\n 79\n     0\n146\n0.0\n  0\nENDTAB\n  0\nTABLE\n  2\nLTYPE\n  5\n5\n330\n0\n100\nAcDbSymbolanguageTable\n 70\n     1\n  0\nLTYPE\n  5\n14\n330\n5\n100\nAcDbSymbolanguageTableRecord\n100\nAcDbLinetypeTableRecord\n  2\nByBlock\n 70\n     0\n  3\n\n 72\n    65\n 73\n     0\n 40\n0.0\n  0\nLTYPE\n  5\n15\n330\n5\n100\nAcDbSymbolanguageTableRecord\n100\nAcDbLinetypeTableRecord\n  2\nByLayer\n 70\n     0\n  3\n\n 72\n    65\n 73\n     0\n 40\n0.0\n  0\nLTYPE\n  5\n16\n330\n5\n100\nAcDbSymbolanguageTableRecord\n100\nAcDbLinetypeTableRecord\n  2\nContinuous\n 70\n     0\n  3\nSolid line\n 72\n    65\n 73\n     0\n 40\n0.0\n  0\nENDTAB\n  0\nTABLE\n  2\nLAYER\n  5\n2\n330\n0\n100\nAcDbSymbolanguageTable\n 70\n     1\n  0\nLAYER\n  5\n10\n330\n2\n100\nAcDbSymbolanguageTableRecord\n100\nAcDbLayerTableRecord\n  2\n0\n 70\n     0\n 62\n     7\n  6\nContinuous\n370\n    -3\n390\n0\n  0\nENDTAB\n  0\nTABLE\n  2\nSTYLE\n  5\n3\n330\n0\n100\nAcDbSymbolanguageTable\n 70\n     2\n  0\nSTYLE\n  5\n11\n330\n3\n100\nAcDbSymbolanguageTableRecord\n100\nAcDbTextStyleTableRecord\n  2\nStandard\n 70\n     0\n 40\n0.0\n 41\n1.0\n 50\n0.0\n 71\n     0\n 42\n2.5\n  3\narial.ttf\n  4\n\n1001\nACAD\n1000\nArial\n1071\n        0\n  0\nSTYLE\n  5\nB8\n330\n3\n100\nAcDbSymbolanguageTableRecord\n100\nAcDbTextStyleTableRecord\n  2\nAnnotative\n 70\n     0\n 40\n0.0\n 41\n1.0\n 50\n0.0\n 71\n     0\n 42\n2.5\n  3\narial.ttf\n  4\n\n1001\nACAD\n1000\nArial\n1071\n        0\n1001\nAcadAnnotative\n1000\nAnnotativeData\n1002\n{\n1070\n     1\n1070\n     1\n1002\n}\n  0\nENDTAB\n  0\nTABLE\n  2\nVIEW\n  5\n6\n330\n0\n100\nAcDbSymbolanguageTable\n 70\n     0\n  0\nENDTAB\n  0\nTABLE\n  2\nUCS\n  5\n7\n330\n0\n100\nAcDbSymbolanguageTable\n 70\n     0\n  0\nENDTAB\n  0\nTABLE\n"+appdata+"  2\nAPPID\n  5\n9\n330\n0\n100\nAcDbSymbolanguageTable\n 70\n     2\n  0\nAPPID\n  5\n12\n330\n9\n100\nAcDbSymbolanguageTableRecord\n100\nAcDbRegAppTableRecord\n  2\nACAD\n 70\n     0\n  0\nAPPID\n  5\nB9\n330\n9\n100\nAcDbSymbolanguageTableRecord\n100\nAcDbRegAppTableRecord\n  2\nAcadAnnotative\n 70\n     0\n  0\nENDTAB\n  0\nTABLE\n  2\nDIMSTYLE\n  5\nA\n330\n0\n100\nAcDbSymbolanguageTable\n 70\n     2\n100\nAcDbDimStyleTable\n  0\nDIMSTYLE\n105\n27\n330\nA\n100\nAcDbSymbolanguageTableRecord\n100\nAcDbDimStyleTableRecord\n  2\nISO-25\n 70\n     0\n 41\n2.5\n 42\n0.625\n 43\n3.75\n 44\n1.25\n 73\n     0\n 74\n     0\n 77\n     1\n 78\n     8\n140\n2.5\n141\n2.5\n143\n0.03937007874016\n147\n0.625\n171\n     3\n172\n     1\n178\n     0\n271\n     2\n272\n     2\n274\n     3\n278\n    44\n283\n     0\n284\n     8\n340\n11\n  0\nDIMSTYLE\n105\nBA\n330\nA\n100\nAcDbSymbolanguageTableRecord\n100\nAcDbDimStyleTableRecord\n  2\nAnnotative\n 70\n     0\n 40\n0.0\n 41\n2.5\n 42\n0.625\n 43\n3.75\n 44\n1.25\n 73\n     0\n 74\n     0\n 77\n     1\n 78\n     8\n140\n2.5\n141\n2.5\n143\n0.03937007874016\n147\n0.625\n171\n     3\n172\n     1\n178\n     0\n271\n     2\n272\n     2\n274\n     3\n278\n    44\n283\n     0\n284\n     8\n340\n11\n1001\nAcadAnnotative\n1000\nAnnotativeData\n1002\n{\n1070\n     1\n1070\n     1\n1002\n}\n  0\nENDTAB\n  0\nTABLE\n  2\nBLOCK_RECORD\n  5\n1\n330\n0\n100\nAcDbSymbolanguageTable\n 70\n     1\n  0\nBLOCK_RECORD\n  5\n1F\n330\n1\n100\nAcDbSymbolanguageTableRecord\n100\nAcDbBlockTableRecord\n  2\n*Model_Space\n340\n166\n  0\nBLOCK_RECORD\n  5\n1B\n330\n1\n100\nAcDbSymbolanguageTableRecord\n100\nAcDbBlockTableRecord\n  2\n*Paper_Space\n340\n167\n  0\nBLOCK_RECORD\n  5\n23\n330\n1\n100\nAcDbSymbolanguageTableRecord\n100\nAcDbBlockTableRecord\n  2\n*Paper_Space0\n340\n0\n  0\nENDTAB\n  0\nENDSEC\n  0\nSECTION\n  2\nBLOCKS\n  0\nBLOCK\n  5\nEF\n330\n1F\n100\nAcDbEntity\n  8\n0\n100\nAcDbBlockBegin\n  2\n*Model_Space\n 70\n     0\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  3\n*Model_Space\n  1\n\n  0\nENDBLK\n  5\nF0\n330\n1F\n100\nAcDbEntity\n  8\n0\n100\nAcDbBlockEnd\n  0\nBLOCK\n  5\nF1\n330\n1B\n100\nAcDbEntity\n 67\n     1\n  8\n0\n100\nAcDbBlockBegin\n  2\n*Paper_Space\n 70\n     0\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  3\n*Paper_Space\n  1\n\n  0\nENDBLK\n  5\nF2\n330\n1B\n100\nAcDbEntity\n 67\n     1\n  8\n0\n100\nAcDbBlockEnd\n  0\nBLOCK\n  5\nF3\n330\n23\n100\nAcDbEntity\n  8\n0\n100\nAcDbBlockBegin\n  2\n*Paper_Space0\n 70\n     0\n 10\n0.0\n 20\n0.0\n 30\n0.0\n  3\n*Paper_Space0\n  1\n\n  0\nENDBLK\n  5\nF4\n330\n23\n100\nAcDbEntity\n  8\n0\n100\nAcDbBlockEnd\n  0\nENDSEC\n";
	var eof = "0\nEOF\n";
	var dataUrl= str+extents+str2;

	var comma_flag =0;
		dataUrl = dataUrl +"0\nSECTION\n2\nENTITIES\n";

		var handle = 0;
		
///		dataUrl = dataUrl +"var cvjs_stickyNotesRedlines_Base = {\n";

		for (spc in vqRedlines)
		{

	if (cvjs_debug) 			console.log("spc="+spc);

			if (vqRedlines[spc].data("deleted") == true ){
				if (cvjs_debug) console.log("file.js deleted node "+vqRedlines[spc].data("node"));
			}
			else{  // node exists

				if (comma_flag == 0){
					comma_flag = 1
				}
				else{
					
/***				
					dataUrl = dataUrl +"						,\n";
***/
				}
/***
				dataUrl = dataUrl +"					"+spc+": {\n";
//				dataUrl = dataUrl +"					"+vqRedlines[spc].data("node")+": {\n";
				dataUrl = dataUrl +"						node: \""+vqRedlines[spc].data("node")+"\",\n";
				dataUrl = dataUrl +"						name: \""+vqRedlines[spc].data("name")+"\",\n";
				dataUrl = dataUrl +"						id: \""+vqRedlines[spc].data("id")+"\",\n";
				dataUrl = dataUrl +"						layer: \""+vqRedlines[spc].data("layer")+"\",\n";
				dataUrl = dataUrl +"						group: \""+vqRedlines[spc].data("group")+"\",\n";
				dataUrl = dataUrl +"						color: \""+vqRedlines[spc].data("color")+"\",\n";
				dataUrl = dataUrl +"						strokeWidth: \""+vqRedlines[spc].data("strokeWidth")+"\",\n";
				dataUrl = dataUrl +"						fill: \""+vqRedlines[spc].data("fill")+"\",\n";
				dataUrl = dataUrl +"						username: \""+vqRedlines[spc].data("username")+"\",\n";
				dataUrl = dataUrl +"						userid: \""+vqRedlines[spc].data("userid")+"\",\n";
				dataUrl = dataUrl +"						currentPage: "+vqRedlines[spc].data("currentPage")+",\n";
				dataUrl = dataUrl +"						triangle_design: \""+vqRedlines[spc].data("triangle_design")+"\",\n";
				dataUrl = dataUrl +"						polypath_arrow: \""+vqRedlines[spc].data("polypath_arrow")+"\",\n";
				dataUrl = dataUrl +"						redline_text: \""+vqRedlines[spc].data("redline_text")+"\",\n";
				dataUrl = dataUrl +"						fill_opacity: \""+vqRedlines[spc].data("fill_opacity")+"\",\n";
				dataUrl = dataUrl +"						transform: \""+vqRedlines[spc].data("transform")+"\",\n";
				dataUrl = dataUrl +"						drawingRotation: "+vqRedlines[spc].data("drawingRotation")+"\n";
				dataUrl = dataUrl +"					}\n";
***/
			} // case node exists
		}

/**
		if (vqRedlines.length>0 && vqStickyNotes.length>0)
			dataUrl = dataUrl +"						,\n";
**/

		comma_flag =0;
		for (spc in vqStickyNotes)
		{
			if (vqStickyNotes[spc].data("deleted") == true ){
				// do nothing, the note is not there
				//console.log("file.js deleted node "+vqStickyNotes[spc].data("node"));
			}
			else{  // node exists

				if (comma_flag == 0){
					comma_flag = 1
				}
				else{
					
/****					
					
					dataUrl = dataUrl +"						,\n";
*****/

					}

				var notePos = parseInt(spc)+vqRedlines.length;
/***
				dataUrl = dataUrl +"					"+notePos+": {\n";
//				dataUrl = dataUrl +"					"+vqStickyNotes[spc].data("node")+": {\n";
				dataUrl = dataUrl +"						node: \""+vqStickyNotes[spc].data("node")+"\",\n";

				dataUrl = dataUrl +"						name: \""+vqStickyNotes[spc].data("name")+"\",\n";
				dataUrl = dataUrl +"						id: \""+vqStickyNotes[spc].data("id")+"\",\n";
				dataUrl = dataUrl +"						layer: \""+vqStickyNotes[spc].data("layer")+"\",\n";
				dataUrl = dataUrl +"						group: \""+vqStickyNotes[spc].data("group")+"\",\n";
				dataUrl = dataUrl +"						text: \""+vqStickyNotes[spc].data("text")+"\",\n";
				dataUrl = dataUrl +"						userid: \""+vqStickyNotes[spc].data("userid")+"\",\n";
				dataUrl = dataUrl +"						currentPage: "+vqStickyNotes[spc].data("currentPage")+",\n";
				dataUrl = dataUrl +"						date: \""+vqStickyNotes[spc].data("date")+"\",\n";
				dataUrl = dataUrl +"						linked: "+vqStickyNotes[spc].data("linked")+",\n";
				dataUrl = dataUrl +"						transform: \""+vqStickyNotes[spc].data("transform")+"\",\n";
				dataUrl = dataUrl +"						drawingRotation: "+vqStickyNotes[spc].data("drawingRotation")+"\n";
				dataUrl = dataUrl +"					}\n";
***/
			} // case node exists
		}

/***		
		dataUrl = dataUrl +"}\n\n";
		dataUrl = dataUrl +"function cvjs_setUpStickyNotesRedlines(paper){\n\n";
***/

		var spc_counter = 0;
		for (spc in vqRedlines)
		{
			if (vqRedlines[spc].data("deleted") == true ){
				// do nothing, the redline is not there
				//console.log("file.js deleted node "+vqRedlines[spc].data("node"));
			}
			else{  // node exists

				spc_counter++;
				var itemRed = "cItemRed"+spc_counter;
				var str_object = vqRedlines[spc].toString();

				if (str_object.indexOf("polyline")>-1){

					// THIS IS AN ARROW
				
//					console.log("this is an arrow!  "+str_object);

					str_object = str_object.substring(str_object.indexOf("points=")+8);
					str_object = str_object.substring(0, str_object.indexOf('\"'));

/****					
					dataUrl = dataUrl +"var "+itemRed+"= paper.g(paper.polyline(\"";
					dataUrl = dataUrl +str_object+" \")";
****/
					var points = str_object.split(" ");					
					str_object = vqRedlines[spc].toString();
					str_object = str_object.substring(str_object.indexOf("matrix(")+8);
					str_object = str_object.substring(0, str_object.indexOf(')'));
					
										
					var transform = vqRedlines[spc].data("transform"); 
					transform = transform.substring(1, transform.indexOf("r"));
					var insert = transform.split(",");					
//					var rot = transformscale.substring(transformscale.indexOf("r")+1);
					var rot = str_object.substring(str_object.indexOf("r")+1);
										
					
					var color = cvjs_getAutoCADColor(vqRedlines[spc].data("color"));
					// 5 handle number  sequential					
					// 40 thickness start
					// 41 thickness end     (per vertex)
					// 70 closed poly
					handle++;
					var hexString = "A"+handle.toString(16);
					currentHandle = hexString;
					
					dataUrl = dataUrl + "0\nLWPOLYLINE\n";
					dataUrl = dataUrl + "5\n"+hexString+"\n";
					dataUrl = dataUrl + "330\n1F\n100\nAcDbEntity\n";		

					var cvjs_currentRedlineLayerName = vqRedlines[spc].data("layer")+"_"+multiPages[cvjs_active_floorplan_div_nr].pages[(vqRedlines[spc].data("currentPage"))-1].pageName;
					dataUrl = dataUrl + "8\n"+cvjs_currentRedlineLayerName+"\n62\n"+color+"\n";					
					// ARROW, WE HAVE TO CLOSE POLYGON   70=1
					dataUrl = dataUrl + "370\n   211\n100\nAcDbPolyline\n 90\n"+(points.length+1)+"        \n 70\n     1\n 43\n0.0\n";
					
					var linewidth = cvjs_get_dwg_scaled_value(vqRedlines[spc].data("strokeWidth")*cvjs_redlineThickness_scaleFactor, vqRedlines[spc].data("currentPage"));
					
					for (var i=0; i< points.length; i++){
					     var data = points[i].split(",");
						 dataUrl = dataUrl + "40\n"+linewidth+"\n41\n"+linewidth+"\n";						 
						 dataUrl = dataUrl + "10\n"+cvjs_get_dwg_x_coord(Number(insert[0])+Number(data[0]), vqRedlines[spc].data("currentPage"))+"\n20\n"+cvjs_get_dwg_y_coord(Number(insert[1])+Number(data[1]), vqRedlines[spc].data("currentPage"))+"\n";								 
					}
					
					// we have to make point back to start
					 var data = points[0].split(",");
					 dataUrl = dataUrl + "40\n"+linewidth+"\n41\n"+linewidth+"\n";						 
					 dataUrl = dataUrl + "10\n"+cvjs_get_dwg_x_coord(Number(insert[0])+Number(data[0]), vqRedlines[spc].data("currentPage"))+"\n20\n"+cvjs_get_dwg_y_coord(Number(insert[1])+Number(data[1]),vqStickyNotes[spc].data("currentPage")-1)+"\n";								 
					
					// ARROW, MAKE FILLED HATCH
						
					handle++;
					var hexString = "A"+handle.toString(16);

					var cvjs_currentRedlineLayerName = vqRedlines[spc].data("layer")+"_"+multiPages[cvjs_active_floorplan_div_nr].pages[(vqRedlines[spc].data("currentPage"))-1].pageName;
					dataUrl = dataUrl + "0\nHATCH\n  5\n"+hexString+"\n330\n1F\n100\nAcDbEntity\n  8\n"+cvjs_currentRedlineLayerName+"\n 62\n     "+color+"\n370\n    70\n100\nAcDbHatch\n 10\n0.0\n 20\n0.0\n 30\n0.0\n210\n0.0\n220\n0.0\n230\n1.0\n  2\nANSI31\n";
					// FILLED  70=1
					dataUrl = dataUrl + "  70\n     1\n 71\n     1\n 91\n        1\n 92\n        1\n 93\n       "+points.length+"\n";
 
 					for (var i=0; i< points.length-1; i++){
					     var data1 = points[i].split(",");
					     var data2 = points[i+1].split(",");
						 dataUrl = dataUrl + "72\n 1\n"					 
						 dataUrl = dataUrl + "10\n"+cvjs_get_dwg_x_coord(Number(insert[0])+Number(data1[0]), vqRedlines[spc].data("currentPage"))+"\n20\n"+cvjs_get_dwg_y_coord(Number(insert[1])+Number(data1[1]), vqRedlines[spc].data("currentPage"))+"\n";								 
						 dataUrl = dataUrl + "11\n"+cvjs_get_dwg_x_coord(Number(insert[0])+Number(data2[0]), vqRedlines[spc].data("currentPage"))+"\n21\n"+cvjs_get_dwg_y_coord(Number(insert[1])+Number(data2[1]), vqRedlines[spc].data("currentPage"))+"\n";								 
					}
					
					// we have to make point back to start
					 var data1 = points[points.length-1].split(",");
					 var data2 = points[0].split(",");
					 dataUrl = dataUrl + "72\n 1\n"					 
					 dataUrl = dataUrl + "10\n"+cvjs_get_dwg_x_coord(Number(insert[0])+Number(data1[0]), vqRedlines[spc].data("currentPage"))+"\n20\n"+cvjs_get_dwg_y_coord(Number(insert[1])+Number(data1[1]), vqRedlines[spc].data("currentPage"))+"\n";								 
					 dataUrl = dataUrl + "11\n"+cvjs_get_dwg_x_coord(Number(insert[0])+Number(data2[0]), vqRedlines[spc].data("currentPage"))+"\n21\n"+cvjs_get_dwg_y_coord(Number(insert[1])+Number(data2[1]), vqRedlines[spc].data("currentPage"))+"\n";								 

					 dataUrl = dataUrl + " 97\n        1\n330\n"+currentHandle+"\n 75\n     0\n 76\n     1\n 52\n0.0\n41\n1.0\n 77\n     0\n 78\n     1\n 53\n45.0\n 43\n0.0\n 44\n0.0\n 45\n-2.245064030267288\n 46\n2.245064030267288\n 79\n     0\n 98\n        1\n 10\n0.0\n 20\n0.0\n1001\nACAD\n1010\n0.0\n1020\n0.0\n1030\n0.0\n";
					
					 currentHandle = hexString;
					
					// Hatch
					// associative

						
									
/***
					dataUrl = dataUrl +".attr({transform: \""+vqRedlines[spc].data("transform")+"\", \"fill\": \""+vqRedlines[spc].data("color")+"\"})";
***/
					str_object = vqRedlines[spc].toString();
					str_object = str_object.substring(str_object.indexOf("d=")+3);
					str_object = str_object.substring(0, str_object.indexOf('\"'));
							
/***					
					
					//console.log(str_object);
					dataUrl = dataUrl +", paper.path(\"";
					dataUrl = dataUrl +str_object+" \")";
					dataUrl = dataUrl +".attr({stroke: \""+vqRedlines[spc].data("color")+"\", \"stroke-width\": \""+vqRedlines[spc].data("strokeWidth")+"\", \"fill\": \""+vqRedlines[spc].data("fill")+"\", \"fill-opacity\": \""+vqRedlines[spc].data("fill_opacity")+"\"}))";
					dataUrl = dataUrl +"\n.data(\"node\",\""+vqRedlines[spc].data("node")+"\");\n";
					dataUrl = dataUrl +"vqRedlines.push("+itemRed+");\n\n";
****/
					//console.log(dataUrl);
										
						var checkClosed = str_object.indexOf("Z");
						
						var isClosed = false;
						if (checkClosed >-1){
							isClosed = true;
						}					
						if (!isClosed) str_object = str_object + "Z";
						var outline = new PathConverter.Outline();
						const parser = new PathConverter.SVGParser(outline);
						parser.parse(str_object);

						var color = cvjs_getAutoCADColor(vqRedlines[spc].data("color"));
						// 40 thickness start
						// 41 thickness end     (per vertex)
						// 70 closed poly
						handle++;
						var hexString = "A"+handle.toString(16);
						var linewidth = cvjs_get_dwg_scaled_value(vqRedlines[spc].data("strokeWidth")*cvjs_redlineThickness_scaleFactor, vqRedlines[spc].data("currentPage"));
						
						
						var lPoints=0;

outline.getShapes().forEach(shape => {shape.points.forEach(p => {[p.main, p.left, p.right].forEach(pt => {if (!pt) return;lPoints++;  });});});
						
						//window.alert("1 number of points in path including Z"+lPoints);
						
						if (!isClosed) lPoints--;
						dataUrl = dataUrl + "0\nLWPOLYLINE\n";
						dataUrl = dataUrl + "5\n"+hexString+"\n";
						dataUrl = dataUrl + "330\n1F\n100\nAcDbEntity\n";	

						var cvjs_currentRedlineLayerName = vqRedlines[spc].data("layer")+"_"+multiPages[cvjs_active_floorplan_div_nr].pages[(vqRedlines[spc].data("currentPage"))-1].pageName;
				
						dataUrl = dataUrl + "8\n"+cvjs_currentRedlineLayerName+"\n62\n"+color+"\n";
						var closepoly = 0;
						if (isClosed) closepoly = 1;
						dataUrl = dataUrl + "370\n   211\n100\nAcDbPolyline\n 90\n"+lPoints+"        \n 70\n     "+closepoly+"\n 43\n0.0\n";
						
						var linewidth = cvjs_get_dwg_scaled_value(vqRedlines[spc].data("strokeWidth")*cvjs_redlineThickness_scaleFactor, vqRedlines[spc].data("currentPage"));												
						var j=0;
						outline.getShapes().forEach(shape => {
							shape.points.forEach(p => {
								[p.main, p.left, p.right].forEach(pt => {
									if (!pt) return;
									 if (j<lPoints){
										 dataUrl = dataUrl + "40\n"+linewidth+"\n41\n"+linewidth+"\n";						 
										 dataUrl = dataUrl + "10\n"+cvjs_get_dwg_x_coord(pt.x, vqRedlines[spc].data("currentPage"))+"\n20\n"+cvjs_get_dwg_y_coord(pt.y, vqRedlines[spc].data("currentPage"))+"\n";
									 }
									 j++;
								});
							});
						});
						// NO HATCH, THIS IS AN ARROW TAIL


						// here we put in all the attributes

						dataUrl = dataUrl + "1001\n CADVIEWERJS\n";
						dataUrl = dataUrl + "1000\n node: "+vqRedlines[spc].data("node")+"\n";
						dataUrl = dataUrl + "1000\n name: "+vqRedlines[spc].data("name")+"\n";
						dataUrl = dataUrl + "1000\n id: "+vqRedlines[spc].data("id")+"\n";
						dataUrl = dataUrl + "1000\n layer: "+vqRedlines[spc].data("layer")+"\n";
						dataUrl = dataUrl + "1000\n group: "+vqRedlines[spc].data("group")+"\n";
						dataUrl = dataUrl + "1000\n color: "+vqRedlines[spc].data("color")+"\n";
						dataUrl = dataUrl + "1000\n strokeWidth: "+vqRedlines[spc].data("strokeWidth")+"\n";
						dataUrl = dataUrl + "1000\n fill: "+vqRedlines[spc].data("fill")+"\n";
						dataUrl = dataUrl + "1000\n username: "+vqRedlines[spc].data("username")+"\n";
						dataUrl = dataUrl + "1000\n userid: "+vqRedlines[spc].data("userid")+"\n";
						dataUrl = dataUrl + "1000\n currentPage: "+vqRedlines[spc].data("currentPage")+"\n";
						dataUrl = dataUrl + "1000\n triangle_design: "+vqRedlines[spc].data("triangle_design")+"\n";
						dataUrl = dataUrl + "1000\n polypath_arrow: "+"none"+"\n";
						dataUrl = dataUrl + "1000\n redline_text: "+vqRedlines[spc].data("redline_text")+"\n";
						dataUrl = dataUrl + "1000\n fill_opacity: "+vqRedlines[spc].data("fill_opacity")+"\n";
						dataUrl = dataUrl + "1000\n transform: "+vqRedlines[spc].data("transform")+"\n";
						dataUrl = dataUrl + "1000\n drawingRotation: "+vqRedlines[spc].data("drawingRotation")+"\n";
						
						
						
				}
				else if (str_object.indexOf("text")>-1){

					//dataUrl = dataUrl +"var "+itemRed+"= paper.text( 0, 0,\""+vqRedlines[spc].data("redline_text")+"\")";
					//dataUrl = dataUrl +".attr({stroke: \""+vqRedlines[spc].data("color")+"\", \"fill\": \""+vqRedlines[spc].data("color")+"\", \"font-size\": \""+cvjs_reference_font_size+"\", \"transform\": \""+vqRedlines[spc].data("transform")+"\"})";
					//dataUrl = dataUrl +"\n.data(\"node\",\""+vqRedlines[spc].data("node")+"\");\n";
					//dataUrl = dataUrl +"vqRedlines.push("+itemRed+");\n\n";
/****
					dataUrl = dataUrl +"var "+itemRed+"= paper.path(\"M0,0\")";
					dataUrl = dataUrl +"\n.data(\"node\",\""+vqRedlines[spc].data("node")+"\");\n";
					dataUrl = dataUrl +"vqRedlines.push("+itemRed+");\n\n";
***/

//						transform: "T615.5240601004703,209.54819432253697   S0.20498583644859775,   615.5240601004703,   209.54819432253697",
					
					var transformscale = vqRedlines[spc].data("transform");				
					var transform = transformscale.substring(1, transformscale.indexOf("S")); 
					var insert = transform.split(",");					
					var scale = transformscale.substring(transformscale.indexOf("S")+1);
					var textscale = scale.split(",");					
					var color = cvjs_getAutoCADColor(vqRedlines[spc].data("color"));
					// 40 thickness start
					// 41 thickness end     (per vertex)
					// 70 closed poly
					handle++;
					var hexString = "A"+handle.toString(16);

					
					var mytext = vqRedlines[spc].data("redline_text");
					var strings =  mytext.split("<br>");
					//window.alert(strings.length);
					var maxchar = 1;
					for (var k=0; k<strings.length; k++){

						if (strings[k].length>maxchar) maxchar = strings[k].length;
					}				
//					window.alert(maxchar);
					var numberofRows = (mytext.match(/<br>/g) || []).length +1;  // number of rows is number of <br> +1
					mytext = "{"+mytext+"}";
					mytext = mytext.replace(/<br>/g, '\\P');		
							
					dataUrl = dataUrl +"0\nMTEXT\n";
					dataUrl = dataUrl + "5\n"+hexString+"\n";

					var cvjs_currentRedlineLayerName = vqRedlines[spc].data("layer")+"_"+multiPages[cvjs_active_floorplan_div_nr].pages[(vqRedlines[spc].data("currentPage"))-1].pageName;

					dataUrl = dataUrl +"330\n1F\n100\nAcDbEntity\n8\n"+cvjs_currentRedlineLayerName+"\n62\n"+color+"\n100\nAcDbMText\n";
					dataUrl = dataUrl +"10\n"+cvjs_get_dwg_x_coord(insert[0], vqRedlines[spc].data("currentPage"))+"\n";
					dataUrl = dataUrl +"20\n"+cvjs_get_dwg_y_coord(insert[1], vqRedlines[spc].data("currentPage"))+"\n";
					dataUrl = dataUrl +"30\n 0\n";
					dataUrl = dataUrl +"40\n"+cvjs_get_dwg_scaled_value(cvjs_reference_font_size*textscale[0], vqRedlines[spc].data("currentPage"))+"\n";
					dataUrl = dataUrl +"41\n"+cvjs_get_dwg_scaled_value(insert[1]+numberofRows*cvjs_reference_font_size*textscale[0], vqRedlines[spc].data("currentPage"))+"\n";   // Think this is the yvalue of the end of the box, insertion y + height of text
					dataUrl = dataUrl +" 71\n     1\n 72\n     5\n  1\n";					
					dataUrl = dataUrl + mytext +"\n";
					// here we need to adjust 46 and 1040
					
					// Think 1040 is the height of all text + extra   // I think
					// Think 1070 is the width of maximum textstring   // I think
					
					var myBoxWidth = cvjs_get_dwg_scaled_value((cvjs_reference_font_size*textscale[0])*0.8*maxchar, vqRedlines[spc].data("currentPage"));
					
					//dataUrl = dataUrl + " 73\n     1\n 44\n1.0\n1001\nACAD\n1000\nACAD_MTEXT_DEFINED_HEIGHT_BEGIN\n1070\n    "+myBoxWidth+"\n1040\n"+cvjs_get_dwg_scaled_value(numberofRows*cvjs_reference_font_size*textscale[0]*1.2)+"\n1000\nACAD_MTEXT_DEFINED_HEIGHT_END\n"
					
					dataUrl = dataUrl + " 73\n     1\n 44\n1.0\n1001\nACAD\n1000\nACAD_MTEXT_DEFINED_HEIGHT_BEGIN\n1070\n    "+myBoxWidth+"\n1040\n"+cvjs_get_dwg_scaled_value(numberofRows*cvjs_reference_font_size*textscale[0])+"\n1000\nACAD_MTEXT_DEFINED_HEIGHT_END\n"
					dataUrl = dataUrl + "1001\n CADVIEWERJS\n";
					dataUrl = dataUrl + "1000\n node: "+vqRedlines[spc].data("node")+"\n";
					dataUrl = dataUrl + "1000\n name: "+vqRedlines[spc].data("name")+"\n";
					dataUrl = dataUrl + "1000\n id: "+vqRedlines[spc].data("id")+"\n";
					dataUrl = dataUrl + "1000\n layer: "+vqRedlines[spc].data("layer")+"\n";
					dataUrl = dataUrl + "1000\n group: "+vqRedlines[spc].data("group")+"\n";
					dataUrl = dataUrl + "1000\n color: "+vqRedlines[spc].data("color")+"\n";
					dataUrl = dataUrl + "1000\n strokeWidth: "+vqRedlines[spc].data("strokeWidth")+"\n";
					dataUrl = dataUrl + "1000\n fill: "+vqRedlines[spc].data("fill")+"\n";
					dataUrl = dataUrl + "1000\n username: "+vqRedlines[spc].data("username")+"\n";
					dataUrl = dataUrl + "1000\n userid: "+vqRedlines[spc].data("userid")+"\n";
					dataUrl = dataUrl + "1000\n currentPage: "+vqRedlines[spc].data("currentPage")+"\n";
					dataUrl = dataUrl + "1000\n triangle_design: "+vqRedlines[spc].data("triangle_design")+"\n";
					dataUrl = dataUrl + "1000\n polypath_arrow: "+"none"+"\n";
					dataUrl = dataUrl + "1000\n redline_text: "+vqRedlines[spc].data("redline_text")+"\n";
					dataUrl = dataUrl + "1000\n fill_opacity: "+vqRedlines[spc].data("fill_opacity")+"\n";
					dataUrl = dataUrl + "1000\n transform: "+vqRedlines[spc].data("transform")+"\n";
					dataUrl = dataUrl + "1000\n drawingRotation: "+vqRedlines[spc].data("drawingRotation")+"\n";
						

		
										
/***					
					dataUrl = dataUrl +"TEXT\n";
					dataUrl = dataUrl + "5\n"+hexString+"\n";

					dataUrl = dataUrl +"8\n0\n62\n"+color+"\n";
//					dataUrl = dataUrl +"10\n"+www.origX+"\n";
//					dataUrl = dataUrl +"20\n"+www.origY+"\n";
					dataUrl = dataUrl +"10\n"+insert[0]+"\n";
					dataUrl = dataUrl +"20\n"+insert[1]+"\n";
					dataUrl = dataUrl +"1\n"+vqRedlines[spc].data("redline_text")+"\n";
//					dataUrl = dataUrl +"40\n"+(www.origHeight/4)+"\n";
//					dataUrl = dataUrl +"7\n"+font.getName()+"n";
					dataUrl = dataUrl +"40\n"+(cvjs_reference_font_size*textscale[0])+"\n";
					dataUrl = dataUrl +"7\n"+"Ariel"+"\n";
					dataUrl = dataUrl +"0\n";
**/



					
					
				}
				else{
					if (str_object.indexOf("path")>-1){

						//window.alert(str_object);
					
						var fillopacity = str_object.substring(str_object.indexOf("fill-opacity")+13);
						
						fillopacity = fillopacity.substring(0, fillopacity.indexOf(";"));
						
//						window.alert(fillopacity+"  "+Number(fillopacity));
						
						var opacityFlag = (Number(fillopacity)>0.02)

						//window.alert(fillopacity+"  "+Number(fillopacity)+"  "+opacityFlag);
						
						
						str_object = str_object.substring(str_object.indexOf("d=")+3);
						str_object = str_object.substring(0, str_object.indexOf('\"'));
						
//console.log("path XXXXXXXXXXX"+str_object+"XXXXXXXXXXXX");	

						var checkClosed = str_object.indexOf("Z");
						
						var isClosed = false;
						if (checkClosed >-1){
							isClosed = true;
						}					
						if (!isClosed) str_object = str_object + "Z";
						var outline = new PathConverter.Outline();
						const parser = new PathConverter.SVGParser(outline);
						parser.parse(str_object);
						
						var color = cvjs_getAutoCADColor(vqRedlines[spc].data("color"));
						// 40 thickness start
						// 41 thickness end     (per vertex)
						// 70 closed poly
						handle++;
						var hexString = "A"+handle.toString(16);
						
						currentHandle = hexString;
						
						var linewidth = vqRedlines[spc].data("strokeWidth")*cvjs_redlineThickness_scaleFactor;

						var lPoints=0;
						outline.getShapes().forEach(shape => {
							shape.points.forEach(p => {
								[p.main, p.left, p.right].forEach(pt => {
									if (!pt) return;
									 lPoints++;									 
								});
							});
						});
						
						//window.alert("2 number of points in path including Z "+lPoints);
						
						if (!isClosed) lPoints--;

						dataUrl = dataUrl + "0\nLWPOLYLINE\n";
						dataUrl = dataUrl + "5\n"+hexString+"\n";
						dataUrl = dataUrl + "330\n1F\n100\nAcDbEntity\n";	

						var cvjs_currentRedlineLayerName = vqRedlines[spc].data("layer")+"_"+multiPages[cvjs_active_floorplan_div_nr].pages[(vqRedlines[spc].data("currentPage"))-1].pageName;
				
						dataUrl = dataUrl + "8\n"+cvjs_currentRedlineLayerName+"\n62\n"+color+"\n";
						var closepoly = 0;
						if (isClosed) closepoly = 1;
						dataUrl = dataUrl + "370\n   211\n100\nAcDbPolyline\n 90\n"+lPoints+"        \n 70\n     "+closepoly+"\n 43\n0.0\n";
						
						var linewidth = vqRedlines[spc].data("strokeWidth")*cvjs_redlineThickness_scaleFactor;
												
						var j=0;
						outline.getShapes().forEach(shape => {
							shape.points.forEach(p => {
								[p.main, p.left, p.right].forEach(pt => {
									if (!pt) return;
									 if (j<lPoints){
										 dataUrl = dataUrl + "40\n"+cvjs_get_dwg_scaled_value(linewidth, vqRedlines[spc].data("currentPage"))+"\n41\n"+cvjs_get_dwg_scaled_value(linewidth, vqRedlines[spc].data("currentPage"))+"\n";						 
//										 dataUrl = dataUrl + "40\n"+linewidth+"\n41\n"+linewidth+"\n";						 
//										 dataUrl = dataUrl + "10\n"+pt.x+"\n20\n"+pt.y+"\n";
										 dataUrl = dataUrl + "10\n"+cvjs_get_dwg_x_coord(pt.x, vqRedlines[spc].data("currentPage"))+"\n20\n"+cvjs_get_dwg_y_coord(pt.y, vqRedlines[spc].data("currentPage"))+"\n";
									 }
									 j++;
								});
							});
						});
						dataUrl = dataUrl + "1001\n CADVIEWERJS\n";
						dataUrl = dataUrl + "1000\n node: "+vqRedlines[spc].data("node")+"\n";
						dataUrl = dataUrl + "1000\n name: "+vqRedlines[spc].data("name")+"\n";
						dataUrl = dataUrl + "1000\n id: "+vqRedlines[spc].data("id")+"\n";
						dataUrl = dataUrl + "1000\n layer: "+vqRedlines[spc].data("layer")+"\n";
						dataUrl = dataUrl + "1000\n group: "+vqRedlines[spc].data("group")+"\n";
						dataUrl = dataUrl + "1000\n color: "+vqRedlines[spc].data("color")+"\n";
						dataUrl = dataUrl + "1000\n strokeWidth: "+vqRedlines[spc].data("strokeWidth")+"\n";
						dataUrl = dataUrl + "1000\n fill: "+vqRedlines[spc].data("fill")+"\n";
						dataUrl = dataUrl + "1000\n username: "+vqRedlines[spc].data("username")+"\n";
						dataUrl = dataUrl + "1000\n userid: "+vqRedlines[spc].data("userid")+"\n";
						dataUrl = dataUrl + "1000\n currentPage: "+vqRedlines[spc].data("currentPage")+"\n";
						dataUrl = dataUrl + "1000\n triangle_design: "+vqRedlines[spc].data("triangle_design")+"\n";
						dataUrl = dataUrl + "1000\n polypath_arrow: "+"none"+"\n";
						dataUrl = dataUrl + "1000\n redline_text: "+vqRedlines[spc].data("redline_text")+"\n";
						dataUrl = dataUrl + "1000\n fill_opacity: "+vqRedlines[spc].data("fill_opacity")+"\n";
						dataUrl = dataUrl + "1000\n transform: "+vqRedlines[spc].data("transform")+"\n";
						dataUrl = dataUrl + "1000\n drawingRotation: "+vqRedlines[spc].data("drawingRotation")+"\n";
						
			
						// the check if fill and transparency
						if (opacityFlag && isClosed){
						
						// THIS CAN BE CLOSED OR OPEN
						// IF CLOSED MAKE A HATCH
						// IF TRANSPARANCY MAKE A HATCH
						
							handle++;
							var hexString = "A"+handle.toString(16);

							var cvjs_currentRedlineLayerName = vqRedlines[spc].data("layer")+"_"+multiPages[cvjs_active_floorplan_div_nr].pages[(vqRedlines[spc].data("currentPage"))-1].pageName;

							dataUrl = dataUrl + "0\nHATCH\n  5\n"+hexString+"\n330\n1F\n100\nAcDbEntity\n  8\n"+cvjs_currentRedlineLayerName+"\n 62\n     "+color+"\n370\n    70\n100\nAcDbHatch\n 10\n0.0\n 20\n0.0\n 30\n0.0\n210\n0.0\n220\n0.0\n230\n1.0\n  2\nANSI31\n";
							// HATCH  70=1
							dataUrl = dataUrl + "  70\n     0\n 71\n     1\n 91\n        1\n 92\n        1\n 93\n       "+(lPoints-1)+"\n";
							var pointsx=new Array();
							var pointsy=new Array();
							var j=0;
							outline.getShapes().forEach(shape => {
								shape.points.forEach(p => {
									[p.main, p.left, p.right].forEach(pt => {
										if (!pt) return;										
										pointsx[j] = pt.x; 
										pointsy[j] = pt.y; 
										j++;
									});
								});
							});
							
							for (var i=0; i< pointsx.length-1; i++){
								 dataUrl = dataUrl + "72\n 1\n"					 
//								 dataUrl = dataUrl + "10\n"+pointsx[i]+"\n20\n"+pointsy[i]+"\n";								 
//								 dataUrl = dataUrl + "11\n"+pointsx[i+1]+"\n21\n"+pointsy[i+1]+"\n";								 
								 dataUrl = dataUrl + "10\n"+cvjs_get_dwg_x_coord(pointsx[i], vqRedlines[spc].data("currentPage"))+"\n20\n"+cvjs_get_dwg_y_coord(pointsy[i], vqRedlines[spc].data("currentPage"))+"\n";								 
								 dataUrl = dataUrl + "11\n"+cvjs_get_dwg_x_coord(pointsx[i+1], vqRedlines[spc].data("currentPage"))+"\n21\n"+cvjs_get_dwg_y_coord(pointsy[i+1], vqRedlines[spc].data("currentPage"))+"\n";								 
							}							
							// we have to make point back to start
							 dataUrl = dataUrl + "72\n 1\n"					 
//							 dataUrl = dataUrl + "10\n"+pointsx[pointsx.length-1]+"\n20\n"+pointsy[pointsx.length-1]+"\n";								 
//							 dataUrl = dataUrl + "11\n"+pointsx[0]+"\n21\n"+pointsy[0]+"\n";								 
							 dataUrl = dataUrl + "10\n"+cvjs_get_dwg_x_coord(pointsx[pointsx.length-1], vqRedlines[spc].data("currentPage"))+"\n20\n"+cvjs_get_dwg_y_coord(pointsy[pointsx.length-1], vqRedlines[spc].data("currentPage"))+"\n";								 
							 dataUrl = dataUrl + "11\n"+cvjs_get_dwg_x_coord(pointsx[0], vqRedlines[spc].data("currentPage"))+"\n21\n"+cvjs_get_dwg_y_coord(pointsy[0], vqRedlines[spc].data("currentPage"))+"\n";								 

							 dataUrl = dataUrl + " 97\n        1\n330\n"+currentHandle+"\n 75\n     0\n 76\n     1\n 52\n0.0\n41\n1.0\n 77\n     0\n 78\n     1\n 53\n45.0\n 43\n0.0\n 44\n0.0\n 45\n"+cvjs_get_dwg_scaled_value(-2.245064030267288*3.0)+"\n 46\n"+cvjs_get_dwg_scaled_value(2.245064030267288*3.0)+"\n 79\n     0\n 98\n        1\n 10\n0.0\n 20\n0.0\n1001\nACAD\n1010\n0.0\n1020\n0.0\n1030\n0.0\n";							
							 currentHandle = hexString;
						}	

						
console.log("dataURL TOTAL "+dataUrl+" dataURL TOTAL ");	
					
					
					/*						
						//console.log(str_object);
						dataUrl = dataUrl +"var "+itemRed+"= paper.path(\"";
						dataUrl = dataUrl +str_object+" \")";
						dataUrl = dataUrl +".attr({stroke: \""+vqRedlines[spc].data("color")+"\", \"stroke-width\": \""+vqRedlines[spc].data("strokeWidth")+"\", \"fill\": \""+vqRedlines[spc].data("fill")+"\", \"fill-opacity\": \""+vqRedlines[spc].data("fill_opacity")+"\"})";
						dataUrl = dataUrl +"\n.data(\"node\",\""+vqRedlines[spc].data("node")+"\");\n";
						dataUrl = dataUrl +"vqRedlines.push("+itemRed+");\n\n";
*/
					}
				}


				// 2017-07-09
/***
				dataUrl = dataUrl +"cvjs_stickyNotesRedlines.push(cvjs_stickyNotesRedlines_Base["+spc+"]);\n\n";
***/
			} // case node exists
		}

				
		dataUrl = dataUrl +"0\nENDSEC\n0\nEOF\n";
		
		
/***
		dataUrl = dataUrl +" cvjs_redline="+spc_counter+"; \n\n";
***/
		
		
		
		
/***		
		
		var spc_counter = 0;
		for (spc in vqStickyNotes)
		{
			if (vqStickyNotes[spc].data("deleted") == true ){
				// the note is deleted, so no nothing
				//console.log("file.js deleted node "+vqStickyNotes[spc].data("node"));
			}
			else{  // node exists

				spc_counter++;
				var itemSNote = "itemSNote"+spc_counter;
				var str_object = vqStickyNotes[spc].toString();

				var rightadjustment = 0;
				if (vqStickyNotes[spc].data("id")<10) rightadjustment = 3;
				var SNoteTemplate = "paper.group(paper.path(\"M0,0h20v20h-20v-20Z\").attr({stroke: \"#000000\", \"stroke-width\" : \"1.0\"}),"+
					"paper.path(\"M7,12h1.3M9.5,12h3.5M11.25,12v5M9.75,12v1.75M12.75,12v1.75M10.5,17h1.5M7,13.5h1.3M7,15.25h3M7,17.0h2.2\").attr({stroke: \"#000000\", \"stroke-width\" : \"0.5\"}),"+
					"paper.text("+(3+rightadjustment)+",9,\"#"+vqStickyNotes[spc].data("id")+"\").attr({\"font-size\": \"8px\", \"font-style\": \"italic\", stroke: \"#000000\", \"stroke-width\" : \"0.3\", \"stroke\" : \"0.3\", \"fill\" : \"#000000\", \"fill-opacity\" : 1.0}))";
					
					// 2018-03-15
//					SNoteTemplate = SNoteTemplate + ".attr({\'transform\': \""+vqStickyNotes[spc].data("transform")+"\" , \"opacity\" : \"1\"})";
					
					// we are simply loading in a scaled down image that we then make come "alive"
					SNoteTemplate = SNoteTemplate + ".attr({\'transform\': \"t0,0S0.01\" , \"opacity\" : \"0.1\"})";
					
					
					SNoteTemplate = SNoteTemplate + ".attr({	fill: \'#FFF\', \"fill-opacity\": \"0.8\", stroke: \'#000\', \'stroke-opacity\': \"1\" })";

					dataUrl = dataUrl +"var "+itemSNote+"="+SNoteTemplate+"\n.data(\"node\",\""+vqStickyNotes[spc].data("node")+"\");\n";
					dataUrl = dataUrl +"vqStickyNotes.push("+itemSNote+");\n\n";

					var notePos = parseInt(spc)+vqRedlines.length;
				// 2017-07-09
				dataUrl = dataUrl +"cvjs_stickyNotesRedlines.push(cvjs_stickyNotesRedlines_Base["+notePos+"]);\n\n";

			} // case node exists
		}

		dataUrl = dataUrl +" cvjs_stickynote="+spc_counter+"; \n\n";

		dataUrl = dataUrl +"}\n";

		dataUrl = dataUrl +"\njQuery(document).ready(function() { \n";
		dataUrl = dataUrl +"	stickynotesRedlines_loaded = true; \n";
		dataUrl = dataUrl +"}); \n";
		dataUrl = dataUrl +"stickynotesRedlines_loaded = true; \n";



// ZZZZZ Let us now try to make sure everything is syntactically correct
// 2017-07-09 , this has already been fixed upon upload

	if (cvjs_debug) 		console.log("redline length "+vqRedlines.length);

		var topIndex = vqRedlines.length;

		for (var i=0; i<vqRedlines.length; i++){

			var j=0;
			var tempString = dataUrl;
			var k=i+1;
			var redVar = "RED_"+k;

			while (tempString.indexOf(redVar)>-1){
				j++;
				tempString = tempString.substring(tempString.indexOf(redVar)+4);
			}

if (cvjs_debug) 			console.log("Instances of "+redVar+" is "+j);

			if (j==4){
	if (cvjs_debug) 				console.log("we need to substitute 2 and 4th instance of "+redVar+" with new variable names!")
				topIndex++;
				var redVarNew = "RED_"+topIndex;

				// change 2nd instance
				var nIndex = nthIndex(dataUrl, redVar, 2);
				dataUrl = dataUrl.substring(0,nIndex)+redVarNew+dataUrl.substring(nIndex+redVar.length);

				// change 4th instance   - now one instance is gone, therefore 3rd instance
				var nIndex = nthIndex(dataUrl, redVar, 3);
				dataUrl = dataUrl.substring(0,nIndex)+redVarNew+dataUrl.substring(nIndex+redVar.length);

			}
		}
***/
		return(dataUrl);

};




/*
 * Returns the current redlines and sticky notes as a string object in JS so the user can do their own server side save
 * bypassing php or servlet code
 * @return {string} RedlineNote - a string containg the redline, sticky note object
 */


function cvjs_getStickyNotesRedlineJS(){


return (cvjs_getStickyNotesRedline());

}




/*
 * Returns the current redlines and sticky notes as a string object in so the user can do their own server side save
 * bypassing php or servlet code
 * @return {string} RedlineNote - a string containg the redline, sticky note object
 */

function cvjs_getStickyNotesRedline(){

		var dataUrl="";

		var comma_flag =0;

		dataUrl = dataUrl +"var cvjs_stickyNotesRedlines_Base = {\n";

		for (spc in vqRedlines)
		{

	if (cvjs_debug) 			console.log("spc="+spc);

			if (vqRedlines[spc].data("deleted") == true ){
				if (cvjs_debug) console.log("file.js deleted node "+vqRedlines[spc].data("node"));
			}
			else{  // node exists

				if (comma_flag == 0){
					comma_flag = 1
				}
				else{
					dataUrl = dataUrl +"						,\n";
				}

				dataUrl = dataUrl +"					"+spc+": {\n";
//				dataUrl = dataUrl +"					"+vqRedlines[spc].data("node")+": {\n";
				dataUrl = dataUrl +"						node: \""+vqRedlines[spc].data("node")+"\",\n";
				dataUrl = dataUrl +"						name: \""+vqRedlines[spc].data("name")+"\",\n";
				dataUrl = dataUrl +"						id: \""+vqRedlines[spc].data("id")+"\",\n";
				dataUrl = dataUrl +"						layer: \""+vqRedlines[spc].data("layer")+"\",\n";
				dataUrl = dataUrl +"						group: \""+vqRedlines[spc].data("group")+"\",\n";
				dataUrl = dataUrl +"						color: \""+vqRedlines[spc].data("color")+"\",\n";
				dataUrl = dataUrl +"						strokeWidth: \""+vqRedlines[spc].data("strokeWidth")+"\",\n";
				dataUrl = dataUrl +"						fill: \""+vqRedlines[spc].data("fill")+"\",\n";
				dataUrl = dataUrl +"						username: \""+vqRedlines[spc].data("username")+"\",\n";
				dataUrl = dataUrl +"						userid: \""+vqRedlines[spc].data("userid")+"\",\n";
				dataUrl = dataUrl +"						currentPage: "+vqRedlines[spc].data("currentPage")+",\n";
				dataUrl = dataUrl +"						triangle_design: \""+vqRedlines[spc].data("triangle_design")+"\",\n";
				dataUrl = dataUrl +"						polypath_arrow: \""+vqRedlines[spc].data("polypath_arrow")+"\",\n";
				dataUrl = dataUrl +"						redline_text: \""+vqRedlines[spc].data("redline_text")+"\",\n";
				dataUrl = dataUrl +"						fill_opacity: \""+vqRedlines[spc].data("fill_opacity")+"\",\n";
				dataUrl = dataUrl +"						transform: \""+vqRedlines[spc].data("transform")+"\",\n";
				dataUrl = dataUrl +"						drawingRotation: "+vqRedlines[spc].data("drawingRotation")+"\n";
				dataUrl = dataUrl +"					}\n";

			} // case node exists
		}


		if (vqRedlines.length>0 && vqStickyNotes.length>0)
			dataUrl = dataUrl +"						,\n";


		comma_flag =0;
		for (spc in vqStickyNotes)
		{
			if (vqStickyNotes[spc].data("deleted") == true ){
				// do nothing, the note is not there
				//console.log("file.js deleted node "+vqStickyNotes[spc].data("node"));
			}
			else{  // node exists

				if (comma_flag == 0){
					comma_flag = 1
				}
				else{
					dataUrl = dataUrl +"						,\n";
				}

				var notePos = parseInt(spc)+vqRedlines.length;

				dataUrl = dataUrl +"					"+notePos+": {\n";
//				dataUrl = dataUrl +"					"+vqStickyNotes[spc].data("node")+": {\n";
				dataUrl = dataUrl +"						node: \""+vqStickyNotes[spc].data("node")+"\",\n";

				dataUrl = dataUrl +"						name: \""+vqStickyNotes[spc].data("name")+"\",\n";
				dataUrl = dataUrl +"						id: \""+vqStickyNotes[spc].data("id")+"\",\n";
				dataUrl = dataUrl +"						layer: \""+vqStickyNotes[spc].data("layer")+"\",\n";
				dataUrl = dataUrl +"						group: \""+vqStickyNotes[spc].data("group")+"\",\n";
				dataUrl = dataUrl +"						text: \""+vqStickyNotes[spc].data("text")+"\",\n";
				dataUrl = dataUrl +"						userid: \""+vqStickyNotes[spc].data("userid")+"\",\n";
				dataUrl = dataUrl +"						currentPage: "+vqStickyNotes[spc].data("currentPage")+",\n";
				dataUrl = dataUrl +"						date: \""+vqStickyNotes[spc].data("date")+"\",\n";
				dataUrl = dataUrl +"						linked: "+vqStickyNotes[spc].data("linked")+",\n";
				dataUrl = dataUrl +"						transform: \""+vqStickyNotes[spc].data("transform")+"\",\n";
				dataUrl = dataUrl +"						drawingRotation: "+vqStickyNotes[spc].data("drawingRotation")+"\n";
				dataUrl = dataUrl +"					}\n";

			} // case node exists
		}

		dataUrl = dataUrl +"}\n\n";


		dataUrl = dataUrl +"function cvjs_setUpStickyNotesRedlines(paper){\n\n";

		var spc_counter = 0;
		for (spc in vqRedlines)
		{
			if (vqRedlines[spc].data("deleted") == true ){
				// do nothing, the redline is not there
				//console.log("file.js deleted node "+vqRedlines[spc].data("node"));
			}
			else{  // node exists

					
				spc_counter++;
				var itemRed = "cItemRed"+spc_counter;
				var str_object = vqRedlines[spc].toString();
				
				if (str_object.indexOf("polyline")>-1){

//					console.log("this is an arrow!  "+str_object);

					str_object = str_object.substring(str_object.indexOf("points=")+8);
					str_object = str_object.substring(0, str_object.indexOf('\"'));

					dataUrl = dataUrl +"var "+itemRed+"= paper.g(paper.polyline(\"";
					dataUrl = dataUrl +str_object+" \")";

					str_object = vqRedlines[spc].toString();
					str_object = str_object.substring(str_object.indexOf("matrix(")+8);
					str_object = str_object.substring(0, str_object.indexOf(')'));

					dataUrl = dataUrl +".attr({transform: \""+vqRedlines[spc].data("transform")+"\", \"fill\": \""+vqRedlines[spc].data("color")+"\"})";

					str_object = vqRedlines[spc].toString();
					str_object = str_object.substring(str_object.indexOf("d=")+3);
					str_object = str_object.substring(0, str_object.indexOf('\"'));

					//console.log(str_object);
					dataUrl = dataUrl +", paper.path(\"";
					dataUrl = dataUrl +str_object+" \")";
					dataUrl = dataUrl +".attr({stroke: \""+vqRedlines[spc].data("color")+"\", \"stroke-width\": \""+vqRedlines[spc].data("strokeWidth")+"\", \"fill\": \""+vqRedlines[spc].data("fill")+"\", \"fill-opacity\": \""+vqRedlines[spc].data("fill_opacity")+"\"}))";
					dataUrl = dataUrl +"\n.data(\"node\",\""+vqRedlines[spc].data("node")+"\");\n";
					dataUrl = dataUrl +"vqRedlines.push("+itemRed+");\n\n";

					//console.log(dataUrl);

				}
				else if (str_object.indexOf("text")>-1){

					//dataUrl = dataUrl +"var "+itemRed+"= paper.text( 0, 0,\""+vqRedlines[spc].data("redline_text")+"\")";
					//dataUrl = dataUrl +".attr({stroke: \""+vqRedlines[spc].data("color")+"\", \"fill\": \""+vqRedlines[spc].data("color")+"\", \"font-size\": \""+cvjs_reference_font_size+"\", \"transform\": \""+vqRedlines[spc].data("transform")+"\"})";
					//dataUrl = dataUrl +"\n.data(\"node\",\""+vqRedlines[spc].data("node")+"\");\n";
					//dataUrl = dataUrl +"vqRedlines.push("+itemRed+");\n\n";

					dataUrl = dataUrl +"var "+itemRed+"= paper.path(\"M0,0\")";
					dataUrl = dataUrl +"\n.data(\"node\",\""+vqRedlines[spc].data("node")+"\");\n";
					dataUrl = dataUrl +"vqRedlines.push("+itemRed+");\n\n";

				}
				else{
					if (str_object.indexOf("path")>-1){
						str_object = str_object.substring(str_object.indexOf("d=")+3);
						str_object = str_object.substring(0, str_object.indexOf('\"'));
						//console.log(str_object);
						dataUrl = dataUrl +"var "+itemRed+"= paper.path(\"";
						dataUrl = dataUrl +str_object+" \")";
						dataUrl = dataUrl +".attr({stroke: \""+vqRedlines[spc].data("color")+"\", \"stroke-width\": \""+vqRedlines[spc].data("strokeWidth")+"\", \"fill\": \""+vqRedlines[spc].data("fill")+"\", \"fill-opacity\": \""+vqRedlines[spc].data("fill_opacity")+"\"})";
						dataUrl = dataUrl +"\n.data(\"node\",\""+vqRedlines[spc].data("node")+"\");\n";
						dataUrl = dataUrl +"vqRedlines.push("+itemRed+");\n\n";
					}
					else
						if (str_object.indexOf("ellipse")>-1){
							
							console.log(str_object);
							
							
							// find dx=
							// find dy=
							// find rx=
							// find ry=
							
							var cx = str_object.substring(str_object.indexOf("cx=")+4);
							//console.log(cx);
							cx = cx.substring(0, cx.indexOf("\""));

							var cy = str_object.substring(str_object.indexOf("cy=")+4);
							//console.log(cy);
							cy = cy.substring(0, cy.indexOf("\""));

							var rx = str_object.substring(str_object.indexOf("rx=")+4);
							//console.log(rx);
							rx = rx.substring(0, rx.indexOf("\""));

							var ry = str_object.substring(str_object.indexOf("ry=")+4);
							//console.log(ry);
							ry = ry.substring(0, ry.indexOf("\""));		
							
							//console.log(str_object);
							dataUrl = dataUrl +"var "+itemRed+"= paper.ellipse("+cx+","+cy+","+rx+","+ry;
							dataUrl = dataUrl + ")";
							dataUrl = dataUrl +".attr({stroke: \""+vqRedlines[spc].data("color")+"\", \"stroke-width\": \""+vqRedlines[spc].data("strokeWidth")+"\", \"fill\": \""+vqRedlines[spc].data("fill")+"\", \"fill-opacity\": \""+vqRedlines[spc].data("fill_opacity")+"\"})";
							dataUrl = dataUrl +"\n.data(\"node\",\""+vqRedlines[spc].data("node")+"\");\n";
							dataUrl = dataUrl +"vqRedlines.push("+itemRed+");\n\n";
						}			
					
				}


				// 2017-07-09
				dataUrl = dataUrl +"cvjs_stickyNotesRedlines.push(cvjs_stickyNotesRedlines_Base["+spc+"]);\n\n";

			} // case node exists
		}


		dataUrl = dataUrl +" cvjs_redline="+spc_counter+"; \n\n";

		var spc_counter = 0;
		for (spc in vqStickyNotes)
		{
			if (vqStickyNotes[spc].data("deleted") == true ){
				// the note is deleted, so no nothing
				//console.log("file.js deleted node "+vqStickyNotes[spc].data("node"));
			}
			else{  // node exists

				spc_counter++;
				var itemSNote = "itemSNote"+spc_counter;
				var str_object = vqStickyNotes[spc].toString();

				var rightadjustment = 0;
				if (vqStickyNotes[spc].data("id")<10) rightadjustment = 3;
				var SNoteTemplate = "paper.group(paper.path(\"M0,0h20v20h-20v-20Z\").attr({stroke: \"#000000\", \"stroke-width\" : \"1.0\"}),"+
					"paper.path(\"M7,12h1.3M9.5,12h3.5M11.25,12v5M9.75,12v1.75M12.75,12v1.75M10.5,17h1.5M7,13.5h1.3M7,15.25h3M7,17.0h2.2\").attr({stroke: \"#000000\", \"stroke-width\" : \"0.5\"}),"+
					"paper.text("+(3+rightadjustment)+",9,\"#"+vqStickyNotes[spc].data("id")+"\").attr({\"font-size\": \"8px\", \"font-style\": \"italic\", stroke: \"#000000\", \"stroke-width\" : \"0.3\", \"stroke\" : \"0.3\", \"fill\" : \"#000000\", \"fill-opacity\" : 1.0}))";
					
					// 2018-03-15
//					SNoteTemplate = SNoteTemplate + ".attr({\'transform\': \""+vqStickyNotes[spc].data("transform")+"\" , \"opacity\" : \"1\"})";
					
					// we are simply loading in a scaled down image that we then make come "alive"
					SNoteTemplate = SNoteTemplate + ".attr({\'transform\': \"t0,0S0.01\" , \"opacity\" : \"0.1\"})";
					
					
					SNoteTemplate = SNoteTemplate + ".attr({	fill: \'#FFF\', \"fill-opacity\": \"0.8\", stroke: \'#000\', \'stroke-opacity\': \"1\" })";

					dataUrl = dataUrl +"var "+itemSNote+"="+SNoteTemplate+"\n.data(\"node\",\""+vqStickyNotes[spc].data("node")+"\");\n";
					dataUrl = dataUrl +"vqStickyNotes.push("+itemSNote+");\n\n";

					var notePos = parseInt(spc)+vqRedlines.length;
				// 2017-07-09
				dataUrl = dataUrl +"cvjs_stickyNotesRedlines.push(cvjs_stickyNotesRedlines_Base["+notePos+"]);\n\n";

			} // case node exists
		}

		dataUrl = dataUrl +" cvjs_stickynote="+spc_counter+"; \n\n";

		dataUrl = dataUrl +"}\n";

		dataUrl = dataUrl +"\njQuery(document).ready(function() { \n";
		dataUrl = dataUrl +"	stickynotesRedlines_loaded = true; \n";
		dataUrl = dataUrl +"}); \n";
		dataUrl = dataUrl +"stickynotesRedlines_loaded = true; \n";



// ZZZZZ Let us now try to make sure everything is syntactically correct
// 2017-07-09 , this has already been fixed upon upload

	if (cvjs_debug) 		console.log("redline length "+vqRedlines.length);

		var topIndex = vqRedlines.length;

		for (var i=0; i<vqRedlines.length; i++){

			var j=0;
			var tempString = dataUrl;
			var k=i+1;
			var redVar = "RED_"+k;

			while (tempString.indexOf(redVar)>-1){
				j++;
				tempString = tempString.substring(tempString.indexOf(redVar)+4);
			}

if (cvjs_debug) 			console.log("Instances of "+redVar+" is "+j);

			if (j==4){
	if (cvjs_debug) 				console.log("we need to substitute 2 and 4th instance of "+redVar+" with new variable names!")
				topIndex++;
				var redVarNew = "RED_"+topIndex;

				// change 2nd instance
				var nIndex = nthIndex(dataUrl, redVar, 2);
				dataUrl = dataUrl.substring(0,nIndex)+redVarNew+dataUrl.substring(nIndex+redVar.length);

				// change 4th instance   - now one instance is gone, therefore 3rd instance
				var nIndex = nthIndex(dataUrl, redVar, 3);
				dataUrl = dataUrl.substring(0,nIndex)+redVarNew+dataUrl.substring(nIndex+redVar.length);

			}
		}

		return(dataUrl);

};



function nthIndex(str, pat, n){
    var L= str.length, i= -1;
    while(n-- && i++<L){
        i= str.indexOf(pat, i);
        if (i < 0) break;
    }
    return i;
}



/**
 * Saves redlines and sticky notes to the location defined through parameter settings
 * @param {String} floorplan_div - div of the CADViewerJS canvas
 */


	function cvjs_saveStickyNotesRedlines(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	if (floorplan_div == undefined){
	
		// do nothing;
	}
	else{
		// find active floorplan number and set that
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	}
	
	
	
		//console.log("saveStickyNotesRedlines");
		
		var dataUrl = "";
		
		// 3.0.14g   we save as either .js , .svg or .xml
		
		if (cvjs_saveRedlinesAsDXF)
			dataUrl=cvjs_getStickyNotesRedlineDXF();
		else{
			if (cvjs_saveRedlinesAsXML)
				dataUrl=cvjs_getStickyNotesRedlineXML(true);
			else
				dataUrl=cvjs_getStickyNotesRedline();
		}
				

//		console.log(dataUrl);
//		prompt("Copy to clipboard: Ctrl+C, Enter", dataUrl);
//		console.log(vqStickyNotes[0]);

		var cvjs_phpSaveRedlineUrlLocation = cvjs_serverHandlersPath + cvjs_serverSaveFileControllerRedlines;

// 2016-10-25
		if (cvjs_StickyNoteSaveRedlineUrl.indexOf("\\")>-1){

			// do nothing
		}
		else{
			cvjs_StickyNoteSaveRedlineUrl = encodeURIComponent(cvjs_StickyNoteSaveRedlineUrl)
		}

		var js_data = {};
		js_data['file'] = cvjs_StickyNoteSaveRedlineUrl;
		js_data['file_content'] = dataUrl;

//console.log(cvjs_phpSaveRedlineUrlLocation+"  "+cvjs_StickyNoteSaveRedlineUrl);

		jQuery.ajax({
		  url:cvjs_phpSaveRedlineUrlLocation,
		  type: 'post',
		  data: js_data,
		  success: function(html){

			var status ="Save redlines: "+html;
			html = html.toLowerCase();

			if (html.indexOf("success")>-1)
				status = languageTable.languages[cvjs_currentLanguage].InfoMessageModal.RedlinesSaved;

			if (!cvjs_collab_mode) {  // if we are not in collaboration mode, we show the success modal. In collab mode, we do not, as there is a save every 5 second from the presenter
				cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], status);

				if (message_modal_type_bootstrap){
					jQuery('#info_messageModal'+'_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).fadeOut(1500);
				}
				else{
					jQuery('#info_messageModal_2'+'_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).fadeOut(1500);

				}


			}

			// hide redline load modal if in interactive mode
			jQuery( "#addRedlineTable").hide();
			// load the redlines list on server  (if in server mode)

if (cvjs_debug) console.log("cvjs_saveStickyNotesRedlines cvjs_loadServerFileList(2)  cvjs_fileSaverRedlineMode"+cvjs_fileSaverRedlineMode);

			if (cvjs_fileSaverRedlineMode == true)   // 2017-07-11
				cvjs_loadServerFileList(2);
				cvjs_fileSaverRedlineMode = false;
		  },
		  error:function(data_e){console.log("Error "+data_e); return;}

		});



	}


/**
 * Changes CADViewer from CADViewer Community to CADViewer Pro
 * @param {boolean} cadviewerpro - true for CADViewer Pro, false for CADViewer Community
 */

function  cvjs_CADViewerPro(cadviewerpro){
	
	cvjs_Community_Version = !cadviewerpro;
	// IN CADViewer Pro, we allow print to PDF
	cvjs_PrintModal_PrintPDF = true;
	
};



/**  REDLINE top level user commands, draw set color, line thickness  */


/**
 * Draws interactively a freehand redline. The data object of the redline is defined as a Redline. Prior to calling this method, cvjs_setCurrentRedlineValues() should be called.
 */
function cvjs_drawRedline__Freehand() {

	jQuery("body").disableSelection();

	cvjs_addHandleFunc_RedlinePolygonFreehand();
}



var color_modal_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];


/**
 * Calls modal for setting redline color
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

function cvjs_setRedlineColor(floorplan_div){


	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	if (floorplan_div == undefined){
	
		// do nothing;
	}
	else{
		// find active floorplan number and set that
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	}
 	
	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;

	
	
	

	if (color_modal_offset_flag[cvjs_active_floorplan_div_nr]){
		color_modal_offset_flag[cvjs_active_floorplan_div_nr] = false;
		// 3.1.21j  .appendTo('body')
		jQuery("#colorModal_"+floorplan_div).css({position: "fixed"});
		jQuery("#colorModal_"+floorplan_div).offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top });
	}
    jQuery("#colorModal_"+floorplan_div).show();
}


function cvjs_color_modal_hide(floorplan_div){

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;

	jQuery('#colorModal_'+floorplan_div).hide();
}



var publishPDF_modal_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];


/**
 * Calls modal for publish PDF document
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

function cvjs_setPublishPDF(floorplan_div){

	// 3.2.01e
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}


if (cvjs_debug) console.log("first in: cvjs_setPublishPDF "+floorplan_div);

	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;


	if (publishPDF_modal_offset_flag[cvjs_active_floorplan_div_nr]){
		publishPDF_modal_offset_flag[cvjs_active_floorplan_div_nr] = false;
		// 3.1.21j  .appendTo('body')
		jQuery("#publishPDFModal_"+floorplan_div).css({position: "fixed"});
		jQuery("#publishPDFModal_"+floorplan_div).offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});
	}
	
//PPPPPPPPPPPPPPPP	

	// if original document is, PDF we do not want to publish back to server, use cad + redlines, or original pdf + redlines
	// 3.0.13e
	if (cvjs_preConversionFileExtension[cvjs_active_floorplan_div_nr].indexOf("pdf")==0){
console.log("hide menu x2");
		jQuery("#cvjs_publishpdfmode3").hide();
		jQuery("#radioPublishAsPDF3_"+floorplan_div).hide();
	}
	else{	
console.log("show menu x2");
		jQuery("#cvjs_publishpdfmode3").show();
		jQuery("#radioPublishAsPDF3_"+floorplan_div).show();
	}

//	window.alert(cvjs_preConversionFileExtension[cvjs_active_floorplan_div_nr].indexOf("pdf")==0);
//	window.alert(cvjs_customPdfFolderFlag);
	
	if (cvjs_preConversionFileExtension[cvjs_active_floorplan_div_nr].indexOf("pdf")==0  && cvjs_customPdfFolderFlag){
		// show entire document button
		console.log("show entire document button");
		jQuery("#publishPDFModal_row2_"+floorplan_div).show();
		jQuery("#publishPDFModal_row3_"+floorplan_div).hide();
		jQuery("#publishPDFModal_row4_"+floorplan_div).hide();
	}
	else{
	// remove entire document button
		console.log("hide button");
		jQuery("#publishPDFModal_row2_"+floorplan_div).hide();
		jQuery("#publishPDFModal_row3_"+floorplan_div).show();
		jQuery("#publishPDFModal_row4_"+floorplan_div).hide();

	}

	
	// if e-mail checked we turn it on when we open the modal
	if (jQuery("#radioPublishAsPDF2_"+floorplan_div).is(":checked")){	
		jQuery("#publishPDFModal_row2_"+floorplan_div).hide();
		jQuery("#publishPDFModal_row3_"+floorplan_div).hide();
		jQuery("#publishPDFModal_row4_"+floorplan_div).show();
	}	
	
//	window.alert(cvjs_preConversionFileExtension[cvjs_active_floorplan_div_nr]);	
	
		
    jQuery("#publishPDFModal_"+floorplan_div).show();
}


/**
 * Publish redlined content as PDF
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */


function cvjs_publishPDF_modal_hide(floorplan_div){
	

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	
		

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;

	jQuery('#publishPDFModal_'+floorplan_div).hide();
}




var mergeDXF_modal_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];


/**
 * Calls modal for merge DXF document
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

function cvjs_setMergeDXF(floorplan_div){

	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;


	if (mergeDXF_modal_offset_flag[cvjs_active_floorplan_div_nr]){
		mergeDXF_modal_offset_flag[cvjs_active_floorplan_div_nr] = false;
		// 3.1.21j  .appendTo('body')
		jQuery("#mergeDXFModal_"+floorplan_div).css({position: "fixed"});
		jQuery("#mergeDXFModal_"+floorplan_div).offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});
	}
	
//PPPPPPPPPPPPPPPP	

	// if original document is, PDF we do not want to publish back to server, use cad + redlines, or original pdf + redlines
	// 3.0.13e
	if (cvjs_preConversionFileExtension[cvjs_active_floorplan_div_nr].indexOf("pdf")==0){
console.log("hide menu x2");
		jQuery("#cvjs_mergedxfmode3").hide();
		jQuery("#radioMergeAsDXF3_"+floorplan_div).hide();
	}
	else{	
console.log("show menu x2");
		jQuery("#cvjs_mergedxfmode3").show();
		jQuery("#radioMergeAsDXF3_"+floorplan_div).show();
	}

//	window.alert(cvjs_preConversionFileExtension[cvjs_active_floorplan_div_nr].indexOf("pdf")==0);
//	window.alert(cvjs_customPdfFolderFlag);
	
	if (cvjs_preConversionFileExtension[cvjs_active_floorplan_div_nr].indexOf("pdf")==0  && cvjs_customPdfFolderFlag){
		// show entire document button
		console.log("show entire document button");
		jQuery("#mergeDXFModal_row2_"+floorplan_div).show();
		jQuery("#mergeDXFModal_row3_"+floorplan_div).hide();
		jQuery("#mergeDXFModal_row4_"+floorplan_div).hide();
	}
	else{
	// remove entire document button
		console.log("hide button");
		jQuery("#mergeDXFModal_row2_"+floorplan_div).hide();
		jQuery("#mergeDXFModal_row3_"+floorplan_div).show();
		jQuery("#mergeDXFModal_row4_"+floorplan_div).hide();

	}

	
	// if e-mail checked we turn it on when we open the modal
	if (jQuery("#radioMergeAsDXF2_"+floorplan_div).is(":checked")){	
		jQuery("#mergeDXFModal_row2_"+floorplan_div).hide();
		jQuery("#mergeDXFModal_row3_"+floorplan_div).hide();
		jQuery("#mergeDXFModal_row4_"+floorplan_div).show();
	}	
	
//	window.alert(cvjs_preConversionFileExtension[cvjs_active_floorplan_div_nr]);	
	
		
    jQuery("#mergeDXFModal_"+floorplan_div).show();
}


function cvjs_mergeDXF_modal_hide(floorplan_div){
	

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;

	jQuery('#mergeDXFModal_'+floorplan_div).hide();
}






var generic_color_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];


/**
 * Calls modal for setting redline color
 */

function cvjs_setGenericColor(){

	if (generic_color_offset_flag[cvjs_active_floorplan_div_nr]){
		generic_color_offset_flag[cvjs_active_floorplan_div_nr] = false;
		// 3.1.21j  .appendTo('body')
		jQuery("#genericColorModal").css({position: "fixed"});
		jQuery("#genericColorModal").offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});
	}
	jQuery("#genericColorModal").show();
}




/// factor for redline thickness based on size of loaded drawing
//var cvjs_redlineThickness_scaleFactor = 1;  community

/// normalized factor for redline thickness based on size of loaded drawing, typically
/// 1 pixel of a 3000 diagonal width drawing, 1/5000
//var cvjs_redlineThickness_drawingFactor = 0.00020; community


var redline_linethickness_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];
var page_change_in_document_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];


/**
 * Calls modal for setting redline color
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

function cvjs_setRedlineThickness(floorplan_div){


	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	if (floorplan_div == undefined){
	
		// do nothing;
	}
	else{
		// find active floorplan number and set that
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	}


	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;
	

	if (redline_linethickness_offset_flag[cvjs_active_floorplan_div_nr]){
		redline_linethickness_offset_flag[cvjs_active_floorplan_div_nr] = false;
		// 3.1.21j  .appendTo('body')
		jQuery("#thicknessModal_"+floorplan_div).css({position: "fixed"});
		jQuery("#thicknessModal_"+floorplan_div).offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});
	}

	jQuery("#thicknessModal_"+floorplan_div).show();
}

function cvjs_setRedlineColorViaButton(floorplan_div){

		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

		cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
       	jQuery("#colorModal_"+floorplan_div).hide();
}

function cvjs_setRedlineColorFromPicker(pickcolor){

	var color = "#"+pickcolor;
	cvjs_setCurrentRedlineValues_Color(color);

}

function cvjs_setRedlineThicknessViaButton(floorplan_div){

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

	var thick = jQuery('#cvjs_redlineThicknessInput_'+floorplan_div).val();

	cvjs_setCurrentRedlineValues_StokeWidth(thick);

    jQuery("#thicknessModal_"+floorplan_div).hide();

    cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;

}




/**
 * Draws a redline rectangle - uses global settings of color and width
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

function cvjs_drawRedlineRectangle(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}


	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	cvjs_redline++;
	cvjs_setCurrentRedlineValues("RED_"+cvjs_redline, "redline"+cvjs_redline, cvjs_redline, "RedLineLayer", "unassigned", cvjs_currentRedline_color, cvjs_currentRedline_strokeWidth, cvjs_currentRotationAngle[cvjs_active_floorplan_div_nr]);
	cvjs_drawSpaceObject_RedlineRectangle();

}

/**
 * Draws a redline filled rectangle - uses global settings of color and width
 * @param {string} floorplan_div - name of div containing CADViewer canvas
*/

function cvjs_drawRedlineFilledRectangle(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}


	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

	cvjs_redline++;
	cvjs_setCurrentRedlineValues("RED_"+cvjs_redline, "redline"+cvjs_redline, cvjs_redline, "RedLineLayer", "unassigned", cvjs_currentRedline_color, cvjs_currentRedline_strokeWidth, cvjs_currentRotationAngle[cvjs_active_floorplan_div_nr]);
	cvjs_drawSpaceObject_FilledRedlineRectangle();

}

/**
 * Draws a redline cloud - uses global settings of color and width
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

function cvjs_drawRedlineCloud(floorplan_div){


	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}



	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

	cvjs_redline++;
	cvjs_setCurrentRedlineValues("RED_"+cvjs_redline, "redline"+cvjs_redline, cvjs_redline, "RedLineLayer", "unassigned", cvjs_currentRedline_color, cvjs_currentRedline_strokeWidth, cvjs_currentRotationAngle[cvjs_active_floorplan_div_nr]);
	cvjs_drawSpaceObject_RedlineCloud();

}

/**
 * Draws a redline polyline - uses global settings of color and width
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

function cvjs_drawRedlinePolyline(floorplan_div){


	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

	cvjs_redline++;
	cvjs_setCurrentRedlineValues("RED_"+cvjs_redline, "redline"+cvjs_redline, cvjs_redline, "RedLineLayer", "unassigned", cvjs_currentRedline_color, cvjs_currentRedline_strokeWidth, cvjs_currentRotationAngle[cvjs_active_floorplan_div_nr]);
	cvjs_drawSpaceObject_RedlinePolyline();

}


/**
 * Draws a redline filled polygon - uses global settings of color and width
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

function cvjs_drawRedlineFilledPolygon(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}


	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

	cvjs_redline++;
	cvjs_setCurrentRedlineValues("RED_"+cvjs_redline, "redline"+cvjs_redline, cvjs_redline, "RedLineLayer", "unassigned", cvjs_currentRedline_color, cvjs_currentRedline_strokeWidth, cvjs_currentRotationAngle[cvjs_active_floorplan_div_nr]);
	cvjs_drawSpaceObject_RedlineFilledPolygon();

}

/**
 * Draws a redline polyline with arrow - uses global settings of color and width
 * @param {string} floorplan_div - name of div containing CADViewer canvas
*/

function cvjs_drawRedlineArrow(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}


	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

	cvjs_redline++;
	cvjs_setCurrentRedlineValues("RED_"+cvjs_redline, "redline"+cvjs_redline, cvjs_redline, "RedLineLayer", "unassigned", cvjs_currentRedline_color, cvjs_currentRedline_strokeWidth, cvjs_currentRotationAngle[cvjs_active_floorplan_div_nr]);
	cvjs_drawSpaceObject_RedlineArrowPolyline();
}


var redline_text_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];



/**
 * Draws a redline text - uses global settings of color
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

 function cvjs_drawRedlineText(floorplan_div){

 	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);


 
	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;

	if (redline_text_offset_flag[cvjs_active_floorplan_div_nr]){
		redline_text_offset_flag[cvjs_active_floorplan_div_nr] = false;
		// 3.1.21j .appendTo('body');	
		jQuery("#redlinetextModal_"+floorplan_div).css({position: "fixed"});
		jQuery("#redlinetextModal_"+floorplan_div).offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});
	}
	jQuery('#redline_text').val("");
	jQuery("#redlinetextModal_"+floorplan_div).show();

}

function cvjs_hide_redline_text_modal(floorplan_div){

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
	jQuery('#redlinetextModal_'+floorplan_div).hide();
}





function cvjs_exitRedlineTextModal(){

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;

	jQuery("#redlinetextModal" ).hide();

	try{
		var minimize_rubberband = "M0,0S0";
		tRubberBand_text1.attr({'transform': minimize_rubberband});
	}
	catch(err){};

}





/*  StickyNotes and Redlines are independent of nodes files   */

var vqStickyNotes = new Array();
var vqRedlines = new Array();


var vqImageNotes = new Array();


/*  REDLINE /STICKYNOTE SAVE LOAD  - PRINT  */


var cvjs_stickynote = 0;
var cvjs_redline = 0;
var cvjs_StickyNoteRedlineUrl = "";
var cvjs_StickyNoteSaveRedlineUrl = "";

/**
 * Sets the name and url of the redline file to load, The redline file is has the extension .js
 * @param {string} file - String containg url and name of redline.js file
 */

function cvjs_setStickyNoteRedlineUrl(file){
	cvjs_StickyNoteRedlineUrl = file;
}


/**
 * Sets the name and url of the redline file to save. The redline file can be .js , .dxf or .xml
 * @param {string} file - String containg url and name of redline.js/redline.ext file
 */

function cvjs_setStickyNoteSaveRedlineUrl(file){
	cvjs_StickyNoteSaveRedlineUrl = file;
	
	if (cvjs_StickyNoteSaveRedlineUrl.toLowerCase().indexOf(".dxf")>0) {
		cvjs_saveRedlinesAsDXF	= true; cvjs_saveRedlinesAsXML	= false;
	}
	else{
		cvjs_saveRedlinesAsDXF	= false;		
	}


	if (cvjs_StickyNoteSaveRedlineUrl.toLowerCase().indexOf(".xml")>0) {
		cvjs_saveRedlinesAsXML	= true; cvjs_saveRedlinesAsDXF	= false;
	}
	else{
		cvjs_saveRedlinesAsXML	= false;		
	}
	

	
	
}


/**
 * Draws a freehand redline - uses global settings of color and width
  * @param {string} floorplan_div - name of div containing CADViewer canvas
*/

function cvjs_drawRedline_Freehand(floorplan_div){


	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	if (floorplan_div == undefined){
		// do nothing;
	}
	else{
		// find active floorplan number and set that
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	
	}

	cvjs_redline++;
	cvjs_setCurrentRedlineValues("RED_"+cvjs_redline, "redline"+cvjs_redline, cvjs_redline, "RedLineLayer", "unassigned", cvjs_currentRedline_color, cvjs_currentRedline_strokeWidth, cvjs_currentRotationAngle[cvjs_active_floorplan_div_nr]);
	cvjs_drawRedline__Freehand();
}






/**
 * Draws a freehand redline - uses global values of color and width
 */


function cvjs_drawRedline_Freehand_globalColorWidth(){

	cvjs_redline++;
	cvjs_setCurrentRedlineValues("RED_"+cvjs_redline, "redline"+cvjs_redline, cvjs_redline, "RedLineLayer", "unassigned", cvjs_currentRedline_color, cvjs_currentRedline_strokeWidth, cvjs_currentRotationAngle[cvjs_active_floorplan_div_nr]);
	cvjs_drawRedline_Freehand();
}


/*
 * Draws a freehand redline - deprecated
 */

function cvjs_drawRedline_Freehand_setValues(){

	cvjs_redline++;
	cvjs_setCurrentRedlineValues("RED_"+cvjs_redline, "redline"+cvjs_redline, cvjs_redline, "RedLineLayer", "unassigned", "#AA0055", 3, cvjs_currentRotationAngle[cvjs_active_floorplan_div_nr]);
	cvjs_drawRedline_Freehand();
}



/*
 * Draws a freehand stickynote - deprecated
 */

function cvjs_drawStickyNote_setValues(){

	var d = new Date();
	//console.log(d);

	cvjs_stickynote++;
	cvjs_setCurrentStickyNoteValues("SNOTE_"+cvjs_stickynote, "myName", cvjs_stickynote, "StickNoteLayer", "unassigned", "", "X201", d, true);
	cvjs_drawStickyNoteDirect();
}


 
/**
 * Draws a freehand stickynote - uses global settings of user and user id
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */
 
function cvjs_drawStickyNote(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	if (floorplan_div == undefined){
	
		// do nothing;
	}
	else{
		// find active floorplan number and set that
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	}


	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;

	var d = new Date();
	//console.log(d);

	cvjs_stickynote++;
	cvjs_setCurrentStickyNoteValues("SNOTE_"+cvjs_stickynote, cvjs_currentStickyNote_name, cvjs_stickynote, cvjs_currentStickyNote_layer, cvjs_currentStickyNote_group, "", cvjs_currentStickyNote_userid, d, true);
	cvjs_drawStickyNoteDirect();

}




 
/**
 * Deletes the last drawn Redline
 * @param {String} floorplan_div - div of the CADViewerJS canvas
 */
 
function cvjs_deleteLastRedline(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	if (floorplan_div == undefined){
	
		// do nothing;
	}
	else{
		// find active floorplan number and set that
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	}
 



	var redl="RED_"+cvjs_redline;
	cvjs_setUpVqRedlines_deleteNode(redl);
	cvjs_redline--;
}


/*
 * Clears all redlines in drawing
 */

function cvjs_deleteAllRedlines(){

	while (cvjs_redline>0){
		var redl="RED_"+cvjs_redline;
		cvjs_setUpVqRedlines_deleteNode(redl);
		cvjs_redline--;
	}
}



/*
 * Clears all stickynotes in drawing
 */

function cvjs_deleteAllStickyNotes(){

	while (cvjs_stickynote>0){

		cvjs_stickynote--;
		//var redl="RED_"+cvjs_redline;
		//cvjs_setUpVqRedlines_deleteNode(redl);
		//var note = cvjs_StickyNoteClicked();
		//console.log("cvjs_stickynote "+cvjs_stickynote);

		try{
			var objectId = vqStickyNotes[cvjs_stickynote].data("node");
			cvjs_setUpStickyNotes_deleteNode(objectId);
		} catch(err) {}
	}
}

var stickyNotetimer;

var cvjs_fileLoaderRedlineMode = false;
var cvjs_fileSaverRedlineMode = false;










/**
 * Loads redlines and sticky notes to the location defined through parameter settings
 * @param {String} floorplan_div - div of the CADViewerJS canvas
 */

function cvjs_loadStickyNotesRedlines(floorplan_div){


	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}


	if (floorplan_div== undefined)
		cvjs_active_floorplan_div_nr = 0;
	else
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

	if (cvjs_debug) console.log("!!!!!!!!!!!!!!!!!!!!!!!!   cvjs_loadStickyNotesRedlines "+ cvjs_active_floorplan_div_nr+"  "+floorplan_div);


	if (!cvjs_loadRedlinesFileControllerFlag){   // standard load of redlines

		stickynotesRedlines_loaded = false;
		if (current_redline_js_initialized == 0){
			current_redline_js_initialized = 1;
			current_jsRedlinename = cvjs_StickyNoteRedlineUrl;
if (cvjs_debug) 	console.log("before loadJSbase redline "+cvjs_StickyNoteRedlineUrl);
			loadJSbase(cvjs_StickyNoteRedlineUrl);
		}else{
if (cvjs_debug) 	console.log("replace "+current_jsRedlinename+"  "+cvjs_StickyNoteRedlineUrl);
			replacejscssfile(current_jsRedlinename, cvjs_StickyNoteRedlineUrl, "js");
			current_jsRedlinename = cvjs_StickyNoteRedlineUrl;
		}
		cvjs_loadStickyNotesRedlinesTimer();

	}else{

		var cvjs_phpLoadRedlineUrlLocation = cvjs_serverHandlersPath + cvjs_serverLoadFileControllerRedlines;
if (cvjs_debug) 		console.log("brach 2 "+ cvjs_phpLoadRedlineUrlLocation+"  file="+cvjs_StickyNoteRedlineUrl);

		var js_data = {};
		js_data['file'] = cvjs_StickyNoteRedlineUrl;
//console.log(cvjs_phpSaveRedlineUrlLocation+"  "+cvjs_StickyNoteSaveRedlineUrl);
		jQuery.ajax({
		  url:cvjs_phpLoadRedlineUrlLocation,
		  type: 'post',
		  data: js_data,
		  success: function(html){

					var status ="Load redlines: "+html;
					if (cvjs_debug) 		console.log(status);

					cvjs_clearCurrentRedline(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
					cvjs_addInlineScript(html);

					stickynotesRedlines_loaded = true;
					cvjs_loadStickyNotesRedlinesTimer();

					//cvjs_setUpStickyNotesRedlines(cvjs_rPaper[cvjs_active_floorplan_div_nr]);
				},
		 error:function(data_e){console.log("Error "+data_e); return;}
		});

	}

}


var myFlagOldTypeRedlines = false;

var cvjs_redlineStickyNoteLayer = new Array();

function cvjs_loadStickyNotesRedlinesTimer(){

// 2017-07-09

	// make sure it is loaded
	if (stickynotesRedlines_loaded){
		load_failures=0;

		// we try something new here, we clear just before we load everything else 2017-07-24
		// clear if not loading multiple redlines  and not in collab
		if (cvjs_collab_mode) { console.log("clear collab redlines, after js files is loaded."); cvjs_clearCurrentRedline(floorplan_div_Array[cvjs_active_floorplan_div_nr]); }
		//NNNNN

//if (cvjs_debug) console.log("cvjs_setUpStickyNotesRedlines "+cvjs_active_floorplan_div_nr+"  "+cvjs_rPaper[cvjs_active_floorplan_div_nr]);
			

// 2018-03-20   we move this declaration over to be part of the general declaration when loading a drawing.						
//		cvjs_redlineStickyNoteLayer[cvjs_active_floorplan_div_nr] = cvjs_rPaper[cvjs_active_floorplan_div_nr].group();	



		cvjs_setUpStickyNotesRedlines(cvjs_redlineStickyNoteLayer[cvjs_active_floorplan_div_nr]);		

		
//		layer_vqrooms[cvjs_active_floorplan_div_nr].prepend(cvjs_masterBackground[cvjs_active_floorplan_div_nr]);
		


		
//		cvjs_setUpStickyNotesRedlines(cvjs_rPaper[cvjs_active_floorplan_div_nr]);


		
		
		// get content from cvjs_stickynotesRedlines

if (cvjs_debug) console.log("before loading loop");

		var maxNote = 1;
		var jj=0;
	
		try{		
	
			for (var i=0; i<vqStickyNotes.length; i++){
							
//				console.log(i+"  "+vqStickyNotes[i]);
				var myNode = cvjs_stickyNotesRedlines[i].node.toString();
				if (myNode.substring("SNOTE_")>-1){

					myNode = myNode.substring(6);
					jj = parseInt(myNode);
					if (jj>maxNote) maxNote=jj
				}
			}
		}catch(err){console.log("catching oldtime redline format issue: "+err);
		
		
		
		// 	vqStickyNotes[stickynote].data("node", i);
		
		
		
		}

		
		//maxRed="RED_"+jj
if (cvjs_debug) 		console.log("the maximum NOTE_ number is: "+maxNote);

		for (var i=0; i<cvjs_stickyNotesRedlines.length; i++){
			for (var j=i+1; j<cvjs_stickyNotesRedlines.length; j++){
				if ( cvjs_stickyNotesRedlines[i].node == cvjs_stickyNotesRedlines[j].node){

					if (cvjs_stickyNotesRedlines[i].node.indexOf("SNOTE_")>-1){
if (cvjs_debug) 						console.log("We have double stickynotes "+cvjs_stickyNotesRedlines[i].node);
						// so we want to change the node name on both the redlines structure array and the redlines shapes array
						maxNote = maxNote+1;

						var newNote = "SNOTE_"+maxNote;

if (cvjs_debug) 						console.log("the newNote="+newNote);

						for (var l=0; l<vqStickyNotes.length; l++){
							if (vqStickyNotes[l].data("node") == cvjs_stickyNotesRedlines[i].node){ // we find the first instance that is equal to the first instance in Notes array
								for (var m=l+1; m<vqStickyNotes.length; m++){
									if ( vqStickyNotes[l].data("node") == vqStickyNotes[m].data("node")){   // we find the next instance
if (cvjs_debug) 										console.log("We have double path instances of "+vqStickyNotes[m].data("node")+", changing second instance to "+newNote);

										cvjs_stickyNotesRedlines[j].node = newNote;
										cvjs_stickyNotesRedlines[j].id = maxNote;
										vqStickyNotes[m].data("node", newNote);


										// so we want to change the node name on both the redlines structure array and the redlines shapes array
									}
								}
							}
						}
					}


				}
			}
		}


// we now want to find the largest Node number
maxNote = 0;		


		for (var snote in vqStickyNotes){

if (cvjs_debug) 			console.log(" snote="+snote);
			// set up the StickyNotes
			for (var redNote in cvjs_stickyNotesRedlines){

//2017-07-09		if (redNote == vqStickyNotes[snote].data("node")){
					if (cvjs_stickyNotesRedlines[redNote].node == vqStickyNotes[snote].data("node")){
if (cvjs_debug) console.log(redNote);

//ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ
						var noteInt = parseInt(cvjs_stickyNotesRedlines[redNote].id);
						if (noteInt>maxNote) maxNote = noteInt;


//						cvjs_setCurrentStickyNoteValues_All(redNote, cvjs_stickyNotesRedlines[redNote].name, cvjs_stickyNotesRedlines[redNote].id, cvjs_stickyNotesRedlines[redNote].layer, cvjs_stickyNotesRedlines[redNote].group, cvjs_stickyNotesRedlines[redNote].text, cvjs_stickyNotesRedlines[redNote].userid, cvjs_stickyNotesRedlines[redNote].date, cvjs_stickyNotesRedlines[redNote].linked, cvjs_stickyNotesRedlines[redNote].transform, cvjs_stickyNotesRedlines[redNote].currentPage);
						cvjs_setCurrentStickyNoteValues_All(cvjs_stickyNotesRedlines[redNote].node, cvjs_stickyNotesRedlines[redNote].name, cvjs_stickyNotesRedlines[redNote].id, cvjs_stickyNotesRedlines[redNote].layer, cvjs_stickyNotesRedlines[redNote].group, cvjs_stickyNotesRedlines[redNote].text, cvjs_stickyNotesRedlines[redNote].userid, cvjs_stickyNotesRedlines[redNote].date, cvjs_stickyNotesRedlines[redNote].linked, cvjs_stickyNotesRedlines[redNote].transform, cvjs_stickyNotesRedlines[redNote].currentPage, cvjs_stickyNotesRedlines[redNote].drawingRotation);

						
//			vqStickyNotes[snote].attr({"fill" : "#FF0000"});						
//			vqStickyNotes[snote].remove();			
						
//						console.log("cvjs_setUpVqStickyNotes_currentNode_vqIndex "+cvjs_currentStickyNote_underbar);
						
//						cvjs_setUpVqStickyNotes_currentNode_vqIndex(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentStickyNote_underbar, snote );

console.log(" cvjs_setUpVqStickyNotes_currentNode_vqIndex_passedInstance "+cvjs_currentStickyNote_underbar+"   "+snote);
//						cvjs_setUpVqStickyNotes_currentNode_vqIndex_passedInstance(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentStickyNote_underbar, snote, vqStickyNotes[snote]);

						
//		if (snote==0){				

//						cvjs_masterBackground[cvjs_active_floorplan_div_nr].prepend(vqStickyNotes[snote]);

						vqStickyNotes[snote].data("name", cvjs_currentStickyNote_name );
						vqStickyNotes[snote].data("id", cvjs_currentStickyNote_id);
						vqStickyNotes[snote].data("text", cvjs_currentStickyNote_text);
						vqStickyNotes[snote].data("layer", cvjs_currentStickyNote_layer);
						vqStickyNotes[snote].data("group", cvjs_currentStickyNote_group);
						vqStickyNotes[snote].data("linked", cvjs_currentStickyNote_linked);
						vqStickyNotes[snote].data("userid", cvjs_currentStickyNote_userid);
						vqStickyNotes[snote].data("date", cvjs_currentStickyNote_date);
						vqStickyNotes[snote].data("currentPage", cvjs_currentStickyNote_currentPage);
						vqStickyNotes[snote].data("transform", cvjs_currentStickyNote_transform);  // curre						
						vqStickyNotes[snote].data("drawingRotation", cvjs_currentStickyNote_drawingRotation);  // curre						
						
//		}					
												
						if (vqStickyNotes[snote].data("currentPage")!=multiPages[cvjs_active_floorplan_div_nr].currentPage)
							vqStickyNotes[snote].attr(hide);
						else
							vqStickyNotes[snote].attr(show);

						

//						vqStickyNotes[snote].attr(show);
						
					}
			}

		}


		var maxRed = 1;
		var jj=0;

		try{		
			for (var i=0; i<vqRedlines.length; i++){							
				var myNode = cvjs_stickyNotesRedlines[i].node.toString();
				if (myNode.substring("RED_")>-1){
					myNode = myNode.substring(4);
					jj = parseInt(myNode);
					if (jj>maxRed) maxRed=jj
				}
			}
		}catch(err){console.log("Catching old type redlines issues: "+err);}
		
		//maxRed="RED_"+jj

if (cvjs_debug) 		console.log("the maximum RED_ number is: "+maxRed);

		for (var i=0; i<cvjs_stickyNotesRedlines.length; i++){
			for (var j=i+1; j<cvjs_stickyNotesRedlines.length; j++){
				if ( cvjs_stickyNotesRedlines[i].node == cvjs_stickyNotesRedlines[j].node){
					if (cvjs_stickyNotesRedlines[i].node.indexOf("RED_")>-1){

if (cvjs_debug) 						console.log("We have double redlines "+cvjs_stickyNotesRedlines[i].node);
						// so we want to change the node name on both the redlines structure array and the redlines shapes array
						maxRed = maxRed+1;
						var newRed = "RED_"+maxRed;
if (cvjs_debug) 						console.log("the newRed="+newRed);

						for (var l=0; l<vqRedlines.length; l++){
							if (vqRedlines[l].data("node") == cvjs_stickyNotesRedlines[i].node){ // we find the first instance that is equal to the first instance in Notes array
								for (var m=l+1; m<vqRedlines.length; m++){
									if ( vqRedlines[l].data("node") == vqRedlines[m].data("node")){   // we find the next instance
										console.log("We have double path instances of "+vqRedlines[m].data("node")+", changing second instance to "+newRed);

										cvjs_stickyNotesRedlines[j].node = newRed;
										vqRedlines[m].data("node", newRed);

										// so we want to change the node name on both the redlines structure array and the redlines shapes array
									}
								}
							}
						}

					}
				}
			}
		}




		for (var snote in vqRedlines){

//if (cvjs_debug) 		console.log("before loading loop snote "+snote);

			// set up the Redlines
			for (var redNote in cvjs_stickyNotesRedlines){

//if (cvjs_debug) 				console.log("A redNote "+redNote+"  "+cvjs_stickyNotesRedlines[redNote].node);


					// 2018-03-03  HACK!  Adding a value if format of REDLINES are Old type	
					if (cvjs_stickyNotesRedlines[redNote].node == undefined){ 
						// cvjs_stickyNotesRedlines[redNote].data("node", redNote);
					// NOTE NOTE NOTE 
								myFlagOldTypeRedlines = true;
					}
					else		myFlagOldTypeRedlines = false;
					
					
//if (cvjs_debug) 				console.log("B redNote "+redNote+"  "+cvjs_stickyNotesRedlines[redNote].node+"  "+redNote+"  "+myFlagOldTypeRedlines);

					
					var logicExpression = (cvjs_stickyNotesRedlines[redNote].node == vqRedlines[snote].data("node"));
					


//if (cvjs_debug) 				console.log("C logicExpression "+logicExpression);


					
					if (myFlagOldTypeRedlines){
						logicExpression = (redNote == vqRedlines[snote].data("node"));
					}
													
//if (cvjs_debug) 				console.log("D logicExpression "+logicExpression);
					
					
// 2017-07-09
					if (logicExpression){
//					if (redNote == vqRedlines[snote].data("node")){


// 2017-07-09                  2018-03-03   IN CASE OF AN OLD TYPE WE HAVE TO PASS OVER THE COUNTER ID ITSELF

						if (myFlagOldTypeRedlines){  // the node is the array counter ID itself{
							cvjs_setCurrentRedlineValues_All(redNote, cvjs_stickyNotesRedlines[redNote].name,cvjs_stickyNotesRedlines[redNote].id, cvjs_stickyNotesRedlines[redNote].layer, cvjs_stickyNotesRedlines[redNote].group, cvjs_stickyNotesRedlines[redNote].color, cvjs_stickyNotesRedlines[redNote].strokeWidth, cvjs_stickyNotesRedlines[redNote].fill, cvjs_stickyNotesRedlines[redNote].fill_opacity, cvjs_stickyNotesRedlines[redNote].transform, cvjs_stickyNotesRedlines[redNote].username, cvjs_stickyNotesRedlines[redNote].userid, cvjs_stickyNotesRedlines[redNote].currentPage, cvjs_stickyNotesRedlines[redNote].polypath_arrow, cvjs_stickyNotesRedlines[redNote].triangle_design, cvjs_stickyNotesRedlines[redNote].redline_text, 0);


if (cvjs_debug) 				console.log("Old format making redline "+redNote);

						}
						else{   // the node is part of the data structure
							cvjs_setCurrentRedlineValues_All(cvjs_stickyNotesRedlines[redNote].node, cvjs_stickyNotesRedlines[redNote].name,cvjs_stickyNotesRedlines[redNote].id, cvjs_stickyNotesRedlines[redNote].layer, cvjs_stickyNotesRedlines[redNote].group, cvjs_stickyNotesRedlines[redNote].color, cvjs_stickyNotesRedlines[redNote].strokeWidth, cvjs_stickyNotesRedlines[redNote].fill, cvjs_stickyNotesRedlines[redNote].fill_opacity, cvjs_stickyNotesRedlines[redNote].transform, cvjs_stickyNotesRedlines[redNote].username, cvjs_stickyNotesRedlines[redNote].userid, cvjs_stickyNotesRedlines[redNote].currentPage, cvjs_stickyNotesRedlines[redNote].polypath_arrow, cvjs_stickyNotesRedlines[redNote].triangle_design, cvjs_stickyNotesRedlines[redNote].redline_text, cvjs_stickyNotesRedlines[redNote].drawingRotation);


if (cvjs_debug) 				console.log("New format making redline "+cvjs_stickyNotesRedlines[redNote].node);

						}
						
						cvjs_setUpVqRedlines_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentRedline_underbar);

//console.log(cvjs_stickyNotesRedlines[redNote].currentPage+"   "+cvjs_currentRedline_currentPage);

						vqRedlines[snote].mousedown(function (e){
							if (cvjs_deleteRedlineFlag ){
								cvjs_deleteRedlineFlag = false;
								// delete redline
								var rednode = this.data("node");
								cvjs_setUpVqRedlines_deleteNode(rednode);
							}

						});


						vqRedlines[snote].mouseover(function (e){

								tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					
						
								var tipText = "UserName: "+this.data("username");
								tip[cvjs_active_floorplan_div_nr].html(tipText);
								tip[cvjs_active_floorplan_div_nr].show();


								var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
								var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
								if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
								//console.log("absolute");
								   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
								}
								else{  // we have placed CV-JS inside a div and we have to make a relative position
									//console.log("inside");
									tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
								}
									
								
								
/*								
								if (e.clientX > floorplan_width)
								   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft-tip_width-20).css("top", e.clientY+document.body.scrollTop-25);
				//				   tip[cvjs_active_floorplan_div_nr].css("left", e.screenX-tip_width-20).css("top", e.screenY-20);
								else
								   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft+10).css("top", e.clientY+document.body.scrollTop-25);
*/						});

						vqRedlines[snote].mouseout(function (e){
								tip[cvjs_active_floorplan_div_nr].hide();
						});


						if (vqRedlines[snote].data("currentPage")!=multiPages[cvjs_active_floorplan_div_nr].currentPage)
							vqRedlines[snote].attr(hide);
						else
							vqRedlines[snote].attr(show);


						}
			}
		}


//		cvjs_rPaper[cvjs_active_floorplan_div_nr].add(vqRedlines);

		stickynote=vqStickyNotes.length;
		redline=vqRedlines.length;
	
		// we set the current ID to the max id read in
		cvjs_stickynote = maxNote;
		
if (cvjs_debug) console.log("how many redlines "+vqRedlines.length+"  how many stickynotes "+stickynote+"  the maximum StickyNoteNumber = "+maxNote);		
		
			
		// prior to setting user controls, we check the page status and turn layers on other pages off
		cvjs_updateDrawingRedlines(cvjs_redlineStickyNoteLayer[cvjs_active_floorplan_div_nr]);

		try{
			cvjs_OnLoadEndRedlines();	// generic method name OnLoadEnd();
		}catch(exception) { console.log("Please define cvjs_OnLoadEndRedlines in your encapsulating code: "+exception); }


	}else{
		if (load_failures < 80){
			    setTimeout(function(){cvjs_loadStickyNotesRedlinesTimer()},256);
    	}
    	else{
    		if (cvjs_debug) console.log("Readline Load Failed! - please check if redline Url is set correct: cvjs_setStickyNoteRedlineUrl()");
    	}
	}

}


var cvjs_deleteRedlineFlag = false;

 
/**
 * Deletes a single redline
 * @param {String} floorplan_div - div of the CADViewerJS canvas
 */

function cvjs_deleteSingleRedline(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	if (floorplan_div == undefined){
	
		// do nothing;
	}
	else{
		// find active floorplan number and set that
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	}

	cvjs_deleteRedlineFlag = true;

}



// 3.3.02b
 function cvjs_saveScreenAsImage_UploadSharepointListItem(serverPath, image_fileName, user_name, list_name, record_id ){


// extract all strickynote information to txt file

	var stickyNoteContent="";
	for (var i=0; i<vqStickyNotes.length; i++){

		if (i>0) stickyNoteContent = stickyNoteContent + "\n";
		stickyNoteContent = stickyNoteContent + vqStickyNotes[i].data("id")+","+vqStickyNotes[i].data("name")+","+vqStickyNotes[i].data("userid")+","+vqStickyNotes[i].data("date")+","+vqStickyNotes[i].data("text");
	}


// when both elements are saved, call php document to create thumbnails and return

	cvjs_phpImagesUrlController = cvjs_serverHandlersPath + cvjs_serverCreateThumb_StickyNote_Controller;

	cvjs_serverSave_php_controllerArray = {};
	cvjs_serverSave_php_controllerArray['serverPath'] = serverPath;
	cvjs_serverSave_php_controllerArray['fileName'] = image_fileName.substring(0,image_fileName.indexOf(".png"));
	cvjs_serverSave_php_controllerArray['thumbFile1'] = cvjs_serverSave_php_controllerArray['fileName']+"_200.png";
	cvjs_serverSave_php_controllerArray['thumbFile1_size'] = 200;
	cvjs_serverSave_php_controllerArray['thumbFile2'] = cvjs_serverSave_php_controllerArray['fileName']+"_400.png"
	cvjs_serverSave_php_controllerArray['thumbFile2_size'] = 400;
	cvjs_serverSave_php_controllerArray['stickyNoteContent'] = stickyNoteContent;
	cvjs_serverSave_php_controllerArray['sharepoint_user_name'] = user_name;
	cvjs_serverSave_php_controllerArray['sharepoint_list_name'] = list_name;
	cvjs_serverSave_php_controllerArray['sharepoint_record_id'] = record_id;



// make a canvas element of screen content and save it
// global API settings of landscape/portrait, papersize and resolution is used


	cvjs_serverSavePrintModeController = 7;
	cvjs_saveScreenAsImage(serverPath, image_fileName);

	// the call to create thumbnails and save the stickynote content is done in the callback from when the ScreenImage has been saved


}






/**
 * Loads a set of drawings, apply page size, page orientation and resolution to each page/drawing.
 * Produce a multi-page PDF out of the set of drawing.
 * @param {string[]} drawingFilesArray - String array with name and location of drawings
 * @param {string[]} pageOrientationArray - String array with orientation of drawings: landscape/portrait
 * @param {string[]} pageSizeArray - String array with papersizes of drawings
 * @param {string[]} pageResolutionArray - Array with page resolutions
 */
function cvjs_batchConvertDrawingsToPDF(drawingFilesArray, pageOrientationArray, pageSizeArray, pageResolutionArray){

	cvjs_batchDrawingsArrLength = drawingFilesArray.length;
	cvjs_batchDrawingsArrLength_globalCounter = 0;

	cvjs_drawingFilesArray = drawingFilesArray;
	cvjs_pageOrientationArray = pageOrientationArray;
	cvjs_pageSizeArray = pageSizeArray;
	cvjs_pageResolutionArray = pageResolutionArray;

	// set up OnLoadEnd to point to custom method

	// window.alert("cvjs_batchConvertDrawingsToPDF");

	// set the callback method to loop through array of drawings to be loaded

	cvjs_setCustomCallbackMethodOnLoadEnd(true, cvjs_batchConvertOnLoadEndCustomMethod);

	// set the print mode to batch print
	cvjs_serverSavePrintModeController = 2;


	// start the process by loading the first file in the set
	cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_drawingFilesArray[cvjs_batchDrawingsArrLength_globalCounter]);


	// we will initiate the load the subsequent drawings from the callback, when the base64 bitmap image is saved on the server
	// cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_drawingFilesArray[cvjs_batchDrawingsArrLength_globalCounter++]);

}


function cvjs_batchConvertOnLoadEndCustomMethod(){

	// when last drawing is converted call php method to do the php generation;
	
	if (cvjs_batchDrawingsArrLength_globalCounter == cvjs_batchDrawingsArrLength){

		// we have loaded and processed the last file in the list, now we merge all drawings into a PDF file
		//window.alert("last file loaded and sent down to server, now we have to make a pdf array");

//		cvjs_phpImagesUrlController = cvjs_phpPath  + "/tcpdf/batchconvert/"  + cvjs_batchFilesToPDF_Controller;
// 6.1.21
		cvjs_phpImagesUrlController = cvjs_phpPath  + cvjs_batchFilesToPDF_Controller;





		cvjs_serverSave_php_controllerArray = {};
		cvjs_serverSave_php_controllerArray['numberOfFiles'] = cvjs_batchDrawingsArrLength;

		var serverPath;
/*
		if (cvjs_printObjectPathRelativeFlag){
			serverPath = cvjs_printObjectPath;
			serverPath = cvjs_phpPath  + "/tcpdf/batchconvert/" ;
		}
		else{
			serverPath = cvjs_printObjectPathAbsoluteServer;
			serverPath = cvjs_phpPath  + "/tcpdf/batchconvert/" ;
		}
*/
			// 6.1.21
			serverPath = cvjs_ServerLocation  + "/converters/files/"


		cvjs_serverSave_php_controllerArray['serverPath'] = serverPath;



		for (i=0; i<cvjs_batchDrawingsArrLength; i++){
			var file_Id = "fileName_"+i;
			var file_name = cvjs_drawingFilesArray[i].substring(cvjs_drawingFilesArray[i].lastIndexOf("/")+1, cvjs_drawingFilesArray[i].lastIndexOf("."));
			cvjs_serverSave_php_controllerArray[file_Id] = file_name;
			var rot_Id = "rotation_"+i;
			cvjs_serverSave_php_controllerArray[rot_Id] = cvjs_pageOrientationArray[i].toLowerCase();


			var paper =	cvjs_pageSizeArray[i];

			if (paper.toLowerCase().indexOf('ansi a')==0 || paper.toLowerCase().indexOf('letter')==0 ) paper = 'LETTER';
			if (paper.toLowerCase().indexOf('A4')==0 ) paper = 'A4';
			if (paper.toLowerCase().indexOf('A3')==0 ) paper = 'A3';
			if (paper.toLowerCase().indexOf('A2')==0 ) paper = 'A2';

			var page_Id = "page_format_"+i;
			cvjs_serverSave_php_controllerArray[page_Id] = paper;

			var resolution_Id = "page_resolution_"+i;
			cvjs_serverSave_php_controllerArray[resolution_Id] = cvjs_pageResolutionArray[i];

//			window.alert(file_name+" "+file_Id);
		}


// BBBBBBBBBB
// make create batch pdf modal
//window.alert("wait "+languageTable.languages[cvjs_currentLanguage].WaitModal.BatchPDF);

		jQuery('#cvjs_wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html('<table class=\"waitlooperTable\" width=\"100\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr><td><div id=\"looper_image_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\"></div></td></tr><tr><td><div class=\"cvjs_wait_text_5\" id=\"cvjs_wait_looper_text_id_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\">'+languageTable.languages[cvjs_currentLanguage].WaitModal.BatchPDF+'</div></td></tr></table>');

		cvjs_setLooperPosition();		
		
		jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).fadeIn(1000);

		jQuery.ajax({
		  url:cvjs_phpImagesUrlController,
		  type: 'post',
		  data: cvjs_serverSave_php_controllerArray,
		  success: function(html){
				//window.alert(html+"  we have now created the batch print pdf");
				cvjs_serverSavePrintModeController = 0;
				jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
				// hide modal
//				printWindow = window.open(cvjs_serverHandlersPath + "/tcpdf/batchconvert/" + html, 'CADViewer - Print', 'height='+screen.height*0.5+',width='+screen.width*0.5);
//				printWindow = window.open(cvjs_phpPath  + "/tcpdf/batchconvert/" + html, 'CADViewer - Print', 'height='+screen.height*0.9+',width='+screen.width*0.9);
//				printWindow = window.open(cvjs_ServerLocation  + "/converters/files/" + html, 'CADViewer - Print', 'height='+screen.height*0.9+',width='+screen.width*0.9);

				// 6.1.22
console.log("here!");				
				
				window.open(cvjs_ServerLocation  + "/converters/files/" + html, 'width='+screen.width*cvjs_print_to_pdf_windowRelativeSize+',height='+ screen.height*cvjs_print_to_pdf_windowRelativeSize);
				
				//6.1.21
				//printWindow.focus();
								
				// 3.2.02h
				
				// we need to hide any wait modals. But on which div?
				jQuery("#cvjs_wait_looper_"+floorplan_div_Array[0]).hide();

				
				// we need to set back to standard OnLoadEnd
				cvjs_setCustomCallbackMethodOnLoadEnd(false, "");
				
				
		  },
		 error:function(data_e){c("Error "+data_e); return;}

		});
		return;

	}else{

			cvjs_setPrintPaperSize(cvjs_pageSizeArray[cvjs_batchDrawingsArrLength_globalCounter]);
			cvjs_setPrintOrientation(cvjs_pageOrientationArray[cvjs_batchDrawingsArrLength_globalCounter]);

			var serverPath;

			// we add tcpdf as a subfolder to php folder

/**
			if (cvjs_printObjectPathRelativeFlag){
				//serverPath = cvjs_printObjectPath;

				serverPath = cvjs_phpPath + "/tcpdf/batchconvert/";
			}
			else{
				//serverPath = cvjs_printObjectPathAbsoluteServer;

				serverPath = cvjs_phpPath + "/tcpdf/batchconvert/";

			}
**/

			serverPath = cvjs_ServerLocation  + "/converters/files/"




//window.alert(cvjs_drawingFilesArray[cvjs_batchDrawingsArrLength_globalCounter]+"   "+cvjs_drawingFilesArray[cvjs_batchDrawingsArrLength_globalCounter].lastIndexOf("/"));

			var file_name = cvjs_drawingFilesArray[cvjs_batchDrawingsArrLength_globalCounter].substring(cvjs_drawingFilesArray[cvjs_batchDrawingsArrLength_globalCounter].lastIndexOf("/")+1);

//window.alert("serverPath "+ serverPath+" file_name "+file_name);

			cvjs_saveScreenAsImage(serverPath,file_name);

			// read new array entries, but only after the current screen is saved
			// therefore it is done as a branch in


			// we will initiate the load the subsequent drawings from the callback, when the base64 bitmap image is saved on the server
			// cvjs_batchDrawingsArrLength_globalCounter++;
			// cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_drawingFilesArray[cvjs_batchDrawingsArrLength_globalCounter]);
	}
}




/**
 * Clears the drawing from any highlight or modals active on Space Objects
 */

function cvjs_clearDrawingSpaceObjects(){

	cvjs_clearDrawing();
}



function cvjs_clearDrawing()
{

//console.log(lastObj+" "+popObj);

	for (room in vqRooms[cvjs_active_floorplan_div_nr])
	{
		try
		  {
		  	if (room != lastObj[cvjs_active_floorplan_div_nr] || room != popObj){
		  		jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip('hide');

///				  vqRooms[cvjs_active_floorplan_div_nr][room].attr(defaultColor);  // 2015-02-01  - moved into conditional statement
					if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors){
						
						
						// 6.1.41
						if (vqRooms[cvjs_active_floorplan_div_nr][room].data("defaultcolor").toString().indexOf("undefined")>-1){
						//	 console.log("standard");
							//standard
							vqRooms[cvjs_active_floorplan_div_nr][room].attr(defaultColor);									
						}
						else{
						//	 console.log("highlight");
							// highlight
							vqRooms[cvjs_active_floorplan_div_nr][room].attr(vqRooms[cvjs_active_floorplan_div_nr][room].data("defaultcolor"));								
						}	
						
					
						// vqRooms[cvjs_active_floorplan_div_nr][room].attr(defaultColor);
					}
					else{
						if (vqRooms[cvjs_active_floorplan_div_nr][room].data("linked")){
							vqRooms[cvjs_active_floorplan_div_nr][room].attr(defaultColor_linked);
						}
						else{
							vqRooms[cvjs_active_floorplan_div_nr][room].attr(defaultColor_unlinked);
						}
					}



	  		}
		  }
		catch(err)
		  {
		  //Handle errors here
		  }
	  }
}



/**
 * Clears the drawing from any highlight or modals active on StickyNotes
 */

function cvjs_clearDrawingStickyNotes()
{


//if (false) return;
if (cvjs_debug) console.log("cvjs_clearDrawingStickyNotes");

	try
	  {


		for (room in vqStickyNotes)
		{
//				if (room != lastObjStickyNote[cvjs_active_floorplan_div_nr] || room != popObjStickyNote[cvjs_active_floorplan_div_nr]){

				if (room != spaceIdStickyNote[cvjs_active_floorplan_div_nr] || room != lastObjStickyNote[cvjs_active_floorplan_div_nr]){


//console.log("cvjs_clearDrawingStickyNotes hide"+room+"  "+lastObjStickyNote[cvjs_active_floorplan_div_nr]+" "+lastObjStickyNote[cvjs_active_floorplan_div_nr]);

//				spaceIdStickyNote[cvjs_active_floorplan_div_nr] = rmid;
//				lastObjStickyNote[cvjs_active_floorplan_div_nr] = space;



//					jQuery(vqStickyNotes[room].node).qtip('hide');
					if (jQuery(vqStickyNotes[space].node.qtip).is(":visible")) jQuery(vqStickyNotes[space].node).qtip('hide');



	///				  vqRooms[cvjs_active_floorplan_div_nr][room].attr(defaultColor);  // 2015-02-01  - moved into conditional statement
						if (!cvjs_supressPopUpModal){
							vqStickyNotes[room].attr(defaultColor_StickyNotes);
						}
						else{
							if (vqStickyNotes[room].data("linked")){
								vqStickyNotes[room].attr(defaultColor_linked);
							}
							else{
								vqStickyNotes[room].attr(defaultColor_unlinked);
							}
						}
				}
		  }


	}
		catch(err)
	{
		console.log("cvjs_clearDrawingStickyNotes_ "+err);
	}

}



/**
 * Clears the drawing from any highlight or modals active on Hyperlinks
 */

function cvjs_clearDrawingHyperlinks()
{

//console.log("clear drawings hyperlinks");

	for (room in vqURLs)
	{
		try
		  {
//			console.log("room "+room+" lastObjHyperlink[cvjs_active_floorplan_div_nr] "+lastObjHyperlink[cvjs_active_floorplan_div_nr]+" popObjHyperlink[cvjs_active_floorplan_div_nr] "+ popObjHyperlink[cvjs_active_floorplan_div_nr]);

				if (room != lastObjHyperlink[cvjs_active_floorplan_div_nr] || room != popObjHyperlink[cvjs_active_floorplan_div_nr]){
					jQuery(vqURLs[room].node).qtip('hide');
				}
// changed so all hyperlinks objects are cleared


	///				  vqRooms[cvjs_active_floorplan_div_nr][room].attr(defaultColor);  // 2015-02-01  - moved into conditional statement
				if (!cvjs_supressHyperlinkColors){
					vqURLs[room].attr(defaultColor_Hyperlinks);
				}
				else{
					vqURLs[room].attr(defaultColor_Hyperlinks_blank);  // set colors ( note: change attribute name to something more applicable
				}


		  }
		catch(err)
		  {
		  //Handle errors here
		  }
	  }
}


/**
 * Clears the drawing from any redlines
 */

function cvjs_clearDrawingRedlines()
{

// empty
}





/**
 * Update redlines after page change
 */

function cvjs_updateDrawingRedlines(redlineStickyNoteLayer)
{


if (cvjs_debug) console.log(redlineStickyNoteLayer+"cvjs_updateDrawingRedlines(redlineStickyNoteLayer) cvjs_updateDrawingRedlines(redlineStickyNoteLayer) cvjs_updateDrawingRedlines(redlineStickyNoteLayer)");

try{

//QQQQQQQ
	if (cvjs_debug) console.log("cvjs_updateDrawingRedlines() redline length "+vqRedlines.length+"  "+vqStickyNotes.length);
	if (vqRedlines.length>0){
		//console.log(vqRedlines[0]);
		for (var i=0; i<vqRedlines.length; i++){
			// SETTING UP TEXT!
			if (vqRedlines[i].data("redline_text")!="none" && vqRedlines[i].data("redline_text")!=undefined ){
				var textString = vqRedlines[i].data("redline_text");
				var tArr = textString.split('<br>');
				try{
				cvjs_setCurrentRedlineValues_All(vqRedlines[i].data("node"), vqRedlines[i].data("name"),vqRedlines[i].data("id"), vqRedlines[i].data("layer"), vqRedlines[i].data("group"), vqRedlines[i].data("color"), vqRedlines[i].data("strokeWidth"), vqRedlines[i].data("fill"), vqRedlines[i].data("fill_opacity"), vqRedlines[i].data("transform"), vqRedlines[i].data("username"), vqRedlines[i].data("userid"), vqRedlines[i].data("currentPage"), vqRedlines[i].data("polypath_arrow"), vqRedlines[i].data("triangle_design"), vqRedlines[i].data("redline_text"), vqRedlines[i].data("drawingRotation"));

				vqRedlines[i] = redlineStickyNoteLayer.text(0,0, tArr).attr({stroke: cvjs_currentRedline_color, fill: cvjs_currentRedline_color, 'font-size': cvjs_reference_font_size, 'transform': vqRedlines[i].data("transform")});

				for (var jj=1; jj<tArr.length; jj++){
					var eml = jj+"em";
					vqRedlines[i].selectAll("tspan")[jj].attr({ x:0 , dy: '1em' });
				}

				vqRedlines[i].data("node", cvjs_currentRedline_underbar);
				vqRedlines[i].data("name", cvjs_currentRedline_name);
				vqRedlines[i].data("id", cvjs_currentRedline_id);
				vqRedlines[i].data("layer", cvjs_currentRedline_layer);
				vqRedlines[i].data("group", cvjs_currentRedline_group);
				vqRedlines[i].data("color", cvjs_currentRedline_color);
				vqRedlines[i].data("strokeWidth", cvjs_currentRedline_strokeWidth);
				vqRedlines[i].data("fill", cvjs_currentRedline_fill);
				vqRedlines[i].data("fill_opacity", cvjs_currentRedline_fill_opacity);
				vqRedlines[i].data("transform", cvjs_currentRedline_transform);
				vqRedlines[i].data("username", cvjs_currentRedline_username);
				vqRedlines[i].data("userid", cvjs_currentRedline_userid);
				vqRedlines[i].data("currentPage", cvjs_currentRedline_currentPage);
				vqRedlines[i].data("polypath_arrow", cvjs_currentRedline_polypath_arrow);
				vqRedlines[i].data("triangle_design", cvjs_currentRedline_triangle_design);
				vqRedlines[i].data("redline_text", cvjs_currentRedline_redline_text);
				vqRedlines[i].data("drawingRotation", cvjs_currentRedline_drawingRotation);

				vqRedlines[i].mousedown(function (e){
					if (cvjs_deleteRedlineFlag ){
						cvjs_deleteRedlineFlag = false;
						// delete redline
						var rednode = this.data("node");
						cvjs_setUpVqRedlines_deleteNode(rednode);
					}

				});


				vqRedlines[i].mouseover(function (e){
					
					
					tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					
				

						var tipText = "UserName: "+this.data("username");
						tip[cvjs_active_floorplan_div_nr].html(tipText);
						tip[cvjs_active_floorplan_div_nr].show();


				var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
				var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
				if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
				}
				else{  // we have placed CV-JS inside a div and we have to make a relative position
					tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
				}
							
				});

				vqRedlines[i].mouseout(function (e){
						tip[cvjs_active_floorplan_div_nr].hide();
				});

				
				if (vqRedlines[i].data("currentPage")!=multiPages[cvjs_active_floorplan_div_nr].currentPage)
					vqRedlines[i].attr(hide);
				else{
					vqRedlines[i].attr(show);
					try{
					if (vqRedlines[i].data("drawingRotation")!=0){
							cvjs_rotateAngle(vqRedlines[i].data("drawingRotation"), floorplan_div_Array[cvjs_active_floorplan_div_nr]);
					}
					} catch(err1){console.log(err1);}
				}
				
				
				}catch(err){console.log(err);}

			}
			else{
				// ARROW 
				if (vqRedlines[i].data("polypath_arrow")!="none" && vqRedlines[i].data("polypath_arrow")!=undefined ){
				try{

					cvjs_setCurrentRedlineValues_All(vqRedlines[i].data("node"), vqRedlines[i].data("name"),vqRedlines[i].data("id"), vqRedlines[i].data("layer"), vqRedlines[i].data("group"), vqRedlines[i].data("color"), vqRedlines[i].data("strokeWidth"), vqRedlines[i].data("fill"), vqRedlines[i].data("fill_opacity"), vqRedlines[i].data("transform"), vqRedlines[i].data("username"), vqRedlines[i].data("userid"), vqRedlines[i].data("currentPage"), vqRedlines[i].data("polypath_arrow"), vqRedlines[i].data("triangle_design"), vqRedlines[i].data("redline_text"), vqRedlines[i].data("drawingRotation"));

					
					// 2018-04-18  THIS WOULD CREATE DOUBLE ARROW, SO DELETE AFTER RELOAD WILL ONLY REMOVE ONE, THEREFORE THIS HAS BEEN REMOVED
/*
					vqRedlines[i] =redlineStickyNoteLayer.g(redlineStickyNoteLayer.polyline(vqRedlines[i].data("triangle_design")).attr({ transform: vqRedlines[i].data("transform"), fill: vqRedlines[i].data("color")}),
								   redlineStickyNoteLayer.path(vqRedlines[i].data("polypath_arrow")).attr({stroke: vqRedlines[i].data("color"), "stroke-width": vqRedlines[i].data("strokeWidth")*cvjs_redlineThickness_scaleFactor, fill: vqRedlines[i].data("fill"), "fill-opacity": vqRedlines[i].data("fill_opacity")}))
								   .data("node", vqRedlines[i].data("node"));
*/								   

					redlineStickyNoteLayer.add(vqRedlines[i]);


					}catch(err){console.log(err);}

					vqRedlines[i].data("node", cvjs_currentRedline_underbar);
					vqRedlines[i].data("name", cvjs_currentRedline_name);
					vqRedlines[i].data("id", cvjs_currentRedline_id);
					vqRedlines[i].data("layer", cvjs_currentRedline_layer);
					vqRedlines[i].data("group", cvjs_currentRedline_group);
					vqRedlines[i].data("color", cvjs_currentRedline_color);
					vqRedlines[i].data("strokeWidth", cvjs_currentRedline_strokeWidth);
					vqRedlines[i].data("fill", cvjs_currentRedline_fill);
					vqRedlines[i].data("fill_opacity", cvjs_currentRedline_fill_opacity);
					vqRedlines[i].data("transform", cvjs_currentRedline_transform);
					vqRedlines[i].data("username", cvjs_currentRedline_username);
					vqRedlines[i].data("userid", cvjs_currentRedline_userid);
					vqRedlines[i].data("currentPage", cvjs_currentRedline_currentPage);
					vqRedlines[i].data("polypath_arrow", cvjs_currentRedline_polypath_arrow);
					vqRedlines[i].data("triangle_design", cvjs_currentRedline_triangle_design);
					vqRedlines[i].data("redline_text", cvjs_currentRedline_redline_text);					
					vqRedlines[i].data("drawingRotation", cvjs_currentRedline_drawingRotation)

					vqRedlines[i].mousedown(function (e){
						if (cvjs_deleteRedlineFlag ){
							cvjs_deleteRedlineFlag = false;
							// delete redline
							var rednode = this.data("node");
							//console.log(rednode);
							cvjs_setUpVqRedlines_deleteNode(rednode);
						}

					});
					vqRedlines[i].mouseover(function (e){

				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					
					
							var tipText = "UserName: "+this.data("username");
							tip[cvjs_active_floorplan_div_nr].html(tipText);
							tip[cvjs_active_floorplan_div_nr].show();
							
							var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
							var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
							if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
							//console.log("absolute");
							   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
							}
							else{  // we have placed CV-JS inside a div and we have to make a relative position
								//console.log("inside");
								tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
							}
								
					});

					vqRedlines[i].mouseout(function (e){
							tip[cvjs_active_floorplan_div_nr].hide();
					});

		


		
					if (vqRedlines[i].data("currentPage")!=multiPages[cvjs_active_floorplan_div_nr].currentPage)
						vqRedlines[i].attr(hide);
					else{
						vqRedlines[i].attr(show);
						try{
						if (vqRedlines[i].data("drawingRotation")!=0){
								cvjs_rotateAngle(vqRedlines[i].data("drawingRotation"), floorplan_div_Array[cvjs_active_floorplan_div_nr]);
//														window.alert("2 rotate red "+ vqRedlines[i].data("drawingRotation"));

						}
						} catch(err1){console.log(err1);}
					}
					




			}
			else
				redlineStickyNoteLayer.add(vqRedlines[i]);


//console.log("before add");				
//					cvjs_rPaper[cvjs_active_floorplan_div_nr].add(vqRedlines[i]);


					
if (cvjs_debug) console.log(vqRedlines[i]+"  "+vqRedlines[i].data("currentPage")+" multi "+multiPages[cvjs_active_floorplan_div_nr].currentPage+(vqRedlines[i].data("currentPage")!=multiPages[cvjs_active_floorplan_div_nr].currentPage));
		//			console.log(vqRedlines[i]);
		
		
					if (vqRedlines[i].data("currentPage")!=multiPages[cvjs_active_floorplan_div_nr].currentPage)
						vqRedlines[i].attr(hide);
					else{
						vqRedlines[i].attr(show);
						try{
						if (vqRedlines[i].data("drawingRotation")!=0){
								cvjs_rotateAngle(vqRedlines[i].data("drawingRotation"), floorplan_div_Array[cvjs_active_floorplan_div_nr]);

//						window.alert("3 rotate red "+ vqRedlines[i].data("drawingRotation"));
								
						}
						} catch(err1){console.log(err1);}
					}
	
//					if (vqRedlines[i].data("currentPage")!=multiPages[cvjs_active_floorplan_div_nr].currentPage)
//						vqRedlines[i].attr(hide);
//					else
//						vqRedlines[i].attr(show);
				}
			}
	}





	var node = new Array();

	if (vqStickyNotes.length>0){
		//console.log(vqStickyNotes[0]);
		for (var i=0; i<vqStickyNotes.length; i++){
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].add(vqStickyNotes[i]);
//			cvjs_rPaper[cvjs_active_floorplan_div_nr].add(vqStickyNotes[i]);
//			cvjs_rPaper[cvjs_active_floorplan_div_nr].add(node[i]);

if (cvjs_debug) console.log("loop "+vqStickyNotes[i].data("name"));

			cvjs_setCurrentStickyNoteValues_All( vqStickyNotes[i].data("node"), vqStickyNotes[i].data("name"), vqStickyNotes[i].data("id"), vqStickyNotes[i].data("layer"), vqStickyNotes[i].data("group"), vqStickyNotes[i].data("text"), vqStickyNotes[i].data("userid"), vqStickyNotes[i].data("date"), vqStickyNotes[i].data("linked"), vqStickyNotes[i].data("transform"), vqStickyNotes[i].data("currentPage"), vqStickyNotes[i].data("drawingRotation"));
//
			var rightadjustment = 0;
			if (i<10) rightadjustment = 3;

 vqStickyNotes[i] =redlineStickyNoteLayer.group(redlineStickyNoteLayer.path("M0,0h20v20h-20v-20Z").attr({stroke: "#000000", "stroke-width" : "1.0"}),
				   redlineStickyNoteLayer.path("M7,12h1.3M9.5,12h3.5M11.25,12v5M9.75,12v1.75M12.75,12v1.75M10.5,17h1.5M7,13.5h1.3M7,15.25h3M7,17.0h2.2").attr({stroke: "#000000", "stroke-width" : "0.5"}),
				   redlineStickyNoteLayer.text((3+rightadjustment),9,"#"+vqStickyNotes[i].data("id")).attr({"font-size": "8px", "font-style": "italic", stroke: "#000000", "stroke-width" : "0.3", "fill" : "#000000", "fill-opacity" : 1.0}))
				   .attr({'transform': vqStickyNotes[i].data("transform"), "opacity" : "1"})
				   .attr({	fill: '#FFF', "fill-opacity": "0.8", stroke: '#000', 'stroke-opacity': "1" })
				   .data("node", vqStickyNotes[i].data("node"));


			redlineStickyNoteLayer.add( vqStickyNotes[i]);
			
//window.alert("cvjs_setUpVqStickyNotes_currentNode_PageChange "+cvjs_currentStickyNote_underbar+" "+i+"  "+multiPages[cvjs_active_floorplan_div_nr].currentPage);			
			cvjs_setUpVqStickyNotes_currentNode_PageChange(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentStickyNote_underbar, i);
			
			if (vqStickyNotes[i].data("currentPage")!=multiPages[cvjs_active_floorplan_div_nr].currentPage)
				vqStickyNotes[i].attr(hide);
			else{
				vqStickyNotes[i].attr(show);
				try{
					if (vqStickyNotes[i].data("drawingRotation")!=0){
							cvjs_rotateAngle(vqStickyNotes[i].data("drawingRotation"), floorplan_div_Array[cvjs_active_floorplan_div_nr]);

//						window.alert("rotate sticky "+ vqStickyNotes[i].data("drawingRotation"));
							
					}
				} catch(err1){console.log(err1);}



			}
		}



	}

//	window.alert(redlineStickyNoteLayer);
	
	cvjs_rPaper[cvjs_active_floorplan_div_nr].add(redlineStickyNoteLayer); //  - this works for dwg

//	cvjs_SVGGroup[cvjs_active_floorplan_div_nr].add(redlineStickyNoteLayer);	
//	cvjs_masterBackground[cvjs_active_floorplan_div_nr].add(redlineStickyNoteLayer);
	
	redlineStickyNoteLayer.prepend(cvjs_masterBackground[cvjs_active_floorplan_div_nr]);
	
	
}
catch(err) {console.log("cvjs_updateDrawingRedlines "+err);}

}



function cvjs_clearAllDrawing()
{

//console.log("clearAll");
//console.log("clear lastobj"+lastObj);
	for (room in vqRooms[cvjs_active_floorplan_div_nr])
	{
		//vqRooms[cvjs_active_floorplan_div_nr][room].attr(defaultColor);  // 2015-02-01  - moved into conditional statement
		if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors){
			vqRooms[cvjs_active_floorplan_div_nr][room].attr(defaultColor);
		}
		else{
			if (vqRooms[cvjs_active_floorplan_div_nr][room].data("linked")){
				vqRooms[cvjs_active_floorplan_div_nr][room].attr(defaultColor_linked);
			}
			else{
				vqRooms[cvjs_active_floorplan_div_nr][room].attr(defaultColor_unlinked);
			}
		}


		try
		  {
		  	if (room != lastObj[cvjs_active_floorplan_div_nr] || room != popObj){
		  		jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip('hide');

	  		}
		  }
		catch(err)
		  {
		  //Handle errors here
		  }
	  }
}



/**
 * Highlights a URL with a given style on a given layer
 * @param {string} Id - Id of the URL to highlight
 * @param {object} roomstyle - JSON formattet object containg the styling of the URL
 * @param {string} layer - layer on which to draw the highlight
 */


function cvjs_highlightURL(urlid, roomstyle, layer){

	cvjs_highlightURL_layersort(urlid, roomstyle, layer, "");

}


function cvjs_highlightURL_layersort(rmid, roomstyle, layer, layer2)
{
	var rm = findUrl(rmid);

	if (rm >= 0 )
		{

// we do not know what to do with lastobject
//		lastObj[cvjs_active_floorplan_div_nr] = rm;

		var strRoom = (vqURLs[rm].attr()).toString();

		var strLayer = layer.toString();

		// find the path

		var path1 ="";
		var path_flag = true;
		var cx =0;
		var cy =0;
		var r =0;

		if (strRoom.indexOf("path")>-1){
			path_flag = true;
			var pos1 = strRoom.indexOf(" d=");
			var pathStr1 = strRoom.substring(pos1+4);
			//console.log(pathStr1);
			var pos1A = pathStr1.indexOf("\" ");
			path1 = pathStr1.substring(0, pos1A);
		}

//console.log("path1 "+path1);

		if (strRoom.indexOf("circle")>-1){
			path_flag = false;

			var p_cx = strRoom.indexOf(" cx=");
			var s1_cx = strRoom.substring(p_cx+5);
			var p2_cx = s1_cx.indexOf("\"");
			cx = s1_cx.substring(0, p2_cx)

			var p_cy = strRoom.indexOf(" cy=");
			var s1_cy = strRoom.substring(p_cy+5);
			var p2_cy = s1_cy.indexOf("\"");
			cy = s1_cy.substring(0, p2_cy)


			var p_r = strRoom.indexOf(" r=");
			var s1_r = strRoom.substring(p_r+4);
			var p2_r = s1_r.indexOf("\"");
			r = s1_r.substring(0, p2_r)
		}

//console.log("r "+r);



//console.log("pos1="+pos1+" pos2="+pos2);
//		var path1 = strRoom.substring(pos1+3, pos2-1);

if (cvjs_debug) console.log("cvjs_highlightRoomCSS_layersort "+strRoom+" "+cx+" "+cy+" "+r);


		var pos2 = strRoom.indexOf(" fill=");
		var style = strRoom.substring(pos2+1);

		var styleString = JSON.stringify(roomstyle);
		styleString = styleString.toString();
		var splitString = styleString.split(",");
		var fill_var = "#fff";
		var fillopacity_var = "0.5";  // 
		var stroke_var = "#fff";
		var strokewidth_var = 1;
		var strokelinejoin_var = "round";
		var strokeopacity_var = "1";

//console.log("splitString="+splitString+"  length="+splitString.length);


		for (var i=0; i<splitString.length; i++){

			var styleObject = splitString[i];

			if (styleObject.indexOf('"fill"')>-1){
				fill_var = styleObject.substring(styleObject.indexOf(':')+1);
				if (fill_var.indexOf('}')>-1)
					fill_var = fill_var.substring(0, fill_var.indexOf('}'));
			}
			if (styleObject.indexOf('"fill-opacity"')>-1){
				fillopacity_var = styleObject.substring(styleObject.indexOf(':')+1);
				if (fillopacity_var.indexOf('}')>-1)
					fillopacity_var = fillopacity_var.substring(0, fillopacity_var.indexOf('}'));
			}

			if (styleObject.indexOf('"stroke"')>-1){
				stroke_var = styleObject.substring(styleObject.indexOf(':')+1);
				if (stroke_var.indexOf('}')>-1)
					stroke_var = stroke_var.substring(0, stroke_var.indexOf('}'));
			}

			if (styleObject.indexOf('"stroke-width"')>-1){
				strokewidth_var = styleObject.substring(styleObject.indexOf(':')+1);
				if (strokewidth_var.indexOf('}')>-1)
					strokewidth_var = strokewidth_var.substring(0, strokewidth_var.indexOf('}'));
			}

			if (styleObject.indexOf('"stroke-opacity"')>-1){
				strokeopacity_var = styleObject.substring(styleObject.indexOf(':')+1);
				if (strokeopacity_var.indexOf('}')>-1)
					strokeopacity_var = strokeopacity_var.substring(0, strokeopacity_var.indexOf('}'));
			}

//console.log("strokeopacity_var "+strokeopacity_var);


			if (styleObject.indexOf('"stroke-linejoin"')>-1){
				strokelinejoin_var = styleObject.substring(styleObject.indexOf(':')+1);
				if (strokelinejoin_var.indexOf('}')>-1)
					strokelinejoin_var = strokelinejoin_var.substring(0, strokelinejoin_var.indexOf('}'));
//console.log("strokelinejoin_var "+strokelinejoin_var);


			}
		}


		try{

			var attr_2 = '{ \"fill\" : '+fill_var+' , \"fill-opacity\": '+fillopacity_var+' , \"stroke\": '+stroke_var+', \"stroke-width\": '+strokewidth_var+', \"stroke-opacity\": '+strokeopacity_var+',  \"stroke-linejoin\": '+strokelinejoin_var+' }';

			var json_obj = jQuery.parseJSON(attr_2);

//console.log(path_flag+" Location path1="+path1+" "+cx+" "+cy+" "+r);

			if (path_flag)
				layer.add(cvjs_rPaper[cvjs_active_floorplan_div_nr].path(path1).attr(json_obj));
			else
				layer.add(cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(cx,cy,r,r).attr(json_obj));



			// layer is prepended the vqroom and drag layer so always below the layer with selectable objects

			try{
				layer2.prepend(layer);
			}
			catch (err){
				var iii = 0;
			}
			return 1;

		}
		catch(err){

		if (cvjs_debug) console.log("A2 "+err);
			return -1;

		}

	}

	return -1;
}



function findURL(urlid)
{
	for (spc in vqURLs)
	{
		var vqid = vqURLs[spc].data("id");

//if (spc == 114 || spc == 115 || spc == 116) console.log("rmid "+rmid+"  vqid="+vqid);

		if (vqid == urlid)
			{
			return spc;
			}
	}
	return -1;
}



function cvjs_highlightRoomCSS(rmid, roomstyle)
{
	var rm = findRoom(rmid);
	if (rm >= 0)
	{
		lastObj[cvjs_active_floorplan_div_nr] = rm;
		vqRooms[cvjs_active_floorplan_div_nr][rm].attr(roomstyle);
	}
}




/**
 * Highlights all Space Objects with a given style on a specified external layer
 * @param {object} roomstyle - JSON formattet object containg the styling of the Space Objects
 * @param {string} layer - external layer on which to draw the highlights
 */

function cvjs_highlightAllSpaceObjects(roomstyle, layer)
{
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		cvjs_highlightRoomCSS_layer(vqRooms[cvjs_active_floorplan_div_nr][spc].data("id"), roomstyle, layer);
	}
}





function cvjs_highlightAllRooms_layer(roomstyle, layer)
{
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		cvjs_highlightRoomCSS_layer(vqRooms[cvjs_active_floorplan_div_nr][spc].data("id"), roomstyle, layer);
	}
}



/**
 * Highlights a Space Object with a given style on a given external layer
 * @param {string} Id - Id of the Space Object to highlight
 * @param {object} roomstyle - JSON formattet object containg the styling of the SpaceObject
 * @param {string} layer - external layer on which to draw the highlight
 * @param {string} floorplan_div - floorplan div with CADViewer instance
 */

function cvjs_highlightSpaceObjectIdDiv(rmid, roomstyle, layer, floorplan_div)
{

	cvjs_highlightRoomCSS_layersortDiv(rmid, roomstyle, layer, floorplan_div);

}




/**
 * Highlights a Space Object with a given style on a given external layer
 * @param {string} Id - Id of the Space Object to highlight
 * @param {object} roomstyle - JSON formattet object containg the styling of the SpaceObject
 * @param {string} layer - external layer on which to draw the highlight
 */

function cvjs_highlightSpaceObjectId(rmid, roomstyle, layer)
{

	cvjs_highlightRoomCSS_layersort(rmid, roomstyle, layer, layer_vqrooms[cvjs_active_floorplan_div_nr]);

}

/**
 * Highlights a Space Object with a given style on a given external layer
 * @param {string} Id - Id of the Space Object to highlight
 * @param {object} roomstyle - JSON formattet object containg the styling of the SpaceObject
 * @param {string} layer - external layer on which to draw the highlight
 */

function cvjs_highlightRoomCSS_layer(rmid, roomstyle, layer)
{

	cvjs_highlightRoomCSS_layersort(rmid, roomstyle, layer, layer_vqrooms[cvjs_active_floorplan_div_nr]);

}


/**
 * Highlights a Space Object with a given style on a given external layer
 * @param {string} rmid - Id of the Space Object to highlight
 * @param {object} roomstyle - JSON formattet object containg the styling of the SpaceObject
 * @param {string} layer - external layer on which to draw the highlight
 * @param {string} floorplan_div - name of the div on which the CADViewerJS instance is placed
 * @return {boolean} false if rmid not found otherwise true
 */

function cvjs_highlightRoomCSS_layersortDiv(rmid, roomstyle, layer, floorplan_div){
	
	var svgdiv = floorplan_div+"_svg";
	var returnvalue;
	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(svgdiv);
	returnvalue = cvjs_highlightRoomCSS_layersort(rmid, roomstyle, layer, layer_vqrooms[cvjs_active_floorplan_div_nr]);
	
	if (returnvalue == -1) return false;
	else return true;

	return false;
	
}







/**
 * Highlights a Space Object with a given style on a given external layer
 * @param {string} Id - Id of the Space Object to highlight
 * @param {object} roomstyle - JSON formattet object containg the styling of the SpaceObject
 * @param {string} layer - external layer on which to draw the highlight
 * @param {string} layer2 - external layer is repositioned and put on top of layer2
 */

function cvjs_highlightRoomCSS_layersort(rmid, roomstyle, layer, layer2)
{
	var rm = findFixture(rmid);

	if (rm == -1) return -1;
	
	if (rm >= 0 )
		{

//if (cvjs_debug) console.log("rmid "+rmid+" rm="+rm);
		lastObj[cvjs_active_floorplan_div_nr] = rm;
		//vqRooms[cvjs_active_floorplan_div_nr][rm].attr(roomstyle);

		// console.log("before layer add "+layer+" rm="+rm);

//if (cvjs_debug) console.log("vqRooms[cvjs_active_floorplan_div_nr][rm] "+vqRooms[cvjs_active_floorplan_div_nr][rm]);

		var strRoom;

		try{
			strRoom = vqRooms[cvjs_active_floorplan_div_nr][rm].toString();

			if (strRoom.indexOf("path")>0 || strRoom.indexOf("circle")>0 ){

				//window.alert("we got path");
			}
			else{
				strRoom = (vqRooms[cvjs_active_floorplan_div_nr][rm].attr()).toString();
				//window.alert("2");
			}

		}catch (exception) {

			strRoom = (vqRooms[cvjs_active_floorplan_div_nr][rm].attr()).toString();
				//window.alert("3");
		}


		var strLayer = "";
		try{
			strLayer = layer.toString();			
		}
		catch(err){console.log("cvjs_highlightRoomCSS_layersort: "+err);}

		// find the path

		var path1 ="";
		var path_flag = true;
		var cx =0;
		var cy =0;
		var r =0;

		if (strRoom.indexOf("path")>-1){
			path_flag = true;
			var pos1 = strRoom.indexOf(" d=");
			var pathStr1 = strRoom.substring(pos1+4);
			//console.log(pathStr1);
			var pos1A = pathStr1.indexOf("\" ");
			path1 = pathStr1.substring(0, pos1A);
		}

//console.log("path1 "+path1);

		if (strRoom.indexOf("circle")>-1){
			path_flag = false;

			var p_cx = strRoom.indexOf(" cx=");
			var s1_cx = strRoom.substring(p_cx+5);
			var p2_cx = s1_cx.indexOf("\"");
			cx = s1_cx.substring(0, p2_cx)

			var p_cy = strRoom.indexOf(" cy=");
			var s1_cy = strRoom.substring(p_cy+5);
			var p2_cy = s1_cy.indexOf("\"");
			cy = s1_cy.substring(0, p2_cy)


			var p_r = strRoom.indexOf(" r=");
			var s1_r = strRoom.substring(p_r+4);
			var p2_r = s1_r.indexOf("\"");
			r = s1_r.substring(0, p2_r)
		}

//console.log("r "+r);

//console.log("pos1="+pos1+" pos2="+pos2);
//		var path1 = strRoom.substring(pos1+3, pos2-1);

//console.log("cvjs_highlightRoomCSS_layersort "+strRoom+" "+cx+" "+cy+" "+r);

		var pos2 = strRoom.indexOf(" fill=");
		var style = strRoom.substring(pos2+1);

		var styleString = JSON.stringify(roomstyle);
		styleString = styleString.toString();
		var splitString = styleString.split(",");
		var fill_var = "#fff";
		var fillopacity_var = "0.5";
		var stroke_var = "#fff";
		var strokewidth_var = 1;
		var strokelinejoin_var = '"round"';
		var strokelinecap_var = '"round"';
		var strokeopacity_var = "1";


//console.log("splitString="+splitString+"  length="+splitString.length);


		for (var i=0; i<splitString.length; i++){

			var styleObject = splitString[i];

			if (styleObject.indexOf('"fill"')>-1){
				fill_var = styleObject.substring(styleObject.indexOf(':')+1);
				if (fill_var.indexOf('}')>-1)
					fill_var = fill_var.substring(0, fill_var.indexOf('}'));
			}
			if (styleObject.indexOf('"fill-opacity"')>-1){
				fillopacity_var = styleObject.substring(styleObject.indexOf(':')+1);
				if (fillopacity_var.indexOf('}')>-1)
					fillopacity_var = fillopacity_var.substring(0, fillopacity_var.indexOf('}'));
			}

			if (styleObject.indexOf('"stroke"')>-1){
				stroke_var = styleObject.substring(styleObject.indexOf(':')+1);
				if (stroke_var.indexOf('}')>-1)
					stroke_var = stroke_var.substring(0, stroke_var.indexOf('}'));
			}

			if (styleObject.indexOf('"stroke-width"')>-1){
				strokewidth_var = styleObject.substring(styleObject.indexOf(':')+1);
				if (strokewidth_var.indexOf('}')>-1)
					strokewidth_var = strokewidth_var.substring(0, strokewidth_var.indexOf('}'));
			}

			if (styleObject.indexOf('"stroke-opacity"')>-1){
				strokeopacity_var = styleObject.substring(styleObject.indexOf(':')+1);
				if (strokeopacity_var.indexOf('}')>-1)
					strokeopacity_var = strokeopacity_var.substring(0, strokeopacity_var.indexOf('}'));
			}

//console.log("strokeopacity_var "+strokeopacity_var);


			if (styleObject.indexOf('"stroke-linejoin"')>-1){
				strokelinejoin_var = styleObject.substring(styleObject.indexOf(':')+1);
				if (strokelinejoin_var.indexOf('}')>-1)
					strokelinejoin_var = strokelinejoin_var.substring(0, strokelinejoin_var.indexOf('}'));
//console.log("strokelinejoin_var "+strokelinejoin_var);

			}

			if (styleObject.indexOf('"stroke-linecap"')>-1){
				strokelinecap_var = styleObject.substring(styleObject.indexOf(':')+1);
				if (strokelinecap_var.indexOf('}')>-1)
					strokelinecap_var = strokelinecap_var.substring(0, strokelinecap_var.indexOf('}'));
if (cvjs_debug) console.log("strokelinecap_var "+strokelinecap_var);

			}



		}


		try{

			var attr_2 = '{ \"fill\" : '+fill_var+' , \"fill-opacity\": '+fillopacity_var+' , \"stroke\": '+fill_var+', \"stroke-width\": '+strokewidth_var+', \"stroke-opacity\": '+strokeopacity_var+',  \"stroke-linejoin\": '+strokelinejoin_var+',  \"stroke-linecap\": '+strokelinecap_var+' }';

//if (cvjs_debug) console.log("attr2 "+attr_2);

			var json_obj = jQuery.parseJSON(attr_2);

//console.log(path_flag+" Location path1="+path1+" "+cx+" "+cy+" "+r);


			if (path_flag){
				// 6.2.30
				//layer.add(cvjs_rPaper[cvjs_active_floorplan_div_nr].path(path1).attr(json_obj));
				layer.path(path1).attr(json_obj);
			}
			else{
				// 6.2.30
				//layer.add(cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(cx,cy,r,r).attr(json_obj));
				layer.circle(cx,cy,r,r).attr(json_obj);
			}

//window.alert("path flag path1 "+path1+"  "+layer);

			// layer is prepended the vqroom and drag layer so always below the layer with selectable objects

			try{
				layer2.prepend(layer);
			}
			catch (err){
				var iii = 0;
			}
			return 1;

		}
		catch(err){

		if (cvjs_debug) console.log("A2 "+err);
			return -1;

		}

	}

	return -1;
}


/**
 * Highlights a Space Object bordr with a given style on a given external layer
 * @param {string} rmid - Id of the Space Object to highlight
 * @param {object} roomstyle - JSON formattet object containg the styling of the SpaceObject
 * @param {string} layer - external layer on which to draw the highlight
 * @param {string} floorplan_div - name of the div on which the CADViewerJS instance is placed
 * @param {floar} lineWeightFactor - scale factor on border line weight
 * @return {boolean} false if rmid not found otherwise true
 */

 
function cvjs_highlightSpaceBorderCSS_layersortDiv(rmid, roomstyle, layer, floorplan_div, lineWeightFactor)
{

	var svgdiv = floorplan_div+"_svg";
	var returnvalue;

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(svgdiv);
	returnvalue = cvjs_highlightSpaceBorderCSS_layersort(rmid, roomstyle, layer, layer_vqrooms[cvjs_active_floorplan_div_nr], lineWeightFactor);

	if (returnvalue == -1) return false;
	else return true;

	return false;
	
}







/**
 * Highlights a Space Object bordr with a given style on a given external layer
 * @param {string} Id - Id of the Space Object to highlight
 * @param {object} roomstyle - JSON formattet object containg the styling of the SpaceObject
 * @param {string} layer - external layer on which to draw the highlight
 * @param {string} layer2 - layer is repositioned and put on top of layer2
 * @param {floar} lineWeightFactor - scale factor on border line weight
 */

function cvjs_highlightSpaceBorderCSS_layersort(rmid, roomstyle, layer, layer2, lineWeightFactor)
{
	var rm = findFixture(rmid);

	if (rm >= 0 )
		{

if (cvjs_debug) console.log("rmid "+rmid+" rm="+rm);
		lastObj[cvjs_active_floorplan_div_nr] = rm;
		//vqRooms[cvjs_active_floorplan_div_nr][rm].attr(roomstyle);

		// console.log("before layer add "+layer+" rm="+rm);

//console.log("vqRooms[cvjs_active_floorplan_div_nr][rm] "+vqRooms[cvjs_active_floorplan_div_nr][rm]);

		var strRoom;

		try{
				strRoom = vqRooms[cvjs_active_floorplan_div_nr][rm].toString();

		//console.log("1 strRoom "+strRoom);

			if (strRoom.indexOf("path")>0 || strRoom.indexOf("circle")>0 ){

				//window.alert("we got path");
			}
			else{
				strRoom = (vqRooms[cvjs_active_floorplan_div_nr][rm].attr()).toString();
				//window.alert("2");
			}

		}catch (exception) {

			strRoom = (vqRooms[cvjs_active_floorplan_div_nr][rm].attr()).toString();
				//window.alert("3");
		}



//console.log("strRoom "+strRoom);
		var strLayer = "";
		try{
			strLayer = layer.toString();			
		}
		catch(err){console.log("cvjs_highlightSpaceBorderCSS_layersort"+err);}

//console.log("strLayer "+strLayer);

		// find the path

		var path1 ="";
		var path_flag = true;
		var cx =0;
		var cy =0;
		var r =0;

		if (strRoom.indexOf("path")>-1){
			path_flag = true;
			var pos1 = strRoom.indexOf(" d=");
			var pathStr1 = strRoom.substring(pos1+4);
			//console.log(pathStr1);
			var pos1A = pathStr1.indexOf("\" ");
			path1 = pathStr1.substring(0, pos1A);
		}

//console.log("path1 "+path1);

		if (strRoom.indexOf("circle")>-1){
			path_flag = false;

			var p_cx = strRoom.indexOf(" cx=");
			var s1_cx = strRoom.substring(p_cx+5);
			var p2_cx = s1_cx.indexOf("\"");
			cx = s1_cx.substring(0, p2_cx)

			var p_cy = strRoom.indexOf(" cy=");
			var s1_cy = strRoom.substring(p_cy+5);
			var p2_cy = s1_cy.indexOf("\"");
			cy = s1_cy.substring(0, p2_cy)


			var p_r = strRoom.indexOf(" r=");
			var s1_r = strRoom.substring(p_r+4);
			var p2_r = s1_r.indexOf("\"");
			r = s1_r.substring(0, p2_r)
		}

//console.log("r "+r);



//console.log("pos1="+pos1+" pos2="+pos2);
//		var path1 = strRoom.substring(pos1+3, pos2-1);

//console.log("cvjs_highlightRoomCSS_layersort "+strRoom+" "+cx+" "+cy+" "+r);


		var pos2 = strRoom.indexOf(" fill=");
		var style = strRoom.substring(pos2+1);

		var styleString = JSON.stringify(roomstyle);
		styleString = styleString.toString();
		var splitString = styleString.split(",");
		var fill_var = "#fff";
		var fillopacity_var = "0.01";
		var stroke_var = "#fff";
		var strokewidth_var = 1;
		var strokelinejoin_var = '"round"';
		var strokelinecap_var = '"round"';
		var strokeopacity_var = "1";


		var fill_var_org = '"#fff"';
		var fillopacity_var_org = "0.0";
		var stroke_var = "#fff";
		var strokewidth_var_org = 1;
		var strokelinejoin_var_org = "round";
		var strokeopacity_var_org = "1";


//console.log("splitString="+splitString+"  length="+splitString.length);


		for (var i=0; i<splitString.length; i++){

			var styleObject = splitString[i];

			if (styleObject.indexOf('"fill"')>-1){
				fill_var = styleObject.substring(styleObject.indexOf(':')+1);
				if (fill_var.indexOf('}')>-1)
					fill_var = fill_var.substring(0, fill_var.indexOf('}'));
			}
			if (styleObject.indexOf('"fill-opacity"')>-1){
				fillopacity_var = styleObject.substring(styleObject.indexOf(':')+1);
				if (fillopacity_var.indexOf('}')>-1)
					fillopacity_var = fillopacity_var.substring(0, fillopacity_var.indexOf('}'));
			}

			if (styleObject.indexOf('"stroke"')>-1){
				stroke_var = styleObject.substring(styleObject.indexOf(':')+1);
				if (stroke_var.indexOf('}')>-1)
					stroke_var = stroke_var.substring(0, stroke_var.indexOf('}'));
			}

			if (styleObject.indexOf('"stroke-width"')>-1){
				strokewidth_var = styleObject.substring(styleObject.indexOf(':')+1);
				if (strokewidth_var.indexOf('}')>-1)
					strokewidth_var = strokewidth_var.substring(0, strokewidth_var.indexOf('}'));
			}

			if (styleObject.indexOf('"stroke-opacity"')>-1){
				strokeopacity_var = styleObject.substring(styleObject.indexOf(':')+1);
				if (strokeopacity_var.indexOf('}')>-1)
					strokeopacity_var = strokeopacity_var.substring(0, strokeopacity_var.indexOf('}'));
			}

//console.log("strokeopacity_var "+strokeopacity_var);


			if (styleObject.indexOf('"stroke-linejoin"')>-1){
				strokelinejoin_var = styleObject.substring(styleObject.indexOf(':')+1);
				if (strokelinejoin_var.indexOf('}')>-1)
					strokelinejoin_var = strokelinejoin_var.substring(0, strokelinejoin_var.indexOf('}'));
//console.log("strokelinejoin_var "+strokelinejoin_var);

			}

			if (styleObject.indexOf('"stroke-linecap"')>-1){
				strokelinecap_var = styleObject.substring(styleObject.indexOf(':')+1);
				if (strokelinecap_var.indexOf('}')>-1)
					strokelinecap_var = strokelinecap_var.substring(0, strokelinecap_var.indexOf('}'));
if (cvjs_debug) console.log("2 strokelinecap_var "+strokelinecap_var);

			}

		}


		try{

			var attr_2 = '{ \"fill\" : '+fill_var_org+' , \"fill-opacity\": '+fillopacity_var_org+' , \"stroke\": '+stroke_var+', \"stroke-width\": '+strokewidth_var*lineWeightFactor+', \"stroke-opacity\": '+strokeopacity_var_org+',  \"stroke-linejoin\": '+strokelinejoin_var+' }';

//			var attr_2 = '{ \"fill\" : '+fill_var+' , \"fill-opacity\": '+fillopacity_var+' , \"stroke\": '+fill_var+', \"stroke-width\": '+strokewidth_var+', \"stroke-opacity\": '+strokeopacity_var+',  \"stroke-linejoin\": '+strokelinejoin_var+',  \"stroke-linecap\": '+strokelinecap_var+' }';


if (cvjs_debug) console.log(attr_2);


			var json_obj = jQuery.parseJSON(attr_2);

//console.log(path_flag+" Location path1="+path1+" "+cx+" "+cy+" "+r);

			if (path_flag)
				layer.add(cvjs_rPaper[cvjs_active_floorplan_div_nr].path(path1).attr(json_obj));
			else
				layer.add(cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(cx,cy,r,r).attr(json_obj));



			// layer is prepended the vqroom and drag layer so always below the layer with selectable objects

			try{
				layer2.prepend(layer);
			}
			catch (err){
				var iii = 0;
			}
			return 1;

		}
		catch(err){

		if (cvjs_debug) console.log("A2 "+err);
			return -1;

		}

	}

	return -1;
}



/**
 * Returns a the array index in vqRooms array corresponding to a Space ID
 * @param {int} rmid - Room ID of Space Object
 * @return {int} spc - array index
 */

function findFixture(rmid)
{

	//console.log("findFixture   vqRooms.ength "+vqRooms[cvjs_active_floorplan_div_nr].length+"  "+cvjs_active_floorplan_div_nr);
	
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		var vqid = vqRooms[cvjs_active_floorplan_div_nr][spc].data("id");

//		console.log("find fixture vqid "+vqid+"  "+cvjs_active_floorplan_div_nr+"  "+rmid);
		
//if (spc == 114 || spc == 115 || spc == 116) console.log("rmid "+rmid+"  vqid="+vqid);

		if (vqid == rmid)
			{
				
				
			//console.log("match "+spc);	
				
			return spc;
			}
	}
	
	if (cvjs_debug) console.log("no match!");
	
	return -1;
}


/**
 * Returns a the corresponding internal NODE_ index in vqRooms array corresponding to a Space ID
 * @param {int} rmid - Room ID of Space Object
 * @return {int} node - NODE_ id
 */

function findNodeFromId(rmid)
{

	//console.log("findFixture   vqRooms.ength "+vqRooms[cvjs_active_floorplan_div_nr].length+"  "+cvjs_active_floorplan_div_nr);
	
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		var vqid = vqRooms[cvjs_active_floorplan_div_nr][spc].data("id");
		if (vqid == rmid)
			{
			return vqRooms[cvjs_active_floorplan_div_nr][spc].data("node");
			}
	}
	if (cvjs_debug) console.log("no match!");
	return -1;
}






function cvjs_highlightFixtureCSS_layersort(rmid, roomstyle, layer, layer2, scale)
{
	var rm = findFixture(rmid);

	if (rm >= 0 )
		{

//console.log("rmid "+rmid+" rm="+rm);
		lastObj[cvjs_active_floorplan_div_nr] = rm;
		//vqRooms[cvjs_active_floorplan_div_nr][rm].attr(roomstyle);

		// console.log("before layer add "+layer+" rm="+rm);

		var strRoom = (vqRooms[cvjs_active_floorplan_div_nr][rm].attr()).toString();

//console.log("strRoom "+strRoom);

		var strLayer = layer.toString();

//console.log("strLayer "+strLayer);

		// find the path

		var path1;
		var path_flag = true;
		var cx;
		var cy;
		var r;

		if (strRoom.indexOf("path")>-1){
			path_flag = true;
			var pos1 = strRoom.indexOf(" d=");
			var pathStr1 = strRoom.substring(pos1+4);
			//console.log(pathStr1);
			var pos1A = pathStr1.indexOf("\" ");
			path1 = pathStr1.substring(0, pos1A);
		}


		if (strRoom.indexOf("circle")>-1){
			path_flag = false;

			var p_cx = strRoom.indexOf(" cx=");
			var s1_cx = strRoom.substring(p_cx+5);
			var p2_cx = s1_cx.indexOf("\"");
			cx = s1_cx.substring(0, p2_cx)

			var p_cy = strRoom.indexOf(" cy=");
			var s1_cy = strRoom.substring(p_cy+5);
			var p2_cy = s1_cy.indexOf("\"");
			cy = s1_cy.substring(0, p2_cy)


			var p_r = strRoom.indexOf(" r=");
			var s1_r = strRoom.substring(p_r+4);
			var p2_r = s1_r.indexOf("\"");
			r = s1_r.substring(0, p2_r)
		}



//console.log("pos1="+pos1+" pos2="+pos2);
//		var path1 = strRoom.substring(pos1+3, pos2-1);

//console.log("cvjs_highlightFixtureCSS_layersort "+strRoom+" "+cx+" "+cy+" "+r);


		var pos2 = strRoom.indexOf(" fill=");
		var style = strRoom.substring(pos2+1);

		var styleString = JSON.stringify(roomstyle);
		styleString = styleString.toString();
		var splitString = styleString.split(",");
		var fill_var = "#fff";
		var fillopacity_var = "0.5";
		var stroke_var = "#fff";
		var strokewidth_var = 1;
		var strokelinejoin_var = "round";
		var strokeopacity_var = "1";

//console.log("splitString="+splitString+"  length="+splitString.length);



		for (var i=0; i<splitString.length; i++){

			var styleObject = splitString[i];

			if (styleObject.indexOf('"fill"')>-1){
				fill_var = styleObject.substring(styleObject.indexOf(':')+1);
				if (fill_var.indexOf('}')>-1)
					fill_var = fill_var.substring(0, fill_var.indexOf('}'));
			}
			if (styleObject.indexOf('"fill-opacity"')>-1){
				fillopacity_var = styleObject.substring(styleObject.indexOf(':')+1);
				if (fillopacity_var.indexOf('}')>-1)
					fillopacity_var = fillopacity_var.substring(0, fillopacity_var.indexOf('}'));
			}

			if (styleObject.indexOf('"stroke"')>-1){
				stroke_var = styleObject.substring(styleObject.indexOf(':')+1);
				if (stroke_var.indexOf('}')>-1)
					stroke_var = stroke_var.substring(0, stroke_var.indexOf('}'));
			}

			if (styleObject.indexOf('"stroke-width"')>-1){
				strokewidth_var = styleObject.substring(styleObject.indexOf(':')+1);
				if (strokewidth_var.indexOf('}')>-1)
					strokewidth_var = strokewidth_var.substring(0, strokewidth_var.indexOf('}'));
			}

			if (styleObject.indexOf('"stroke-opacity"')>-1){
				strokeopacity_var = styleObject.substring(styleObject.indexOf(':')+1);
				if (strokeopacity_var.indexOf('}')>-1)
					strokeopacity_var = strokeopacity_var.substring(0, strokeopacity_var.indexOf('}'));
			}

//console.log("strokeopacity_var "+strokeopacity_var);


			if (styleObject.indexOf('"stroke-linejoin"')>-1){
				strokelinejoin_var = styleObject.substring(styleObject.indexOf(':')+1);
				if (strokelinejoin_var.indexOf('}')>-1)
					strokelinejoin_var = strokelinejoin_var.substring(0, strokelinejoin_var.indexOf('}'));
//console.log("strokelinejoin_var "+strokelinejoin_var);


			}
		}


		try{

			var attr_2 = '{ \"fill\" : '+fill_var+' , \"fill-opacity\": '+fillopacity_var+' , \"stroke\": '+stroke_var+', \"stroke-width\": '+strokewidth_var+', \"stroke-opacity\": '+strokeopacity_var+',  \"stroke-linejoin\": '+strokelinejoin_var+' }';

			var json_obj = jQuery.parseJSON(attr_2);


//console.log("path1="+path1+" "+cx+" "+cy+" "+r);

			if (path_flag)
				layer.add(cvjs_rPaper[cvjs_active_floorplan_div_nr].path(path1).transform(scale).attr(json_obj));
			else
				layer.add(cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(cx,cy,r,r).transform(scale).attr(json_obj));



			// layer is prepended the vqroom and drag layer so always below the layer with selectable objects

			try{
				layer2.prepend(layer);
			}
			catch (err){
				var iii = 0;
			}


	//	layer.add(cvjs_rPaper[cvjs_active_floorplan_div_nr].path(path1).attr({fill: '#08519c', "fill-opacity": "0.5", stroke: '#08519c', 'stroke-width': 1, 'stroke-linejoin': 'round'}));
	//	layer.add(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M604.746,324.826l-0.251,0.025h-0.276l-0.301,0.025l-0.276,0.025l-0.276,0.025l-0.276,0.050l-0.301,0.050l-0.276,0.050l-0.276,0.050l-0.276,0.075l-0.276,0.075l-0.276,0.075l-0.276,0.100l-0.251,0.100l-0.276,0.100l-0.276,0.100l-0.251,0.125l-0.251,0.100l-0.251,0.151l-0.251,0.125l-0.251,0.151l-0.251,0.151l-0.251,0.151l-0.226,0.151l-0.251,0.176l-0.226,0.176l-0.226,0.176l-0.226,0.176l-0.226,0.201l-0.201,0.176l-0.201,0.201l-0.201,0.201l-0.201,0.226l-0.176,0.201l-0.176,0.226l-0.201,0.226l-0.151,0.226l-0.176,0.226l-0.151,0.251l-0.176,0.226l-0.125,0.251l-0.151,0.251l-0.125,0.251l-0.151,0.251l-0.100,0.276l-0.125,0.251l-0.100,0.276l-0.125,0.251l-0.075,0.276l-0.100,0.276").attr(fill_styles));
	//		console.log("A2 ");

			return 1;

		}
		catch(err){

		if (cvjs_debug) console.log("A2 "+err);
			return -1;

		}

	}

	return -1;
}




function cvjs_highlightRoomRGB(rmid, r,g,b)
{
	var rm = findRoom(rmid);
	if (rm >= 0)
	{
		lastObj[cvjs_active_floorplan_div_nr] = rm;
		vqRooms[cvjs_active_floorplan_div_nr][rm].attr({fill: rgb(r,g,b), "fill-opacity": "0.7"});
	}
}




function cvjs_highlightRoomHex(rmid, hex)
{
	var rm = findRoom(rmid);
	if (rm >= 0)
	{
		lastObj[cvjs_active_floorplan_div_nr] = rm;
		vqRooms[cvjs_active_floorplan_div_nr][rm].attr({fill: '#'+hex, "fill-opacity": "0.7"});
	}
}

function cvjs_highlightRoomByIdHex(rmid, hex)
{
	var rm = findRoomById(rmid);
	if (rm >= 0)
		{
		lastObj[cvjs_active_floorplan_div_nr] = rm;
		vqRooms[cvjs_active_floorplan_div_nr][rm].attr({fill: '#'+hex, "fill-opacity": "0.7"});
		}
}

function clearRoom(rmid)
{
	var rm = findRoom(rmid);
	if (rm >= 0)
	{
		//vqRooms[cvjs_active_floorplan_div_nr][rm].attr(defaultColor);
		if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors){
			//vqRooms[cvjs_active_floorplan_div_nr][rm].attr(defaultColor);
			
				// 6.1.41
				if (vqRooms[cvjs_active_floorplan_div_nr][rm].data("defaultcolor").toString().indexOf("undefined")>-1){
				//	 console.log("standard");
					//standard
					vqRooms[cvjs_active_floorplan_div_nr][rm].attr(defaultColor);									
				}
				else{
				//	 console.log("highlight");
					// highlight
					vqRooms[cvjs_active_floorplan_div_nr][rm].attr(vqRooms[cvjs_active_floorplan_div_nr][rm].data("defaultcolor"));								
				}	
			
			
			
		}
		else{
			if (vqRooms[cvjs_active_floorplan_div_nr][rm].data("linked")){
				vqRooms[cvjs_active_floorplan_div_nr][rm].attr(defaultColor_linked);
			}
			else{
				vqRooms[cvjs_active_floorplan_div_nr][rm].attr(defaultColor_unlinked);
			}
		}


	}
}


/**
* Highlight a Space Object using defined selectColors
* @param {string} rmid - Id of space object modal to highlight
* @param {boolean} cleardrawing - clears all other highlights, before highlight, default is true, false will accumulate highlights
*/

function cvjs_highlightRoomImmediate(rmid, cleardrawing)
{
	
	if (cleardrawing == undefined) 
			cvjs_clearDrawing();
	else
		if (cleardrawing == true)
			cvjs_clearDrawing();

	// 6.2.29  - we return if highlight is supressed
	if (cvjs_supressSingleSpaceHighLight){ 
		return rm;
	}

	var rm = findRoom(rmid);
	if (rm >= 0)
	{

		lastObj[cvjs_active_floorplan_div_nr] = rm;

			//vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].attr(defaultColor);   // 2015-02-01
			if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors){
				vqRooms[cvjs_active_floorplan_div_nr][rm].attr(selectColor);
			}
			else{
				if (vqRooms[cvjs_active_floorplan_div_nr][rm].data("linked")){
					vqRooms[cvjs_active_floorplan_div_nr][rm].attr(selectColor_linked);
				}
				else{
					vqRooms[cvjs_active_floorplan_div_nr][rm].attr(selectColor_unlinked);
				}
			}

		return rm;
	}

	return rm;
}


function cvjs_highlightRoomImmediateHyperlinks(rmid)
{
	cvjs_clearDrawingHyperlinks();



	var rm = findUrl(rmid)

	if (rm >= 0)
	{
		lastObjHyperlink[cvjs_active_floorplan_div_nr] = rm;

		//vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].attr(defaultColor);   // 2015-02-01
		if (!cvjs_supressPopUpModal){
			if (!cvjs_supressHyperlinkColors){
				vqURLs[rm].attr(selectColor);
			}
			else{
				vqURLs[rm].attr(defaultColor_Hyperlinks_blank);  // set colors ( note: change attribute name to something more applicable
			}




		}
		else{


			if (!cvjs_supressHyperlinkColors){
				vqURLs[rm].attr(defaultColor_Hyperlinks);
			}
			else{
				vqURLs[rm].attr(defaultColor_Hyperlinks_blank);  // set colors ( note: change attribute name to something more applicable
			}

//			if (vqURLs[rm].data("linked")){
//				vqURLs[rm].attr(selectColor_linked);
//			}
//			else{
//				vqURLs[rm].attr(selectColor_unlinked);
//			}
		}

		return rm;
	}

	return rm;
}







function cvjs_highlightRoomImmediateStickyNotes(rmid)
{
	cvjs_clearDrawingStickyNotes();
	var rm = findStickyNotes(rmid);
	if (rm >= 0)
	{
		lastObjStickyNote[cvjs_active_floorplan_div_nr] = rm;

		//vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].attr(defaultColor);   // 2015-02-01
		if (!cvjs_supressPopUpModal){
			vqStickyNotes[rm].attr(selectColor_StickyNotes);
		}
		else{
			if (vqStickyNotes[rm].data("linked")){
				vqStickyNotes[rm].attr(selectColor_linked);
			}
			else{
				vqStickyNotes[rm].attr(selectColor_unlinked);
			}
		}

		return rm;
	}

	return rm;
}




function cvjs_highlightRoomImmediateNoClearDrawing(rmid)
{
	var rm = findRoom(rmid);
	if (rm >= 0)
	{
		lastObj[cvjs_active_floorplan_div_nr] = rm;


		if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors){
			vqRooms[cvjs_active_floorplan_div_nr][rm].attr(selectColor);
		}
		else{
			if (vqRooms[cvjs_active_floorplan_div_nr][rm].data("linked")){
				vqRooms[cvjs_active_floorplan_div_nr][rm].attr(selectColor_linked);
			}
			else{
				vqRooms[cvjs_active_floorplan_div_nr][rm].attr(selectColor_unlinked);
			}
		}

//		vqRooms[cvjs_active_floorplan_div_nr][rm].attr(selectColor);

		return rm;
	}
}




function highlightRoomVqId(rm)
{
	cvjs_clearDrawing();
	lastObj[cvjs_active_floorplan_div_nr] = rm;
	vqRooms[cvjs_active_floorplan_div_nr][rm].attr(highlight);
}

function highlightRoom(rmid)
{
	cvjs_clearDrawing();
	var rm = findRoom(rmid);
	if (rm >= 0)
	{
		lastObj[cvjs_active_floorplan_div_nr] = rm;
		vqRooms[cvjs_active_floorplan_div_nr][rm].animate(highlight,300);
		return rm;
	}
}


/**
* Activate modal on Space Object
 * @param {string} rmid - Id of space object modal to activate
 */

function cvjs_activateSpaceObjectModal_Id(rmid){

	change_space_fixed_location(rmid);

}


/**
* Activate modal on Space Object
 * @param {string} node - Node of space object modal to activate
 */

function cvjs_activateSpaceObjectModal_Node(node){

	var rmid = findIdFromNode(node);
	change_space_fixed_location(rmid);

}



var cvjs_supressPopUpModal_callback_JS = false; // 3.3.02d


function change_space_fixed_location(rmid, active_floorplan_div_nr){


	if (active_floorplan_div_nr!= undefined)
		cvjs_active_floorplan_div_nr = active_floorplan_div_nr;

	if (cvjs_debug) console.log("change_space_fixed_location "+rmid+"  "+active_floorplan_div_nr+"  cvjs_supressPopUpModal_callback_JS"+cvjs_supressPopUpModal_callback_JS);


	// 3.3.02d
	if (cvjs_supressPopUpModal_callback_JS){
		
		// hide modal
		
		// call callback method
		hidePop();
		if (rmid == 0){

				closeAllPopups(-1);
				try{
					cvjs_NoObjectSelected();
				}
				catch(err){
					var ii = 0;
					//console.log();
				}
		}
		else{
				space = cvjs_highlightRoomImmediate(rmid, true);
				if (space >= 0){
					spaceId = rmid;
					lastObj[cvjs_active_floorplan_div_nr] = space;
					jQuery(vqRooms[cvjs_active_floorplan_div_nr][space].node).qtip('destroy');
				}
		}	

		cvjs_change_space(rmid);
		
		// 6.1.28
		cvjs_ObjectSelected(rmid);
		
		//window.alert("callback");
		
		return;
	}
	
				
// if we are in VQ callback mode:

	if (cvjs_callbackForModalDisplayVar){

		var popupmenu = cvjs_customModalPopUpBody(rmid);
		var room = findRoom(rmid);

		 var htitle = "";


		 // test
		 cvjs_isLicensed = true;


		 if (cvjs_isLicensed){

			  htitle = "<table width=\"100%\"><tr><td class=\"cvjs_modal_header_1\" onclick=\"cvjs_popupTitleClick(\'"+vqRooms[cvjs_active_floorplan_div_nr][room].data("id")+"\');\">"+vqRooms[cvjs_active_floorplan_div_nr][room].data("name")+"</td>"+
					"<td class=\"cvjs_modal_header_info_1\" onclick=\"hideOnlyPop("+room+");\"><i class=\"fa fa-times\"></i></td></tr>"+
					"<tr><td cols=\"2\"><h4 id=\"cvjs_modal_header_info_2\">"+vqRooms[cvjs_active_floorplan_div_nr][room].data("type")+"</h4></td></tr></table>";

			// here we use the values from the license key check
			// if less than 30 dayse left:
			// instead of vqRooms[cvjs_active_floorplan_div_nr][room].data("type") we write "NOTE: Expires in " x "days, please renew!"

			console.log("we are licensed  "+cvjs_licensedDaysLeft);

		}
		else{  // not licensed, no dynamic db content displayed

			popupmenu= "<div><strong>NOTE:</strong> Database connection <br>";
			popupmenu += "disabled, please renew database <br>";
			popupmenu += "connectivity license.<br></div>";


			console.log("we are not-licensed  "+cvjs_licensedDaysLeft);


		}

		jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: popupmenu, title: htitle},
			style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
			position: {my: 'bottom center', at: 'top left'}, //   my: 'bottom center', at: 'top center'
			hideOnHTMLClick: 'false'});

// if data set is "poPulated"  we build the modal and simply just display

		var node = vqRooms[cvjs_active_floorplan_div_nr][room].data("node");

		//console.log(node);
		//cvjs_populateMyCustomPopUpBody(rmid,node);

		var status = cvjs_getAttributeStatus(node);

		// if data set is "unpopulated", we abort and do the callback call
	}


/*
	cvjs_highlightRoomImmediate(rmid, false);
	//window.alert("1 2 3");	
	// 1234
	if (true) return;
*/

	hidePop();
	if (rmid == 0){

			closeAllPopups(-1);
			try{
				cvjs_NoObjectSelected();
			}
			catch(err){
				var ii = 0;
				//console.log();
			}
	}
	else{
		console.log("fixed location 2 cvjs_supressPopUpModal "+cvjs_supressPopUpModal);
	
		space = cvjs_highlightRoomImmediate(rmid, true);

	//1234
	//if (true) return;

	//console.log("fixed location 3");
			if (space >= 0){
				spaceId = rmid;
				lastObj[cvjs_active_floorplan_div_nr] = space;

				if (cvjs_supressPopUpModal==true){
					console.log("cv changespace fixed destroy ");			
					jQuery(vqRooms[cvjs_active_floorplan_div_nr][space].node).qtip('destroy');
					//jQuery(mytooltip).qtip("destroy");
				}
				else{					
					console.log("cv changespace fixed show/hide/destroy");			
					jQuery(vqRooms[cvjs_active_floorplan_div_nr][space].node).qtip('show');  // 1234

						// 2017-09-17  make draggable
					   var oArr = {};
					   jQuery("*[id]").each(function() {
						   var id = jQuery(this).attr('id');
						   if (!oArr[id]) oArr[id] = true;
					   });

					   for (var prop in oArr){
							var target = "#"+prop;
							try{
								if (jQuery(target).attr("id").indexOf("qtip-")==0){
									var title = target+"-title";
									var content = target+"-content";

									if (target.indexOf("-title")>0) {
											//console.log("nothing "+target);
									}
									else{
										if ( target.indexOf("-content")>0 ){
											//console.log("nothing "+target);
										}
										else{
											console.log("drag "+target);

											jQuery( function() {
												jQuery(target).draggable({ cancel: '+content+' });

											} );
										}
									}
								}
							}catch(err){}
						}


					if (cvjs_callbackForModalDisplayVar){
						if (cvjs_getAttributeStatus(node)=="unpopulated")
							cvjs_callbackForModalDisplay(rmid, node);
						else
							cvjs_populateMyCustomPopUpBody(rmid,node);					}

				}
				popObj[cvjs_active_floorplan_div_nr] = space;

			}

			try{
								
				// 3.0.14e
				if (cluster_host_flag==1 && cvjs_supressPopUpModal==true){  // we are in creation mode					
					xcvjs_ObjectSelected(rmid, floorplan_div_Array[cvjs_active_floorplan_div_nr]);
				}
				else{					
					cvjs_ObjectSelected(rmid, floorplan_div_Array[cvjs_active_floorplan_div_nr]);
				}
			}
			catch(err){
				var iii = 0;
				//console.log();
			}

	//console.log("3 cvjs_supressPopUpModal "+cvjs_supressPopUpModal);

	}
	
	
	// 3.2.01i
	if (cvjs_supressPopUpModal){

		cvjs_update_done_edit_location_fields(rmid);
	}	
	
}

//STICKYNNN
function change_space_fixed_locationStickyNotes(rmid){


if (cvjs_debug_stickynotes) window.alert("rmid ="+rmid);

hidePopStickyNotes();

	if (rmid == 0){

			closeAllPopupsStickyNotes(-1);
			try{
				cvjs_NoObjectSelectedStickyNotes();
			}
			catch(err){
				var ii = 0;
				//console.log();
			}
	}
	else{

			space = cvjs_highlightRoomImmediateStickyNotes(rmid);

//space = findStickyNotes(rmid);



if (cvjs_debug_stickynotes) window.alert("X in change_space_fixed    cvjs_supressPopUpModal "+cvjs_supressPopUpModal+"  "+space+" spaceIdStickNote "+spaceIdStickyNote[cvjs_active_floorplan_div_nr]+" lastObjStickyNote[cvjs_active_floorplan_div_nr]  "+lastObjStickyNote[cvjs_active_floorplan_div_nr]);
//window.alert(jQuery(vqStickyNotes[space].node).is(":visible"));

//if (true) return;

			if (space >= 0){
				spaceIdStickyNote[cvjs_active_floorplan_div_nr] = rmid;
				lastObjStickyNote[cvjs_active_floorplan_div_nr] = space;

				if (cvjs_supressPopUpModal==true){

				
//					jQuery(vqStickyNotes[space].node).qtip('hide');
					
					// 2017-09-27
					if (jQuery(vqStickyNotes[space].node.qtip).is(":visible")) jQuery(vqStickyNotes[space].node).qtip('hide');

//					jQuery(vqStickyNotes[space].node).qtip('show');
//					jQuery(vqStickyNotes[space].node).qtip('hide');

//if (cvjs_debug_stickynotes) window.alert("1 stickynote show hide");
				}
				else{

					//if (true) return;//

//					if (cvjs_debug_stickynotes) window.alert("1 stickynote show, node status "+jQuery(vqStickyNotes[space].node.qtip).is(":visible")+ "  "+ vqStickyNotes.length);


/*

					for (var i=0; i<vqStickyNotes.length; i++){

						if (i!=space) {

							if (!jQuery(vqStickyNotes[space].node.qtip).is(":visible")) jQuery(vqStickyNotes[space].node).qtip('show');

							//jQuery(vqStickyNotes[i].node).qtip('show');

							console.log(i+" show");
							}
						else {
							//jQuery(vqStickyNotes[i].node).qtip('hide');
							if (jQuery(vqStickyNotes[space].node.qtip).is(":visible")) jQuery(vqStickyNotes[space].node).qtip('hide');
							console.log(i+" hide");

							}
					}

					if (true) return;

	*/

//					jQuery(vqStickyNotes[space].node).qtip('show');

					// 2017-09-27 only display if invisible

					if (!jQuery(vqStickyNotes[space].node.qtip).is(":visible")) {
						jQuery.when( jQuery(vqStickyNotes[space].node).qtip('show') ).then(function( data, textStatus, jqXHR ) {

							// we are showing the qtip
						});
					}


					var divs = document.getElementsByTagName("div");
					for(var i = 0; i < divs.length; i++){
					   //console.log(divs[i].id);
					   if ( ((divs[i].id).indexOf("qtip-")>-1) && ((divs[i].id).indexOf("-content")==-1) && ((divs[i].id).indexOf("-title")==-1)) StickNoteQtipDiv = divs[i].id;
				    }

				}
				popObjStickyNote[cvjs_active_floorplan_div_nr] = space;

//window.alert("stop");

			}

			try{
				cvjs_ObjectSelectedStickyNotes(rmid);
			}
			catch(err){
				var iii = 0;
				//console.log();
			}
	}
}




function change_space_fixed_locationHyperlink(rmid){


	// this method is not implemented yet 2016-02-12
	// hidePopHyperlinks();



	// when this method is activated it creates and error in panning after a hyperlink has been selected.
	// blocked with a return 2016-02-12

	//if (true) return;
	//console.log("change space Hyper");

	if (rmid == 0){

			closeAllPopupsHyperlinks(-1);
			try{
				cvjs_NoObjectSelectedHyperlinks();
			}
			catch(err){
				var ii = 0;
				//console.log();
			}
	}
	else{

			space = cvjs_highlightRoomImmediateHyperlinks(rmid);

			if (space >= 0){
				spaceIdHyperlink = rmid;
				lastObjHyperlink[cvjs_active_floorplan_div_nr] = space;

				if (cvjs_supressPopUpModal==true){

					jQuery(vqURLs[space].node).qtip('show');
					jQuery(vqURLs[space].node).qtip('hide');

				}
				else{
					jQuery(vqURLs[space].node).qtip('show');
				}
				popObjHyperlink[cvjs_active_floorplan_div_nr] = space;

			}

			try{
				cvjs_ObjectSelectedHyperlink(rmid);
			}
			catch(err){
				var iii = 0;
				//console.log(err);
			}
	}
}




///////////////// LICENSE KEY RELATED METHODS  - MAKING KEYS


// decode license key

function cvjs_mysimple_encode(outputstring){

// reverse coding

	outputstring = ABC.toAscii(outputstring);

	var keystring = "";
	key = 0;

	var stc1 = outputstring.charAt(0);
	var keylength = stc1;
	//console.log("length "+keylength);

	keystring = "";
	for (var i = 0; i < keylength; i++) {
		var letter = "";
		for (var j = 0; j < 3; j++){
			var stc = outputstring.charAt(1+(i*3)+j);
			//stc = 256-stc;
			var stringExp = stc.toString();
			letter += stringExp;
		}

		//console.log(i+" "+letter);
		var number = parseInt(letter);
		number = 256-number;
		keystring += String.fromCharCode(number);
	}
	key  = parseInt(keystring);

	//console.log("key ="+key);

	var newoutputstring = "";

	for (var i = 0; i < (outputstring.length -1-keylength*3)/3; i++) {

		var letter = "";
		for (var j = 0; j < 3; j++){
			var stc = outputstring.charAt(1+keylength*3+(i*3)+j);
			//stc = 256-stc;
			var stringExp = stc.toString();
			letter += stringExp;
		}
		//console.log(i+" "+letter);
		var number = parseInt(letter);
		number = 256-number;
		newoutputstring += String.fromCharCode(number);
	}

	//console.log("outputstring decoded "+newoutputstring);

	return newoutputstring;
}


var ABC = {
  toAscii: function(bin) {
    return bin.replace(/\s*[01]{8}\s*/g, function(bin) {
      return String.fromCharCode(parseInt(bin, 2))
    })
  },
  toBinary: function(str, spaceSeparatedOctets) {
    return str.replace(/[\s\S]/g, function(str) {
      str = ABC.zeroPad(str.charCodeAt().toString(2));
      return !1 == spaceSeparatedOctets ? str : str + " "
    })
  },
  zeroPad: function(num) {
    return "00000000".slice(String(num).length) + num
  }
};


// end decode license key


var cvjs_LicenseKeyPath = "../app/js/";
var cvjs_isLicensed = false;
var cvjs_licensedDaysLeft = 40;  // more than a month left

/**
 * Set the license key path, typically a path relative to the calling document, for example as ../javascripts
 * The command will activate the license key
 * @param {String} licensePath - path to the license key location
 */
function cvjs_setLicenseKeyPath(licensePath){

	cvjs_LicenseKeyPath = licensePath;

	try{
		loadJSbase(cvjs_LicenseKeyPath+"cvlicense.js");
	} catch(err) {


		var textString = languageTable.languages[cvjs_currentLanguage].InfoMessageModal.LicensePath+licensePath;
		
		
		
		cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], textString);

//		jQuery('#cvjs_informationModalText').html(languageTable.languages[cvjs_currentLanguage].InfoMessageModal.LicensePath+licensePath);
//		jQuery('#info_messageModal').modal('show');
//		//console.log("Could not find license key at path "+licensePath);
		cvjs_isLicensed = false;

		}
}


var cvjsLicenseKey;

/**
 * Pass over the license key directly
 * The command will activate the license key
 * @param {String} licensekey - string containing the license key JSON array
 */

function cvjs_setLicenseKeyDirect(licensekey){

	// 3.0.13i
	cvjsLicenseKey = jQuery.parseJSON(licensekey);
	cvjs_licenseKeyLoaded = true;
}


var cvjs_licenseKeyLoaded = false;

function CheckLicenseLoad(floorplan_div, originatingContent, originatingFileNameNoExtension, originatingUsername, originatingPassword)
{

	if (cvjs_licenseKeyLoaded)
		{
			load_failures = 0;

//console.log(" load_failures but now we load="+load_failures);
//console.log(cvjs_isLicensed+"   cvjs_licenseKeyLoaded="+cvjs_licenseKeyLoaded);

			try{
				if (cvjsLicenseKey.cvKey == undefined) {
					cvjs_isLicensed = false;
				}
			}catch (err) {
				cvjs_isLicensed = false;
			}
			var thisUrl = cvjs_currentURL();
			var readLicense = cvjs_mysimple_encode(cvjsLicenseKey.cvKey);

	//console.log("2 top before dateCheck");

			var dateArr = readLicense.split(":");
			var dateCheck = false;
			if (dateArr.length==1){
				// it is an old type key, so we let it live
				dateCheck = true;

			}else{
				//console.log("there is a date");
				var dateArr2 = dateArr[1].split("-");
				var licenseYear = Number(dateArr2[0]);
				var licenseMonth = Number(dateArr2[1]);
				var licenseDay = Number(dateArr2[2]);
				// Return today's date and time
				var currentTime = new Date();
				// returns the month (from 0 to 11)
				var month = Number(currentTime.getMonth() + 1);
				// returns the day of the month (from 1 to 31)
				var day = Number(currentTime.getDate());
				// returns the year (four digits)
				var year = Number(currentTime.getFullYear());
				if (licenseYear>year){
					//console.log("year ok");
					dateCheck = true;
					cvjs_licensedDaysLeft = 40; // larger than 30 days

					if ( (licenseYear-year)==1 && licenseMonth ==1 && month==12 ){
						// we are in December and it times out in January
					    if (licenseDay>day){
							cvjs_licensedDaysLeft = 40; // larger than 30 days
						}
						else{  // days left
							cvjs_licensedDaysLeft = (31-licenseDay)+day;
						}

					}

				}
				else{
					if (licenseYear==year && licenseMonth>month ){
						//console.log("year+month ok");
						dateCheck = true;

						if ((licenseMonth-month)>=2){
								cvjs_licensedDaysLeft = 40;  // if 2 months difference then at least 30 days

						}
						else{  // one month difference

							if (licenseDay>day){
								cvjs_licensedDaysLeft = 40; // larger than 30 days
							}
							else{  // days left, we normaize on a 30 day month
								cvjs_licensedDaysLeft = (30-licenseDay)+day;
							}
						}

						// figure out number of days left

					}
					else{
						if (licenseYear==year && licenseMonth==month && licenseDay>=day ){
		//					console.log("year+month+day ok");
							dateCheck = true;

						// figure out number of days left
							cvjs_licensedDaysLeft = licenseDay-day;
						}
						else{
		//					console.log("not licensed");
						}
					}
				}
				// need to make the license only contain the URL
				readLicense = dateArr[0];
			}

			var licenseArr = readLicense.split(";");
			if (licenseArr.length==1){
				if (thisUrl.indexOf(readLicense)>-1){
					cvjs_isLicensed = true;
				}
				else{
					cvjs_isLicensed = false;
				}
			}
			else{
				var continueflag = true;
				cvjs_isLicensed = false;
				for (var lkey in licenseArr){
					if (continueflag){
						if (thisUrl.indexOf(licenseArr[lkey])>-1) {
							cvjs_isLicensed = true;
							continueflag = false;
						}
			 		}
				}
			}

	//console.log("top "+dateCheck+" "+cvjs_isLicensed);
			if (!dateCheck) cvjs_isLicensed = false;

			cvjs_LoadDrawing_Conversion_original(floorplan_div, originatingContent, originatingFileNameNoExtension, originatingUsername, originatingPassword);

		}
	else if (load_failures < 5)    //
		{
		load_failures++;
	    setTimeout(function(){CheckLicenseLoad(floorplan_div, originatingContent, originatingFileNameNoExtension, originatingUsername, originatingPassword)},256);
    	}
    else
	    {
			cvjs_isLicensed = false
			load_failures = 0;
			cvjs_LoadDrawing_Conversion_original(floorplan_div, originatingContent, originatingFileNameNoExtension, originatingUsername, originatingPassword);
	    }

//console.log("we are home safe!");

}




function cvjs_checkLicensePreThenLoad(floorplan_div, originatingContent, originatingFileNameNoExtension, originatingUsername, originatingPassword){

//console.log(cvjs_isLicensed+"   cvjs_licenseKeyLoaded="+cvjs_licenseKeyLoaded);

load_failures = 0;
CheckLicenseLoad(floorplan_div, originatingContent, originatingFileNameNoExtension, originatingUsername, originatingPassword);

// setTimeout(function(){return true;},50000);

//console.log(cvjsLicenseKey.cvKey);

}




function cvjs_checkLicense(){

try{

//if (cvjs_debug)  console.log("hello LICENSE CHECK!!!");

	// 3.0.13i
	// let us load the license
	//	loadJSbase(cvjs_LicenseKeyPath+"cvlicense.js");
	// do we have a delay issue here?	
	
if (cvjs_debug) console.log(cvjsLicenseKey);
	
	

	try{	// 3.0.13i
//		if (cvjsLicenseKey == undefined) {
	
	
		if (cvjsLicenseKey.cvKey == undefined) {
	
if (cvjs_debug)  console.log("cvjsLicenseKey.cvKey undefined!");
				
			var window_height = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();
			var window_width = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();

			var w_height_svg = actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr];

	//			console.log(window_height+" "+w_height_svg);
			var font_size = w_height_svg*0.04;

			//	{"font-size": "100px","font-family": "arial"}
	//			var attr_2 = '{ \"font-size\" : \"'+font_size+'px\" , \"font-family\": \"arial\" }';
			var attr_2 = '{ \"font-size\" : \"'+font_size+'\" , \"font-family\": \"arial\" }';

			var json_obj;
			try{
				json_obj = jQuery.parseJSON(attr_2);
			} catch(err){ console.log(err);  }

	//			var notLicensed = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(actualLLX[cvjs_active_floorplan_div_nr]+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])*0.1,actualLLY[cvjs_active_floorplan_div_nr]+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr])*0.50,"CADViewer Trial Version").attr({"font-size": "100px","font-family": "arial"}).attr({fill:"rgb(255,137,137)", stroke:"rgb(255,137,137)", "fill-opacity":"1"});
			var notLicensed = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(actualLLX[cvjs_active_floorplan_div_nr]+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])*0.2,actualLLY[cvjs_active_floorplan_div_nr]+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr])*0.2,"CADViewer Trial Version").attr(json_obj).attr({fill:"rgb(237,137,137)", stroke:"rgb(237,137,137)", "fill-opacity":"1"});
			cvjs_masterBackground[cvjs_active_floorplan_div_nr].add(notLicensed);

	if (cvjs_debug)			console.log("License key not found or corrupt! Your CADViewer URl is: "+cvjs_currentURL());

			var textString = languageTable.languages[cvjs_currentLanguage].InfoMessageModal.LicenseNotFound;
			cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], textString);

//			jQuery('#cvjs_informationModalText').html(languageTable.languages[cvjs_currentLanguage].InfoMessageModal.LicenseNotFound);
//			jQuery('#info_messageModal').modal('show');



			return;
		}
	}catch (err) {

	
if (cvjs_debug)			console.log("license key err"+err);	
	
		// 3.0.13j
		var bbox = cvjs_masterBackground[cvjs_active_floorplan_div_nr].getBBox();
		var w_height_svg = bbox.height;
//		var w_height_svg = actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr];
		var font_size = w_height_svg*0.10;
		var attr_2 = '{ \"font-size\" : \"'+font_size+'\" , \"font-family\": \"arial\" }';

		var json_obj;
		try{
			json_obj = jQuery.parseJSON(attr_2);
		} catch(err){ console.log(err);  }

//		var notLicensed = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(actualLLX[cvjs_active_floorplan_div_nr]+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])*0.2,actualLLY[cvjs_active_floorplan_div_nr]+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr])*0.2,"CADViewer Trial Version").attr(json_obj).attr({fill:"rgb(237,137,137)", stroke:"rgb(237,137,137)", "fill-opacity":"1"});
		// 3.0.13j
		var notLicensed = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(bbox.x + bbox.width*0.1,bbox.y+bbox.height*0.5,"CADViewer Trial Version").attr(json_obj).attr({fill:"rgb(237,137,137)", stroke:"rgb(237,137,137)", "fill-opacity":"1"});

		// 3.0.13k
		cvjs_SVGGroup[cvjs_active_floorplan_div_nr].add(notLicensed);
//		cvjs_masterBackground[cvjs_active_floorplan_div_nr].add(notLicensed);

		cvjs_isLicensed = false;
		//console.log("License key not found or corrupt! Your CADViewer URl is: "+cvjs_currentURL());

if (cvjs_debug)			console.log("2 License key not found or corrupt! Your CADViewer URl is: "+cvjs_currentURL());

		var textString = languageTable.languages[cvjs_currentLanguage].InfoMessageModal.LicenseNotFound;
		cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], textString);

//		jQuery('#cvjs_informationModalText').html(languageTable.languages[cvjs_currentLanguage].InfoMessageModal.LicenseNotFound);
//		jQuery('#info_messageModal').modal('show');

		return;
	}

	var thisUrl = cvjs_currentURL();

	var readLicense = cvjs_mysimple_encode(cvjsLicenseKey.cvKey);

	//console.log("1 top before dateCheck  "+ readLicense);

	var dateArr = readLicense.split(":");
	var dateCheck = false;

	//console.log("2 dateArr "+dateArr.length);

	if (dateArr.length==1){
		// it is an old type key, so we let it live
		dateCheck = true;
		//console.log("no date");
	}else{
		//console.log("there is a date");
		var dateArr2 = dateArr[1].split("-");

		var licenseYear = Number(dateArr2[0]);
		var licenseMonth = Number(dateArr2[1]);
		var licenseDay = Number(dateArr2[2]);
		// Return today's date and time
		var currentTime = new Date();
		// returns the month (from 0 to 11)
		var month = Number(currentTime.getMonth() + 1);
		// returns the day of the month (from 1 to 31)
		var day = Number(currentTime.getDate());
		// returns the year (four digits)
		var year = Number(currentTime.getFullYear());

		if (licenseYear>year){
			//console.log("year ok");
			dateCheck = true;
		}
		else{
			if (licenseYear==year && licenseMonth>month ){
				//console.log("year+month ok");
				dateCheck = true;
			}
			else{
				if (licenseYear==year && licenseMonth==month && licenseDay>=day ){
//					console.log("year+month+day ok");
					dateCheck = true;
				}
				else{
//					console.log("not licensed");

				}
			}
		}
		// need to make the license only contain the URL
		readLicense = dateArr[0];
	}

//console.log("x "+readLicense);

	var licenseArr = readLicense.split(";");
	
	if (cvjs_debug) console.log(thisUrl+"  "+readLicense);
	
	if (licenseArr.length==1){	
		if (thisUrl.indexOf(readLicense)>-1){
			cvjs_isLicensed = true;
		}
		else{
			cvjs_isLicensed = false;
		}
	}
	else{
		var continueflag = true;
		cvjs_isLicensed = false;
		for (var lkey in licenseArr){
		//console.log(lkey);
			if (continueflag){
				if (thisUrl.indexOf(licenseArr[lkey])>-1) {
					//console.log(thisUrl+" "+lkey)
					cvjs_isLicensed = true;
					continueflag = false;
				}
			}
		}
	}

	//console.log(dateCheck+" "+cvjs_isLicensed);

	if (!dateCheck) cvjs_isLicensed = false;

	
	if (cvjs_debug) console.log("DATE CHECK "+dateCheck+"   license is "+cvjs_isLicensed);
	
	
	
	if (!cvjs_isLicensed){
		
		
		// 3.0.13j
		var bbox = cvjs_masterBackground[cvjs_active_floorplan_div_nr].getBBox();
		var w_height_svg = bbox.height;
		
		//var w_height_svg = actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr];
		var font_size = w_height_svg*0.10;
		var attr_2 = '{ \"font-size\" : \"'+font_size+'\" , \"font-family\": \"arial\" }';

		var json_obj;
		try{
			json_obj = jQuery.parseJSON(attr_2);
		} catch(err){ console.log(err);  }

//		var notLicensed = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(actualLLX[cvjs_active_floorplan_div_nr]+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])*0.2,actualLLY[cvjs_active_floorplan_div_nr]+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr])*0.2,"CADViewer Trial Version").attr(json_obj).attr({fill:"rgb(237,137,137)", stroke:"rgb(237,137,137)", "fill-opacity":"1"});

		// 3.0.13k
		var notLicensed = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(bbox.x + bbox.width*0.1,bbox.y+bbox.height*0.5,"CADViewer Trial Version").attr(json_obj).attr({fill:"rgb(237,137,137)", stroke:"rgb(237,137,137)", "fill-opacity":"1"});
		cvjs_SVGGroup[cvjs_active_floorplan_div_nr].add(notLicensed);
		
		//cvjs_masterBackground[cvjs_active_floorplan_div_nr].add(notLicensed);
		var displayUrl = thisUrl.substring(0, thisUrl.lastIndexOf("/"));

//		jQuery('#cvjs_informationModalText').html("The key:"+readLicense+" does not match this Url: "+displayUrl);
//		jQuery('#info_messageModal').modal('show');

		//console.log(readLicense+" is NOT licensed for: "+thisUrl);
				
		cvjs_isLicensed = false;
	}

	//console.log("readLicense= "+readLicense+" thisUrl="+thisUrl);


}
catch (err){console.log("cvjs_checkLicense error: "+err);}


}


///////////////// LICENSE KEY RELATED METHODS




 /**
 * Opens the layer list for Space Objects for setting of Room/Text Layer processing
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 * @param {int} mode - mode=1 , rl/tl selection,   mode=2, hl selection   , mode = 3, layer for SpaceID selection in floodfil process
 */
  
	function cvjs_LayerListSpaceObject(floorplan_div, mode){  // 3.2.01g

	
	if (mode == undefined) mode = 1;    // we set the display mode to rl/tl as default
		
	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);		
	

			if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
			cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;

			
			// 3.0.15c   - add "_svg" to div, if called through external API
			if (cvjs_debug) console.log(floorplan_div.lastIndexOf("_svg")+"  "+(floorplan_div.length-4));
			if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
					// do nothing
			}
			else{
				floorplan_div = floorplan_div + "_svg";
			}
			
			
			
			
			//console.log("before List " + window.document.getElementsByClassName);
			cvjs_layerListSpace = new List('layerListSpaceObject_'+floorplan_div, cvjs_layerOptionsSpace, cvjs_layerValuesSpace);

			var layerStatus = languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.NotAssigned;

			for (i=0; i<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; i++){

				//console.log(i+"  "+cvjs_layerListSpace);

				var sLink = "javascript: cvjs_LayerListSpaceClick("+i+")";
				var sLink2 = "javascript: cvjs_LayerTypeSpaceClick("+i+","+mode+")";  // 3.2.01g

				layerStatus = languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.NotAssigned;

				if (mode == 1){ // 3.2.01g  -rl, -tl
								
					if ((layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName).indexOf(cvjs_convertRoomLayer) > -1 && (layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName).length == cvjs_convertRoomLayer.length ){
							layerStatus = "<b style='color:magenta;'>"+languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.RoomLayer+"</b>";
					}
					else{
						if ((layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName).indexOf(cvjs_convertTextLayer) > -1 && (layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName).length == cvjs_convertTextLayer.length){
							layerStatus = "<b style='color:red;'>"+languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.TextLayer+"</b>";
						}
						else{
							layerStatus = languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.NotAssigned;
						}
					}
	//				console.log(layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName+" logic "+(layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName).indexOf(cvjs_convertRoomLayer)+" "+cvjs_convertRoomLayer+" "+cvjs_convertTextLayer+" "+layerStatus);

				}

				if (mode == 2){ // 3.2.01g   -hl
					
					if (cvjs_convertHandleLayer[i] == true ){
							layerStatus = "<b style='color:magenta;'>"+languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.HandleLayer+"</b>";
					}
					else{
							layerStatus = languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.NotAssigned;
					}
				}


				if (mode == 3){ // 3.3.01h  
					if (cvjs_floodfillSpaceIDLayerTable[i] == true ){
							layerStatus = "<b style='color:magenta;'>"+languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.FloodfillLayer+"</b>";
							cvjs_spaceIDLayer = layerTable[cvjs_active_floorplan_div_nr].layers[id].layer;
					}
					else{
							layerStatus = languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.NotAssigned;
					}
				}
			

				if (layerTable[cvjs_active_floorplan_div_nr].layers[i].status == "OFF"){

					cvjs_layerListSpace.add({
					  selected: languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.Off,
					  text_room_layer: layerStatus,
					  link: sLink,
					  link_text_room_l: sLink2,
					  id: i,
					  layer: layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName,
					});
				}

				if (layerTable[cvjs_active_floorplan_div_nr].layers[i].status == "ON"){
					cvjs_layerListSpace.add({
					  selected: languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.On,
					  text_room_layer: layerStatus,
					  link: sLink,
					  link_text_room_l: sLink2,
					  id: i,
					  layer: layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName,
					});
				}


			}

			if (layerlistspaceobject_offset_flag[cvjs_active_floorplan_div_nr]){
				layerlistspaceobject_offset_flag[cvjs_active_floorplan_div_nr] = false;
				// 3.1.21j  .appendTo('body')

				jQuery("#layerListSpaceObject_"+floorplan_div).css({position: "fixed"});
				jQuery("#layerListSpaceObject_"+floorplan_div).offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});
			}

			jQuery("#layerListSpaceObject_"+floorplan_div).show();
	}


	function cvjs_LayerListSpaceClick(id){

		//console.log("the layer is "+layerTable[cvjs_active_floorplan_div_nr].layers[id].layerName+" with status "+layerTable[cvjs_active_floorplan_div_nr].layers[id].status);

		if (layerTable[cvjs_active_floorplan_div_nr].layers[id].status == "OFF"){
			cvjs_LayerOn(layerTable[cvjs_active_floorplan_div_nr].layers[id].layer);

		// 6.2.43 ON
		cvjs_spaceObjectLayerOnOff(floorplan_div_Array[cvjs_active_floorplan_div_nr], layerTable[cvjs_active_floorplan_div_nr].layers[id].layerName, "on");

			layerTable[cvjs_active_floorplan_div_nr].layers[id].status = "ON";

			var item = cvjs_layerListSpace.get('id', id)[0];
			  item.values({
				selected: languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.On,
			  });

		}
		else{
			cvjs_LayerOff(layerTable[cvjs_active_floorplan_div_nr].layers[id].layer);
			layerTable[cvjs_active_floorplan_div_nr].layers[id].status = "OFF";

		// 6.2.43 ON
		cvjs_spaceObjectLayerOnOff(floorplan_div_Array[cvjs_active_floorplan_div_nr], layerTable[cvjs_active_floorplan_div_nr].layers[id].layerName, "off");


			var item = cvjs_layerListSpace.get('id', id)[0];
			  item.values({
				selected: languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.Off,
			  });

		}

	}


	function cvjs_LayerTypeSpaceClick(id, mode){  // 3.2.01g

			var item = cvjs_layerListSpace.get('id', id)[0];

			var text = item.values().text_room_layer;

			if (mode==1){
			
				if (text.indexOf(languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.NotAssigned)>-1){
					text = "<b style='color:red;'>"+languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.TextLayer+"</b>";
				}
				else
				if (text.indexOf(languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.TextLayer)>-1){
					text = "<b style='color:magenta;'>"+languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.RoomLayer+"</b>";
				}
				else
					text = languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.NotAssigned;			 			  
			}

			
			if (mode==2){			
				if (cvjs_convertHandleLayer[id] == false){
					text = "<b style='color:magenta;'>"+languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.HandleLayer+"</b>";
					cvjs_convertHandleLayer[id] = true;
				}
				else{
					text = languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.NotAssigned;
					cvjs_convertHandleLayer[id] = false;
				}	
			}



			if (mode==3){   // 3.3.01h			
				if (cvjs_floodfillSpaceIDLayerTable[id] == false){
					text = "<b style='color:magenta;'>"+languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.FloodfillLayer+"</b>";
					cvjs_floodfillSpaceIDLayerTable[id] = true;
					
					cvjs_spaceIDLayer = layerTable[cvjs_active_floorplan_div_nr].layers[id].layer;
//					window.alert(cvjs_spaceIDLayer);					
				}
				else{
					text = languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.NotAssigned;
					cvjs_floodfillSpaceIDLayerTable[id] = false;

					cvjs_spaceIDLayer = "None Selected";
//					window.alert(cvjs_spaceIDLayer);
				}	
			}

		
			if (cvjs_debug) console.log("after:  mode " + id+ "  "+cvjs_convertHandleLayer[id]);


		  item.values({
			text_room_layer: text
		  });

			
			
	}



function modal_all_layer_off_space(){

	for (id=0; id<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; id++){
			cvjs_LayerOff(layerTable[cvjs_active_floorplan_div_nr].layers[id].layer);
			layerTable[cvjs_active_floorplan_div_nr].layers[id].status = "OFF";

			var item = cvjs_layerListSpace.get('id', id)[0];
			  item.values({
				selected: languageTable.languages[cvjs_currentLanguage].LayerListModal.Off,
			  });

	}

	// 6.2.43
	cvjs_allSpaceObjectsOff(floorplan_div_Array[cvjs_active_floorplan_div_nr]);


}




function all_layer_off_thumb_on(){

//console.log("first all_layer_off_thumb_on ");
	var flag = false;
	for (id=0; id<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; id++){
//		console.log(layerTable[cvjs_active_floorplan_div_nr].layers[id].layerName);
		if (layerTable[cvjs_active_floorplan_div_nr].layers[id].layerName == "cvjs_Thumb"){
			flag = true;
		}
	}
//console.log(" all_layer_off_thumb_on "+flag);

	if (flag)
		for (id=0; id<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; id++){

				if (layerTable[cvjs_active_floorplan_div_nr].layers[id].layerName == "cvjs_Thumb"){
					cvjs_LayerOn(layerTable[cvjs_active_floorplan_div_nr].layers[id].layer);
					layerTable[cvjs_active_floorplan_div_nr].layers[id].status = "ON";
				}
				else{
					cvjs_LayerOff(layerTable[cvjs_active_floorplan_div_nr].layers[id].layer);
					layerTable[cvjs_active_floorplan_div_nr].layers[id].status = "OFF";
				}
		}

}


function all_layer_on_thumb_off(){

//console.log("first all_layer_off_thumb_on ");

	var flag = false;
	for (id=0; id<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; id++){
//		console.log(layerTable[cvjs_active_floorplan_div_nr].layers[id].layerName);
		if (layerTable[cvjs_active_floorplan_div_nr].layers[id].layerName == "cvjs_Thumb"){
			flag = true;
		}
	}

//console.log(" all_layer_off_thumb_on "+flag);

	if (flag)
		for (id=0; id<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; id++){

				if (layerTable[cvjs_active_floorplan_div_nr].layers[id].layerName == "cvjs_Thumb"){
					cvjs_LayerOff(layerTable[cvjs_active_floorplan_div_nr].layers[id].layer);
					layerTable[cvjs_active_floorplan_div_nr].layers[id].status = "OFF";
				}
				else{
					cvjs_LayerOn(layerTable[cvjs_active_floorplan_div_nr].layers[id].layer);
					layerTable[cvjs_active_floorplan_div_nr].layers[id].status = "ON";
				}
		}

}




function modal_all_layer_on_space(){

	for (id=0; id<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; id++){
			cvjs_LayerOn(layerTable[cvjs_active_floorplan_div_nr].layers[id].layer);
			layerTable[cvjs_active_floorplan_div_nr].layers[id].status = "ON";

			var item = cvjs_layerListSpace.get('id', id)[0];
			  item.values({
				selected: languageTable.languages[cvjs_currentLanguage].LayerListModal.On,
			  });


	}

	// 6.2.43
	cvjs_allSpaceObjectsOn(floorplan_div_Array[cvjs_active_floorplan_div_nr]);


}



function modal_swap_layers_on_off_space(){


	for (id=0; id<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; id++){

		if (layerTable[cvjs_active_floorplan_div_nr].layers[id].status == "OFF"){
			cvjs_LayerOn(layerTable[cvjs_active_floorplan_div_nr].layers[id].layer);
			layerTable[cvjs_active_floorplan_div_nr].layers[id].status = "ON";

			var item = cvjs_layerListSpace.get('id', id)[0];
			  item.values({
				selected: languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.On,
			  });


		}
		else{
			cvjs_LayerOff(layerTable[cvjs_active_floorplan_div_nr].layers[id].layer);
			layerTable[cvjs_active_floorplan_div_nr].layers[id].status = "OFF";

			var item = cvjs_layerListSpace.get('id', id)[0];
			  item.values({
				selected: languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.Off,
			  });

		}
	}

}

var cvjs_redlinesRelativePath = "../redlines/";
var cvjs_filepathServerRedlines = "/home/cadviewer/cadviewer.com/cadviewer_6_1_0/content/redlines/";



var cvjs_SharePointFileStructure = new Array();
var cvjs_SharePointFileStructure_folder = new Array();
var cvjs_SharePointFileStructure_level = new Array();
var cvjs_SharePointFileStructure_currentfileNr = 0;



/**
 * Calls server side PHP controller to fetch file list from Sharepoint server. A CAD server tree is built for jstree file selector.
 */

	function cvjs_generateShareFileDrawingList(){

		var fileListUrl = cvjs_serverHandlersPath + "CV-JS_sharepoint_filelist.php";
		if (cvjs_debug) console.log(fileListUrl);

		
		var filelist_data = {};
		filelist_data['user_name'] = cvjs_sharepoint_UserName;
		
//		window.alert("ShareFile  drawinglist "+cvjs_sharepoint_UserName);

		
		jQuery.ajax({
		  url:fileListUrl,
		  type: 'post',
		  data: filelist_data,
		  success: function(html){
			if (cvjs_debug) console.log("Return call: "+html );

/*			2018-03-28 blocked
			var files = html.split(";");
			
			for (i=0; i<files.length; i++){
			
			
				var dircount =  0;
				var file = files[i];
				var flag = true;
				while (flag){
					if (file.indexOf('/')>-1){
						dircount++;
						file = file.substring(file.indexOf('/')+1);
					}
					else	
						flag = false;
				}

				
				cvjs_SharePointFileStructure_level[i] = dircount;	
				if (dircount == 0){
					cvjs_SharePointFileStructure[i] = files[i];
					cvjs_SharePointFileStructure_folder[i] = "-1";
				}
				else{
					cvjs_SharePointFileStructure[i] = files[i].substring(files[i].lastIndexOf('/')+1);
					cvjs_SharePointFileStructure_folder[i] = files[i].substring(0, files[i].lastIndexOf('/'));
					
					//console.log(cvjs_SharePointFileStructure_folder[i]+"  folder")
				}
	
			console.log(i+ "  "+cvjs_SharePointFileStructure[i] +"  "+cvjs_SharePointFileStructure_folder[i]+" "+cvjs_SharePointFileStructure_level[i]  );
	

	
			}

			
			cvjs_buildShareFileDrawingSelector();
*/
	
		}  // end success
			
		});
	}


	
	
	
	
	
	
	
	
	function cvjs_buildShareFileDrawingSelector(){	
	


			jQuery('#cv_drawing_selector')
				.find('option')
				.remove()
				.end()
				.append('<option value="0">Select Drawing</option>')
				.val('0')
			;
		
			console.log("HELLO !" +jQuery('#cv_drawing_selector option').html());
						
			var level = cvjs_SharePointFileStructure_level[cvjs_SharePointFileStructure_currentfileNr];
			var file = cvjs_SharePointFileStructure[cvjs_SharePointFileStructure_currentfileNr];
			var path = cvjs_SharePointFileStructure_folder[cvjs_SharePointFileStructure_currentfileNr];
			
			
			console.log("LEVEL  "+level+" "+file+" "+path);
			
			// On first load we generate the list
			for (i=0; i<cvjs_SharePointFileStructure.length; i++){
				
				var v = (i+1).toString();
				var t = "drawing_"+i;
					
				console. log(cvjs_SharePointFileStructure_level[i] + "   "+level);	
					
				//if (true){
				if (cvjs_SharePointFileStructure_level[i] == level){
								
					jQuery('#cv_drawing_selector').append(jQuery('<option>',
					 {
						value: v,
						text : cvjs_SharePointFileStructure[i]
					}));
				}
				else{
					
					if (cvjs_SharePointFileStructure_level[i] > level){
					
						console.log("level loop, i="+i+" "+cvjs_SharePointFileStructure_folder[i]);
					
						var addfolderflag = true;
					
						for (var j=0; j<i;j++){
							
	//						console.log("counting "+j+" "+cvjs_SharePointFileStructure_folder[i].indexOf(cvjs_SharePointFileStructure_folder[j])+" "+(cvjs_SharePointFileStructure_level[i]>=cvjs_SharePointFileStructure_level[j]));
							
							if ((cvjs_SharePointFileStructure_folder[i].indexOf(cvjs_SharePointFileStructure_folder[j])>-1)  && (cvjs_SharePointFileStructure_level[i]>=cvjs_SharePointFileStructure_level[j]) && cvjs_SharePointFileStructure_level[j]>level  ){
								
								console.log(j+" it is already there so we do nothing "+i);
								
								addfolderflag = false;
							
							
							}else{
								
								console.log("we add the selector "+i+"  "+cvjs_SharePointFileStructure_folder[i]);

								
					
							}
						}
						
						console.log("ADDFOLDERFLAG "+addfolderflag+ "  "+cvjs_SharePointFileStructure_folder[i] );
						
						// we have to strip off for each level we are down
						var dircountlevel =  0;
						var file = cvjs_SharePointFileStructure_folder[i];
						var flaglevel = true;
						while (flaglevel){
							if (file.indexOf('/')>-1){
								dircountlevel++;
								file = file.substring(file.indexOf('/')+1);
							}
							else	
								flaglevel = false;
						}

						var foldertext = cvjs_SharePointFileStructure_folder[i];
						for (var k=0; k<dircountlevel; k++){
							foldertext = foldertext.substring(foldertext.indexOf('/')+1);
						}
						
						
						if (addfolderflag){

								jQuery('#cv_drawing_selector').append(jQuery('<option>',
									 {
										value: v,
										text : foldertext
									}));
						
							
						}
						
					
					}

				}



				
			}
						

	}
	



/**
 * Sets the insertion location of QR Codes
 * @param {int} PercentXFromLowerLeft - distance in x, percent of total width from lower left
 * @param {int} PercentYFromLowerLeft - distance in y, percent of total height from lower left
 * @param {int} cvjs_widthPercent - width of QR code, in percent of total width
 */

function cvjs_setQRCodeInsertion(PercentXFromLowerLeft, PercentYFromLowerLeft, widthPercent){

	cvjs_PercentXFromLowerLeft = PercentXFromLowerLeft;
	cvjs_PercentYFromLowerLeft = PercentYFromLowerLeft;
	cvjs_widthPercent = widthPercent;	
	
}



/**
 * Sets the mode for loading multiple redlines and overlay the previous loaded
 * @param {boolean} mode: true to overlay redlines, false to clear redline when new is loaded, default is false
 */

function cvjs_setLoadMultipleRedlinesStickyNotes(mode){

	cvjs_loadMultipleRedlinesStickyNotes = mode;

}



/**
 * Identify the id of the last Object Space selected - Object Spaces, Sticky Notes and Redlines are differentiated.
 * @return {string} objectId - The objectId is (-1) in case of no current object selected
 */

	function cvjs_idObjectClicked(){

		if (lastObj[cvjs_active_floorplan_div_nr] >= 0){

			var objectId = vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].data("id");
			return objectId;
		}
		return -1;
	}


/**
 * Identify the id of the last Object Space selected - Object Spaces, Sticky Notes and Redlines are differentiated.
 * @return {string} objectId - The objectId is (-1) in case of no current object selected
 */

	function cvjs_IdObjectClicked(){

	//window.alert(lastObj[cvjs_active_floorplan_div_nr]);
		
		if (lastObj[cvjs_active_floorplan_div_nr]>= 0){

			var objectId = vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].data("id");
			return objectId;
		}
		return -1;
	}




/**
 * Identify the name of the last Object Space selected - Object Spaces, Sticky Notes and Redlines are differentiated.
 * @return {string} Name - The Name is (-1) in case of no current object selected
 */

	function cvjs_NameObjectClicked(){

		if (lastObj[cvjs_active_floorplan_div_nr] >= 0){

			var Name = vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].data("name");
			return Name;
		}
		return -1;
	}






/**
 * Identify the node identifier of the last Object Space selected - Object Spaces, Sticky Notes and Redlines are differentiated.
 * @return {string} nodeId - The nodeId is (-1) in case of no current object selected
 */

	function cvjs_NodeObjectClicked(){

		if (lastObj[cvjs_active_floorplan_div_nr] >= 0){

			var objectId = vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].data("node");
			return objectId;
		}
		return -1;
	}


/**
 * Identify the node identifier of the last Sticky Note selected - Object Spaces, Sticky Notes and Redlines are differentiated.
 * @return {string} nodeId - The nodeId is (-1) in case of no current object selected
 */

	function cvjs_StickyNoteClicked(){

		if (lastObjStickyNote[cvjs_active_floorplan_div_nr] >= 0){
//console.log(lastObjStickyNote[cvjs_active_floorplan_div_nr]);

			var objectId = vqStickyNotes[lastObjStickyNote[cvjs_active_floorplan_div_nr]].data("node");
			return objectId;
		}
		return -1;
	}


	function hoverIn(elem) {

//console.log("hoverIn elem="+elem);

		if (lastElem != null){

			var attr_1 = "{\"stroke\" : \""+lastStroke+"\" , \"stroke-opacity\" : "+lastStrokeWidth+" }";
			var json_obj = jQuery.parseJSON(attr_1);
			lastElem.attr(json_obj);


			lastLink = "";
			jQuery("#cvjs_display_tip").empty().hide();
		}

		lastElem = elem;
		lastStroke = elem.attr("stroke");
		lastStrokeWidth = elem.attr("stroke-width");


		elem.attr({stroke : "cyan", "stroke-opacity" : 4});
		var link = elem.data("hyperlink");

        var o = {
            left: mousex+10,
            top: mousey+10
        };
//console.log("o.left="+o.left+" o.right="+o.right);

		jQuery("#cvjs_tool_tip").html("<img src=\"../drawings/"+link+"\" border=\"0\" />").show().offset(o);

	}

	function hoverOut(elem) {

//console.log("hoverOut");
//		elem.attr({"stroke" : "red", "stroke-opacity" : 0.10});
//		elem.attr({"stroke" : "red", "stroke-opacity" : 1});
//		elem.hide();
//		jQuery("#tip").empty().hide();
	}


	function doHyperlink(elem) {

//console.log("doHyperlink");
        var o = {
            left: mousex+10,
            top: mousey+10
        };


		var link = elem.data("hyperlink");

		if (flip == 0){
			flip = 1;
			//layer_1.attr({display : "none"});  // here we turn the layer off
			layer_all.drag();
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].drag();
			cvjs_rPaper[cvjs_active_floorplan_div_nr].attr({viewBox : "0 0 800 600"});
		}
		else{
			flip = 0;
			//layer_1.attr({display : "inline"});  // here we turn the layer off
			layer_1.attr({transform : "rotate(10),scale(0.5)" });  //
			layer_2.attr({transform : "rotate(10),scale(0.5)" });  //
			//layer_1.undrag();
			layer_all.undrag();
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].undrag();
		}

		if (lastLink != link)
			{
			lastLink = link;

//console.log("<img src=\"../drawings/"+link+"\" border=\"0\" >");

			jQuery("#cvjs_display_tip").html("<img src=\"../drawings/"+link+"\" border=\"0\" >").show().offset(o);
			}
		else
			{
			lastLink = "";
			jQuery("#cvjs_display_tip").empty().hide();
			}
	}





/**
 * Resize CADViewer canvas after browser window changes, automatic adjustment based on canvas size and location
 * @param {string} model3D - name of canvas element containing 3D model
 * @param {string} floorplan - name of SVG element containing floorplan
 */

function cvjs_resizeWindow_3D(model3D, floorplan){

	var doResize = true;	
	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan);

//   We set the SVG canvas to very small.
	var position = jQuery("#"+floorplan).position();
	console.log("cvjs_resizeWindow_3D left "+position.left+"  top "+position.top)
	
	jQuery("#"+floorplan).css('position','relative');
	jQuery("#"+floorplan).css('display','block');
	jQuery("#"+floorplan).css('overflow','hidden');

	jQuery("#"+floorplan).width(jQuery("#"+model3D).width());
	jQuery("#"+floorplan).height(40);

	position = jQuery("#"+floorplan).position();
	console.log("cvjs_resizeWindow_3D left "+position.left+"  top "+position.top)
	
// we then set the top menu bars in relation to the model3D canvas

	var position = jQuery("#"+model3D).position();

	console.log("model3D " +position.top+"  "+position.left);
	
	jQuery("#topIconMenu"+"_"+floorplan+"_svg").css({left: jQuery("#"+model3D).position().left+1, top: jQuery("#"+model3D).position().top+1});  // 3.3.01d
	jQuery("#topIconMenu_placeholder_1_"+floorplan+"_svg").css({left: jQuery("#"+model3D).position().left+1 +cvjs_iconmenu_pos_x, top: jQuery("#"+model3D).position().top+1+cvjs_iconmenu_pos_y}); 
	jQuery('#gMenu_'+floorplan+"_svg").offset({ top: position.top+cvjs_gMenu_pos_y, left: position.left+cvjs_gMenu_pos_x });
	
	var posmenu_y = position.left+jQuery("#"+model3D).width()-475;
	
	
	var floorplan_div = +floorplan+"_svg";

	var menu1_width = jQuery('#topIconMenu_placeholder_1_'+floorplan_div).width();
	var menu_location = jQuery('#topIconMenu_'+floorplan_div).position();
	
	if (jQuery(floorplan).width()-menu1_width>392){  // no problem, we have space for menu
		jQuery("#topIconMenu"+"_"+floorplan_div).css({height: '32px'});
		jQuery('#topIconMenu_placeholder_2_'+floorplan_div).offset({ top: jQuery("#"+model3D).position().top+1, left: posmenu_y+ 78 });  // 475-392   392 on the size of the modal			
	}
	else{  // we need to lower the navigation menu
		jQuery('#topIconMenu_placeholder_2_'+floorplan_div).offset({ top: jQuery("#"+model3D).position().top+33, left: posmenu_y+ 78 });  // 475-392   392 on the size of the modal			
		jQuery("#topIconMenu"+"_"+floorplan_div).css({height: '64px'});
	}

}





function hidePop()
{

//console.log("hidePop  lastObj="+lastObj);

	if (lastObj[cvjs_active_floorplan_div_nr] >= 0 && lastObj[cvjs_active_floorplan_div_nr]< vqRooms[cvjs_active_floorplan_div_nr].length)
		{
		jQuery(vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].node).qtip('hide');

		//vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].attr(defaultColor);

		if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors){
			vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].attr(defaultColor);
		}
		else{
			if (vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].data("linked")){
				vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].attr(defaultColor_linked);
			}
			else{
				vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].attr(defaultColor_unlinked);
			}
		}
		lastObj[cvjs_active_floorplan_div_nr] = -1;
		}


	if (popObj[cvjs_active_floorplan_div_nr] >= 0 && popObj[cvjs_active_floorplan_div_nr]< vqRooms[cvjs_active_floorplan_div_nr].length)
		{
		jQuery(vqRooms[cvjs_active_floorplan_div_nr][popObj[cvjs_active_floorplan_div_nr]].node).qtip('hide');

		//vqRooms[cvjs_active_floorplan_div_nr][popObj[cvjs_active_floorplan_div_nr]].attr(defaultColor);

		if (!cvjs_supressPopUpModal  || cvjs_standardHighLightColors){
			vqRooms[cvjs_active_floorplan_div_nr][popObj[cvjs_active_floorplan_div_nr]].attr(defaultColor);
		}
		else{
			if (vqRooms[cvjs_active_floorplan_div_nr][popObj[cvjs_active_floorplan_div_nr]].data("linked")){
				vqRooms[cvjs_active_floorplan_div_nr][popObj[cvjs_active_floorplan_div_nr]].attr(defaultColor_linked);
			}
			else{
				vqRooms[cvjs_active_floorplan_div_nr][popObj[cvjs_active_floorplan_div_nr]].attr(defaultColor_unlinked);
			}
		}
		popObj[cvjs_active_floorplan_div_nr] = -1;
		}
}


function hidePopStickyNotes()
{

//window.alert("we are returning now hidePop stickynote  c="+lastObj);
// this was blocked around 2017-10-02


// if (true) return;




// here we are returning


	if (lastObjStickyNote[cvjs_active_floorplan_div_nr] >= 0)
		{
		jQuery(vqStickyNotes[lastObjStickyNote[cvjs_active_floorplan_div_nr]].node).qtip('hide');

		//vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].attr(defaultColor);

		if (!cvjs_supressPopUpModal  || cvjs_standardHighLightColors){
			vqStickyNotes[lastObjStickyNote[cvjs_active_floorplan_div_nr]].attr(defaultColor_StickyNotes);
		}
		else{
			if (vqStickyNotes[lastObjStickyNote[cvjs_active_floorplan_div_nr]].data("linked")){
				vqStickyNotes[lastObjStickyNote[cvjs_active_floorplan_div_nr]].attr(defaultColor_linked);
			}
			else{
				vqStickyNotes[lastObjStickyNote[cvjs_active_floorplan_div_nr]].attr(defaultColor_unlinked);
			}
		}
		lastObjStickyNote[cvjs_active_floorplan_div_nr] = -1;
		}


	if (popObjStickyNote[cvjs_active_floorplan_div_nr] >= 0)
		{
		jQuery(vqStickyNotes[popObjStickyNote[cvjs_active_floorplan_div_nr]].node).qtip('hide');

		//vqRooms[cvjs_active_floorplan_div_nr][popObj[cvjs_active_floorplan_div_nr]].attr(defaultColor);

		if (!cvjs_supressPopUpModal  || cvjs_standardHighLightColors){
			vqStickyNotes[popObjStickyNote[cvjs_active_floorplan_div_nr]].attr(defaultColor_StickyNotes);
		}
		else{
			if (vqStickyNotes[popObjStickyNote[cvjs_active_floorplan_div_nr]].data("linked")){
				vqStickyNotes[popObjStickyNote[cvjs_active_floorplan_div_nr]].attr(defaultColor_linked);
			}
			else{
				vqStickyNotes[popObjStickyNote[cvjs_active_floorplan_div_nr]].attr(defaultColor_unlinked);
			}
		}
		popObjStickyNote[cvjs_active_floorplan_div_nr] = -1;
		}
}





function cvjs_hidePop()
{


//console.log("cvjs_hidePop  lastObj="+lastObj);
	try{

		if (lastObj[cvjs_active_floorplan_div_nr] >= 0)
			{
			jQuery(vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].node).qtip('hide');

			//vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].attr(defaultColor);
			if (!cvjs_supressPopUpModal  || cvjs_standardHighLightColors){
				vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].attr(defaultColor);
			}
			else{
				if (vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].data("linked")){
					vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].attr(defaultColor_linked);
				}
				else{
					vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].attr(defaultColor_unlinked);
				}
			}

			lastObj[cvjs_active_floorplan_div_nr] = -1;
			}


		if (popObj >= 0)
			{
			jQuery(vqRooms[cvjs_active_floorplan_div_nr][popObj[cvjs_active_floorplan_div_nr]].node).qtip('hide');

			//vqRooms[cvjs_active_floorplan_div_nr][popObj[cvjs_active_floorplan_div_nr]].attr(defaultColor);
			if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors){
				vqRooms[cvjs_active_floorplan_div_nr][popObj[cvjs_active_floorplan_div_nr]].attr(defaultColor);
			}
			else{
				if (vqRooms[cvjs_active_floorplan_div_nr][popObj[cvjs_active_floorplan_div_nr]].data("linked")){
					vqRooms[cvjs_active_floorplan_div_nr][popObj[cvjs_active_floorplan_div_nr]].attr(defaultColor_linked);
				}
				else{
					vqRooms[cvjs_active_floorplan_div_nr][popObj[cvjs_active_floorplan_div_nr]].attr(defaultColor_unlinked);
				}
			}

			popObj[cvjs_active_floorplan_div_nr] = -1;
			}

	}
	catch (err){
		return (err);
	}

	return true;
}




function cvjs_redrawPop()
{

	if (lastObj[cvjs_active_floorplan_div_nr] >= 0){


//		vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].attr(defaultColor);
		if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors){
			vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].attr(selectColor);
		}
		else{
			if (vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].data("linked")){
				vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].attr(selectColor_linked);
			}
			else{
				vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].attr(selectColor_unlinked);
			}
		}


		lastObj[cvjs_active_floorplan_div_nr] = -1;

		try{
			cvjs_NoObjectSelected();
		}
		catch(err){
			var ii = 0;
			//console.log();
		}
	}


	if (popObj >= 0){


//		vqRooms[cvjs_active_floorplan_div_nr][popObj[cvjs_active_floorplan_div_nr]].attr(defaultColor);
		if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors){
			vqRooms[cvjs_active_floorplan_div_nr][popObj[cvjs_active_floorplan_div_nr]].attr(selectColor);
		}
		else{
			if (vqRooms[cvjs_active_floorplan_div_nr][popObj[cvjs_active_floorplan_div_nr]].data("linked")){
				vqRooms[cvjs_active_floorplan_div_nr][popObj[cvjs_active_floorplan_div_nr]].attr(selectColor_linked);
			}
			else{
				vqRooms[cvjs_active_floorplan_div_nr][popObj[cvjs_active_floorplan_div_nr]].attr(selectColor_unlinked);
			}
		}

		popObj[cvjs_active_floorplan_div_nr] = -1;

		try{
			cvjs_NoObjectSelected();
		}
		catch(err){
			var ii = 0;
			//console.log();
		}
	}

//console.log("hideOnlyPop  lastObj="+lastObj);

//	if (lastObj >= 0)
//		jQuery(vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].node).qtip('hide');
}









function hideOnlyPop()
{

	// 3.3.01c
	vqRoomMouseSelect = false;

// console.log("ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ   hideOnlyPop  lastObj="+lastObj[cvjs_active_floorplan_div_nr]+" popObj="+popObj[cvjs_active_floorplan_div_nr]+" length="+vqRooms[cvjs_active_floorplan_div_nr].length);
// hideOnlyPop got the same functionality as hidePop

	if (lastObj[cvjs_active_floorplan_div_nr] >= 0  && lastObj[cvjs_active_floorplan_div_nr]< vqRooms[cvjs_active_floorplan_div_nr].length ){
		jQuery(vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].node).qtip('hide');

//		vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].attr(defaultColor);
		if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors){

//			vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].attr(defaultColor);
						
			// 6.1.41
			if (vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].data("defaultcolor").toString().indexOf("undefined")>-1){
			//	 console.log("standard");
				//standard
				vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].attr(defaultColor);									
			}
			else{
			//	 console.log("highlight");
				// highlight
				vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].attr(vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].data("defaultcolor"));								
			}	
			
			
		}
		else{
			if (vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].data("linked")){
				vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].attr(defaultColor_linked);
			}
			else{
				vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].attr(defaultColor_unlinked);
			}
		}


		lastObj[cvjs_active_floorplan_div_nr] = -1;

		try{
			cvjs_NoObjectSelected();
		}
		catch(err){
			var ii = 0;
			//console.log();
		}
	}


	if (popObj[cvjs_active_floorplan_div_nr] >= 0 && popObj[cvjs_active_floorplan_div_nr]< vqRooms[cvjs_active_floorplan_div_nr].length){
		
		jQuery(vqRooms[cvjs_active_floorplan_div_nr][popObj[cvjs_active_floorplan_div_nr]].node).qtip('hide');

//		vqRooms[cvjs_active_floorplan_div_nr][popObj[cvjs_active_floorplan_div_nr]].attr(defaultColor);
		if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors){

//			vqRooms[cvjs_active_floorplan_div_nr][popObj[cvjs_active_floorplan_div_nr]].attr(defaultColor);
		
			// 6.1.41
			if (vqRooms[cvjs_active_floorplan_div_nr][popObj[cvjs_active_floorplan_div_nr]].data("defaultcolor").toString().indexOf("undefined")>-1){
			//	 console.log("standard");
				//standard
				vqRooms[cvjs_active_floorplan_div_nr][popObj[cvjs_active_floorplan_div_nr]].attr(defaultColor);									
			}
			else{
			//	 console.log("highlight");
				// highlight
				vqRooms[cvjs_active_floorplan_div_nr][popObj[cvjs_active_floorplan_div_nr]].attr(vqRooms[cvjs_active_floorplan_div_nr][popObj[cvjs_active_floorplan_div_nr]].data("defaultcolor"));								
			}	








		}
		else{
			if (vqRooms[cvjs_active_floorplan_div_nr][popObj[cvjs_active_floorplan_div_nr]].data("linked")){
				vqRooms[cvjs_active_floorplan_div_nr][popObj[cvjs_active_floorplan_div_nr]].attr(defaultColor_linked);
			}
			else{
				vqRooms[cvjs_active_floorplan_div_nr][popObj[cvjs_active_floorplan_div_nr]].attr(defaultColor_unlinked);
			}
		}


		popObj[cvjs_active_floorplan_div_nr] = -1;

		try{

			//console.log("no object selected");

			cvjs_NoObjectSelected();
		}
		catch(err){
			var ii = 0;
			//console.log();
		}
	}
}


function hideOnlyStickyNote(note_nr)
{

var flag_obj = (lastObjStickyNote[cvjs_active_floorplan_div_nr]==popObjStickyNote[cvjs_active_floorplan_div_nr]);

if (cvjs_debug) console.log("before branch");

if (cvjs_debug_stickynotes) {
	if (cvjs_debug) console.log("hide pop");
	hidePopStickyNotes();
}



// Uncomment if you want the modals to stay visible
//	if (true) return;



/*

if (cvjs_debug_stickynotes) window.alert(flag_obj+" hide only note_nr "+note_nr+"   lastObjStickyNote[cvjs_active_floorplan_div_nr]"+lastObjStickyNote[cvjs_active_floorplan_div_nr]+" popObjStickyNote[cvjs_active_floorplan_div_nr] "+popObjStickyNote[cvjs_active_floorplan_div_nr]+" vqStickyNotes.length "+vqStickyNotes.length);
if (cvjs_debug_stickynotes) cvjs_clearDrawingStickyNotes();
//if (cvjs_debug_stickynotes) {if (true) return;		}

*/

	if (lastObjStickyNote[cvjs_active_floorplan_div_nr] >= 0){


//window.alert("1x now we hide");

		//window.alert("hide only stickynote  lastObjStickyNote[cvjs_active_floorplan_div_nr] visible  "+jQuery(vqStickyNotes[lastObjStickyNote[cvjs_active_floorplan_div_nr]].node.qtip).is(":visible"));
		//if (jQuery(vqStickyNotes[lastObjStickyNote[cvjs_active_floorplan_div_nr]].node.qtip).is(":visible")) jQuery(vqStickyNotes[lastObjStickyNote[cvjs_active_floorplan_div_nr]].node).qtip('hide');

			// cvjs_zoomIn();

				var myArr = {};
				var myvar=0;


				if (jQuery(vqStickyNotes[lastObjStickyNote[cvjs_active_floorplan_div_nr]].node.qtip).is(":visible")) jQuery(vqStickyNotes[lastObjStickyNote[cvjs_active_floorplan_div_nr]].node).qtip('hide');
/*

				if (cvjs_debug_stickynotes){
				jQuery( "div[id^=qtip-]" ).each(function( i ) {

					var id = jQuery(this).attr('id');

					myArr[i] = id;
					var myid = "#"+id;
					//jQuery(myid).remove();
					myvar++;
					console.log(id+" "+myid);

				});

				if (vjs_debug_stickynotes) window.alert("passing by myvar "+myvar);

				for (var j=0; j<myvar; j++){

						var temp = myArr[j];
						window.alert(" removing "+temp);
						try{
						document.getElementById(temp).remove();
						}catch(err) {window.alert(err);}

				}

				if (true) return;

				}
*/


/*

		if (isSmartPhoneOrTablet){

//	     jQuery("div[id^=qtip-]").qtip('destroy');

			if (cvjs_debug_stickynotes){

			jQuery("div[id^=qtip-]").remove();
			window.alert("zoom extents, we removed everything now returning......")
			if (true) return;
			}

			jQuery(vqStickyNotes[lastObjStickyNote[cvjs_active_floorplan_div_nr]].node).qtip('hide');


		}
		else{
			jQuery(vqStickyNotes[lastObjStickyNote[cvjs_active_floorplan_div_nr]].node).qtip('hide');
		}

*/


/*
		jQuery.when( jQuery(vqStickyNotes[note_nr].node).qtip('hide') ).done(function( x ) {
				window.alert("2 we have hidden"+x);
				jQuery(vqStickyNotes[lastObjStickyNote[cvjs_active_floorplan_div_nr]].node).qtip('hide')
					jQuery.when( jQuery(vqStickyNotes[lastObjStickyNote[cvjs_active_floorplan_div_nr]].node).qtip('destroy')).done(function( y ) {
				window.alert("we have destroyed "+y);
			});
		});
*/

		StickNoteEditMode = false;
		var tString = vqStickyNotes[lastObjStickyNote[cvjs_active_floorplan_div_nr]].data("text");

		//window.alert("1: "+tString);
		//tString = "This is a test!";


		cvjs_setStickyNoteText(tString);

		var htitle = "<table width=\"100%\"><tr><td cols=\"3\"><div class=\"cvjs_modal_header_stickynote_info_2\">#"+vqStickyNotes[lastObjStickyNote[cvjs_active_floorplan_div_nr]].data("id")+"</div><td class=\"cvjs_modal_header_stickynote_info_2_background\"></td><td class=\"cvjs_modal_header_1\" >"+vqStickyNotes[lastObjStickyNote[cvjs_active_floorplan_div_nr]].data("name")+"</td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon1\" onclick=\"cvjs_move_note();\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+languageTable.languages[cvjs_currentLanguage].StickyNote.MoveNote+"\',1,"+lastObjStickyNote[cvjs_active_floorplan_div_nr]+");\" ><i class=\"fa fa-arrows\"></i></td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon2\" onclick=\"cvjs_edit_note();\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+languageTable.languages[cvjs_currentLanguage].StickyNote.EditNote+"\',2,"+lastObjStickyNote[cvjs_active_floorplan_div_nr]+");\" ><i class=\"fa fa-edit\"></i></td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon3\" onclick=\"cvjs_delete_note();\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+languageTable.languages[cvjs_currentLanguage].StickyNote.DeleteNote+"\',3,"+lastObjStickyNote[cvjs_active_floorplan_div_nr]+");\" ><i class=\"fa fa-trash-o\"></i></td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_2\" id=\"stickyNoteIcon4\" onclick=\"hideOnlyStickyNote("+lastObjStickyNote[cvjs_active_floorplan_div_nr]+");\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+languageTable.languages[cvjs_currentLanguage].StickyNote.MinimizeNote+"\',4,"+lastObjStickyNote[cvjs_active_floorplan_div_nr]+");\" ><i class=\"fa fa-times\"></i></td></tr>"+
			"</table>";


//if (true) return;
//window.alert("now we make a new note");

		jQuery(vqStickyNotes[lastObjStickyNote[cvjs_active_floorplan_div_nr]].node).qtip({content: {text: cvjsStickyNoteBody, title: htitle},
				style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
				position: {my: 'bottom center', at: 'top left'},
				hideOnHTMLClick: 'false'});

		jQuery(vqStickyNotes[lastObjStickyNote[cvjs_active_floorplan_div_nr]].node).qtip('hide');


//		vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].attr(defaultColor);
		if (!cvjs_supressPopUpModal){
			vqStickyNotes[lastObjStickyNote[cvjs_active_floorplan_div_nr]].attr(defaultColor_StickyNotes);
		}
		else{
			if (vqStickyNotes[lastObjStickyNote[cvjs_active_floorplan_div_nr]].data("linked")){
				vqStickyNotes[lastObjStickyNote[cvjs_active_floorplan_div_nr]].attr(defaultColor_linked);
			}
			else{
				vqStickyNotes[lastObjStickyNote[cvjs_active_floorplan_div_nr]].attr(defaultColor_unlinked);
			}
		}

		lastObjStickyNote[cvjs_active_floorplan_div_nr] = -1;

		try{
			cvjs_NoObjectSelected();
		}
		catch(err){
			var ii = 0;
			//console.log();
		}
	}

	if (popObjStickyNote[cvjs_active_floorplan_div_nr] >= 0  &&  !flag_obj){  // only do this branch if they are different


		if (cvjs_debug_stickynotes) window.alert("2nd branch hide only stickynote  popObjStickyNote[cvjs_active_floorplan_div_nr] visible "+jQuery(vqStickyNotes[popObjStickyNote[cvjs_active_floorplan_div_nr]].node.qtip).is(":visible"));
//		jQuery(vqStickyNotes[popObjStickyNote[cvjs_active_floorplan_div_nr]].node).qtip('hide');
//		if (jQuery(vqStickyNotes[popObjStickyNote[cvjs_active_floorplan_div_nr]].node.qtip).is(":visible")) jQuery(vqStickyNotes[popObjStickyNote[cvjs_active_floorplan_div_nr]+1].node).qtip('hide');

		jQuery(vqStickyNotes[popObjStickyNote[cvjs_active_floorplan_div_nr]+1].node).qtip('hide');


		StickNoteEditMode = false;
		var tString = vqStickyNotes[popObjStickyNote[cvjs_active_floorplan_div_nr]].data("text");
		cvjs_setStickyNoteText(tString);


		var htitle = "<table width=\"100%\"><tr><td cols=\"3\"><div class=\"cvjs_modal_header_stickynote_info_2\">#"+vqStickyNotes[popObjStickyNote[cvjs_active_floorplan_div_nr]].data("id")+"</div><td class=\"cvjs_modal_header_stickynote_info_2_background\"></td><td class=\"cvjs_modal_header_1\" >"+vqStickyNotes[popObjStickyNote[cvjs_active_floorplan_div_nr]].data("name")+"</td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon1\" onclick=\"cvjs_move_note();\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+languageTable.languages[cvjs_currentLanguage].StickyNote.MoveNote+"\',1,"+popObjStickyNote[cvjs_active_floorplan_div_nr]+");\" ><i class=\"fa fa-arrows\"></i></td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon2\" onclick=\"cvjs_edit_note();\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+languageTable.languages[cvjs_currentLanguage].StickyNote.EditNote+"\',2,"+popObjStickyNote[cvjs_active_floorplan_div_nr]+");\" ><i class=\"fa fa-edit\"></i></td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon3\" onclick=\"cvjs_delete_note();\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+languageTable.languages[cvjs_currentLanguage].StickyNote.DeleteNote+"\',3,"+popObjStickyNote[cvjs_active_floorplan_div_nr]+");\" ><i class=\"fa fa-trash-o\"></i></td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_2\" id=\"stickyNoteIcon4\" onclick=\"hideOnlyStickyNote("+popObjStickyNote[cvjs_active_floorplan_div_nr]+");\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+languageTable.languages[cvjs_currentLanguage].StickyNote.MinimizeNote+"\',4,"+popObjStickyNote[cvjs_active_floorplan_div_nr]+");\" ><i class=\"fa fa-times\"></i></td></tr>"+
			"</table>";


		jQuery(vqStickyNotes[popObjStickyNote[cvjs_active_floorplan_div_nr]].node).qtip({content: {text: cvjsStickyNoteBody, title: htitle},
				style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
				position: {my: 'bottom center', at: 'top left'},
				hideOnHTMLClick: 'false'});

//console.log("2: "+tString);



//		vqRooms[cvjs_active_floorplan_div_nr][popObj[cvjs_active_floorplan_div_nr]].attr(defaultColor);
		if (!cvjs_supressPopUpModal){
			vqStickyNotes[popObjStickyNote[cvjs_active_floorplan_div_nr]].attr(defaultColor_StickyNotes);
		}
		else{
			if (vqStickyNotes[popObjStickyNote[cvjs_active_floorplan_div_nr]].data("linked")){
				vqStickyNotes[popObjStickyNote[cvjs_active_floorplan_div_nr]].attr(defaultColor_linked);
			}
			else{
				vqStickyNotes[popObjStickyNote[cvjs_active_floorplan_div_nr]].attr(defaultColor_unlinked);
			}
		}

		popObjStickyNote[cvjs_active_floorplan_div_nr] = -1;

		try{
			cvjs_NoObjectSelected();
		}
		catch(err){
			var ii = 0;
			//console.log();
		}
	}
	else{
		popObjStickyNote[cvjs_active_floorplan_div_nr] = -1;
	}
}



function closeAllPopups(rmid)
    {
if (cvjs_debug) console.log("closeAllPopups");


	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
    	if (spc != rmid)
    		{
	//		if (spc != lastObj[cvjs_active_floorplan_div_nr])
				jQuery(vqRooms[cvjs_active_floorplan_div_nr][spc].node).qtip('hide');
			}
	}
}

function closeAllPopupsStickyNotes(rmid)
    {
	for (spc in vqStickyNotes)
	{
    	if (spc != rmid)
    		{
	//		if (spc != lastObj[cvjs_active_floorplan_div_nr])
				jQuery(vqStickyNotes[spc].node).qtip('hide');
			}
	}
}



function pick_space(trigger)
    {
	jQuery('#SearchResultsPanel').hide();
	cvjs_change_space(trigger);
	var spc = findRoom(trigger);
	if (spc)
		{
			
console.log("pickspace");			
    	jQuery(vqRooms[cvjs_active_floorplan_div_nr][spc].node).qtip('show');
    	 popObj[cvjs_active_floorplan_div_nr] = spc;
		}
    }


function cvjs_pick_space(trigger)
    {

	cvjs_change_space(trigger);

//	change_space_fixed_location(trigger);

	var spc = findRoom(trigger);
	if (spc)
		{
console.log("cv pickspace");			
    	jQuery(vqRooms[cvjs_active_floorplan_div_nr][spc].node).qtip('show');
       	 popObj[cvjs_active_floorplan_div_nr] = spc;
		}

//console.log("end cvjs_pick_space");

    }




//Raphael.fn.popup=function(x,y,text,size){txtattr={font:"12px Helvetica, Arial, sans-serif"}
//size=size||5;text=text||"";var res=this.set(),d=3;res.push(this.path().attr({fill:"#333333",stroke:"#333333"}));res.push(this.text(x,y,text).attr(txtattr).attr({fill:"#fff","font-family":"Helvetica, Arial"}));res.update=function(X,Y,WIDTH){X=X||x;Y=Y||y;var mmax=Math.max,mmin=Math.min,bb=this[1].getBBox(),w=bb.width/2,h=bb.height/2,dir=(X-bb.width<15)?3:1,X=(dir==1)?X:X+WIDTH,dx=[0,w+size*2,0,-w-size*2],dy=[-h*2-size*3,-h-size,0,-h-size],p=["M",X-dx[dir],Y-dy[dir],"l",-size,(dir==2)*-size,-mmax(w-size,0),0,"a",size,size,0,0,1,-size,-size,"l",0,-mmax(h-size,0),(dir==3)*-size,-size,(dir==3)*size,-size,0,-mmax(h-size,0),"a",size,size,0,0,1,size,-size,"l",mmax(w-size,0),0,size,!dir*-size,size,!dir*size,mmax(w-size,0),0,"a",size,size,0,0,1,size,size,"l",0,mmax(h-size,0),(dir==1)*size,size,(dir==1)*-size,size,0,mmax(h-size,0),"a",size,size,0,0,1,-size,size,"l",-mmax(w-size,0),0,"z"].join(","),xy=[{x:X,y:Y+size*2+h},{x:X-size*2-w,y:Y},{x:X,y:Y-size*2-h},{x:X+size*2+w,y:Y}][dir];xy.path=p;this.attr(xy);return this;};return res.update(x,y);};

//var lastObj;
var lastObj = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1];

//var  popObj;
var popObj = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1];



//var  lastObjHyperlink = -1;
var lastObjHyperlink = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1];
//var  popObjHyperlink= -1;
var popObjHyperlink= [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1];

//var  lastObjStickyNote = -1;
var  lastObjStickyNote = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1];

//var  spaceIdStickyNote[cvjs_active_floorplan_div_nr] = -1;
var  spaceIdStickyNote = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1];;

//var  popObjStickyNote[cvjs_active_floorplan_div_nr] = -1;
var  popObjStickyNote = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1];;



function findRoom(rmid)
{
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		var vqid = vqRooms[cvjs_active_floorplan_div_nr][spc].data("id");
		if (vqid == rmid)
			{
			return spc;
			}
	}
	return -1;
}


function findStickyNotes(rmid)
{
	for (spc in vqStickyNotes)
	{
		var vqid = vqStickyNotes[spc].data("id");
		if (vqid == rmid)
			{
			return spc;
			}
	}
	return -1;
}


function findUrl(rmid)
{
	for (spc in vqURLs)
	{
		var vqid = vqURLs[spc].data("id");
		if (vqid == rmid)
			{
			return spc;
			}
	}
	return -1;
}


function findRoomById(rmid)
{
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == rmid)
			return spc;
	}
	return -1;
}


function findIdFromNode(node)
{
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("node") == node)
			return vqRooms[cvjs_active_floorplan_div_nr][spc].data("id");
	}
	return -1;
}



function cvjs_zoomHere(){
	zoomHere();
}


function zoomHere()
{

//window.alert("lastObj[cvjs_active_floorplan_div_nr]" +lastObj[cvjs_active_floorplan_div_nr]   );

if (!cvjs_Community_Version)
	if (lastObj[cvjs_active_floorplan_div_nr] >= 0 && lastObj[cvjs_active_floorplan_div_nr]< vqRooms[cvjs_active_floorplan_div_nr].length)
		{
		jQuery(vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].node).qtip('hide');
		if (popObj>=0) jQuery(vqRooms[cvjs_active_floorplan_div_nr][popObj[cvjs_active_floorplan_div_nr]].node).qtip('hide');

		bbox = vqRooms[cvjs_active_floorplan_div_nr][lastObj[cvjs_active_floorplan_div_nr]].getBBox();
		var rat = viewBoxWidth[cvjs_active_floorplan_div_nr]/viewBoxHeight[cvjs_active_floorplan_div_nr];
		var wid;
		var hgt;
		var cx = bbox.x + (bbox.width/2);
		var cy = bbox.y + (bbox.height/2);
		if (bbox.width > bbox.height)
			{
			wid = bbox.width*2;
			hgt = wid / rat;
			}
		else
			{
			hgt = bbox.height*2;
			wid = hgt * rat;
			}

		viewBox[cvjs_active_floorplan_div_nr].X = cx - wid/2;
		viewBox[cvjs_active_floorplan_div_nr].Y = cy - hgt/2;
		viewBoxWidth[cvjs_active_floorplan_div_nr] = wid;
		viewBoxHeight[cvjs_active_floorplan_div_nr] = hgt;

		var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
		var json_obj = jQuery.parseJSON(attr_2);
		cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);

//NNN		 setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], viewBox[cvjs_active_floorplan_div_nr].X,viewBox[cvjs_active_floorplan_div_nr].Y,viewBoxWidth[cvjs_active_floorplan_div_nr],viewBoxHeight[cvjs_active_floorplan_div_nr]);
//		zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/cvjs_rPaper[cvjs_active_floorplan_div_nr].width;

//console.log("xx1 viewBoxWidth[cvjs_active_floorplan_div_nr] "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" rpWidth[cvjs_active_floorplan_div_nr] "+rpWidth[cvjs_active_floorplan_div_nr]);

		zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/rpWidth[cvjs_active_floorplan_div_nr];

		lastObj[cvjs_active_floorplan_div_nr] = -1;
		}
	}


function zoomHere_Factor(node, factor){
	
	cvjs_zoomHere_Factor(node, factor);
	
	
}


/**
 * Zoom in over the extents of an object using a zoom factor
 * @param {String} rmid - Id of the Space Object to zoom over
 * @param {float} factor - zoom factor to zoom in over in percent
 */

function cvjs_zoomHere_ObjectId(rmid, factor){
	
	//var rm = findFixture(rmid);
	//var vqid = vqRooms[cvjs_active_floorplan_div_nr][spc].data("node");


	// 2018-01-08
	var vqid = findFixture(rmid);


	
//	factor = factor/100.0;

	if (factor == 0) factor = 100;

	factor = 1/factor *100.0;
	

	cvjs_zoomHere_Factor(vqid, factor);
	
}


/**
 * Zoom in over the extents of an object using a zoom factor
 * @param {String} rmid - Id of the Space Object to zoom over
 * @param {float} factor - zoom factor to zoom in over in percent
 * @param {String} floorplan_div - floorplan div to zoom over
 */

function cvjs_zoomHere_ObjectIdDiv(rmid, factor, floorplan_div){
	
	//var rm = findFixture(rmid);
	//var vqid = vqRooms[cvjs_active_floorplan_div_nr][spc].data("node");

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div+"_svg");   // add _svg to the main floorplan_div

	if (cvjs_debug) console.log(" IdDiv active floorplan "+cvjs_active_floorplan_div_nr+"  "+floorplan_div);
	
	// 2018-01-08
	var rm = findFixture(rmid);
	
	if (rm != -1){
	
			
		var vqid = vqRooms[cvjs_active_floorplan_div_nr][rm].data("node");

		if (cvjs_debug) console.log("vqid="+vqid+" rm= "+rm+"  "+rmid+" "+cvjs_active_floorplan_div_nr);

	//	factor = factor/100.0;

		if (factor == 0) factor = 100;
		factor = 1/factor *100.0;
		
	cvjs_zoomHere_Factor(vqid, factor);

	}
}



/**
 * Zoom in over the extents of an object using a zoom factor
 * @param {String} node - NODE_ node object
 * @param {float} factor - zoom factor to zoom in over
 */

function cvjs_zoomHere_Factor(node, factor)
{
	if (cvjs_debug) 	console.log("zoomHere "+node+"  "+factor);
// DOES NOT WORK; NEED TO HANDLE qTIP properly

	if (cvjs_debug) 	console.log(" cvjs_active_floorplan_div_nr "+cvjs_active_floorplan_div_nr+"  length "+vqRooms[cvjs_active_floorplan_div_nr].length);

	for (i=0; i<vqRooms[cvjs_active_floorplan_div_nr].length; i++){

		//if (cvjs_debug) console.log(node+"  "+vqRooms[cvjs_active_floorplan_div_nr][i].data("node"));
	
		if (node == vqRooms[cvjs_active_floorplan_div_nr][i].data("node")){

			if (cvjs_debug) console.log("!!!inside ZoomHere "+node+"  "+vqRooms[cvjs_active_floorplan_div_nr][i].data("node"));

			bbox = vqRooms[cvjs_active_floorplan_div_nr][i].getBBox();
			var rat = viewBoxWidth[cvjs_active_floorplan_div_nr]/viewBoxHeight[cvjs_active_floorplan_div_nr];
			var wid;
			var hgt;
//			var cx = bbox.x + (bbox.width/factor);
//			var cy = bbox.y + (bbox.height/factor);
			var cx = bbox.x + (bbox.width/2);
			var cy = bbox.y + (bbox.height/2);
			if (bbox.width > bbox.height)
				{
				wid = bbox.width*factor;
				hgt = wid / rat;
				}
			else
				{
				hgt = bbox.height*factor;
				wid = hgt * rat;
				}

			viewBox[cvjs_active_floorplan_div_nr].X = cx - wid/2;
			viewBox[cvjs_active_floorplan_div_nr].Y = cy - hgt/2;
			viewBoxWidth[cvjs_active_floorplan_div_nr] = wid;
			viewBoxHeight[cvjs_active_floorplan_div_nr] = hgt;

			var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
			var json_obj = jQuery.parseJSON(attr_2);
			cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);

		//NNN		 setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], viewBox[cvjs_active_floorplan_div_nr].X,viewBox[cvjs_active_floorplan_div_nr].Y,viewBoxWidth[cvjs_active_floorplan_div_nr],viewBoxHeight[cvjs_active_floorplan_div_nr]);
		//		zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/cvjs_rPaper[cvjs_active_floorplan_div_nr].width;

		//console.log("xx1 viewBoxWidth[cvjs_active_floorplan_div_nr] "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" rpWidth[cvjs_active_floorplan_div_nr] "+rpWidth[cvjs_active_floorplan_div_nr]);

			zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/rpWidth[cvjs_active_floorplan_div_nr];

		};
	}
}

// REDLINES DIRECT DOWNLOAD / UPLOAD

/**
 * Trigger a direct download of the current redline on canvas into a file for local save
 * @param {string} floorplan_div - name of floorplan div
 * @param {string} filename - name of redline file of screen content to download, it's format extension must be .js
 */
function cvjs_directDownloadStickyNotesRedlines(floorplan_div, filename) {
	
	var data = cvjs_getStickyNotesRedline();
	
    var blob = new Blob([data], {type: 'text/javascript'});
    if(window.navigator.msSaveOrOpenBlob) {
        window.navigator.msSaveBlob(blob, filename);
    }
    else{
        var elem = window.document.createElement('a');
        elem.href = window.URL.createObjectURL(blob);
        elem.download = filename;        
        document.body.appendChild(elem);
        elem.click();        
        document.body.removeChild(elem);
    }
}

function cvjs_clickElem(elem) {
	// Thx user1601638 on Stack Overflow (6/6/2018 - https://stackoverflow.com/questions/13405129/javascript-create-and-save-file )
	var eventMouse = document.createEvent("MouseEvents")
	eventMouse.initMouseEvent("click", true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null)
	elem.dispatchEvent(eventMouse)
}



/**
* Trigger a direct local source load of a redline file into the current canvas
* @param {string} floorplan_div - name of floorplan div
 */
function cvjs_directUploadStickyNotesRedlines(floorplan_div) {
	
	// upload redline....
	readFile = function(e) {
		var file = e.target.files[0];
		if (!file) {
			return;
		}
		var reader = new FileReader();
		reader.onload = function(e) {
			var contents = e.target.result;
			// trigger redline load
			//window.alert(contents);
			
			cvjs_clearCurrentRedline(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
			cvjs_addInlineScript(contents);
			stickynotesRedlines_loaded = true;
			cvjs_loadStickyNotesRedlinesTimer();
			
			document.body.removeChild(fileInput);
		}
		reader.readAsText(file)
	}
	fileInput = document.createElement("input")
	fileInput.type='file'
	fileInput.style.display='none'
	fileInput.onchange=readFile
	//fileInput.func=func
	document.body.appendChild(fileInput)
	cvjs_clickElem(fileInput)
	
	// load the redline

}

// REDLINES DIRECT DOWNLOAD / UPLOAD


/// DATA MAPS TEST


var cvjs_displayMapsStatus = false;

function display_maps(){

	cvjs_displayMapsStatus = !cvjs_displayMapsStatus;

	
console.log("cvjs_displayMapsStatus "+cvjs_displayMapsStatus);	
	
	if (cvjs_displayMapsStatus)
		jQuery("#datamaps_form").show();
	else
		jQuery("#datamaps_form").hide();

		if ( jQuery("#cvjs_displayData_switch").prop("checked")){
//				jQuery("#datamaps_form").css("left", 40).css("top", jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height()-80);
			jQuery("#datamaps_form").css("left", 40).css("top", jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position().top + jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height()-197);

		}else{
			jQuery("#datamaps_form").css("left", 40).css("top", jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position().top + jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height()-120);
		}

}

var cvjs_currentMapNumber = 0;

function cvjs_change_datamaps(mapNr){

//console.log("in change datamaps "+cvjs_dataMapsHeaderArray);
//console.log(mapNr+" "+cvjs_dataMapsHeaderArray[mapNr]);

	if (mapNr==0){
		jQuery("#cvjs_display_selection_1").show();
		jQuery("#cvjs_display_selection_2").hide();
		jQuery("#cvjs_display_selection_3").hide();
		jQuery("#cvjs_display_selection_4").hide();
	}

	if (mapNr==1){
		jQuery("#cvjs_display_selection_1").hide();
		jQuery("#cvjs_display_selection_2").show();
		jQuery("#cvjs_display_selection_3").hide();
		jQuery("#cvjs_display_selection_4").hide();
	}

	if (mapNr==2){
		jQuery("#cvjs_display_selection_1").hide();
		jQuery("#cvjs_display_selection_2").hide();
		jQuery("#cvjs_display_selection_3").show();
		jQuery("#cvjs_display_selection_4").hide();
	}


	if (mapNr==3){
		jQuery("#cvjs_display_selection_1").hide();
		jQuery("#cvjs_display_selection_2").hide();
		jQuery("#cvjs_display_selection_3").hide();
		jQuery("#cvjs_display_selection_4").show();
	}

	if (cvjs_dataMapsHeaderArray!=null)
		jQuery("#drop_select_datamaps").html(cvjs_dataMapsHeaderArray[mapNr]+'<b class="caret"></b>');
	else
		jQuery("#drop_select_datamaps").html(languageTable.languages[cvjs_currentLanguage].DataMaps.Map[mapNr]+'<b class="caret"></b>');

	cvjs_ParseDisplayDataMaps(mapNr);

	cvjs_currentMapNumber = mapNr;

}

/// DATA MAPS TEST



function cvjs_hide_image_note(imageNote){
	
	var floorplan_div = floorplan_div_Array[cvjs_active_floorplan_div_nr];
	
	jQuery( "#cvjs_floorPlanInsertImageEncapsulate_"+floorplan_div ).hide();
	tip[cvjs_active_floorplan_div_nr].hide();
}


function cvjs_delete_image(imageNote, floorplan_div){

	var floorplan_div = floorplan_div_Array[cvjs_active_floorplan_div_nr];

	jQuery( "#cvjs_floorPlanInsertImageEncapsulate_"+floorplan_div).hide();
	tip[cvjs_active_floorplan_div_nr].hide();
	vqImageNotes[currentImageNoteId].data("deleted", true);
	var dTransform = "S0.001";
	vqImageNotes[currentImageNoteId].attr({'transform': dTransform, "opacity" : "0.01"});

}


/**
 * Sets a scale factor of Image Space Objects when placed out in the canvas
 * @param {float} factor - scalefactor, default is 1.0
 */
function cvjs_setGlobalSpaceImageObjectScaleFactor(factor){
	
	cvjs_globalScaleNote = factor;

}

var cvjs_dgnWorkSpace = false;
var cvjs_dgnWorkSpaceLocation = "";
var cvjs_dgnWorkSpaceServerLocation = "";

/**
 * Sets the DGN workspace file
 * @param {String} workspace - Server location of workspace file, the (your server path) in the WorkSpace is automatically set to one level up from workspace file location.
 * @param {String} workspacepath - DGN workspace internal Server Path, the (your server path) in the WorkSpace. Only use if different to one level up from workspace file location.
 */

function cvjs_setDgnWorkSpace(workspace, workspacepath){

cvjs_dgnWorkSpace = true;
cvjs_dgnWorkSpaceLocation = workspace;
// calculate ServerLocation

if (cvjs_debug) console.log(workspace+"  path"+workspacepath+"XX")

if (workspacepath!=""){
	cvjs_dgnWorkSpaceServerLocation = workspacepath;
}else{
	

	if (cvjs_dgnWorkSpaceLocation.lastIndexOf('/')>0){
		// process for /
		var secondLastIndex = cvjs_dgnWorkSpaceLocation.lastIndexOf('/', cvjs_dgnWorkSpaceLocation.lastIndexOf('/')-1);
		cvjs_dgnWorkSpaceServerLocation = cvjs_dgnWorkSpaceLocation.substring(0, secondLastIndex);
	}
	else
		if (cvjs_dgnWorkSpaceLocation.lastIndexOf('\\')>0){
		// process for
			var secondLastIndex = cvjs_dgnWorkSpaceLocation.lastIndexOf('\\', cvjs_dgnWorkSpaceLocation.lastIndexOf('\\')-1);
			cvjs_dgnWorkSpaceServerLocation = cvjs_dgnWorkSpaceLocation.substring(0, secondLastIndex);

		}
		else // do nothing can only asume same location
			cvjs_dgnWorkSpaceServerLocation = cvjs_dgnWorkSpaceLocation;

if (cvjs_debug) console.log(cvjs_dgnWorkSpaceLocation+"   "+cvjs_dgnWorkSpaceServerLocation);
}

	cvjs_conversion_addAXconversionParameter("wksp", cvjs_dgnWorkSpaceLocation);		
	cvjs_conversion_addAXconversionParameter("spath", cvjs_dgnWorkSpaceServerLocation);		

}		


/**
 * Sets the DGN workspace internal Server Path
 * @param {String} workspacepath - DGN workspace internal Server Path, the (your server path) in the WorkSpace. Only use if different to one level up from workspace file location.
 */

function cvjs_setDgnWorkSpaceServerPath(workspacepath){
	cvjs_dgnWorkSpaceServerLocation = workspacepath;

}		


/**
 * Directly sets a Space Object onto the canvas and increments the current array with space objects
 * NOTE: User must take consideration to not define an ID already available.
 * @param {string} floorplan_div - name of floorplan div
 * @param {string} currentNode_name - name of the space object to be visualized at the modal header
 * @param {string} currentNode_id - id of the object, used for pop-up highlight in "non-modal display" and for linking Space Objects with database entries
 * @param {string} currentNode_layer - layer of the Space Object
 * @param {string} currentNode_group - group of the Space Object
 * @param {string} currentNode_attributes - a list of attributes for the Space Object
 * @param {string} currentNode_attributeStatus - status of attributes list, can be populated or unpopulated, controls if data is pulled externally
 * @param {string} currentNode_type - the type attribute of the Space Object, the type is displayed at the modal header
 * @param {string} currentNode_tags - list of tags assocated with the object, for retrieval at custom developed highlight
 * @param {string} currentNode_occupancy - tag to describe occupancy, for retrieval at custom developed highlight
 * @param {string} currentNode_Path - The path of the Space Object as an SVG path 
 */

function cvjs_addSingleSpaceObject(floorplan_div, currentNode_name, currentNode_id, currentNode_layer, currentNode_group, currentNode_attributes, currentNode_attributeStatus, currentNode_type, currentNode_tags, currentNode_occupancy, currentNode_Path){


	try{

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	

	cvjs_hidePop();
	Node_id = cvjs_currentMaxNodeId();
	//console.log("xurrent Node_id="+Node_id);

	Node_id++;
	currentNode_underbar = Node_underbar+Node_id;
	
//window.alert("cvjs_addSingleSpaceObject " + Node_id+"  "+currentNode_underbar);	

	currentNode_linked = true;
	cvjs_setCurrentNodeValues(currentNode_underbar, currentNode_name, currentNode_id, currentNode_layer, currentNode_group, currentNode_attributes, currentNode_attributeStatus, currentNode_type, currentNode_tags, currentNode_occupancy, currentNode_linked);
	// setup VQnode, requires a paper object.	
	var tPolygon = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(currentNode_Path).attr({fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1"});	
	//currentNode_Path
//window.alert(" after currentnode "+tPolygon);
	
	cvjs_addVqRoomsGraphics_newNode_polygon(cvjs_currentNode_underbar, tPolygon);
	cvjs_setUpVqRooms_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], currentNode_underbar);
//window.alert(" after setupVqRooms " + currentNode_Path);	
	}
	catch(err){ window.alert(err);}
}


/**
 * Returns a Bounding Box of Space Object in screen coordinates
 * @param {int} rmid - Room ID of Space Object
 * @return {Object} myBoundingBox - upper right and lower left corner of bounding box defined by myBoundingBox.x, myBoundingBox.y, myBoundingBox.x2, myBoundingBox.y2
 */

function cvjs_ObjectBoundingBox_ScreenCoord(rmid){
	
		var rm = findRoom(rmid);
		if (rm >= 0){
			var myroom = vqRooms[cvjs_active_floorplan_div_nr][rm]
			var mybox = myroom.getBBox();

			console.log(myroom+"  "+mybox.x+" "+mybox.y+" "+mybox.x2+"  "+mybox.y2);

			var canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
			var canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

			var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

			var global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
			var global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

			if (global_scale_X<global_scale_Y)
				global_scale = global_scale_X;
			else
				global_scale = global_scale_Y;

			var delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
			var delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;
			/*
			mybox.x = (screenx-delta_x)/global_scale
			mybox.x2 = (screenx2-delta_x)/global_scale
			mybox.y = (screeny-delta_y)/global_scale;
			mybox.y2 = (screeny2-delta_y)/global_scale;
			*/			
			myBoundingBox.x = Math.round(mybox.x*global_scale + delta_x);
			myBoundingBox.x2 = Math.round(mybox.x2*global_scale + delta_x)
			myBoundingBox.y = Math.round(mybox.y*global_scale + delta_y);
			myBoundingBox.y2 = Math.round(mybox.y2*global_scale + delta_y);

			return(myBoundingBox);
				//tPath_r = "M" + (firstX_r-delta_x)/global_scale + "," + (firstY_r-delta_y)/global_scale;
		}
		else
			return null;

}



/**
 * Highlight a Space Object with a css settings of a Color Object
 * @param {string} floorplan_div - name of floorplan div
 * @param {string} objectID - id of the object, used for pop-up highlight in "non-modal display" and for linking Space Objects with database entries
 * @param {Object} colorobject - Styleobject to apply to Space Object
 */
function cvjs_highlightSpaceObjectDirect(floorplan_div, objectID, colorobject){

	var rm = findFixture(objectID);
	vqRooms[cvjs_active_floorplan_div_nr][rm].data("defaultcolor", colorobject);
	vqRooms[cvjs_active_floorplan_div_nr][rm].attr(colorobject);
	
}


/**
 * Clear the Highlight a Space Object and returns to default settings
 * @param {string} floorplan_div - name of floorplan div
 * @param {string} objectID - id of the object, used for pop-up highlight in "non-modal display" and for linking Space Objects with database entries
 */
function cvjs_clearHighlightSpaceObjectDirect(floorplan_div, objectID){

	var rm = findFixture(objectID);
	vqRooms[cvjs_active_floorplan_div_nr][rm].data("defaultcolor", "undefined");
	vqRooms[cvjs_active_floorplan_div_nr][rm].attr(defaultColor);

}

/**
 * Clear all Highlight on all Space Objects and returns to default settings
 * @param {string} floorplan_div - name of floorplan div
 */

function cvjs_clearAllHighlightSpaceObjectDirect(floorplan_div){

	// loop over all vqRooms	 
	 for (var rm in vqRooms[cvjs_active_floorplan_div_nr]){
		vqRooms[cvjs_active_floorplan_div_nr][rm].data("defaultcolor", "undefined");
		vqRooms[cvjs_active_floorplan_div_nr][rm].attr(defaultColor);
	 }	 
}



/**
 * Modify a Fixed Size Space Object Custom Rectangle content
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 * @param {string} spaceObjectId - Unique ID of the space object. NOTE!
 * @param {string} svgImagePath - name of path containing wallpaper object
 * @param {Object} textArray - array with lines of text content in Space Object
 * @param {float} scaleFactor - scale factor at insertion, 1.0 is default
 * @param {Object} textStyles - object containing colors and style of each line of text in the Space Object
 * @param {Array} scaleText - array containing relative size af each line of text in the Space Object
 * @param {Array} hexColorText - array containing color of each line of text in the Space Object
 * @param {float} leftFactor - left adjustment factor of text in the Space Object
 * @return {boolean} flag - true if objectID exists, false otherwise
 */

function cvjs_modifySpaceObjectDirectXY(floorplan_div, spaceObjectId, svgImagePath, textArray, scaleFactor, textStyles, scaleText, hexColorText, leftFactor){

try{


	var rm = findFixture(spaceObjectId);	
	if (rm<0) return false;
		
	cvjs_addSpaceTextArrayFlag = false;
	cvjs_addSpaceDWGFlag = false; 
	cvjs_addSpaceScaleFactor = 1.0;		
	cvjs_customSvgImagePath = svgImagePath;

	if ( textArray != null){
			cvjs_addSpaceTextArrayFlag = true;
			cvjs_addSpaceTextArray = textArray;
	}	

	if ( scaleFactor != null) 
		cvjs_addSpaceScaleFactor = scaleFactor;

	if ( textStyles != null) 
		cvjs_textStyles = textStyles;

	if ( scaleText != null) 
		cvjs_scaleText = scaleText;

	if ( hexColorText != null) 
		cvjs_hexColorText = hexColorText;

	if ( leftFactor != null) 
		cvjs_leftFactor = leftFactor;
		
	var this_Node_underbar = findNodeFromId(spaceObjectId)
	
	
	console.log(vqRooms[cvjs_active_floorplan_div_nr][rm].data("svgy"));
	console.log(vqRooms[cvjs_active_floorplan_div_nr][rm].data("translatey"))
	
	cvjs_coreModifySpaceObjectDirectXY((vqRooms[cvjs_active_floorplan_div_nr][rm].data("svgx") ), (vqRooms[cvjs_active_floorplan_div_nr][rm].data("svgy")), this_Node_underbar, spaceObjectId);
//	cvjs_coreModifySpaceObjectDirectXY((vqRooms[cvjs_active_floorplan_div_nr][rm].data("svgx") + vqRooms[cvjs_active_floorplan_div_nr][rm].data("translatex")), (vqRooms[cvjs_active_floorplan_div_nr][rm].data("svgy")+ vqRooms[cvjs_active_floorplan_div_nr][rm].data("translatey")), this_Node_underbar, spaceObjectId);
	
//	cvjs_highlightSpaceObjectDirect(floorplan_div, objectID, colorObject);

	return true;

}
catch(err){console.log("cvjs_modifySpaceObjectDirectXY error: "+err);};

}


function cvjs_coreModifySpaceObjectDirectXY(xcor, ycor, this_Node_underbar, spaceObjectId) {

try{
	var floorplan_div = floorplan_div_Array[cvjs_active_floorplan_div_nr];

	var scaleNote = 1;
	var scaleFactorNotes = 600; // 300

	if ( (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])> (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr]))
		scaleNote = (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	else
		scaleNote = (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])/scaleFactorNotes;

	cvjs_removeHandleFunc_FixedRectangle();
		
	var localscalefac = cvjs_addSpaceScaleFactor*20.0;	
	lastX_r = scaleNote*localscalefac*global_scale ;
	lastY_r = scaleNote*localscalefac*global_scale ;

	lastX_r_imageframe = scaleNote*localscalefac*0.05*global_scale ;
	
	if (cvjs_customSvgImagePath.length == 0) lastY_r = 0;	
	var textstep = scaleNote*localscalefac*0.25*global_scale;
	
	var size;
	var lastY_rText;
	var newText = new Array();
	tPath_r = "M" + xcor + "," + ycor;
	
	
	if (cvjs_addSpaceTextArrayFlag){
		size = cvjs_addSpaceTextArray.length;		
		lastY_rText = lastY_r + textstep * size;
		tPath_r += "h" + lastX_r/global_scale + "v" + lastY_rText/global_scale+"h"+(-lastX_r/global_scale)+"v"+(-lastY_rText/global_scale+" Z");
	}
	else
		tPath_r += "h" + lastX_r/global_scale + "v" + lastY_r/global_scale+"h"+(-lastX_r/global_scale)+"v"+(-lastY_r/global_scale+" Z");
		
	if (cvjs_debug) console.log(tPath_r);

	document.getElementById('cv_'+this_Node_underbar).setAttribute("d", tPath_r);
	document.getElementById('cv_'+this_Node_underbar+'_image').setAttribute("href", cvjs_customSvgImagePath );
	document.getElementById('cv_'+this_Node_underbar+'_image').setAttribute("x", xcor );
	document.getElementById('cv_'+this_Node_underbar+'_image').setAttribute("y", ycor );
	document.getElementById('cv_'+this_Node_underbar+'_image').setAttribute("width", scaleNote*localscalefac*0.9);
	document.getElementById('cv_'+this_Node_underbar+'_image').setAttribute("height", scaleNote*localscalefac*0.9 );
	
	
	
	
	

	var rm = findFixture(spaceObjectId);	
	vqRooms[cvjs_active_floorplan_div_nr][rm].data("translatex", 0);		
	vqRooms[cvjs_active_floorplan_div_nr][rm].data("translatey", 0);	
	jQuery('#cvjs_'+spaceObjectId).attr({ transform: "translate("+0+","+0+")"});
	

	var text_style_dialog = {
				'text-font' : "Dialog",
				'font-family' : "Dialog",
				'font-size' : "7pt",
				'text-anchor' : "start",
				'font-weight': "normal",
				'font-style': "italic",
				stroke : "#88539B",
				fill : "#88539B"
			};

	for (var i=size; i<3; i++){
		cvjs_addSpaceTextArray[i] = "";
		cvjs_textStyles[i] = text_style_dialog; 
		cvjs_hexColorText[i] = "#FFFFFF";
		cvjs_scaleText[i] = 0.1;
	}
	size_all = 3;



	if (cvjs_addSpaceTextArrayFlag){		
		var ystep = ycor+lastY_r/global_scale;
		var xstep = xcor + lastX_r/global_scale*cvjs_leftFactor; 
		for (var i=0; i<size_all; i++){			
//			 var ystep = ycor+lastY_r/global_scale+((i+1)*textstep/global_scale);
			
console.log("i="+i+"  "+cvjs_addSpaceTextArray[i]+"  "+ystep+"  "+xcor);			
			if (i== 0){ 
				fontheight1 = textstep*size/global_scale*cvjs_scaleText[i];
				ystep = ystep +fontheight1;
			
			    document.getElementById('cv_'+this_Node_underbar+'_text1').setAttribute("x" , xstep );
			    document.getElementById('cv_'+this_Node_underbar+'_text1').setAttribute("y" , ystep );
			    document.getElementById('cv_'+this_Node_underbar+'_text1').textContent = cvjs_addSpaceTextArray[i];
				
				//jQuery('cv_'+this_Node_underbar+'_text1').val("Hello");
				// build loop:
				var styles = "";
				for (j=0; j<cvjs_textStyles[i].length; j++){
					styles+= cvjs_textStyles[i][j]+"; ";
				}
				styles+="font-size:"+fontheight1;
			    document.getElementById('cv_'+this_Node_underbar+'_text1').setAttribute("style" , styles );
				
				//newText1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(xstep, ystep, cvjs_addSpaceTextArray[i]).attr(cvjs_textStyles[i]);

				strokewidth = fontheight1/15;
			    document.getElementById('cv_'+this_Node_underbar+'_text1').setAttribute('stroke-width' , strokewidth );
			    document.getElementById('cv_'+this_Node_underbar+'_text1').setAttribute('stroke' , cvjs_hexColorText[i] );
			    document.getElementById('cv_'+this_Node_underbar+'_text1').setAttribute('fill' , cvjs_hexColorText[i] );


				jQuery('#cv_'+this_Node_underbar+'_text1').css('pointer-events', 'none');

			
			}
			if (i== 1){ 
				fontheight1 = textstep*size/global_scale*cvjs_scaleText[i];
				ystep = ystep +fontheight1*1.05;

			    document.getElementById('cv_'+this_Node_underbar+'_text2').setAttribute("x" , xstep );
			    document.getElementById('cv_'+this_Node_underbar+'_text2').setAttribute("y" , ystep );

//			    document.getElementById('cv_'+this_Node_underbar+'_text2').setAttribute("text", cvjs_addSpaceTextArray[i] );
			    document.getElementById('cv_'+this_Node_underbar+'_text2').textContent = cvjs_addSpaceTextArray[i];


				// build loop:
				var styles = "";
				for (j=0; j<cvjs_textStyles[i].length; j++){
					styles+= cvjs_textStyles[i][j]+"; ";
				}
				styles+="font-size:"+fontheight1;
			    document.getElementById('cv_'+this_Node_underbar+'_text2').setAttribute("style" , styles );


				strokewidth = fontheight1/15;
			    document.getElementById('cv_'+this_Node_underbar+'_text2').setAttribute('stroke-width' , strokewidth );
			    document.getElementById('cv_'+this_Node_underbar+'_text2').setAttribute('stroke' , cvjs_hexColorText[i] );
			    document.getElementById('cv_'+this_Node_underbar+'_text2').setAttribute('fill' , cvjs_hexColorText[i] );

				jQuery('#cv_'+this_Node_underbar+'_text2').css('pointer-events', 'none');
			}
			if (i== 2){ 
				fontheight1 = textstep*size/global_scale*cvjs_scaleText[i];
				ystep = ystep +fontheight1*1.05;

			    document.getElementById('cv_'+this_Node_underbar+'_text3').textContent = cvjs_addSpaceTextArray[i];
			    document.getElementById('cv_'+this_Node_underbar+'_text3').setAttribute("x" , xstep );
			    document.getElementById('cv_'+this_Node_underbar+'_text3').setAttribute("y" , ystep );

				// build loop:
				var styles = "";
				for (j=0; j<cvjs_textStyles[i].length; j++){
					styles+= cvjs_textStyles[i][j]+"; ";
				}
				styles+="font-size:"+fontheight1;
			    document.getElementById('cv_'+this_Node_underbar+'_text3').setAttribute("style" , styles );

				//newText1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(xstep, ystep, cvjs_addSpaceTextArray[i]).attr(cvjs_textStyles[i]);

				strokewidth = fontheight1/15;
			    document.getElementById('cv_'+this_Node_underbar+'_text3').setAttribute('stroke-width' , strokewidth );
			    document.getElementById('cv_'+this_Node_underbar+'_text3').setAttribute('stroke' , cvjs_hexColorText[i] );
			    document.getElementById('cv_'+this_Node_underbar+'_text3').setAttribute('fill' , cvjs_hexColorText[i] );

				jQuery('#cv_'+this_Node_underbar+'_text3').css('pointer-events', 'none');

			}
		}
	}
}
catch(err){console.log("cvjs_coreModifySpaceObjectDirectXY error: "+err);}	
		
};


/**
 * Moves a Space Object 
 * @param {string} floorplan_div - name of floorplan div
 * @param {string} objectID - id of the object, used for pop-up highlight in "non-modal display" and for linking Space Objects with database entries
 * @param {int} coordinate_flag - 0 is SVG coordinates, 1 is DWG coordinates, 0 is default
 * @param {int} xcor - x coordinate 
 * @param {int} ycor - y coordinate 
 * @return {boolean} flag - true if objectID exists, false otherwise
*/
function cvjs_moveSpaceObjectDirectXY(floorplan_div, objectID, coordinate_flag, xpos, ypos){


//if (cvjs_debug) console.log(xpos+"  "+ypos);
	var rm = findFixture(objectID);
	if (rm<0) return false;


	if (coordinate_flag == 0){
		// retrieve coordinates SVG				
		// calculate delta
		var deltax =  xpos - vqRooms[cvjs_active_floorplan_div_nr][rm].data("svgx");
		var deltay =  ypos - vqRooms[cvjs_active_floorplan_div_nr][rm].data("svgy");

		// update coordinates SVG
		vqRooms[cvjs_active_floorplan_div_nr][rm].data("svgx", xpos);
		vqRooms[cvjs_active_floorplan_div_nr][rm].data("svgy", ypos);
		
		var translatex_pre = vqRooms[cvjs_active_floorplan_div_nr][rm].data("translatex");
		var translatey_pre = vqRooms[cvjs_active_floorplan_div_nr][rm].data("translatey");

		var translatex = translatex_pre+deltax;
		var translatey = translatey_pre+deltay;
		
		vqRooms[cvjs_active_floorplan_div_nr][rm].data("translatex", translatex);		
		vqRooms[cvjs_active_floorplan_div_nr][rm].data("translatey", translatey);		

//if (cvjs_debug)  console.log(objectID+" svg translate("+vqRooms[cvjs_active_floorplan_div_nr][rm].data('translatex')+","+vqRooms[cvjs_active_floorplan_div_nr][rm].data('translatey')+")");

		jQuery('#cvjs_'+objectID).attr({ transform: "translate("+translatex+","+translatey+")"});
	}
	
	if (coordinate_flag == 1){

		// getting the current page...
		var page = multiPages[cvjs_active_floorplan_div_nr].currentPage;

		vqRooms[cvjs_active_floorplan_div_nr][rm].data("dwgx", xpos);		
		vqRooms[cvjs_active_floorplan_div_nr][rm].data("dwgy", ypos);		

		var x = xpos;
		var y = ypos;
		// retrieve coordinates DWG
		// transform to SVG
		var svgDx = cvjs_drawingCoordinates[page].SVG.upperRight.x - cvjs_drawingCoordinates[page].SVG.lowerLeft.x;
		var dwgDx = cvjs_drawingCoordinates[page].DWG.upperRight.x - cvjs_drawingCoordinates[page].DWG.lowerLeft.x;
		var dwgpX =  (x - cvjs_drawingCoordinates[page].DWG.lowerLeft.x)/dwgDx;
		var svgPx =  cvjs_drawingCoordinates[page].SVG.lowerLeft.x+(dwgpX*svgDx);

		var svgDy = cvjs_drawingCoordinates[page].SVG.upperRight.y - cvjs_drawingCoordinates[page].SVG.lowerLeft.y;
		var dwgDy = cvjs_drawingCoordinates[page].DWG.upperRight.y - cvjs_drawingCoordinates[page].DWG.lowerLeft.y;
		var dwgpY =  (y - cvjs_drawingCoordinates[page].DWG.lowerLeft.y)/dwgDy;
		var svgPy =  cvjs_drawingCoordinates[page].SVG.lowerLeft.y+(dwgpY*svgDy);


		// calculate delta
		var deltax =  svgPx - vqRooms[cvjs_active_floorplan_div_nr][rm].data("svgx");
		var deltay =  svgPy - vqRooms[cvjs_active_floorplan_div_nr][rm].data("svgy");

		// update coordinates SVG
		vqRooms[cvjs_active_floorplan_div_nr][rm].data("svgx", svgPx);
		vqRooms[cvjs_active_floorplan_div_nr][rm].data("svgy", svgPy);
		
		var translatex_pre = vqRooms[cvjs_active_floorplan_div_nr][rm].data("translatex");
		var translatey_pre = vqRooms[cvjs_active_floorplan_div_nr][rm].data("translatey");

		var translatex = translatex_pre+deltax;
		var translatey = translatey_pre+deltay;
		
		vqRooms[cvjs_active_floorplan_div_nr][rm].data("translatex", translatex);		
		vqRooms[cvjs_active_floorplan_div_nr][rm].data("translatey", translatey);		

//console.log(objectID+" dwg translate("+vqRooms[cvjs_active_floorplan_div_nr][rm].data('translatex')+","+vqRooms[cvjs_active_floorplan_div_nr][rm].data('translatey')+")");

		jQuery('#cvjs_'+objectID).attr({ transform: "translate("+translatex+","+translatey+")"});
	}
	
	return true;
}

/**
 * Get current Space Object Coordinates 
 * @param {string} floorplan_div - name of floorplan div
 * @param {string} objectID - id of the object, used for pop-up highlight in "non-modal display" and for linking Space Objects with database entries
 * @param {int} coordinate_flag - 0 is SVG coordinates, 1 is DWG coordinates, 0 is default
 * @return {Array} coords - x and y coordinate of object , null if undefined
 */
function cvjs_getSpaceObjectDirectXYCoord(floorplan_div, objectID, coordinate_flag){

	var coord = new Array();
	var rm = findFixture(objectID);

	if (rm<0) return null;

	if (coordinate_flag == 0){
		coord.x = vqRooms[cvjs_active_floorplan_div_nr][rm].data("svgx");
		coord.y = vqRooms[cvjs_active_floorplan_div_nr][rm].data("svgy");
		return coord;
	}

	if (coordinate_flag == 1){
		coord.x = vqRooms[cvjs_active_floorplan_div_nr][rm].data("dwgx");
		coord.y = vqRooms[cvjs_active_floorplan_div_nr][rm].data("dwgy");
		return coord;
	}

	return null;
}


/**
 * Delete Space Object
 * @param {string} floorplan_div - name of floorplan div
 * @param {string} objectID - id of the object, used for pop-up highlight in "non-modal display" and for linking Space Objects with database entries
 * @return {boolean} flag - true if deleted, false if objectID undefined
 */
function cvjs_deleteSpaceObjectDirectXY(floorplan_div, objectID){

	var coord = new Array();
	var rm = findFixture(objectID);

	if (rm<0) return false;

	var this_Node_underbar = findNodeFromId(objectID);
	vqRooms[cvjs_active_floorplan_div_nr][rm].data("deleted", true);
	jQuery('#cvjs_'+objectID).remove();

	return true;
}





// 6.2.32

/**
* Turn all Space Objects on 
 * @param {string} floorplan_div - name of floorplan div
 */
function cvjs_allSpaceObjectsOn(floorplan_div){

	for (var room in vqRooms[cvjs_active_floorplan_div_nr]){
		vqRooms[cvjs_active_floorplan_div_nr][room].attr(show);
		vqRooms[cvjs_active_floorplan_div_nr][room].data("displaySpaceObject", "on");
	}
}


/**
* Turn all Space Object off 
 * @param {string} floorplan_div - name of floorplan div
 */
function cvjs_allSpaceObjectsOff(floorplan_div){

	for (var room in vqRooms[cvjs_active_floorplan_div_nr]){
		vqRooms[cvjs_active_floorplan_div_nr][room].attr(hide);
		vqRooms[cvjs_active_floorplan_div_nr][room].data("displaySpaceObject", "off");
	}
}


/**
* Set the creation layer for Space Objects
 * @param {string} floorplan_div - name of floorplan div
 * @param {string} layerName - name of the layer field of the Space Object
 */
function cvjs_setSpaceObjectsDefaultLayer(floorplan_div, layerName){

	cvjs_currentNode_layer = layerName;
}

/**
* Get the creation layer for Space Objects
 * @param {string} floorplan_div - name of floorplan div
 * @return {string} layerName - name of the default Space Object layer
 */
function cvjs_getSpaceObjectDefaultLayer(floorplan_div){

	return( cvjs_currentNode_layer);
}



/**
* Get the associated layer name for the Space Object
 * @param {string} floorplan_div - name of floorplan div
 * @param {String} ObjectID - Space Object Id on layer, -1 if none found
 * @return {string} layerName - name of the layer field of the Space Object
 */ 
 
function cvjs_getLayerForSpaceObject(floorplan_div, ObjectID){ 

	var idsOnLayer = [];
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		var vqid = vqRooms[cvjs_active_floorplan_div_nr][spc].data("id");
		if (vqid == ObjectID){			
			return(vqRooms[cvjs_active_floorplan_div_nr][spc].data("layer")); 
		}
	}		
	return -1;
}



function cvjs_getLayerOnSpaceObject(floorplan_div, ObjectID){

	cvjs_getLayerForSpaceObject(floorplan_div, ObjectID);	

}


/**
 * Associate Space Object with a Layer
 * @param {string} floorplan_div - name of floorplan div
 * @param {string} objectID - id of the object, used for pop-up highlight and for linking Space Objects with database entries
 * @param {string} layerName - name of the layer field of the Space Object
 */
function cvjs_setSpaceObjectOnLayer(floorplan_div, objectID, layerName){

	var coord = new Array();
	var rm = findFixture(objectID);

	if (rm<0) return false;

	var this_Node_underbar = findNodeFromId(objectID);

	vqRooms[cvjs_active_floorplan_div_nr][rm].data("layer", layerName);

	return true;
}


/**
 * Set the display status of Space Object 
 * @param {string} floorplan_div - name of floorplan div
 * @param {string} objectID - id of the space object
 * @param {string} displayStatus - "on" to display, "off" to hide, default is "on"
 */
function cvjs_setSpaceObjectOnOff(floorplan_div, objectID, displayStatus){

	var coord = new Array();
	var rm = findFixture(objectID);

//window.alert(rm+"  "+displayStatus.toLowerCase().indexOf("on"));

	if (rm<0) return false;

	if (displayStatus.toLowerCase().indexOf("on") == 0){
		vqRooms[cvjs_active_floorplan_div_nr][rm].attr(show);
		vqRooms[cvjs_active_floorplan_div_nr][rm].data("displaySpaceObject", "on");
	}

	if (displayStatus.toLowerCase().indexOf("off") == 0){
		vqRooms[cvjs_active_floorplan_div_nr][rm].attr(hide);
		vqRooms[cvjs_active_floorplan_div_nr][rm].data("displaySpaceObject", "off");
	}

	// hide or show the layer
/*
	var this_Node_underbar = findNodeFromId(objectID);
	vqRooms[cvjs_active_floorplan_div_nr][rm].data("deleted", true);
	jQuery('#cvjs_'+objectID).remove();
*/

	return true;
}


/**
 * Get all Space Objects with a given layer Association 
 * @param {string} floorplan_div - name of floorplan div
 * @param {string} layerName - name of the layer field of the Space Object
 * @return {Array} IdArrary - Array with Space Object Id's
 */
function cvjs_returnAllSpaceObjectsOnLayer(floorplan_div, layerName){ 

	var idsOnLayer = [];
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		var vqid = vqRooms[cvjs_active_floorplan_div_nr][spc].data("id");
		var vqlayer = vqRooms[cvjs_active_floorplan_div_nr][spc].data("layer");
		if (vqlayer == layerName){			
			idsOnLayer[idsOnLayer.length] = vqid;
		}
	}		
	return idsOnLayer;
}



/**
 * Sets the status On/Off of all Space Objects with a given layer Association 
 * @param {string} floorplan_div - name of floorplan div
 * @param {string} layerName - name of the layer field of the Space Object
 * @param {string} displayStatus - display status of layer "on" of "off"
 */
function cvjs_spaceObjectLayerOnOff(floorplan_div, layerName, displayStatus){

 var idList = cvjs_returnAllSpaceObjectsOnLayer(floorplan_div, layerName)

 for (var k=0; k<idList.length; k++)
	cvjs_setSpaceObjectOnOff(floorplan_div, idList[k], displayStatus);
 
}


/**
 * Return a list of all Space Objects on an active layer
 * @param {string} floorplan_div - name of floorplan div
 * @return {Array} IdArrary - Array with Space Object Id's
 */
function cvjs_returnActiveSpaceObjects(floorplan_div){

	var spaceObjectIds = cvjs_getSpaceObjectIdList();
	var onSpaces = [];
	for (var i=0; i< spaceObjectIds.length; i++){
		
			var rm = findFixture(spaceObjectIds[i]);
			console.log(rm+" "+vqRooms[cvjs_active_floorplan_div_nr][rm].data("displaySpaceObject"))
			if (rm<0){}
			else{
				if (vqRooms[cvjs_active_floorplan_div_nr][rm].data("displaySpaceObject") == "on"){
				
					onSpaces[onSpaces.length] = spaceObjectIds[i];
				}
			}				
	}

	return (onSpaces);

}


/**
 * Return a JSON structure of all content of a space object clicked: <br>
 * 	var jsonStructure =  	{	"path":   path, <br>
 *								"tags": tags, <br>
 *								"node": node, <br>
 *								"occupancy": occupancy, <br>
 *								"name": name, <br>
 *								"type": type, <br>
 *								"id": id, <br>
 *								"defaultcolor": defaultcolor, <br>
 *								"layer": layer, <br>
 *								"group": group, <br>
 *								"linked": linked, <br>
 *								"attributes": attributes, <br>
 *								"attributeStatus": attributeStatus, <br>
 *								"displaySpaceObjects": displaySpaceObjects }<br>
* @return {Object} jsonSpaceObject - Object with the entire space objects content
 */

function cvjs_returnSpaceObjectClicked(){
	
	
		var id = cvjs_idObjectClicked();
		var node = cvjs_NodeObjectClicked();
		var room = findFixture(id);
		var path = vqRooms[cvjs_active_floorplan_div_nr][room].node.outerHTML;

		path = path.substring(path.indexOf("d=")+3);
		path = path.substring(0, path.indexOf("\""));
	
		if (cvjs_debug) console.log(vqRooms[cvjs_active_floorplan_div_nr][room]);
		
		
/*		
		vqRooms[cvjs_active_floorplan_div_nr][room].data("tags");
		vqRooms[cvjs_active_floorplan_div_nr][room].data("node");
		vqRooms[cvjs_active_floorplan_div_nr][room].data("occupancy");
		vqRooms[cvjs_active_floorplan_div_nr][room].data("name")
		vqRooms[cvjs_active_floorplan_div_nr][room].data("type");
		vqRooms[cvjs_active_floorplan_div_nr][room].data("id");
		vqRooms[cvjs_active_floorplan_div_nr][room].data("defaultcolor");
		vqRooms[cvjs_active_floorplan_div_nr][room].data("layer");
		vqRooms[cvjs_active_floorplan_div_nr][room].data("group");
		vqRooms[cvjs_active_floorplan_div_nr][room].data("linked");
		vqRooms[cvjs_active_floorplan_div_nr][room].data("handle");
		vqRooms[cvjs_active_floorplan_div_nr][room].data("attributes");
		vqRooms[cvjs_active_floorplan_div_nr][room].data("attributeStatus");
		vqRooms[cvjs_active_floorplan_div_nr][room].data("displaySpaceObject");

console.log("  "+		vqRooms[cvjs_active_floorplan_div_nr][room].node.outerHTML);
console.log("  "+		vqRooms[cvjs_active_floorplan_div_nr][room].data("tags"));
console.log("  "+		vqRooms[cvjs_active_floorplan_div_nr][room].data("node"));
console.log("  "+		vqRooms[cvjs_active_floorplan_div_nr][room].data("occupancy"));
console.log("  "+		vqRooms[cvjs_active_floorplan_div_nr][room].data("name"));
console.log("  "+		vqRooms[cvjs_active_floorplan_div_nr][room].data("type"));
console.log("  "+		vqRooms[cvjs_active_floorplan_div_nr][room].data("id"));
console.log("  "+		vqRooms[cvjs_active_floorplan_div_nr][room].data("defaultcolor"));
console.log("  "+		vqRooms[cvjs_active_floorplan_div_nr][room].data("layer"));
console.log("  "+		vqRooms[cvjs_active_floorplan_div_nr][room].data("group"));
console.log("  "+		vqRooms[cvjs_active_floorplan_div_nr][room].data("linked"));
console.log("  "+		vqRooms[cvjs_active_floorplan_div_nr][room].data("handle"));
console.log("  "+		vqRooms[cvjs_active_floorplan_div_nr][room].data("attributes"));
console.log("  "+		vqRooms[cvjs_active_floorplan_div_nr][room].data("attributeStatus"));
console.log("  "+		vqRooms[cvjs_active_floorplan_div_nr][room].data("displaySpaceObject"));

*/			

	var groups = vqRooms[cvjs_active_floorplan_div_nr][room].data("group");
	if (groups == undefined) groups = "undefined";

	var tags = vqRooms[cvjs_active_floorplan_div_nr][room].data("tags");
	if (tags == undefined) tags = "undefined";

	var jsonStructure = { 		"path":   path,
								"tags": tags,
								"node": vqRooms[cvjs_active_floorplan_div_nr][room].data("node"),
								"occupancy": vqRooms[cvjs_active_floorplan_div_nr][room].data("occupancy"),
								"name": vqRooms[cvjs_active_floorplan_div_nr][room].data("name"),
								"type": vqRooms[cvjs_active_floorplan_div_nr][room].data("type"),
								"id": vqRooms[cvjs_active_floorplan_div_nr][room].data("id"),
								"defaultcolor": vqRooms[cvjs_active_floorplan_div_nr][room].data("defaultcolor"),
								"layer": vqRooms[cvjs_active_floorplan_div_nr][room].data("layer"),
								"group": groups,
								"linked": vqRooms[cvjs_active_floorplan_div_nr][room].data("linked"),
								"attributes": vqRooms[cvjs_active_floorplan_div_nr][room].data("attributes"),
								"attributeStatus": vqRooms[cvjs_active_floorplan_div_nr][room].data("attributeStatus"),
								"displaySpaceObjects": vqRooms[cvjs_active_floorplan_div_nr][room].data("displaySpaceObject")
							}

	if (cvjs_debug) console.log("return space direct "+jsonStructure.id+" "+jsonStructure.layer);		
	
	return (jsonStructure);
};



/**
 * Return a JSON structure of all content of a given ID: <br>
 * 	var jsonStructure =  	{	"path":   path, <br>
 *								"tags": tags, <br>
 *								"node": node, <br>
 *								"occupancy": occupancy, <br>
 *								"name": name, <br>
 *								"type": type, <br>
 *								"id": id, <br>
 *								"defaultcolor": defaultcolor, <br>
 *								"layer": layer, <br>
 *								"group": group, <br>
 *								"linked": linked, <br>
 *								"attributes": attributes, <br>
 *								"attributeStatus": attributeStatus, <br>
 *								"displaySpaceObjects": displaySpaceObjects }<br>
 * @param {string} spaceID - Id of the Space Object to return
 * @return {Object} jsonSpaceObject - Object with the entire space objects content
 */

function cvjs_returnSpaceObjectID(spaceID){
	
	var room = findFixture(spaceID);
	
	var path = vqRooms[cvjs_active_floorplan_div_nr][room].node.outerHTML;

	path = path.substring(path.indexOf("d=")+3);
	path = path.substring(0, path.indexOf("\""));
	
		if (cvjs_debug) console.log(vqRooms[cvjs_active_floorplan_div_nr][room]);
		
		
	var groups = vqRooms[cvjs_active_floorplan_div_nr][room].data("group");
	if (groups == undefined) groups = "undefined";

	var tags = vqRooms[cvjs_active_floorplan_div_nr][room].data("tags");
	if (tags == undefined) tags = "undefined";

	var jsonStructure = { 		"path":   path,
								"tags": tags,
								"node": vqRooms[cvjs_active_floorplan_div_nr][room].data("node"),
								"occupancy": vqRooms[cvjs_active_floorplan_div_nr][room].data("occupancy"),
								"name": vqRooms[cvjs_active_floorplan_div_nr][room].data("name"),
								"type": vqRooms[cvjs_active_floorplan_div_nr][room].data("type"),
								"id": vqRooms[cvjs_active_floorplan_div_nr][room].data("id"),
								"defaultcolor": vqRooms[cvjs_active_floorplan_div_nr][room].data("defaultcolor"),
								"layer": vqRooms[cvjs_active_floorplan_div_nr][room].data("layer"),
								"group": groups,
								"linked": vqRooms[cvjs_active_floorplan_div_nr][room].data("linked"),
								"attributes": vqRooms[cvjs_active_floorplan_div_nr][room].data("attributes"),
								"attributeStatus": vqRooms[cvjs_active_floorplan_div_nr][room].data("attributeStatus"),
								"displaySpaceObjects": vqRooms[cvjs_active_floorplan_div_nr][room].data("displaySpaceObject")
							}

	if (cvjs_debug) console.log("return space object ID "+jsonStructure.id+" "+jsonStructure.layer);		
	
	return (jsonStructure);
};


/**
 * Using a JSON structure to create a new Space Object <br>
 * 	var jsonStructure =  	{	"path":   path, <br>
 *								"tags": tags, <br>
 *								"node": node, <br>
 *								"occupancy": occupancy, <br>
 *								"name": name, <br>
 *								"type": type, <br>
 *								"id": id, <br>
 *								"defaultcolor": defaultcolor, <br>
 *								"layer": layer, <br>
 *								"group": group, <br>
 *								"linked": linked, <br>
 *								"attributes": attributes, <br>
 *								"attributeStatus": attributeStatus, <br>
 *								"displaySpaceObjects": displaySpaceObjects }<br>
 * @param {Object} jsonSpaceObject - Object with the entire space objects content
 * @return {boolean} flag - true if created, otherwise false
 */

function cvjs_setSpaceObjectDirect(jsonSpaceObject){
	
		// check if path is correct otherwise return,
		if (false)return false; 

		//check if ID and Name are unique, otherwise return
		for (i=0; i<vqRooms.lenght; i++){
			if (vqRooms[cvjs_active_floorplan_div_nr][i].data("id") == jsonSpaceObject.id) return false;
			if (vqRooms[cvjs_active_floorplan_div_nr][i].data("name") == jsonSpaceObject.name) return false;
		}
								
		// set current NODE_
		var	Node_id = cvjs_currentMaxNodeId();
		Node_id++;

		// set all current variables
		cvjs_setCurrentNodeValues( "NODE_"+Node_id, jsonSpaceObject.name, jsonSpaceObject.id, jsonSpaceObject.layer, jsonSpaceObject.group, jsonSpaceObject.attributes, jsonSpaceObject.attributeStatus, jsonSpaceObject.type, jsonSpaceObject.tags, jsonSpaceObject.occupancy, jsonSpaceObject.linked)
		
		var newPath = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(jsonSpaceObject.path).attr({fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1"});

		// draw and add the nodejs/cadviewer/content/helloworld
		
		if (cvjs_debug) console.log(" set direct cvjs_currentNode_underbar "+cvjs_currentNode_underbar);
		
		cvjs_addVqRoomsGraphics_newNode_polygon(cvjs_currentNode_underbar, newPath);

		// update vqRooms
		cvjs_setUpVqRooms_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentNode_underbar);
	
		return true;
	}



/**
 * Change the layer of a current Space Object
 * @param {string} currentId - The current ID of the Space Object
 * @param {string} newLayer - The new layer of the Space Object
 * @return {boolean} flag - true if changed, otherwise false
 */
 
function cvjs_changeSpaceObjectLayer(currentId, newLayer){


	var room = findFixture(currentId);				
	if (room == -1) return false;

	vqRooms[cvjs_active_floorplan_div_nr][room].data("layer", newLayer);

	// update the jquery modal is not needed

	return true;
}



/**
 * Set the link status Space Object
 * @param {string} currentId - The current ID of the Space Object
 * @param {boolean} linkFlag - The new link Status of the Space Object
 * @return {boolean} flag - true if changed, otherwise false
 */
 
function cvjs_changeSpaceObjectLinkStatus(currentId, linkFlag){


	var room = findFixture(currentId);				
	if (room == -1) return false;

	vqRooms[cvjs_active_floorplan_div_nr][room].data("linked", linkFlag);

	// update the jquery modal is not needed

	return true;
}





/**
 * Change the Name of a current Space Object
 * @param {string} currentId - The current ID of the Space Object
 * @param {string} newName - The new Name of the Space Object
 * @return {boolean} flag - true if changed, otherwise false
 */

function cvjs_changeSpaceObjectName(currentId, newName){

	var room = findFixture(currentId);				
	if (room == -1) return false;

	vqRooms[cvjs_active_floorplan_div_nr][room].data("name", newName);

	// update the jquery modal is needed
	jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip('destroy');

	var htitle = "<table width=\"100%\"><tr><td class=\"cvjs_modal_header_1\" onclick=\"cvjs_popupTitleClick(\'"+vqRooms[cvjs_active_floorplan_div_nr][room].data("id")+"\');\">"+vqRooms[cvjs_active_floorplan_div_nr][room].data("name")+"</td>"+
		"<td class=\"cvjs_modal_header_info_1\" onclick=\"hideOnlyPop("+room+");\"><i class=\"fa fa-times\"></i></td></tr>"+
		"<tr><td cols=\"2\"><h4 id=\"cvjs_modal_header_info_2\">"+vqRooms[cvjs_active_floorplan_div_nr][room].data("type")+"</h4></td></tr></table>";

	if (dual_hbody_flag){
		if ( parseInt(vqRooms[cvjs_active_floorplan_div_nr][room].data("id")) >=-1){
			jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
				style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
				position: {my: 'bottom center', at: 'top left'},
				hideOnHTMLClick: 'false'});
		}else{
			jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody_2, title: htitle},
				style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
				position: {my: 'bottom center', at: 'top left'},
				hideOnHTMLClick: 'false'});
		}
	}

	if (!dual_hbody_flag){
			jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
				style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
				position: {my: 'bottom center', at: 'top left'},
				hideOnHTMLClick: 'false'});
	}

	return true;
}


/**
 * Change the Space Type of a current Space Object
 * @param {string} currentId - The current ID of the Space Object
 * @param {string} newType - The new Type of the Space Object
 * @return {boolean} flag - true if changed, otherwise false
 */

function cvjs_changeSpaceObjectType(currentId, newType){

	var room = findFixture(currentId);				
	if (room == -1) return false;

	vqRooms[cvjs_active_floorplan_div_nr][room].data("type", newType);

	// update the jquery modal is needed
	jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip('destroy');

	var htitle = "<table width=\"100%\"><tr><td class=\"cvjs_modal_header_1\" onclick=\"cvjs_popupTitleClick(\'"+vqRooms[cvjs_active_floorplan_div_nr][room].data("id")+"\');\">"+vqRooms[cvjs_active_floorplan_div_nr][room].data("name")+"</td>"+
		"<td class=\"cvjs_modal_header_info_1\" onclick=\"hideOnlyPop("+room+");\"><i class=\"fa fa-times\"></i></td></tr>"+
		"<tr><td cols=\"2\"><h4 id=\"cvjs_modal_header_info_2\">"+vqRooms[cvjs_active_floorplan_div_nr][room].data("type")+"</h4></td></tr></table>";

	if (dual_hbody_flag){
		if ( parseInt(vqRooms[cvjs_active_floorplan_div_nr][room].data("id")) >=-1){
			jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
				style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
				position: {my: 'bottom center', at: 'top left'},
				hideOnHTMLClick: 'false'});
		}else{
			jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody_2, title: htitle},
				style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
				position: {my: 'bottom center', at: 'top left'},
				hideOnHTMLClick: 'false'});
		}
	}

	if (!dual_hbody_flag){
			jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
				style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
				position: {my: 'bottom center', at: 'top left'},
				hideOnHTMLClick: 'false'});
	}

	return true;
}


/**
 * Change the ID of a current Space Object
 * @param {string} currentId - The current ID of the Space Object
 * @param {String} newId - The new ID of the Space Object
 * @return {boolean} flag - true if changed, otherwise false. Note, it cannot be changed into an existing ID
 */

function cvjs_changeSpaceObjectID(currentId, newId){
	
	// check if path is correct otherwise return,
	if (false)return false; 

	//check if ID and Name are unique, otherwise return
	for (i=0; i<vqRooms.lenght; i++){
		if (vqRooms[cvjs_active_floorplan_div_nr][i].data("id") == newId) return false;
	}
	
	var room = findFixture(currentId);				
	
	if (room == -1) return false;

	vqRooms[cvjs_active_floorplan_div_nr][room].data("id", newId);

	// update the jquery modal is needed
	jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip('destroy');

	var htitle = "<table width=\"100%\"><tr><td class=\"cvjs_modal_header_1\" onclick=\"cvjs_popupTitleClick(\'"+vqRooms[cvjs_active_floorplan_div_nr][room].data("id")+"\');\">"+vqRooms[cvjs_active_floorplan_div_nr][room].data("name")+"</td>"+
		"<td class=\"cvjs_modal_header_info_1\" onclick=\"hideOnlyPop("+room+");\"><i class=\"fa fa-times\"></i></td></tr>"+
		"<tr><td cols=\"2\"><h4 id=\"cvjs_modal_header_info_2\">"+vqRooms[cvjs_active_floorplan_div_nr][room].data("type")+"</h4></td></tr></table>";

	if (dual_hbody_flag){
		if ( parseInt(vqRooms[cvjs_active_floorplan_div_nr][room].data("id")) >=-1){
			jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
				style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
				position: {my: 'bottom center', at: 'top left'},
				hideOnHTMLClick: 'false'});
		}else{
			jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody_2, title: htitle},
				style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
				position: {my: 'bottom center', at: 'top left'},
				hideOnHTMLClick: 'false'});
		}
	}

	if (!dual_hbody_flag){
			jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
				style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
				position: {my: 'bottom center', at: 'top left'},
				hideOnHTMLClick: 'false'});
	}
		
	return true;
}


// 6.2.55
var selected_current_jsonStrucure;

function CADViewer_floorplan_methods_newVersion(){
		
	selected_current_jsonStrucure = cvjs_returnSpaceObjectClicked();

	// expose the Layer to the modal
	jQuery("#cvjs_spaceobjectchangeLayerFromModal").val(selected_current_jsonStrucure.layer);	
	// expose the ID to the modal
	jQuery("#cvjs_spaceobjectchangeIdFromModal").val(selected_current_jsonStrucure.id);	
	// expose the Space Type to the Modal
	jQuery("#cvjs_spaceobjectchangeTypeFromModal").val(selected_current_jsonStrucure.type);	
			
}


// 6.2.57

var elementOriginalColor = "";
var elementOriginalFill = "";
var elementOriginalStroke = "";
var elementOriginalStrokeWidth = "";
var elementOriginalTag = "";
var elementOriginalFillOpacity = "";
var elementOriginalOpacity = "";

var myOverColor = "#F00";
var myOverStroke = "#F00";
var myOverStrokeWidth = 6;  // match against minwidth in ax svg
var myOverStrokeWidthFactor = 4;  // match against minwidth in ax svg
var myOverFill = "#F00";
var myFillOpacity = 0.2;
var myOpacity = 1.0;
var cvjs_handleToolTip = true;


/**
 * Control the highlight of AutoCAD Handle tagged geometrical objects
 * @param {string} hexColor - Color of the hightlight in Hex, for example red is: #F00
 * @param {float} lineWeightFactor - factor to increase or decrease line weights, 1.0 is current line weight
 * @param {float} opacity - opacity of hexColor - 1.0 is default.
 * @param {boolean} tooltip - flag for tooltip, true tooltip, false none
 * @param {String} id - id of space Object, generic pass through
 * @param {String} handle - handle of space Object, generic pass through
 */

function cvjs_mouseenter_handleObjectStyles(hexColor, lineWeightFactor, opacity, tooltip, id, handle){
	
	
	cvjs_handleToolTip = tooltip;

	
	if (hexColor.indexOf('#')<0){
		hexColor = "#"+hexColor;
	}
	
if (cvjs_debug)	console.log("mouseenter "+id+"  "+handle+"  "+hexColor);
	
	elementOriginalColor = jQuery("#"+id).css("color");
	elementOriginalStrokeWidth = jQuery("#"+id).css("stroke-width");
	elementOriginalStroke = jQuery("#"+id).css("stroke");
	elementOriginalFill = jQuery("#"+id).css("fill");
	elementOriginalFillOpacity = jQuery("#"+id).css("fill-opacity");
	elementOriginalOpacity = jQuery("#"+id).css("opacity");

	elementOriginalTag = jQuery("#"+id).get(0).tagName

	var strokewidth = elementOriginalStrokeWidth;
	
	if (strokewidth.indexOf("px")>0) {
		strokewidth = strokewidth.substring(0, strokewidth.indexOf("px"));
	}
	strokewidth = parseFloat(strokewidth)*lineWeightFactor;

//	console.log("  strokewidth"+strokewidth+"  myOverStrokeWidthFactor "+myOverStrokeWidthFactor+"  elementOriginalStrokeWidth "+elementOriginalStrokeWidth);	
//	console.log("mouseenter "+id+"  "+handle+"  "+elementOriginalTag);	
//	console.log(elementOriginalColor + "  "+myOverColor+"  "+elementOriginalStroke+" "+elementOriginalFill);
		
	if (elementOriginalTag == "text"){
		jQuery("#"+id).css({"fill" : hexColor});
	}
	else if (elementOriginalTag == "circle") {
		jQuery("#"+id).css({"color" : hexColor});
		jQuery("#"+id).css({"stroke" : hexColor});
		jQuery("#"+id).css({"stroke-width" : strokewidth});
//		jQuery("#"+id).css({"fill" : myOverFill});
		jQuery("#"+id).css({"fill-opacity" : myFillOpacity});
	}
	else{
		jQuery("#"+id).css({"color" : hexColor});
		jQuery("#"+id).css({"stroke" : hexColor});
		jQuery("#"+id).css({"stroke-width" : strokewidth});
	}	
	jQuery("#"+id).css({"opacity" : myOpacity});


	/*  tip is handled inside the click handler declated at load */

}


/**
 * Reset the highlight from a AutoCAD Handle tagged geometrical objects on mouse leave
 * @param {String} id - id of space Object, generic pass through
 * @param {String} handle - handle of space Object, generic pass through
 */

function cvjs_mouseout_handleObjectStyles(id, handle){

	console.log("mouseout "+id+"  "+handle);
	
	if (elementOriginalTag == "text"){
		jQuery("#"+id).css({"fill" : elementOriginalFill});
	}
	else if (elementOriginalTag == "circle") {
		jQuery("#"+id).css({"color" : elementOriginalColor});
		jQuery("#"+id).css({"stroke-width" : elementOriginalStrokeWidth});
		jQuery("#"+id).css({"stroke" : elementOriginalStroke});
//		jQuery("#"+id).css({"fill" : elementOriginalFill});
		jQuery("#"+id).css({"fill-opacity" : elementOriginalFillOpacity});
	}
	else{  // assume path
		jQuery("#"+id).css({"color" : elementOriginalColor});
		jQuery("#"+id).css({"stroke-width" : elementOriginalStrokeWidth});
		jQuery("#"+id).css({"stroke" : elementOriginalStroke});
	}
	jQuery("#"+id).css({"opacity" : elementOriginalOpacity});

}





// 6.2.62 - the spacehighlight layer used for all highlight operations
// NOTE: in layer on/off modal, then the cv_spacehighlight_xxxxx should be  

var	cvjs_spacesSpecificHighlightLayer; 

/**
 * Highlights a Space Object with a given style on a given external layer
 * @param {string} Id - Id of the Space Object to highlight
 * @param {object} roomstyle - JSON formattet object containg the styling of the SpaceObject
 */
function cvjs_highlightSpace(rmid, roomstyle)
{
	var rm = findFixture(rmid);
	
	if (rm == -1) return -1;
	if (rm >= 0 )
		{
			lastObj[cvjs_active_floorplan_div_nr] = rm;
			var strRoom;
			if (jQuery("#cv_spacehighlight_"+rmid).attr('id') == undefined){
				// split the object to find path or circle
				console.log("undefined");
				try{
					strRoom = vqRooms[cvjs_active_floorplan_div_nr][rm].toString();
					if (strRoom.indexOf("path")>0 || strRoom.indexOf("circle")>0 ){
						//window.alert("we got path");
					}
					else{
						strRoom = (vqRooms[cvjs_active_floorplan_div_nr][rm].attr()).toString();
						//window.alert("2");
					}

				}catch (exception) {
					strRoom = (vqRooms[cvjs_active_floorplan_div_nr][rm].attr()).toString();
						//window.alert("3");
				}

				// find the path
				var path1 ="";
				var path_flag = true;
				var cx =0;
				var cy =0;
				var r =0;
				
				if (strRoom.indexOf("path")>-1){
					path_flag = true;
					var pos1 = strRoom.indexOf(" d=");
					var pathStr1 = strRoom.substring(pos1+4);
					//console.log(pathStr1);
					var pos1A = pathStr1.indexOf("\" ");
					path1 = pathStr1.substring(0, pos1A);
				}
		//console.log("path1 "+path1);
				if (strRoom.indexOf("circle")>-1){
					path_flag = false;

					var p_cx = strRoom.indexOf(" cx=");
					var s1_cx = strRoom.substring(p_cx+5);
					var p2_cx = s1_cx.indexOf("\"");
					cx = s1_cx.substring(0, p2_cx)

					var p_cy = strRoom.indexOf(" cy=");
					var s1_cy = strRoom.substring(p_cy+5);
					var p2_cy = s1_cy.indexOf("\"");
					cy = s1_cy.substring(0, p2_cy)


					var p_r = strRoom.indexOf(" r=");
					var s1_r = strRoom.substring(p_r+4);
					var p2_r = s1_r.indexOf("\"");
					r = s1_r.substring(0, p2_r)
				}
						
				console.log("creation "+JSON.stringify(roomstyle)+"  "+rmid);		
						
				if (path_flag){
					cvjs_spacesSpecificHighlightLayer.path(path1).attr(roomstyle).attr({'id': 'cv_spacehighlight_'+rmid });
				}
				else{
					cvjs_spacesSpecificHighlightLayer.circle(cx,cy,r,r).attr(roomstyle).attr({'id': 'cv_spacehighlight_'+rmid });
				}
			}
			else{   // the space exists, we change the style
				console.log("change "+JSON.stringify(roomstyle)+"  "+"#cv_spacehighlight_"+rmid);		
				jQuery("#cv_spacehighlight_"+rmid).css(roomstyle);
			}


			try{
				layer_vqrooms[cvjs_active_floorplan_div_nr].prepend(cvjs_spacesSpecificHighlightLayer);
			}
			catch (err){
				var iii = 0;
			}

			return 1;
		}

	return -1;
}


var cvjsRoomPolygonBaseHighlightAttributes = {
		fill: '#FFF',   // #FFF   #ffd7f4
		'fill-opacity' : 0.1,   // 0.1
		stroke: '#FFF',  
		'stroke-width' : 0.01,
		'stroke-opacity' : 1,
		'stroke-linejoin': 'round',
	};


/**
 * Clears and initialize the general Space Layer for highlights
 * @return {none}
 */
 
function cvjs_clearSpaceLayer(){

	try{
		cvjs_spacesSpecificHighlightLayer.remove();
		cvjs_spacesSpecificHighlightLayer = cvjs_rPaper[cvjs_active_floorplan_div_nr].g();
	}
		catch(err){
		cvjs_spacesSpecificHighlightLayer = cvjs_rPaper[cvjs_active_floorplan_div_nr].g();
	}
	
	// here we have to initialize with a default styleset
	var spaceObjectIds = cvjs_getSpaceObjectIdList();
	for (spc in spaceObjectIds){
		cvjs_highlightSpace(spaceObjectIds[spc], cvjsRoomPolygonBaseHighlightAttributes);
	}
	
	cvjs_customLayerContentAdded = false;	
}



/**
 * Apply a predefined pattern on a graphical Space Object
 * @param {string} rmid - Id of the Space Object object to add hatches
 * @param {string} graphicalPattern - name of the hatch pattern, from a predefined list of patterns:
 *  	"pattern_45degree_standard"
 *		"pattern_45degree_fine"
 *		"pattern_45degree_wide"
 *		"pattern_90degree_standard"
 *		"pattern_90degree_fine"
 *		"pattern_90degree_wide"
 *		"pattern_135degree_standard"
 *		"pattern_135degree_fine"
 *		"pattern_135degree_wide"
 *		"pattern_0degree_standard"
 *		"pattern_0degree_fine"
 *		"pattern_0degree_wide"
 *		"pattern_45degree_crosshatch_standard"
 *		"pattern_45degree_crosshatch_fine"
 * @param {string} colorHex - color of hatch in hex form, for example: #FF0000
 * @param {float} fillOpacity - fill opacity of pattern, value between 0 and 1
 */

function cvjs_hatchSpace(rmid, graphicalPattern, colorHex, fillOpacity){

try{

	var rm = findFixture(rmid);	
	if (rm == -1) return -1;
	

	var strRoom = vqRooms[cvjs_active_floorplan_div_nr][rm].toString();

	console.log(rmid+" "+strRoom+"XXX");
		
	var path1;
	var path_flag = true;
	var cx;
	var cy;
	var r;

	if (strRoom.indexOf("path")>-1){
		path_flag = true;
		var pos1 = strRoom.indexOf(" d=");
		var pathStr1 = strRoom.substring(pos1+4);
		//console.log(pathStr1);
		var pos1A = pathStr1.indexOf("\" ");
		path1 = pathStr1.substring(0, pos1A);
	}

	if (strRoom.indexOf("circle")>-1){
		path_flag = false;

		var p_cx = strRoom.indexOf(" cx=");
		var s1_cx = strRoom.substring(p_cx+5);
		var p2_cx = s1_cx.indexOf("\"");
		cx = s1_cx.substring(0, p2_cx)

		var p_cy = strRoom.indexOf(" cy=");
		var s1_cy = strRoom.substring(p_cy+5);
		var p2_cy = s1_cy.indexOf("\"");
		cy = s1_cy.substring(0, p2_cy)


		var p_r = strRoom.indexOf(" r=");
		var s1_r = strRoom.substring(p_r+4);
		var p2_r = s1_r.indexOf("\"");
		r = s1_r.substring(0, p2_r)
	}


	if (graphicalPattern=="pattern_45degree_standard" || graphicalPattern=="pattern_45degree_fine" || graphicalPattern=="pattern_45degree_wide" ||
		graphicalPattern=="pattern_90degree_standard" || graphicalPattern=="pattern_90degree_fine" || graphicalPattern=="pattern_90degree_wide" ||
		graphicalPattern=="pattern_135degree_standard" || graphicalPattern=="pattern_135degree_fine" || graphicalPattern=="pattern_135degree_wide" ||
		graphicalPattern=="pattern_0degree_standard" || graphicalPattern=="pattern_0degree_fine" || graphicalPattern=="pattern_0degree_wide" ||
		graphicalPattern=="pattern_45degree_crosshatch_standard" || graphicalPattern=="pattern_45degree_crosshatch_fine"
		){ // OK
		} else return;

	var pattern;

//	console.log(graphicalPattern);

	if (graphicalPattern=="pattern_45degree_standard"){
		cvjs_setUpPattern_45degree_standard(colorHex, "1.0");
		pattern = pattern_45degree_standard;
	}
	if (graphicalPattern=="pattern_45degree_fine"){
		cvjs_setUpPattern_45degree_fine(colorHex, "1.0");
		pattern = pattern_45degree_standard;
	}
	if (graphicalPattern=="pattern_45degree_wide"){
		cvjs_setUpPattern_45degree_wide(colorHex, "1.0");
		pattern = pattern_45degree_standard;
	}

	if (graphicalPattern=="pattern_90degree_standard"){
		cvjs_setUpPattern_90degree_standard(colorHex, "1.0");
		pattern = pattern_90degree_standard;
	}
	if (graphicalPattern=="pattern_90degree_fine"){
		cvjs_setUpPattern_90degree_fine(colorHex, "1.0");
		pattern = pattern_90degree_standard;
	}
	if (graphicalPattern=="pattern_90degree_wide"){
		cvjs_setUpPattern_90degree_wide(colorHex, "1.0");
		pattern = pattern_90degree_standard;
	}

	if (graphicalPattern=="pattern_135degree_standard"){
		cvjs_setUpPattern_135degree_standard(colorHex, "1.0");
		pattern = pattern_135degree_standard;
	}

	if (graphicalPattern=="pattern_135degree_fine"){
		cvjs_setUpPattern_135degree_fine(colorHex, "1.0");
		pattern = pattern_135degree_standard;
	}

	if (graphicalPattern=="pattern_135degree_wide"){
		cvjs_setUpPattern_135degree_wide(colorHex, "1.0");
		pattern = pattern_135degree_standard;
	}

	if (graphicalPattern=="pattern_0degree_standard"){
		cvjs_setUpPattern_0degree_standard(colorHex, "1.0");
		pattern = pattern_0degree_standard;
	}

	if (graphicalPattern=="pattern_0degree_fine"){
		cvjs_setUpPattern_0degree_fine(colorHex, "1.0");
		pattern = pattern_0degree_standard;
	}

	if (graphicalPattern=="pattern_0degree_wide"){
		cvjs_setUpPattern_0degree_wide(colorHex, "1.0");
		pattern = pattern_0degree_standard;
	}

	if (graphicalPattern=="pattern_45degree_crosshatch_standard"){
		cvjs_setUpPattern_45degree_crosshatch_standard(colorHex, "1.0");
		pattern = pattern_45degree_crosshatch;
	}

	if (graphicalPattern=="pattern_45degree_crosshatch_fine"){
		cvjs_setUpPattern_45degree_crosshatch_fine(colorHex, "1.0");
		pattern = pattern_45degree_crosshatch;
	}
			
	if (jQuery("#cv_spacehighlight_"+rmid).attr('id') == undefined){	

	}else{
		jQuery('#cv_spacehighlight_'+rmid).remove();	
	}
	
	console.log("undefined, new entity "+pattern+"  "+path1);
	
	if (path_flag){
		cvjs_spacesSpecificHighlightLayer.path(path1).attr({'id': 'cv_spacehighlight_'+rmid }).attr({'fill': pattern, 'fill-opacity': fillOpacity, stroke: colorHex, 'stroke-opacity': fillOpacity });
	}
	else{
		cvjs_spacesSpecificHighlightLayer.circle(cx,cy,r,r).attr({'id': 'cv_spacehighlight_'+rmid }).attr({'fill': pattern, 'fill-opacity': fillOpacity, stroke: colorHex, 'stroke-opacity': fillOpacity });
	}
		
		
	try{
		layer_vqrooms[cvjs_active_floorplan_div_nr].prepend(cvjs_spacesSpecificHighlightLayer);
	}
	catch (err){
		var iii = 0;
	}
		
		
//	console.log("jquery css to object "+'#cv_spacehighlight_'+rmid+"  "+pattern+"  "+colorHex+" "+fillOpacity);
//	jQuery('#cv_spacehighlight_'+rmid).css({'fill': pattern, 'fill-opacity': fillOpacity, stroke: colorHex, 'stroke-opacity': fillOpacity });

}
catch(err){

	console.log(err);
}
}



/**
 * 
 * Clears all custom tooltips
 */

function cvjs_clearAllCustomTooltips(){

	cvjs_setCustomToolTip(true);
	var spaceObjectIds = cvjs_getSpaceObjectIdList();

	for (spc in spaceObjectIds)
	{
		var textString = new Array(spaceObjectIds[spc]);
//		if (cvjs_debug) console.log(textString+" ");
		cvjs_setCustomToolTipValue(spaceObjectIds[spc], textString);
	}
}


var mySpaceArray_currentSettingsObj = [];  // internal array for all current settings of object
var mySpaceArray_currentSettingsSpace = [];  // internal array for all current settings of object
var mySpaceArray_currentSettings_counter = 0;


/**
 * Remove a multiselected object and return the original style of that object
 * @param {string} rmid - Id of the Space Object object to add hatches
 * @param {Object} _mySpaceArray - custom array for multiselected spaces
 * @return {Object} attributesObject - object containing all styles in the selected object
 */

function cvjs_removeSelectedAndReturnOriginalStyle(rmid, _mySpaceArray){
	try{
		var attributesObject;
		for (j=0; j<_mySpaceArray.length; j++ ){
		console.log(_mySpaceArray[j]+" remove return loop "+ rmid+" ");
		  if (_mySpaceArray[j] == rmid){			
			for (k=0; k<mySpaceArray_currentSettingsObj.length; k++ ){
		
//		console.log(mySpaceArray_currentSettingsSpace[k]+" mySpaceArray_currentSettingsSpace["+k+"] "+ rmid+" ");

				if (mySpaceArray_currentSettingsSpace[k] == rmid){
					
//					console.log("before attributes object ")
					
					attributesObject = mySpaceArray_currentSettingsObj[k];
//					console.log("removing inner"+attributesObject);
					var removed1 = mySpaceArray_currentSettingsObj.splice(k, 1) 			
					var removed1 = mySpaceArray_currentSettingsSpace.splice(k, 1) 			
				}
			}		
			
			var removed = _mySpaceArray.splice(j, 1) 			
//			console.log("removing "+j+" "+removed);
			return attributesObject;	
		  }	
		}
		
		return null;	
	}catch(err){console.log(err);}
}


/**
 * Checks is a given space already has been selected
 * @param {string} rmid - Id of the Space Object object to add hatches
 * @return {boolean} selected - true if selected, false otherwise
 */
function cvjs_isSpaceMultipleSelected(rmid){
	var selected = false;
	for (j=0; j<mySpaceArray.length; j++ ){
	  if (mySpaceArray[j] == rmid){	
		selected = true;
	  }	
	}
	return selected;	
}


/**
 * If an object has been selected, then add it to the list of Original Styles
 * @param {string} rmid - Id of the Space Object object to add hatches
 * @return {boolean} selected - true if selected, false otherwise
 */

function cvjs_addSelectedToOriginalStyles(rmid){
	  // we set up an array with the current space object style settings
	var obj = {};
	var fill_v;
	var stroke_v;
	var strokeflag= false;
	var fillflag= false;
	jQuery("#cv_spacehighlight_"+rmid).each(function() {
	  jQuery.each(this.attributes, function() {
		// this.attributes is not a plain object, but an array
		// of attribute nodes, which contain both the name and value
		if( this.specified) {
			console.log("name="+this.name +"  val="+ this.value);
			if (this.name == "fill"){
					fill_v = this.value;		
					fillflag = true;
			}
			
			if (this.name == "stroke" ){
					stroke_v = this.value;		
					strokeflag = true;
			}		
			//console.log(strokeflag+"  "+fillflag);
			
			if (this.name == "style"){
				var styleStr = this.value;
				console.log("1 style "+styleStr);
				//styleStr = StyleStr.toString();
				//console.log("style "+StyleStr);
				var res = styleStr.toString().split(";");
				//console.log("split length "+res.length);
				for (var i=0; i<res.length; i++){
					var style_res = res[i].split(":");
					//console.log("loop split length "+style_res.length);
					var vv = style_res[0].trim(); 
					var rres = "";
					try{
						rres = style_res[1].trim();
						obj[vv] = rres;
						//console.log("XX"+rres+"XX");
						if (vv == "stroke" ) strokeflag = false;
						if (vv == "fill" ) fillflag = false;						
					}catch(err){console.log("no style value");}
				}
				// do parse style
			}

		}
		
	  });
	});

	console.log(strokeflag+"  "+fillflag+"  "+stroke_v);	
	if (strokeflag) obj["stroke"] = stroke_v;
	if (fillflag) obj["fill"] = fill_v;
	
	
//	console.log("all done");


	mySpaceArray_currentSettingsObj[mySpaceArray_currentSettings_counter] = obj;  
	mySpaceArray_currentSettingsSpace[mySpaceArray_currentSettings_counter] = rmid; 
	mySpaceArray_currentSettings_counter++;



}

var cvjs_multiSelect = false;


/**
 * Initialize multi-select
 */

function cvjs_initMultiSelect(){
	mySpaceArray_currentSettingsObj = [];  
	mySpaceArray_currentSettingsSpace = []; 
	mySpaceArray_currentSettings_counter = 0;
	cvjs_multiSelect = true;
}

/**
 * Exit multi-select
 */

function cvjs_exitMultiSelect(){
	cvjs_multiSelect = false;
}




/*     FOR JS DOC ONLY                                                                              * / 



/**
 * Callback method from CADViewer which application programmers can use to interface their own applications
 * @param {float} cvjs_currentMeasurementLength - measured length in current measurement operation
 * @param {float} cvjs_currentMeasurementArea - measureed area in current measurement operation, if any
 * @param {String} cvjs_units - the units of the current measurement operation
 * /

function cvjs_measurementCallback(cvjs_currentMeasurementLength, cvjs_currentMeasurementArea, cvjs_units){

	console.log("Measurement callback - Length: "+cvjs_currentMeasurementLength+"  Area: "+cvjs_currentMeasurementArea+" Unit: "+cvjs_units);

}

/**
 * Callback method from CADViewer when an AutoCAD handle object has been clicked
 * @param {String} id - the ID of the object, this ID can be used to reference the object using jQuery
 * @param {String} handle - the AutoCAD handle of the object, this is an unique ID for each geometrical unit in the drawing, 
 * @param {String} entity - the entity associated with the Handle, including the AutoCAD AcDb prefix to entities
 * /

function cvjs_click(id, handle, entity){

	console.log("click "+id+"  "+handle);
	// removing AcDb in entity name
	window.alert("We have clicked an entity: "+entity.substring(4)+"\r\nThe AutoCAD Handle id: "+handle+"\r\nThe svg id is: "+id);
}

/**
 * Callback method from CADViewer when an AutoCAD handle object has been double clicked
 * @param {String} id - the ID of the object, this ID can be used to reference the object using jQuery
 * @param {String} handle - the AutoCAD handle of the object, this is an unique ID for each geometrical unit in the drawing, 
 * @param {String} entity - the entity associated with the Handle, including the AutoCAD AcDb prefix to entities
 * /

function cvjs_dblclick(id, handle, entity){

	console.log("click "+id+"  "+handle);
	window.alert("We have double clicked entity with AutoCAD Handle: "+handle+"\r\nThe svg id is: "+id);
}


/**
 * Callback method from CADViewer when mouse out on an AutoCAD handle object
 * @param {String} id - the ID of the object, this ID can be used to reference the object using jQuery
 * @param {String} handle - the AutoCAD handle of the object, this is an unique ID for each geometrical unit in the drawing, 
 * @param {String} entity - the entity associated with the Handle, including the AutoCAD AcDb prefix to entities
 * /

function cvjs_mouseout(id, handle, entity){
	cvjs_mouseout_handleObjectStyles(id, handle);
	
}


/**
 * Callback method from CADViewer when mouse over on an AutoCAD handle object
 * @param {String} id - the ID of the object, this ID can be used to reference the object using jQuery
 * @param {String} handle - the AutoCAD handle of the object, this is an unique ID for each geometrical unit in the drawing, 
 * @param {String} entity - the entity associated with the Handle, including the AutoCAD AcDb prefix to entities
 * /

function cvjs_mouseover(id, handle, entity){

	console.log("mouseover "+id+"  "+handle+"  "+jQuery("#"+id).css("color"))
	//cvjs_mouseover_handleObjectPopUp(id, handle);	
}

/**
 * Callback method from CADViewer when mouse leave on an AutoCAD handle object
 * @param {String} id - the ID of the object, this ID can be used to reference the object using jQuery
 * @param {String} handle - the AutoCAD handle of the object, this is an unique ID for each geometrical unit in the drawing, 
 * @param {String} entity - the entity associated with the Handle, including the AutoCAD AcDb prefix to entities
 * /

function cvjs_mouseleave(id, handle, entity){

	console.log("mouseleave "+id+"  "+handle+"  "+jQuery("#"+id).css("color"));
}


/**
 * Callback method from CADViewer when mouse enter on an AutoCAD handle object
 * @param {String} id - the ID of the object, this ID can be used to reference the object using jQuery
 * @param {String} handle - the AutoCAD handle of the object, this is an unique ID for each geometrical unit in the drawing, 
 * @param {String} entity - the entity associated with the Handle, including the AutoCAD AcDb prefix to entities
 * /

function cvjs_mouseenter(id, handle, entity){

	cvjs_mouseenter_handleObjectStyles("#F00", 10.0, 1.0, true, id, handle);
	
}


/**
 * Callback method from CADViewer when when the drawing has been fully loaded
 * Users use this to do DB calls, set up arrays, etc.
 * /

function cvjs_OnLoadEnd(){

}

/**
 * Callback method from CADViewer when when Redlines has been fully loaded
 * Users use this to do processing of users, etc.
 * /

function cvjs_OnLoadEndRedlines(){

}

/*     FOR JS DOC ONLY                                                                              */





