//		version v6.01.04e	Mar 14	:  	Change structure to Community version and Pro/Enterprise version
//									: 	cvjs_topIconMenuXML_location and cvjs_setTopMenuXML( 
//									: 	flag for Community_Version
//		version v6.01.05a	Mar 14	:  	Refactoring into Community and Pro
//		version v6.01.05b-f	Mar 15	:  	Refactoring into Community and Pro
//		version v6.01.05g-l	Mar 16	:  	Refactoring into Community and Pro
//		version v6.01.07a	Mar 16	:  	Refactoring into Community and Pro
//		version v6.01.07b	Mar 17	:  	bitmap support through AX2020
//		version v6.01.07c	Mar 18	:  	LibreCAD support through call-Api_Conversion.php
//		version v6.01.07d	Mar 18	:  	20 custom commands added + icons
//		version v6.01.07e	Mar 19	:  	WebkitFilter: 'brightness(90%) invert(0)  blur(0px)'
//		version v6.01.07f	Mar 19	:  	adding layer_base_name, xref_file to LayerList parsing
//		version v6.01.07g-j	Mar 20	:  	cvjs_LayerList added xref handling
//		version v6.01.07k	Mar 21	:  	cvjs_LayerListModalXrefOnChange
//		version v6.01.08a-b	Mar 21	:  	cvjs_LayerListModalXrefOnChange, cvjs_LayerListClick(id, locator), clean out members
//		version v6.01.08c	Mar 23	:  	js-doc optimization
//		version v6.01.08d	Mar 29	:  	Angular loading of icons
//		version v6.01.08e	Apr 01	:  	Print control Icons, cvjs_setPrintModalCustomCheckBox(), cvjs_jsonLocation
//		version v6.01.08f	Apr 02	:  	Add PDF as input format to converter
//		version v6.01.08g	Apr 06-08	:  	Layer Modal
//		version v6.01.08h	Apr 08-09	:  	Layer Modal
//		version v6.01.09a	Apr 10	:  	cvjs_InitCADViewer
//		version v6.01.09b	Apr 11	:  	cvjs_InitCADViewer
//		version v6.01.09c-d	Apr 12	:  	NodeJS server
//		version v6.01.09e	Apr 14	:  	Space Objects
//		version v6.01.09f	Apr 14	:  	XrefFileList
//		version v6.01.09g-h	Apr 21	:   cvjs_customPrintCheckboxMode
//		version v6.01.09i 	Apr 23	:   cvjs_customPrintCheckboxMode
//		version v6.01.09j 	Apr 23	:   pro
//		version v6.01.14 	Apr 25	:   json variables substitution 
//		version v6.01.15 	Apr 25	:   Image Space Objects
//		version v6.01.16 	Apr 28	:   json variables substitution, server file loading, dual textbox
//		version v6.01.17 	Apr 29	:   dgn workspace file load and setting in converter
//      version v6.01.18    May  6  :   cvjs_serverUploadController = 'upload_2.php'  , generic coding
//      version v6.01.19    May  7  :   upload modal, TIFF + setup
//      version v6.01.20    May  12 :   remove -last pre-set if -layout is used for pagechange
//      version v6.01.21    May  13 :   print as pdf based on AX2020
//      version v6.01.21    May  13 :   pro - cvjs_addSingleSpaceObject()
//      version v6.01.22    May  14 -15 : print modal  - control of ax2020 for paper sizes and open in window, adding of download button, using original name.
//      version v6.01.24    May  15 :   controls for pdf conversions 
//      version v6.01.25    May  16 :   Command to supress edit command in file modal. cvjs_setFileModalEditMode,   addFloorPlan.png -> addDrawing.png
//      version v6.01.26    May  16 :   rewrote: if (cvjs_serverSavePrintModeController == 3 || cvjs_serverSavePrintModeController == 4 || cvjs_serverSavePrintModeController == 5 )
//      version v6.01.27-29 May  17 :   XML parser Print Modal, cvjs_paperSize based on XML PaperSizes/MenuItems input
//      version v6.01.29    May  18 :   fileName_0, change to printmodals setttings.  cvjs_PrintModal_PrintToScale control for modal height
//      version v6.01.30    May  19-22 :   cvjs_maxfiles, generic incrementation, set to 200, AX version number added to Information modal
//      version v6.01.31    May  23 :   cvjs_printPaperSizeasSVGObjectFlag, controls for SVG based printing with paper sizes in @print media
//      version v6.01.32    May  24 :   cvjs_directDownloadStickyNotesRedlines(), cvjs_directUploadStickyNotesRedlines(floorplan_div) 
//      version v6.01.33    May  25 :   print controls, cvjs_PrintModal_PrintToScale  = false , cvjs_PrintModal_PrintResolution = false
//      version v6.01.34    May  26 :   print controls, rewrite
//      version v6.01.35    May  26 :   cvjs_ObjectBoundingBoxScreenCoordinates
//      version v6.01.36    June  2 :   cvjs_setBackgroundColorHex("none", floorplan_div); in LoadDrawing
//      version v6.01.37    June  3 :   move SpaceImageObjects
//										add vqNotes.date("defaultcolor", "undefined");
//      version v6.01.38    June  4 :   move SpaceImageObjects
//      version v6.01.39    June  5 :   cvjs_addSpaceObjectDirectXY
//      version v6.01.40    June  6 :   cvjs_highlightSpaceObjectDirect, 
//      version v6.01.41-47 June  7-10 : cvjs_highlightSpaceObjectDirect, .css('pointer-events', 'none');, cvjs_moveSpaceObjectDirectXY(),cvjs_modifySpaceObjectDirectXY
//      version v6.01.48    June  12-14 :  print frame controls 	cvjs_usePrintFrameOutputatZoom()
//      version v6.01.49    June  14 :  print frame controls 	cvjs_usePrintFrameOutputatZoom()
//      version v6.01.50    June  15 :  cvjs_Conversion_forPrint
//      version v6.01.51-55 June  16 :  
//      version v6.01.56-58 June  17 :  rewrite <body onload="window.print()"> to  jQuery(document).ready(function(){});
//      version v6.01.59    June  20 :  rewrite print modal for custom control of print modal
//      version v6.01.60    June  21 :  .xml  TextBox1Header, TextBox2Header
//      version v6.01.61    June  23 :  settings: multi-language
//      version v6.01.62    June  24-25 :  settings: multi-language, initialize modals rewrite
//      version v6.02.03    June  26 :  multi-language, initialize modals rewrite,  version update number for new feature
//      version v6.02.04    June  27 :  multi-language, initialize modals rewrite,  version update number for new feature
//      version v6.02.05    June  27 :  nname_custom, 
//      version v6.02.06    June  28 :  nname_custom
//      version v6.02.08    July 1   :  multilanguage updates
//      version v6.02.09    July 2   :  multilanguage updates, line width controls update
//      version v6.02.10-12    July 5-7   :  ZW modal control
//      version v6.02.14    July 10   :  dynamic resize of gMenu, interactive LineWidth settings modal
//      version v6.02.15    July 24   :  bug in vqRooms[cvjs_active_floorplan_div_nr][spc].data( 
//      version v6.02.16    July 24-27   :  // 6.02.16 - we overwrite to enable reload after crash	cvjs_loadInProgress = false;
//      version v6.02.17    July 29   :  block of tmsMinLineWidthPos in case of TIFF , printing. AX2020 update for cv_main_drawing
//      version v6.02.17    July 30   :  cvjs_printPaperSizeasSVGObject, redone for TIFF support
//      version v6.02.18    July 30- Aug 3   : Rewrote Measure Modal for points capture to clipboard +.xml +.css: cvjs_SelectLayerDrawings option[value="1"]'  
//      version v6.02.19    Aug 3-4    : JSON file support , cvjs_LoadDrawing(), merge-dwg-file.php
//      version v6.02.20    Aug 14     : removed debug statements
//      version v6.02.21    Aug 18     : Updated initialization paths settings for NodeJS  , "assets/cadviewer/app/""...., controls for angular
//      version v6.02.22    Aug 18     : cvjs_setPrintModal_PrintPDF
//      version v6.02.23    Aug 18     : Angular version
//      version v6.02.23    Aug 18     : Angular version  - changed all internal icon images to font awesome
//      version v6.02.24    Aug 19     : Angular version - update of FileLoad modal, with css changes to standard version also
//      version v6.02.25    Aug 19     : Save as SVG, cvjs_saveAsSVG(, remove redundant content in SVG
//      version v6.02.26    Aug 20     : Angular version
//      version v6.02.27    Aug 24     : prepared for JSDOc3 compilation
//      version v6.02.28    Aug 25     : capture SVG path in measurement, update language XML file. 
//      version v6.02.29    Aug 26     : expose cvjs_toggleBlackWhite, cvjs_highlightRoomImmediate()  , cvjs_supressSingleSpaceHighLight), multiselection OK
//      version v6.02.30    Aug 27     : cvjs_supressPopUpModalMode()
//      version v6.02.31    Aug 28     : updated, jsdoc for Zoom and Pan operations, zoomWindow, line weight in zoom window, made funcation of ZW
//                                     : updated line Weight Method to fetch .ZW minimum line width when on Angular
//                                     : disable drag on icon-menu to make stable,only allow for: vjs_changeNextIconPage_TopIconMenu
//                                     : move_cvjs_create_zoomwindow_rectangle, updated to allow for fast window drag
//      version v6.02.32    Aug 31     : Updated methods to set and manipulate layers in vqRoom[], methods to turn On/Off  vqRoom[] entities.
//									   : New methods for space layer handling: cvjs_allSpaceObjectsOn().....
//		version v6.02.33    Sep 2      : Added Black/White to PrintModal interface , 
//		version v6.02.34    Sep 4-8    : .cvjs_nodes, [id^=layer_]  set layer in vqnode , to process layers in spaces
//		version v6.02.35-6    Sep 9    : Handling of PDF page names
//		version v6.02.37    Sep 15     : getServerLocation(), getServerUrl(), for Angular
//		version v6.02.38-39    Sep 18-19  : Rewite to get rid of bootstrap button to upper right in all modals 
//		version v6.02.40    Sep 20       : rewritten gMenu  + cvjs-6.1.0.css , for zoom disk
//		version v6.02.41    Sep 21     : css cvjs_tool_tip, addFloorPlanTable
//		version v6.02.42    Sep 21     : menu navigation button previous page
//		version v6.02.43    Sep 22     : vqRoom handling, layers handling. 
//		version v6.02.44    Sep 23     : measurement_lineWidth_base -> 0.33
//		version v6.02.45    Sep 23     : rewriting cvjs_6.1.0.css so all class references are specific to CADViewer, fixed select xref button
//		version v6.02.46    Sep 23     : rewriting cvjs_6.1.0.css so all class references are specific to CADViewer
//		version v6.02.47    Sep 24     : Fixing qtip modals in change space methods, cvjs_changeSpaceObjectName / ID
//		version v6.02.48    Sep 24     : optimize for layerlist_05.css, loading_animation_2.css
//		version v6.02.49    Sep 24     : icons and menu-load for Angular case, cvjs_isAngular, flip get and post for loading, /assets/
//		version v6.02.50    Sep 24     : <modified> for div of Element in jsdocs
//		version v6.02.51    Sep 25     : blocking out  cvjs_handle, moving processing over to AX2020 and client side callback.
//		version v6.02.52    Sep 25     : cvjs_handle, dynamic settings of click handers
//		version v6.02.53    Sep 25     : cvjs_handle, clone click handlers, adjust stroke-width, for better capture of objects
//		version v6.02.54    Sep 26     : space objects, set layer and ID
//		version v6.02.55    Sep 27     : space objects, modify interface
//		version v6.02.56    Sep 28     : space objects, multilanguage
//		version v6.02.57    Sep 28     : control HANDLE highlight methods
//		version v6.02.58    Sep 28     : added tooltip
//		version v6.02.59    Sep 29     : added tooltip
//		version v6.02.60    Sep 29     : added layer creation to Space Objects 
//		version v6.02.61    Sep 30     : trial mode, fileload modal, set Edit = "", added entity to -hl callback , included call back method documentation
//		version v6.02.62    Oct 1      : zoom window on tiff files
//      version v6.02.63    Oct 2      : angularSvgLoad for svg load through server process
//      version v6.02.64    Oct 4      : updated:  cvjs_setCustomToolTipValue() , move
//      version v6.02.65    Oct 5      : Added multiselect processing internally to cadviewer_pro  class. 
//      version v6.02.66    Oct 6      : Servlet implementation


var cvjs_versionNumber = "CADViewer - v6.2.67";

var cvjs_AXversionNumber = "";
var cvjs_Community_Version = true;   // 

var cvjs_jsonLocation = "";

var cvjs_isAngular = false;   // 6.2.49


var printDebugFlag = false;
var cvjs_3Ddrawings = false;    // flag for 3D drawings, OpenDesign structure
var cvjs_NodeJSserver = false;

var cvjs_AngularFlag = false;

var cvjs_layerList_checkbox = false;

var cvjs_CompareFiles_CustomFileModalContent_flag = false;
var cvjs_CompareFiles_CustomFileModalContent = [];

var cvjs_directFileLoad = false;
var cvjs_directFileLoadPath = "";

var cvjs_mergeDXFDWG_downloadMode = false;
var demoonly_customHandleChange = false;

var cvjs_PrintIconDisabled = [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false];

var rest_serviceCall = false;
var rest_applicationPlatform = ""; 
var rest_applicationPlatformUsername = ""; 
var rest_applicationPlatformUserID = ""; 
var rest_ServiceToken = "";
var rest_leaveStreamOnServer = 0;

 
var cvjs_preConversionFileExtension = new Array();
var cvjs_preConversionFileName = new Array();

var cvjs_interactiveMethod_Active = [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false];
var cvjs_devMode = false;
var fileExtensionLower = "";
var cvjs_custom_print_to_pdf = false;
var cvjs_encodeURIcall_server = true;

var cvjs_currentFileFromJSTreeFolder = "";

var	cvjs_PrintModal_PrintPDF = false;
var	cvjs_PrintModal_PrintResolution  = false;
var	cvjs_PrintModal_PrintToScale = false;

var cvjs_print_to_pdf_windowRelativeSize = 0.4;
var cvjs_addedObjectsToExtents = false;

var cvjs_multipagePDFtoSVG_PhpLoadFlag = false;

var cvjs_bitmapFileNameIsServerPath_flag = false;
var cvjs_bitmapLoadFlag  = false;

var cvjs_last_FileName_PDF = "";

var cvjs_rPaper = new Array();
var cvjs_masterBackground = new Array();
var cvjs_active_floorplan_div_nr = 0;

var floorplans_divs_Initialized = ["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""];
var cvjs_loaddrawing_FileNamePath  = ["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""];

var cvjs_loadDrawing_conversionMode = false;
var cvjs_conversion_originatingFile = ["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""];
var cvjs_conversion_originatingFileNameNoExtension = ["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""];
var cvjs_conversion_originatingUsername = ["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""];
var cvjs_conversion_originatingPassword = ["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""];

var cvjs_loadInProgress = false;
var layers_all;

var multiPages = [{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
},{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
},{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
},{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
},{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
},{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
},{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
},{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
},{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
},{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
},{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
}];



var actualURX = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1];
var actualURY = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1];
var actualLLX = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1];
var actualLLY = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1];

var rpWidth = [100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100];
var rpHeight = [100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100];

var	viewBox = [{ X:0, Y:0, width: 100, height:100},{ X:0, Y:0, width: 100, height:100},{ X:0, Y:0, width: 100, height:100},{ X:0, Y:0, width: 100, height:100},{ X:0, Y:0, width: 100, height:100},{ X:0, Y:0, width: 100, height:100},{ X:0, Y:0, width: 100, height:100},{ X:0, Y:0, width: 100, height:100},{ X:0, Y:0, width: 100, height:100},{ X:0, Y:0, width: 100, height:100},{ X:0, Y:0, width: 100, height:100},{ X:0, Y:0, width: 100, height:100},{ X:0, Y:0, width: 100, height:100},{ X:0, Y:0, width: 100, height:100},{ X:0, Y:0, width: 100, height:100},{ X:0, Y:0, width: 100, height:100},{ X:0, Y:0, width: 100, height:100},{ X:0, Y:0, width: 100, height:100},{ X:0, Y:0, width: 100, height:100},{ X:0, Y:0, width: 100, height:100},{ X:0, Y:0, width: 100, height:100},{ X:0, Y:0, width: 100, height:100}];

var viewBoxWidth = [100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100];
var viewBoxHeight = [100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100];


var	viewBox_initX = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
var	viewBox_initY = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
var viewBoxWidth_init = [100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100];
var viewBoxHeight_init = [100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100];


var cvjs_fileLoadingFromSharePointServer = false;

var cvjs_debug_stickynotes = false;
var cvjs_drawingCoordinates = new Array();

var layerTable = ["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""];

var tip = new Array();   // placeholder for: = jQuery("#tip");


var cvjs_SVG_outputFormatInAXConversions = true;

var cvjs_collab_mode = false;
var cvjs_collabPresenter = false;

var cvjs_loadMultipleRedlinesStickyNotes = false;
var cvjs_stickyNotesRedlines = new Array();

var cvjs_ajaxPostStatus_thumbNails = false;

var cvjs_initMasterBackground = true;
var cvjs_printModal_content;
var cvjs_textSearchModal_content;
var cvjs_infoMessageModal_content;
var cvjs_redlineThicknessModal_content;
var cvjs_redlineColorModal_content;
var cvjs_publishPDFModal_content;
var cvjs_backgroundColorModal_content;
var cvjs_redlinetextModal_content;
var cvjs_lineThicknessModal_content;
var cvjs_calibrateModal_content;
var cvjs_birdseyeModal_content;
var cvjs_layerlistModal_content;
var cvjs_layerlistspaceModal_content;

var cvjs_pagechangeListModal_content;



var cvjs_collabStartModal_content;


var cvjs_PDFloadFlag = false;

var cvjs_currentLanguage = 0;   // default is English

var languageTable;

var    winHeight = 0,
    winWidth = 0,
    fpWidth = 0,
    isSmartPhoneOrTablet = /Android|webOS|iPhone|iPad|iPod|BlackBerry|Touch/i.test(navigator.userAgent),
    isWindowsNT = /Windows NT/i.test(navigator.userAgent),
	lastElem = null,
	lastStroke = null,
	lastStrokeWidth = null,
	mousex = 100,
	mousey = 100,
	lastLink = "",
	flip = 0,
	spaceId = -1,
	deltaX = 0,
	deltaY = 0,
	deltaXinit = 0,
	deltaYinit = 0,
	deltaBase = 1.0,
	deltaDynamic = 1.0,
	deltaDynamicPre = 1.0,
	zoomScale = 1.0,

	panWithThumb = false,

	dragMoveControl = true,
	
	cvjs_Url_click_control = 1,    // 1: for single click, 2: double click
	cvjs_Url_encapsulate_callback = false,  // encapsulate URl in callback method

	VqSetup = false,


	fileLoad_contentFormat = "JS",


	defaultColor = {
            fill: '#FFF',
            "fill-opacity": "0.1",
            stroke: '#CCC',
            'stroke-width': 1,
            'stroke-linejoin': 'round',
        },
	highlight = {
            fill: '#a4d7f4',
            "fill-opacity": "0.5",
            stroke: '#a4d7f4',
            'stroke-width': 3
        },
	selectColor = {
            fill: '#5BBEF6',
            "fill-opacity": "0.5",
            stroke: '#5BBEF6',
            'stroke-width': 3
        },
	    defaultColor_Hyperlinks = {
            fill: '#FFF',
            "fill-opacity": "0.1",
            stroke: '#FFF',
            'stroke-width': 3,
            'stroke-opacity': 0.01,
            'stroke-linejoin': 'round'
        },
	highlight_Hyperlinks = {

            fill: '#a4d7f4',
            "fill-opacity": "0.6",
            stroke: '#FFd7f4',
            'stroke-width': 3,
            'stroke-opacity': 0.6,
            'stroke-linejoin': 'round'
        },
	selectColor_Hyperlinks = {
            fill: '#FFBEF6',
            "fill-opacity": "0.6",
            stroke: '#FFd7f4',
            'stroke-width': 3,
            'stroke-opacity': 0.6,
            'stroke-linejoin': 'round'
        },

	defaultColor_Hyperlinks_blank = {
            fill: '#FFF',
            "fill-opacity": "0.1",
            stroke: '#FFF',
            'stroke-width': 3,
            'stroke-opacity': 0.01,
            'stroke-linejoin': 'round'
        },


    	defaultColor_StickyNotes = {
            fill: '#E7E7E7' //,
//            "fill-opacity": "0.5" //,
//            stroke: '#020202',
//            'stroke-width': 1,
//            'stroke-linejoin': 'round',
//            "stroke-opacity": "0.5"
        },
	highlight_StickyNotes = {
            fill: '#a4d7f4' //,
//            "fill-opacity": "0.5" //,
//            stroke: '#020202',
//            'stroke-width': 3,
//            "stroke-opacity": "0.5"
        },
	selectColor_StickyNotes = {
            fill: '#5BBEF6' //,
//            "fill-opacity": "0.7" //,
//            stroke: '#020202',
//            'stroke-width': 3,
//            "stroke-opacity": "0.7"
        },

	defaultColor_unlinked = {
			fill: '#ffff99',
			"fill-opacity": "0.3",
			stroke: '#ffff99',  //  #CCC
			'stroke-width': 1,
			'stroke-opacity': "0.1",
			'stroke-linejoin': 'round'
		},

	highlight_unlinked = {
			fill: '#ffff99',
			"fill-opacity": "0.5",
			stroke: '#ffff99',
			'stroke-width': 3,
			'stroke-opacity': "1"
		},

	selectColor_unlinked = {
			fill: '#ff9999',
			"fill-opacity": "0.5",
			stroke: '#ff9999',
			'stroke-width': 3,
			'stroke-opacity': "1"
		},

	defaultColor_linked = {
			fill: '#a4d7f4',
			"fill-opacity": "0.3",
			stroke: '#a4d7f4',  //  #CCC
			'stroke-width': 1,
			'stroke-opacity': "0.1",
			'stroke-linejoin': 'round'
		},

	highlight_linked = {
			fill: '#a4d7f4',
			"fill-opacity": "0.5",
			stroke: '#a4d7f4',
			'stroke-width': 3,
			'stroke-opacity': "1"
		},

	selectColor_linked = {   // fill: '#5BBEF6',
			fill: '#41A458',
			"fill-opacity": "0.5",
			stroke: '#41A458',
			'stroke-width': 3,
			'stroke-opacity': "1"
		};


	if (isWindowsNT) isSmartPhoneOrTablet = false;



var cvjs_FileNameNoExtension = "";


// FM general conversion variables
var cvjs_convertSpaceObject = false;
var cvjs_convertRoomLayer = "RM$";  // triSpaceLayer
var cvjs_convertTextLayer = "RM$TXT"; // 05_VMLDPTSPCNO



	// Layer list

	var cvjs_layerOptions = {
	  valueNames: [ 'selected',
	  				'layer',
	  				{ data: ['id'] },
	  				{ attr: 'href', name: 'link' },
	  				],
	  				item: '<li><h3_selected><a class="link selected">"+languageTable.languages[cvjs_currentLanguage].LayerListModal.Off+"</a><h3_selected><h3_selected><h3_list class="layer">Dummy Layer</h3_list></li>'
	};



var cvjs_layerOptionsSpace = {
  valueNames: [ 'selected',
				'text_room_layer',
				'layer',
				{ data: ['id'] },
				{ attr: 'href', name: 'link' },
				{ attr: 'href', name: 'link_text_room_l' },
				],
				item: '<li><h3_selected><a class="link selected">"+languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.+"</a><canvas width="10" height="10"></canvas><a class="link_text_room_l text_room_layer">None</a><h3_selected><h3_selected><h3_list class="layer">Dummy Layer</h3_list></li>'
};


var cvjs_printGrayscale = false;
var cvjs_printPdf = false;


var cvjs_measureArea = false;

var cvjs_measurementInteractiveType = 1;   // distance


var cvjs_layerValuesSpace;
var cvjs_layerList;
var cvjs_pagechangeList;
var cvjs_layerListSpace;

var cvjs_FourFilesInOne = true;

var cvjs_version_3_2_modal = true;



// 6.2.49

/**
 * Set Angular Mode  
 * @param {boolean} mode - set flag for Angular mode. Default is false
 */
function cvjs_setAngular(mode){

	cvjs_isAngular = mode;
	
}


// 4.1.03a 
/**
 * Set NodeJS Server flag  
 * @param {boolean} mode - set flag for nodejs handling. NodeJS server behaves differently for print, default false
 */
	function cvjs_setNodeJSserver(mode){

		cvjs_NodeJSserver = mode;
		
	}
		
	
/**
 * Load multipage PDF converter to SVG through php 
 * @param {flag} moade - loading converted SVG from PDF via php, default is false and direct load of svg 
 */
	function cvjs_multipagePDFtoSVG_PhpLoad(mode){

		cvjs_multipagePDFtoSVG_PhpLoadFlag= mode;
		
	}

/**
 * Sets the size of the print window as a relation of the screen between 0 and 1
 * @param {float} scale - the size of the print window as a relation of the screen between 0 and 1, default is 0.4
 */
	function cvjs_printToPdf_windowRelativeSize(scale){

		cvjs_print_to_pdf_windowRelativeSize = scale;
		
	}

	
	
	
	
/**
 * Sets file loading so that it done from a SharePoint Server
 * @param {boolean} mode - true to load files from sharepoint server, file names are then loaded through internal sharepoint REST calls, false is default standard server load of draiwngs 
 */
	function cvjs_fileLoadFromSharePointServer(mode){

		cvjs_fileLoadingFromSharePointServer = mode;
	}
	

/**
 * Sets the status of the drawing cvjs_masterbackground[cvjs_active_floorplan_div_nr]. If set to true, refreshed on reload, if false multiple drawings can be merged into canvas
 * @param {boolean} mode - true for standard load, false for overlay of drawings on concequitive loads.
 */
	function cvjs_setInitMasterBackgroundMode(mode){

		cvjs_initMasterBackground = mode;
	}


/**
 * Sets the loading of filetypes to be the old CADViewer type, in which each file consists of four separate files
 * @param {boolean} oldtype - true for oldtype, false for standard new type. Default is false.
 */
	function cvjs_setJSFileOldType(oldtype){

		cvjs_FourFilesInOne = !oldtype;
	}
	
	
var cvjs_convertHandleLayer = [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false];
		
var cvjs_floodfillSpaceIDLayerTable = [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false];
var layerlistspaceobject_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];
	

var cvjs_phpPath = "../php/";

var cvjs_serverHandlersPath = "../php/";    			// in standard case similar to php path
var cvjs_printObjectPath = "./temp_print/";			// temp file for print files
var cvjs_printObjectPathRelativeFlag = true;
var cvjs_printObjectPathAbsoluteUrl = "";			// temp file for print files, absolute Url
var cvjs_printObjectPathAbsoluteServer = "";		// temp file for print files, absolute Server Path


var	cvjs_serverSaveFileController = "save-file.php";		// name of server side save-file controller document
var cvjs_serverMergePHPFileController ="merge-pdfs.php";
var	cvjs_serverAppendFileController = "append-file.php"; // name of server side append-file controller document
var	cvjs_serverDeleteFileController = "delete-file.php"; // name of server side delete-file controller docoment
var	cvjs_serverCopyFileController = "copy-file.php"; // name of server side copy-file controller docoment

var	cvjs_serverListDirectoryController = "list-directory.php"; // name of server side file list controller docoment
var	cvjs_serverListDirectoryControllerRedlines = "list-directory-redlines.php"; // name of server side redline list controller document

var cvjs_serverLoadFileController = "load-file.php";

var cvjs_serverSaveFileControllerRedlines = "save-file.php";
var cvjs_serverLoadFileControllerRedlines = "load-file.php";
var cvjs_loadRedlinesFileControllerFlag = false;
var cvjs_loadFileControllerFlag = false;

var  cvjs_convertPDFConfigFile = "convert-pdf-files_config.php";
var	cvjs_serverPDFConverterController = "convert-pdf-files.php"; // name of server side delete-file controller docoment

var cvjs_getFileController = "getFile_09.php";

var	cvjs_serverPDFSplitController = "split-pdf-file.php"; // name of server side delete-file controller docoment
var cvjs_returnPDFparamsController = "return-pdf-convert-params.php";

var cvjs_customPDFprintController = "custom_print_to_pdf.php";

var cvjs_serverMergeDWGController = "merge-dwg-file.php";   
var cvjs_serverDownloadSharepointController = "download-sharepoint.php";

var cvjs_serverGetQRCodeController = "load-qr-code.php";  

var cvjs_serverUploadController = 'upload_2.php';



/**
 * Enables print Icon
 * @param {String} floorplan_div - name of Element in which CADViewer is running
 */
		
function cvjs_EnablePrintIcon(floorplan_div){


	if (floorplan_div == undefined){
		cvjs_active_floorplan_div_nr = 0;
		floorplan_div = floorplan_div_Array[0];
	}
	else{
		if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
				// do nothing
		}
		else{
			floorplan_div = floorplan_div + "_svg";
		}
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	}


	cvjs_PrintIconDisabled[cvjs_active_floorplan_div_nr] = false;
	
}	

	
/**
 * Disables print Icon
 * @param {String} floorplan_div - name of Element in which CADViewer is running
 */
		
function cvjs_DisablePrintIcon(floorplan_div){



	if (floorplan_div == undefined){
		cvjs_active_floorplan_div_nr = 0;
		floorplan_div = floorplan_div_Array[0];
	}
	else{
		if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
				// do nothing
		}
		else{
			floorplan_div = floorplan_div + "_svg";
		}
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	}


	cvjs_PrintIconDisabled[cvjs_active_floorplan_div_nr] = true;
	
}	
	
	
/**
 * Sets flag to control if call to server php for conversion shall be URI encoded or not. Default is true.
 * @param {boolean} flag - default is true. Set to true to custom implement this feature
 */

function cvjs_encodeURIcallToserver(flag){

	cvjs_encodeURIcall_server = flag;

}


	

/**
 * Sets flag to control if Print to PDF inside print modal shall be handled by custom controller. The name of controller is defined in: cvjs_setCustomPDFprintController()
 * @param {boolean} customPrintAsPDF - default is false. Set to true to custom implement this feature
 */

function cvjs_setCustomPDFprintControllerFlag(customPrintAsPDF){

	cvjs_custom_print_to_pdf  =  customPrintAsPDF;

}


/**
 * Sets the name of server side controller to custom control print as PDF inside print modal
 * @param {string} handlerName - name of the controller/handler document
 */

function cvjs_setCustomPDFprintController(handlerName){

	cvjs_customPDFprintController  =  handlerName;

}



var cvjs_setServerHandersPath_called = false;  // 3.2.01d
/**
 * Sets the location of the server side handers for load, save, append and print controls
 * @param {string} path - location of print handlers, in the standard case this in the "/php/" folder with redline and file controllers
 */

function cvjs_setServerHandlersPath(path){


	cvjs_setServerHandersPath_called = true;

	cvjs_serverHandlersPath = path;

	if (cvjs_serverHandlersPath.charAt(cvjs_serverHandlersPath.length - 1)!="/" )
		cvjs_serverHandlersPath += "/";
	
}



/**
 * Sets the location to the print objects
 * @param {string} path - location of print object relative to Controller, can also use absolute paths standard is "./temp_print/"
 */

function cvjs_setPrintObjectPath(path){

	cvjs_printObjectPath = path;

	if (cvjs_printObjectPath.charAt(cvjs_printObjectPath.length - 1)!="/" )
		cvjs_printObjectPath += "/";

	cvjs_printObjectPathRelativeFlag = true;

}

var cvjs_printObjectPathAbsolute_called = false;
/**
 * Sets the location to the print objects
 * @param {string} pathUrl - location of print objects, web path
 * @param {string} absolutePathServer - location of print objects, server side absolute path
 */

function cvjs_setPrintObjectPathAbsolute(pathUrl, absolutePathServer){

	cvjs_printObjectPathAbsolute_called = true;

	cvjs_printObjectPathAbsolute = pathUrl;

	if (cvjs_printObjectPathAbsolute.charAt(cvjs_printObjectPathAbsolute.length - 1)!="/" )
		cvjs_printObjectPathAbsolute += "/";


	cvjs_printObjectPathAbsoluteServer = absolutePathServer;

	if (cvjs_printObjectPathAbsoluteServer.charAt(cvjs_printObjectPathAbsoluteServer.length - 1)!="/" )
		cvjs_printObjectPathAbsoluteServer += "/";

	cvjs_printObjectPathRelativeFlag = false;

}



/**
 * Sets the name of server side controller to control PDF conversion
 * @param {string} handlerName - name of the controller/handler document
 */

function cvjs_setServerPDFConverterController(handlerName){

	cvjs_serverPDFConverterController  = handlerName;

}


/**
 * Sets the name of server side controller to load drawings after conversion
 * @param {string} handlerName - name of the controller/handler document
 */

function cvjs_setGetFileController(handlerName){

	cvjs_getFileController  = handlerName;

}



/**
 * Sets the name of server side controller to return path structure for PDF conversion
 * @param {string} handlerName - name of the controller/handler document
 */

function cvjs_setReturnPDFparamsController(handlerName){

	cvjs_returnPDFparamsController  = handlerName;

}


/**
 * Controls if Print to PDF feature is included in print Modal 
 * @param {boolean} printPDFflag - true is default, set to false to hide PrintAsPDF in Print Modal
 * @param {boolean} printAsPDF - false is default, true will set pdf print flag even if PrintAsPDF checkbox is invisible
 */

function cvjs_setPrintModal_PrintPDF(printPDFflag, printAsPDF){

	 cvjs_PrintModal_PrintPDF = printPDFflag;	 
	 cvjs_printPdf = printAsPDF;

}


var	 cvjs_PrintModal_printGreyScaleflag = true;

/**
 * Controls if GreyScale feature is included in print Modal 
 * @param {boolean} printGreyScaleflag - true is default, set to false to hide printGreyScaleflag in Print Modal
 */

function cvjs_setPrintModal_printGreyScaleflag(printGreyScaleflag){

	 cvjs_PrintModal_printGreyScaleflag = printGreyScaleflag;
	 
}





/**
 * Controls if Print to Scale feature is included in print Modal 
 * @param {boolean} printToScaleflag - true is default, set to false to hide PrintToScale in Print Modal
 */

function cvjs_setPrintModal_PrintToScale(printToScaleflag){

	 cvjs_PrintModal_PrintToScale = printToScaleflag;
	 
}



/**
 * Sets the name of server side save-file controller document
 * @param {string} handlerName - name of the controller/handler document
 */

function cvjs_setServerSaveFileHandler(handlerName){

	cvjs_serverSaveFileController  = handlerName;

}


/**
 * Sets the name of server side copy-file controller document
 * @param {string} handlerName - name of the controller/handler document
 */

function cvjs_setServerCopyFileHandler(handlerName){

	cvjs_serverCopyFileController = handlerName;

}


/**
 * Sets the name of server side directory list controller document
 * @param {string} handlerName - name of the controller/handler document
 */

function cvjs_setServerListDirectoryHandler(handlerName){

	cvjs_serverListDirectoryController  = handlerName;

}


/**
 * Sets the name of server side directory redlines list controller document
 * @param {string} handlerName - name of the controller/handler document
 */

function cvjs_setServerRedlinesListDirectoryHandler(handlerName){

	cvjs_serverListDirectoryControllerRedlines  = handlerName;

}


/**
 * Sets the name of server side append-file controller document
 * @param {string} handlerName - name of the controller/handler document
 */

function cvjs_setServerAppendFileHandler(handlerName){

	cvjs_serverAppendFileController  = handlerName;

}

/**
 * Sets the name of server side delete-file controller document
 * @param {string} handlerName - name of the controller/handler document
 */

function cvjs_setServerDeleteFileHandler(handlerName){

	cvjs_serverDeleteFileController  = handlerName;

}



/**
 * Sets the name of server side save-file controller document for print
 * @param {string} handlerName - name of the controller/handler document
 */

function cvjs_setServerSaveFileHandlerPrint(handlerName){

	cvjs_serverSaveFileController  = handlerName;

}

/**
 * Sets the name of server side append-file controller document for print
 * @param {string} handlerName - name of the controller/handler document
 */

function cvjs_setServerAppendFileHandlerPrint(handlerName){

	cvjs_serverAppendFileController  = handlerName;

}

/**
 * Sets the name of server side delete-file controller document for print
 * @param {string} handlerName - name of the controller/handler document
 */

function cvjs_setServerDeleteFileHandlerPrint(handlerName){

	cvjs_serverDeleteFileController  = handlerName;

}


/**
 * Sets the name of server side handler to custom control merged content sent as email
 * @param {string} handlerName - name of the controller/handler document
 */

function cvjs_setCustomMergedEmailHandler(handlerName){

	cvjs_serverSendPDFEmailController  =  handlerName;

}


/**
 * Sets the name of server side merge DWG controller document
 * @param {string} handlerName - name of the controller/handler document
 */

function cvjs_setServerMergeDWGHandler(handlerName){

	cvjs_serverMergeDWGController = handlerName;

}


/**
 * Sets the insertion location of QR Codes
 * @param {String} serverGetQRCodeController - controller name
 */

function cvjs_setServerGetQRCodeController(serverGetQRCodeController){

	cvjs_serverGetQRCodeController = serverGetQRCodeController;
	
}


/**
 * Sets the name of server side save-file controller document for redline save
 * @param {string} handlerName - name of the controller/handler document
 */

function cvjs_setServerSaveHandlerRedlines(handlerName){

	cvjs_serverSaveFileControllerRedlines  = handlerName;
		
}


/**
 * Sets the name of server side load-file controller document for redline load
 * @param {string} handlerName - name of the controller/handler document
 */

function cvjs_setServerLoadHandlerRedlines(handlerName){

	cvjs_serverLoadFileControllerRedlines  = handlerName;
	cvjs_loadRedlinesFileControllerFlag = true;
}



/**
 * Sets the name of server side load-file controller document for file list load
 * @param {string} handlerName - name of the controller/handler document
 */

function cvjs_setServerLoadHandler(handlerName){

	cvjs_serverLoadFileController  = handlerName;
	cvjs_loadFileControllerFlag = true;
}



var cvjs_phpUploadPath = "";
var externalServerPhpUpload = false;

/**
 * Sets the location to the php upload folder, this can be on a different domain
 * @param {string} Url - location of upload_2.php document
 */

function cvjs_setPhpUploadPath(path){

	cvjs_phpUploadPath = path;
	externalServerPhpUpload = true;
}


/**
 * Sets the location to the upload controller location, this can be on a different domain
 * @param {string} Url - location of upload controller
 */

function cvjs_setUploadControllerPath(path){

	cvjs_phpUploadPath = path;
	externalServerPhpUpload = true;
}

/**
 * Sets the name of server side upload controller document 
 * @param {string} handlerName - name of the controller/handler document
 */

function cvjs_setUploadHandler(handlerName){

	cvjs_serverUploadController  = handlerName;
}


/**
 * Sets the name of server side upload controller document 
 * @param {string} handlerName - name of the controller/handler document
 */

function cvjs_setUploadController(handlerName){

	cvjs_serverUploadController  = handlerName;
}



/**
 * Sets the location to the php folder
 * @param {string} path - current location of php scripts, typically ../php/
 */

function cvjs_setPhpPath(path){

	cvjs_phpPath = path;

	if (cvjs_phpPath.charAt(cvjs_phpPath.length - 1)!="/" )
		cvjs_phpPath += "/";

	if (cvjs_debug) console.log("NOTE cvjs_setPhpPath="+cvjs_phpPath);
}



var pagechange_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];


/**
 * Open the Page Change menu to select a page in a multipage drawing
  * @param {string} floorplan_div - name of div containing CADViewer canvas
*/
	function cvjs_PageChangeList(floorplan_div){
	
			if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
			cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;			
		
			
			// 3.0.15c   - add "_svg" to div, if called through external API
			if (cvjs_debug) console.log(floorplan_div.lastIndexOf("_svg")+"  "+(floorplan_div.length-4));
			if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
					// do nothing
			}
			else{
				floorplan_div = floorplan_div + "_svg";
			}
						
			
			
			//console.log("before List " + window.document.getElementsByClassName);
			cvjs_pagechangeList = new List('pagechangeList_'+floorplan_div, cvjs_layerOptions, cvjs_layerValues);

			
			for (i=0; i<multiPages[cvjs_active_floorplan_div_nr].multiPages; i++){

				var sLink = "javascript: cvjs_PageChangeListClick("+i+")";

				
				// 3.1.21d
				var myPageName = "";
				
				if (multiPages[cvjs_active_floorplan_div_nr].pages[i].pageName.indexOf("com.autodesk")>-1)
					myPageName = "Layout"
				else
					myPageName = multiPages[cvjs_active_floorplan_div_nr].pages[i].pageName;
					
				
				if (multiPages[cvjs_active_floorplan_div_nr].currentPage == (i+1)){
					cvjs_pagechangeList.add({
					  selected: languageTable.languages[cvjs_currentLanguage].PageChangeListModal.On,
					  link: sLink,
					  id: i,
					  layer: myPageName, //multiPages[cvjs_active_floorplan_div_nr].pages[i].pageName,
					});
				}
				else{
					
					cvjs_pagechangeList.add({
					  selected: languageTable.languages[cvjs_currentLanguage].PageChangeListModal.Off,
					  link: sLink,
					  id: i,
					  layer: myPageName, //multiPages[cvjs_active_floorplan_div_nr].pages[i].pageName,
					});
				}

//if (cvjs_debug) console.log(i+"  "+ layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName);
			}

			if (pagechange_offset_flag[cvjs_active_floorplan_div_nr]){
				pagechange_offset_flag[cvjs_active_floorplan_div_nr] = false;
				// 3.1.21j  .appendTo('body')
				jQuery("#pagechangeList_"+floorplan_div).css({position: "fixed"});
				jQuery("#pagechangeList_"+floorplan_div).offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});
			}
			jQuery("#pagechangeList_"+floorplan_div).show();
	}




	function cvjs_PageChangeListClick(id){
	
		for (i=0; i<multiPages[cvjs_active_floorplan_div_nr].multiPages; i++){
	
			var item = cvjs_pagechangeList.get('id', i)[0];
	
			if (id==i){
			
				item.values({
					selected: languageTable.languages[cvjs_currentLanguage].PageChangeListModal.On,
				  });			  
			}
			else{
				item.values({
					selected: languageTable.languages[cvjs_currentLanguage].PageChangeListModal.Off,
				  });
			}

		}
		
		// load drawing associated with id
		
		cvjs_changePageByNumber(floorplan_div_Array[cvjs_active_floorplan_div_nr], id+1)
		
	
	}

	
var layerlist_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];

/**
 * Open the Layer List menu for layer handling
  * @param {string} floorplan_div - name of div containing CADViewer canvas
*/
function cvjs_LayerList(floorplan_div){

		if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
		cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;

		
		// 3.0.15c   - add "_svg" to div, if called through external API
		if (cvjs_debug) console.log(floorplan_div.lastIndexOf("_svg")+"  "+(floorplan_div.length-4));
		if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
				// do nothing
		}
		else{
			floorplan_div = floorplan_div + "_svg";
		}
					
		//console.log("before List " + window.document.getElementsByClassName);
		cvjs_layerList = new List('layerList_'+floorplan_div, cvjs_layerOptions, cvjs_layerValues);

		for (i=0; i<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; i++){
			var sLink = "javascript: cvjs_LayerListClick("+i+","+i+")";

			if (layerTable[cvjs_active_floorplan_div_nr].layers[i].status == "OFF"){
				cvjs_layerList.add({
				  selected: languageTable.languages[cvjs_currentLanguage].LayerListModal.Off,
				  link: sLink,
				  id: i,
				  layer: layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName,
				});
			}

			if (layerTable[cvjs_active_floorplan_div_nr].layers[i].status == "ON"){
				cvjs_layerList.add({
				  selected: languageTable.languages[cvjs_currentLanguage].LayerListModal.On,
				  link: sLink,
				  id: i,
				  layer: layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName,
				});
			}
//if (cvjs_debug) console.log(i+"  "+ layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName);
		}

		if (layerlist_offset_flag[cvjs_active_floorplan_div_nr]){
			layerlist_offset_flag[cvjs_active_floorplan_div_nr] = false;
			// 3.1.21j  .appendTo('body')
			jQuery("#layerList_"+floorplan_div).css({position: "fixed"});
			jQuery("#layerList_"+floorplan_div).offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});
		}
		jQuery("#layerList_"+floorplan_div).show();
}


var cvjs_layerValues;
// End Layer List

// 6.2.43
function cvjs_LayerListClick(id, locator){

	console.log("the layer is "+layerTable[cvjs_active_floorplan_div_nr].layers[id].layerName+" with status "+layerTable[cvjs_active_floorplan_div_nr].layers[id].status);

	if (layerTable[cvjs_active_floorplan_div_nr].layers[id].status == "OFF"){
		cvjs_LayerOn(layerTable[cvjs_active_floorplan_div_nr].layers[id].layer);
		
		// 6.2.43 ON
		cvjs_spaceObjectLayerOnOff(floorplan_div_Array[cvjs_active_floorplan_div_nr], layerTable[cvjs_active_floorplan_div_nr].layers[id].layerName, "on");
		
		layerTable[cvjs_active_floorplan_div_nr].layers[id].status = "ON";

		var item = cvjs_layerList.get('id', locator)[0];
		  item.values({
			selected: languageTable.languages[cvjs_currentLanguage].LayerListModal.On,
		  });

	}
	else{
		cvjs_LayerOff(layerTable[cvjs_active_floorplan_div_nr].layers[id].layer);
		
		// 6.2.43 OFF§
		cvjs_spaceObjectLayerOnOff(floorplan_div_Array[cvjs_active_floorplan_div_nr], layerTable[cvjs_active_floorplan_div_nr].layers[id].layerName, "off");		
		layerTable[cvjs_active_floorplan_div_nr].layers[id].status = "OFF";


		var item = cvjs_layerList.get('id', locator)[0];
		  item.values({
			selected: languageTable.languages[cvjs_currentLanguage].LayerListModal.Off,
		  });
	}
}

function modal_all_layer_off(){

	for (id=0; id<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; id++){
				
//		console.log("the layer is "+layerTable[cvjs_active_floorplan_div_nr].layers[id].layerName+" with status "+layerTable[cvjs_active_floorplan_div_nr].layers[id].status);
		
//console.log(layerTable[cvjs_active_floorplan_div_nr].numberOfLayers+" "+id+"  "+layerTable[cvjs_active_floorplan_div_nr].layers[id].layer);		
		
			cvjs_LayerOff(layerTable[cvjs_active_floorplan_div_nr].layers[id].layer);
			layerTable[cvjs_active_floorplan_div_nr].layers[id].status = "OFF";

			var item = cvjs_layerList.get('id', id)[0];
			  item.values({
				selected: languageTable.languages[cvjs_currentLanguage].LayerListModal.Off,
			  });

	}
	
	// 6.2.43
	cvjs_allSpaceObjectsOff(floorplan_div_Array[cvjs_active_floorplan_div_nr]);

}

function modal_all_layer_on(){

	for (id=0; id<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; id++){
			cvjs_LayerOn(layerTable[cvjs_active_floorplan_div_nr].layers[id].layer);
			layerTable[cvjs_active_floorplan_div_nr].layers[id].status = "ON";

			var item = cvjs_layerList.get('id', id)[0];
			  item.values({
				selected: languageTable.languages[cvjs_currentLanguage].LayerListModal.On,
			  });


	}

	// 6.2.43
	cvjs_allSpaceObjectsOn(floorplan_div_Array[cvjs_active_floorplan_div_nr]);


}

function modal_swap_layers_on_off(){


	for (id=0; id<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; id++){

		if (layerTable[cvjs_active_floorplan_div_nr].layers[id].status == "OFF"){
			cvjs_LayerOn(layerTable[cvjs_active_floorplan_div_nr].layers[id].layer);
			layerTable[cvjs_active_floorplan_div_nr].layers[id].status = "ON";

			var item = cvjs_layerList.get('id', id)[0];
			  item.values({
				selected: languageTable.languages[cvjs_currentLanguage].LayerListModal.On,
			  });


		}
		else{
			cvjs_LayerOff(layerTable[cvjs_active_floorplan_div_nr].layers[id].layer);
			layerTable[cvjs_active_floorplan_div_nr].layers[id].status = "OFF";

			var item = cvjs_layerList.get('id', id)[0];
			  item.values({
				selected: languageTable.languages[cvjs_currentLanguage].LayerListModal.Off,
			  });

		}
	}

}



/**
 * Swap drawing layers On/Off
 * @param {String} floorplan_div - div of the CADViewerJS canvas
 */

function cvjs_swapLayersInDrawing(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (cvjs_debug) console.log(floorplan_div.lastIndexOf("_svg")+"  "+(floorplan_div.length-4));
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	if (floorplan_div == undefined){
	
		// do nothing;
	}
	else{
		// find active floorplan number and set that
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	}


	for (id=0; id<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; id++){

		if (layerTable[cvjs_active_floorplan_div_nr].layers[id].status == "OFF"){
			cvjs_LayerOn(layerTable[cvjs_active_floorplan_div_nr].layers[id].layer);
			layerTable[cvjs_active_floorplan_div_nr].layers[id].status = "ON";
		}
		else{
			cvjs_LayerOff(layerTable[cvjs_active_floorplan_div_nr].layers[id].layer);
			layerTable[cvjs_active_floorplan_div_nr].layers[id].status = "OFF";
		}
	}

}


/**
 * Sets all layers in drawing On
 * @param {String} floorplan_div - div of the CADViewerJS canvas
 */

function cvjs_allLayersInDrawingOn(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (cvjs_debug) console.log(floorplan_div.lastIndexOf("_svg")+"  "+(floorplan_div.length-4));
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	if (floorplan_div == undefined){
	
		// do nothing;
	}
	else{
		// find active floorplan number and set that
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	}


	for (id=0; id<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; id++){
		if (layerTable[cvjs_active_floorplan_div_nr].layers[id].status == "OFF"){
			cvjs_LayerOn(layerTable[cvjs_active_floorplan_div_nr].layers[id].layer);
			layerTable[cvjs_active_floorplan_div_nr].layers[id].status = "ON";
		}
	}
}


/**
 * Return orginal file layer name based on SVG object ID
 * @param {string} myObjectId - id of the element in the SVG file
 * @return {string} layer - layer name
 */

function cvjs_layerNamefromObjectID(myObjectId){
	
	if (myObjectId.indexOf("#")==-1) myObjectId = "#"+myObjectId;
	

//	var layerID = jQuery(myObjectId).parents().find("[id^=layer_]").attr('id');
//  suggestion for optimized find, parents takes the first outmost parent
	var layerID = jQuery(myObjectId).parents("[id^=layer_]").attr('id');

	
	//console.log(myObjectId + "   "+layerID);
	
	for (id=0; id<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; id++){
		
		//console.log(layerTable[cvjs_active_floorplan_div_nr].layers[id].layer);
		
		if (layerTable[cvjs_active_floorplan_div_nr].layers[id].layer == layerID){
			
			//console.log(" we have a match " + layerTable[cvjs_active_floorplan_div_nr].layers[id].layerName);
			
			return (layerTable[cvjs_active_floorplan_div_nr].layers[id].layerName);			
		}
	}
}

// turn drawing layer off flag
var cvjs_turnDrawingLayerOffFlag = false;

/**
 * Turn a single layer on interactively
 * @param {string} floorplan_div - div of the CADViewerJS canvas
 */
function cvjs_interactiveLayerOff(floorplan_div){

	cvjs_turnDrawingLayerOffFlag = true;
	
	
	// 3.0.15c   - add "_svg" to div, if called through external API
	if (cvjs_debug) console.log(floorplan_div.lastIndexOf("_svg")+"  "+(floorplan_div.length-4));
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	
	
}


/**
 * Returns the current fileName from the MultiPages list
 * @return {string} url - current location
 */

function cvjs_getCurrentMultiPage_FileName(){

	return(multiPages[cvjs_active_floorplan_div_nr].pages[multiPages[cvjs_active_floorplan_div_nr].currentPage-1].fileName);

}


/**
 * Finds the current url of the library
 * @return {string} url - current location
 */

function cvjs_currentURL(){

	var url = window.location.href;
	return(url);
}


/**
 * Finds the current host of the library
 * @return {string} host - current hostlocation
 */

function cvjs_currentHost(){

	var host = window.location.hostname;
	return(host);
}

var cvjs_defaultJSPath = "../app/js/";

/**
 * Set the script paths to load default drawings for encapsulate png rendering, typically ../javascripts
  * @param {string} path to default script-file folder
 */

function cvjs_setDefaultJSPath(path){

	cvjs_defaultJSPath = path;

}


/**
 * Activates and displays the information modal with text
 * @param {int} modal type, 1 for bootstrap modal, 2 for standard floating modal, default is bootstrap modal
 */

function cvjs_setInformationModalType(mode){

	message_modal_type_bootstrap = true;
	if (mode==1) message_modal_type_bootstrap = true;
	if (mode==2) message_modal_type_bootstrap = false;
}


var message_modal_type_bootstrap = false;

var message_modal_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];


var cvjs_currentInformationModal_x = 0;
var cvjs_currentInformationModal_y = 0;

/**
 * Activates and displays the information modal with text
  * @param {string} floorplan_div - name of div containing CADViewer canvas
  * @param {String} text string to display
  * @param {int} modalHeight of modal, omit if using standard values
  * @param {int} modal_left, position of modal
  * @param {int} modal_top, position of modal
  * 
 */

function cvjs_displayInformationModal(floorplan_div, textString, modalHeight, modal_left, modal_top){


if (cvjs_debug) console.log(modalHeight+"  "+modal_left+"  "+modal_top);

	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	if (message_modal_type_bootstrap){

		jQuery('#cvjs_informationModalText'+'_'+floorplan_div).html(textString);
		jQuery('#info_messageModal'+'_'+floorplan_div).modal('show');
	}
	else{

		if (modalHeight != undefined){				
			jQuery(".info_messageModal_2").css("height",modalHeight+"px");				
						
			if ((modal_left != undefined) && (modal_top != undefined) ){	
	
				jQuery("#info_messageModal_2"+'_'+floorplan_div).css({position: "fixed"});
	
				cvjs_currentInformationModal_x = jQuery("#"+floorplan_div).position().left+150;
				cvjs_currentInformationModal_y = jQuery("#"+floorplan_div).position().top+50; //jQuery('#'+floorplan_div).position().top;
				
				jQuery("#info_messageModal_2"+'_'+floorplan_div).css('top', modal_top);
				jQuery("#info_messageModal_2"+'_'+floorplan_div).css('left', modal_left);	


				
				/*								
				jQuery("#info_messageModal_2"+'_'+floorplan_div).position({
					of: jQuery("#info_messageModal_2"+'_'+floorplan_div).parent(),
					my: '0 300',
					at: 'left top'
				});	
*/				
			}
		}    // 3.2.02g
		else{  // if we are in standard mode, we adjust the modal, if on top custom bar we do not
			
			if (message_modal_offset_flag[cvjs_active_floorplan_div_nr]){
				message_modal_offset_flag[cvjs_active_floorplan_div_nr] = false;
				// 3.1.21j  .appendTo('body')
				jQuery("#info_messageModal_2"+'_'+floorplan_div).css({position: "fixed"});
				jQuery("#info_messageModal_2"+'_'+floorplan_div).offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});
			}
		}
		
		
		jQuery('#cvjs_informationModalText_2'+'_'+floorplan_div).html(textString);
		jQuery('#info_messageModal_2'+'_'+floorplan_div).show();

	}
	// jQuery('#info_messageModal').show();
}


/**
 * Hides the information modal with text
  * @param {string} floorplan_div - name of div containing CADViewer canvas
 */
function cvjs_hideInformationModal(floorplan_div){


	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}


	if (message_modal_type_bootstrap){

		jQuery('#info_messageModal'+'_'+floorplan_div).modal('hide');
	}
	else{
		
		jQuery(".info_messageModal_2").css("height","110px");				
		
		if (cvjs_currentInformationModal_x!=0 || cvjs_currentInformationModal_y!=0){
			jQuery("#info_messageModal_2"+'_'+floorplan_div).css('top', cvjs_currentInformationModal_y);
			jQuery("#info_messageModal_2"+'_'+floorplan_div).css('left', cvjs_currentInformationModal_x);		

			cvjs_currentInformationModal_x = 0;			
			cvjs_currentInformationModal_y = 0;			
		}		
				
		jQuery('#info_messageModal_2'+'_'+floorplan_div).hide();
		
	}
	// jQuery('#info_messageModal').show();
}


function cvjs_displayInformationModal_Mode(mode){


	var textString = "";

	if (mode == 0) {
		textString = languageTable.languages[cvjs_currentLanguage].InfoMessageModal.Version +" "+ cvjs_versionNumber;
		
		try{
			var mystring = cvjs_rPaper[cvjs_active_floorplan_div_nr].toString();
			cvjs_AXversionNumber = mystring.substring(mystring.indexOf("Generated by AutoXChange ")+25, mystring.indexOf("Generated by AutoXChange ")+35); 
		}
		catch (err){
			console.log("displayInformationModal"+err); //window.alert(err);
			cvjs_AXversionNumber = "";
		}
		
		textString += "<br>"+ languageTable.languages[cvjs_currentLanguage].InfoMessageModal.AXVersion +" "+ cvjs_AXversionNumber;
		var drawingName = cvjs_preConversionFileName[cvjs_active_floorplan_div_nr];
		
		if (currentLoadedDrawingFullName.indexOf("Type=svg")==-1) drawingName = currentLoadedDrawingFullName;
		
		//window.alert(currentLoadedDrawingFullName+"  "+cvjs_preConversionFileName[cvjs_active_floorplan_div_nr]);

		if (drawingName.lastIndexOf("/")>-1){
			drawingName = drawingName.substring(drawingName.lastIndexOf("/")+1);
		}
		else{
			if (drawingName.lastIndexOf("\\")>-1)
				drawingName = drawingName.substring(drawingName.lastIndexOf("\\")+1);
		}	
		textString += "<br>"+languageTable.languages[cvjs_currentLanguage].InfoMessageModal.DrawingName+" <strong>"+drawingName+"</strong>";

//		textString += "<br>"+languageTable.languages[cvjs_currentLanguage].InfoMessageModal.DrawingName+": "++"."+cvjs_preConversionFileExtension[cvjs_active_floorplan_div_nr];
	
	}
	
		
	
	if (mode == 1) textString = languageTable.languages[cvjs_currentLanguage].InfoMessageModal.ComingSoon;


	cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], textString)
	//jQuery('#cvjs_informationModalText').html(textString);
	//jQuery('#info_messageModal').modal('show');
}



/**
 * Display the current version number of the CADViewer toolkit and viewer
 * @return {string} version - current version number
 */

function cvjs_version(){

	return(cvjs_versionNumber);
}



var backgroundcolor_modal_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];


/**
 * Calls modal for setting background color
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

function cvjs_setBackgroundColor(floorplan_div){

	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;

	
	// 3.0.15c   - add "_svg" to div, if called through external API
	if (cvjs_debug) console.log(floorplan_div.lastIndexOf("_svg")+"  "+(floorplan_div.length-4));
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	
	
	
	cvjs_active_floorplan_div_nr  = cvjs_rPaperIndex(floorplan_div);
	
	
	
	if (backgroundcolor_modal_offset_flag[cvjs_active_floorplan_div_nr]){
		backgroundcolor_modal_offset_flag[cvjs_active_floorplan_div_nr] = false;
		// 3.1.21j  .appendTo('body')
		jQuery("#backgroundModal_"+floorplan_div).css({position: "fixed"});
		jQuery("#backgroundModal_"+floorplan_div).offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});
	}
	jQuery("#backgroundModal_"+floorplan_div).show();

//      	jQuery("#backgroundModal").modal('show');
}


function cvjs_exit_backgroundColor(floorplan_div){

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
	jQuery('#backgroundModal_'+floorplan_div).hide();

}

function cvjs_setBackgroundColorViaButton(floorplan_div){

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
	jQuery("#backgroundModal_"+floorplan_div).hide();

//       	jQuery("#backgroundModal").modal('hide');
}

function cvjs_setBackgroundColorFromPicker(pickcolor){

	var color = "#"+pickcolor;
	cvjs_setCurrentRedlineValues_Color(color);

}

var cvjs_genericPickedColor = "#AA0000"
function cvjs_setGenericColorFromPicker(pickcolor){
	cvjs_genericPickedColor = "#"+pickcolor;
}



var cvjs_blackBackground = false;
var cvjs_currentBackgroundColor = ["#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF"];



function componentToHex(c) {
    var hex = c.toString(16);
    return hex.length == 1 ? "0" + hex : hex;
}

function rgbToHex(r, g, b) {
    return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b);
}


/**
 * Set the background color of CADViewer canvas, using HEX
  * @param {hex} color of background, hex string, omit #
  * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

function cvjs_setBackgroundColorHex(hex, floorplan_div){


	if (floorplan_div == undefined)
		floorplan_div = floorplan_div_Array[cvjs_active_floorplan_div_nr]

//console.log("XXX"+hex);

	// 3.2.01b
	if (floorplan_div.indexOf("_svg")<1){
		floorplan_div = floorplan_div +"_svg"; 
	}


	cvjs_blackBackground = false;
	hex = hex.toString()
	
	// 3.2.01g	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

//	console.log("top"+hex.toString());

	/*
		var myhex = hex;
		try {
			myhex = hex.rgb;		

	console.log("myhex first "+myhex);
			
			
			if (myhex == undefined) 
				myhex = hex;
			
			if (myhex.indexOf(",")>-1){
			
				var r = parseInt(myhex.substring(0,myhex.indexOf(",")));
				myhex = myhex.substring(myhex.indexOf(",")+1);
				var g = parseInt(myhex.substring(0,myhex.indexOf(",")));
				var b = parseInt(myhex.substring(myhex.indexOf(",")+1));

				console.log("rgb " +r+" "+g+" "+b);
				
				myhex = rgbToHex(r, g, b);		
		
			}
			
			console.log("color "+myhex);
		}
		catch(err){
			myhex = hex;
		}
		
		hex = myhex;
	
	*/
	
		var color = "";
		
		if (hex.indexOf("none")==0){
			
			//window.alert("none");
		}
		else {

			if (hex.indexOf("#")==0){
				color = hex;
			}
			else{
				color = "#"+hex;
			}
					
		}
		
	
//		window.alert("setting color hex XX"+color+"XX  "+floorplan_div);

		cvjs_currentBackgroundColor[cvjs_active_floorplan_div_nr] = color;
		jQuery('#'+floorplan_div).css("background-color",color);
		
		// test 6.1.36
		//jQuery('#'+floorplan_div).addClass( "greyscale" );
		
	
		var i=0;

		var oArr = {};
		jQuery("*[id]").each(function() {
		   

			try{
				var id = jQuery(this).attr('id');
				var searchString = "[id^="+floorplan_div+"]";
				var svgID = jQuery("#"+id).parents(searchString).attr('id');
				
				if (svgID == floorplan_div_Array[cvjs_active_floorplan_div_nr]){
				   if (!oArr[id]) oArr[id] = true;
				}

			}
			catch (err) { 
			//	console.log(err+" XX"+id+"XX");
			}

					
		   
//		   var id = jQuery(this).attr('id');
//		   if (!oArr[id]) oArr[id] = true;
		   
		   
		   
		   
		});



		if (hex.indexOf("000000")>-1){

		cvjs_blackBackground = true;

		   for (var prop in oArr){
				try{
					var target = "#"+prop;
					if (jQuery(target).attr("id").indexOf("cv_")==0){

						var ostroke = jQuery(target).css("stroke");
						var ofill = jQuery(target).css("fill");

//						i++;
//						if (i<10) console.log("fill parameters "+ostroke+"  "+ofill);

						if (ostroke!="none"){
							if (ostroke=="#000000"  || ostroke=="#000" ) jQuery(target).css("stroke", "#FFFFFF");
							else
								if ( ostroke=="rgb(0, 0, 0)" || ostroke=="rgb( 0, 0, 0)" || ostroke=="rgb(0,0,0)" ) jQuery(target).css("stroke", "#FFFFFF");
						}

						if (ofill!="none"){
							if (ofill=="#000000"|| ofill=="#000" ) jQuery(target).css("fill", "#FFFFFF");
							else
								if (ofill=="rgb(0, 0, 0)" || ofill=="rgb( 0, 0, 0)" || ofill=="rgb(0,0,0)" ) jQuery(target).css("fill", "#FFFFFF");
						}
					}
				}catch(err){}
			}
		}


		if (hex.indexOf("FFFFFF")>-1){
		   for (var prop in oArr){

				try{
					var target = "#"+prop;
					if (jQuery(target).attr("id").indexOf("cv_")==0){

						var ostroke = jQuery(target).css("stroke");
						var ofill = jQuery(target).css("fill");

//						i++;
//						if (i<10) console.log("fill parameters "+ostroke+"  "+ofill);

						if (ostroke!="none"){
							if (ostroke=="#FFFFFF" || ostroke=="#FFF") jQuery(target).css("stroke", "#000000");
							else
								if (ostroke=="rgb(255, 255, 255)" || ostroke=="rgb( 255, 255, 255)" || ostroke=="rgb(255,255,255)" ) jQuery(target).css("stroke", "#000000");
						}

						if (ofill!="none"){
							if (ofill=="#FFFFFF" || ofill=="#FFF") jQuery(target).css("fill", "#000000");
							else
								if (ofill=="rgb(255, 255, 255)" || ofill=="rgb( 255, 255, 255)" || ofill=="rgb(255,255,255)" ) jQuery(target).css("fill", "#000000");
						}
					}
				}catch(err){}
			}

		}


}



function cvjs_changePageByNumberViaButton(floorplan_div){

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

	var newpage = jQuery('#cvjs_inputDocumentPageChange_'+floorplan_div).val();

	newpage = parseInt(newpage);
		
	cvjs_changePageByNumber(floorplan_div, newpage);
			
    jQuery("#documentPageChangeModal_"+floorplan_div).hide();

    cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;

}



function cvjs_enterPageChangeNumber(floorplan_div){

	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;

	
	
	// 3.3.01a
	if (cvjs_debug) console.log(floorplan_div.lastIndexOf("_svg")+"  "+(floorplan_div.length-4));
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	


	if (page_change_in_document_offset_flag[cvjs_active_floorplan_div_nr]){
		page_change_in_document_offset_flag[cvjs_active_floorplan_div_nr] = false;
		// 3.1.21j .appendTo('body');

		//jQuery("#documentPageChangeModal_"+floorplan_div).offset({ top: 50, left: 150 });

		jQuery("#documentPageChangeModal_"+floorplan_div).css({position: "fixed"});
		jQuery("#documentPageChangeModal_"+floorplan_div).offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top}).appendTo('body');

	}

	jQuery("#documentPageChangeModal_"+floorplan_div).show();
}




var textSearchPre = "";
var textInstanceCounter = 1;

/**
 * Calls the interactive modal for text search
 */
function cvjs_startSearchText(){

	var text = jQuery('#cvjs_searchTextFromModal').val();
	var zoomlevel = jQuery('#cvjs_percentageLevelFromModal').val();

	if (textSearchPre!=text){
		// new text search
		cvjs_searchText( text, zoomlevel);
		textInstanceCounter = 1;
		textSearchPre = text;
	}
	else{
		// next instance in the file
		textInstanceCounter++;
//console.log(textInstanceCounter);
		var flag = cvjs_searchTextInstance(text, zoomlevel, textInstanceCounter);
		//console.log(flag);
		if (!flag){
			//console.log("flag is false "+textInstanceCounter);
			textInstanceCounter=1;
			cvjs_searchTextInstance(text, zoomlevel, textInstanceCounter);
		}
	}

}



// var worldUnits = { globalOrigin: { x: 1111, y: 1111},
//                           units: “m”,
//                           svgToWorldUnits: 100.0                                                                   }
//					};


var cvjs_globalOrigin_x = 0;
var cvjs_globalOrigin_y = 0;
//var cvjs_units = "mm";   3.2.02h
var  cvjs_units = ["mm","mm","mm","mm","mm","mm","mm","mm","mm","mm","mm","mm","mm","mm","mm","mm","mm","mm","mm","mm","mm","mm","mm","mm","mm","mm","mm","mm","mm","mm","mm"];
// var cvjs_svgToWorldUnits = 1;  3.2.02h
var cvjs_svgToWorldUnits = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ];

var cvjs_currentMeasurementLength = 0;
var cvjs_callbackMeasurement = false;
var cvjs_calibratedMeasurement = false;
var calibrate_x1;
var calibrate_y1;
var calibrate_x2;
var calibrate_y2;

cvjs_calibrate_end = false;
cvjs_measurement_end = false;


var measurement_x1;
var measurement_y1;
var measurement_x2;
var measurement_y2;

var calibrate_text_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];


/**
 * Calibrate measurement
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */
function cvjs_calibrateMeasurement(floorplan_div){


	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;

	
	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}	
	

	cvjs_calibrate_end = true;


	if (calibrate_text_offset_flag[cvjs_active_floorplan_div_nr]){
		calibrate_text_offset_flag[cvjs_active_floorplan_div_nr] = false;
		// 3.1.21j .appendTo('body');
		jQuery("#calibrateModal_"+floorplan_div).css({position: "fixed"});
		jQuery("#calibrateModal_"+floorplan_div).offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});
	}

	jQuery("#calibrateModal_"+floorplan_div).show();
	cvjs_calibrateMeasurement_RedlinePolyline();

}


function cvjs_exitCalibrateModal(floorplan_div, flag){


	if (cvjs_calibrate_end){
		cvjs_measurement_end = false;


		if (flag == 2){

			// extract values
			var unit = jQuery("#cvjs_unitForScale").val();

		//	console.log(unit);

			if (unit == 1 )cvjs_units[cvjs_rPaperIndex(floorplan_div)] = "m";
			else
			if (unit == 2 )cvjs_units[cvjs_rPaperIndex(floorplan_div)] = "cm";
			else
			if (unit == 3 )cvjs_units[cvjs_rPaperIndex(floorplan_div)] = "mm";
			else
			if (unit == 4 )cvjs_units[cvjs_rPaperIndex(floorplan_div)] = "km";
			else
			if (unit == 5 )cvjs_units[cvjs_rPaperIndex(floorplan_div)] = "feet";
			else
			if (unit == 6 )cvjs_units[cvjs_rPaperIndex(floorplan_div)] = "inches";
			else
			if (unit == 7 )cvjs_units[cvjs_rPaperIndex(floorplan_div)] = "miles";

			var referenceDistance = jQuery("#cvjs_calibrateReferenceDistance").val();




		// console.log(calibrate_x1+" "+calibrate_x2+" "+calibrate_y1+" "+calibrate_y2);
		//	console.log("reference distance "+referenceDistance+" polyPath_redline1="+polyPath_redline1+"  "+(calibrate_x2-calibrate_x1)+" "+(calibrate_y2-calibrate_y1));

			try{

			var drawingLength = Math.sqrt( Math.pow( (calibrate_x2-calibrate_x1), 2) + Math.pow( (calibrate_y2-calibrate_y1),2 ))


			}
			catch (err){ }

			//console.log(drawingLength);

			if ( isNaN(drawingLength)  || drawingLength==0){

				var textString = languageTable.languages[cvjs_currentLanguage].InfoMessageModal.SelectTwoPoints;
				cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], textString);

				//jQuery('#cvjs_informationModalText').html(languageTable.languages[cvjs_currentLanguage].InfoMessageModal.SelectTwoPoints);
				//jQuery('#info_messageModal').modal('show');
				return;
			}


			if (referenceDistance.indexOf(",")>-1){

					var newNumber =  referenceDistance.substring(0,referenceDistance.indexOf(","))+"."+referenceDistance.substring(referenceDistance.indexOf(",")+1);
					//console.log("we have a comma "+newNumber);
					referenceDistance = newNumber;
			}

			if (isNaN(referenceDistance) || referenceDistance==""){

				var textString = languageTable.languages[cvjs_currentLanguage].InfoMessageModal.ReferenceDistance;
				cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], textString);

//				jQuery('#cvjs_informationModalText').html(languageTable.languages[cvjs_currentLanguage].InfoMessageModal.ReferenceDistance);
//				jQuery('#info_messageModal').modal('show');
				return;

			}

			cvjs_svgToWorldUnits[cvjs_rPaperIndex(floorplan_div)] = referenceDistance/drawingLength;

//console.log(cvjs_svgToWorldUnits);

			cvjs_calibratedMeasurement = true;

						
			
		//	window.alert("calibrated!");
			// 3.1.20c
			try{
				cvjs_CalibrateMeasurementCallback();
			}
			catch(err){
					console.log(err);
			}
			
			
	 	}
	//	console.log("cvjs_svgToWorldUnits "+cvjs_svgToWorldUnits);

		// calculate distance
		// remove modal remove


		cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;

		jQuery( "#calibrateModal_"+floorplan_div).hide();

//		tPolygon_redline1.attr({'path': "M0,0"});

		tRubberBand_poly_redline1.attr({'path': "M0,0"});
		var Ttrans = "S0.0";

		calibrate_Triangle.attr({
			fill: measurement_color,
			transform: Ttrans
		});

		calibrate_Triangle2.attr({
			fill: measurement_color,
			transform: Ttrans
		});

		cvjs_removeHandleFunc_CalibrateMeasurementPolyline();

	}else{
			// do nothing
	}
}

var measurement_text_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];


/**
 * Activates the measurement modal
 * @param {String} floorplan_div - div of the CADViewerJS canvas
 */
function cvjs_Measurement(floorplan_div){


	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	if (floorplan_div == undefined){
	
		// do nothing;
	}
	else{
		// find active floorplan number and set that
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	}


	cvjs_measurement_end = true;

	if (cvjs_calibratedMeasurement){
		// do nothing, we have calibrated manually
	}
	else{
		// read in the global values
		try{
			
			/****  3.3.01g  - we are loading these values in at start-up of the method			
			cvjs_units[cvjs_rPaperIndex(floorplan_div)] = worldUnits.units;
			cvjs_svgToWorldUnits[cvjs_rPaperIndex(floorplan_div)] = worldUnits.svgToWorldUnits;
			**/ 
			/** 3.3.01g  - this must be a bug in AX that we try to handle, this is now blocked
// 3.1.21i   cvjs_svgToWorldUnits is permanently 1, we calculate the proper value here
			cvjs_svgToWorldUnits[cvjs_rPaperIndex(floorplan_div)] = cvjs_get_dwg_scaled_value(1.0, multiPages[cvjs_active_floorplan_div_nr].currentPage);
			**/
			
			// window.alert("worldUnits.units "+worldUnits.units+" cvjs_svgToWorldUnits "+cvjs_svgToWorldUnits);
		}catch (err){

			var textString = languageTable.languages[cvjs_currentLanguage].InfoMessageModal.NoUnits;
			cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], textString);
			return;
		}
	}

	if (cvjs_units[cvjs_rPaperIndex(floorplan_div)] == "none"){

			var textString = languageTable.languages[cvjs_currentLanguage].InfoMessageModal.UnitLess;
			cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], textString);

			return;
	}


	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;


	if (measurement_text_offset_flag[cvjs_active_floorplan_div_nr]){
		measurement_text_offset_flag[cvjs_active_floorplan_div_nr] = false;
		//jQuery("#measurementModal_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).offset({ top: 50, left: 150 });
		// 3.1.21h
		// 3.1.21j .appendTo('body');
		jQuery("#measurementModal_"+floorplan_div).css({position: "fixed"});
		jQuery("#measurementModal_"+floorplan_div).offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});
	}

	
	if (cvjs_units[cvjs_active_floorplan_div_nr].indexOf("feet")==0){

		var lint = Math.floor(cvjs_currentMeasurementLength);
		var fraction = cvjs_currentMeasurementLength - Math.floor(cvjs_currentMeasurementLength);
		fraction = Math.round(fraction*16);
		if (fraction == 16){
			console.log("do something.....");
		}
//6.2.18		jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Distance+lint+"\'"+" "+fraction+"/16\"");
		jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Distance);
		jQuery( "#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(lint+"\'"+" "+fraction+"/16\"");		
	}
	else{
//6.2.18		jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Distance+cvjs_currentMeasurementLength+" "+cvjs_units[cvjs_active_floorplan_div_nr]);
		jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Distance);	
		jQuery( "#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(cvjs_currentMeasurementLength+" "+cvjs_units[cvjs_active_floorplan_div_nr]);	
	}

	jQuery( "#measurementModal_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).show();
	
	
	if (cvjs_measurementInteractiveType == 1 || cvjs_measurementInteractiveType == 3 ||  cvjs_measurementInteractiveType == 4 ||  cvjs_measurementInteractiveType == 5 ||  cvjs_measurementInteractiveType == 6 ||  cvjs_measurementInteractiveType == 7) 
		cvjs_Measurement_RedlinePolyline();		
	if (cvjs_measurementInteractiveType == 2) 
		cvjs_addHandleFunc_MeasurementFilledPolygon();	


}




function cvjs_exitMeasurementModal(floorplan_div){


	// 3.2.01f  we force end of measurement
	cvjs_measurement_end = true;
	


	if (cvjs_debug) console.log("EXIT measurement  cvjs_measurement_end "+ cvjs_measurement_end);

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;

	if (cvjs_measurement_end){
		cvjs_measurement_end = false;
		// remove modal


		jQuery( "#measurementModal_"+floorplan_div ).hide();
		//tPolygon_redline1.attr({'path': "M0,0"});

if (cvjs_debug) console.log("loop 1");
		
		
		if (cvjs_measurementInteractiveType == 2){
//		if (cvjs_measureArea){

		
		if (cvjs_debug) console.log("branch 1");

//			var Ttrans_hG = "T0,0S0.01";
			var Ttrans_hG = "S0";
			tPolygon_redline1.attr({
				 transform: Ttrans_hG
			});
			
			// 3.2.01f
			tRubberBand_poly_redline1.attr({'path': "M0,0"});				
			tRubberBand_poly_redline1.remove();				
			
			// 3.1.21g
			tPolygon_redline1.remove();
			cvjs_removeHandleFunc_MeasurementFilledPolygon()

			if (cvjs_debug) console.log("end branch 1");

		}
// we do the same for all non-area calculations		
//		if (cvjs_measurementInteractiveType == 2){	
		else{
			if (cvjs_debug) console.log("branch 2");

			tRubberBand_poly_redline1.attr({'path': "M0,0"});
			var Ttrans = "S0";
			measurement_Triangle.attr({
					fill: cvjs_currentRedline_color,
					transform: Ttrans
				});

				measurement_Triangle2.attr({
					fill: cvjs_currentRedline_color,
					transform: Ttrans
			});

			// 3.1.21g
			tRubberBand_poly_redline1.remove();
			measurement_Triangle.remove();
			measurement_Triangle2.remove();
					
			cvjs_removeHandleFunc_MeasurementPolyline();
		}
		

	}else{
			// do nothing
			
		// we want to clean again

		try{  // 2017-11-27

	
			if (cvjs_debug) console.log("we want to clean before drawing...");

			if (cvjs_measurementInteractiveType == 2){
//			if (cvjs_measureArea){

//				var Ttrans_hG = "T0,0S0.01";
				var Ttrans_hG = "T0,0S0.01";
				tPolygon_redline1.attr({
					 transform: Ttrans_hG
				});

				if (cvjs_debug) console.log("here ");
			
				// 3.1.21g
				tPolygon_redline1.remove();
				// 3.2.01f
				tRubberBand_poly_redline1.attr({'path': "M0,0"});	
				
				cvjs_removeHandleFunc_MeasurementFilledPolygon()			
			}
			
			if (cvjs_measurementInteractiveType == 1 || cvjs_measurementInteractiveType == 3 || cvjs_measurementInteractiveType == 4 || cvjs_measurementInteractiveType == 5 || cvjs_measurementInteractiveType == 6 ||  cvjs_measurementInteractiveType == 7){		
//			else{
				tRubberBand_poly_redline1.attr({'path': "M0,0"});
				var Ttrans = "S0";
				measurement_Triangle.attr({
						fill: cvjs_currentRedline_color,
						transform: Ttrans
					});

					measurement_Triangle2.attr({
						fill: cvjs_currentRedline_color,
						transform: Ttrans
				});

				// 3.1.21g
				tRubberBand_poly_redline1.remove();
				measurement_Triangle.remove();
				measurement_Triangle2.remove();
											
				cvjs_removeHandleFunc_MeasurementPolyline();
			}		
			
		}catch(err){if (cvjs_debug) console.log(err)}

		jQuery("#measurementModal_"+floorplan_div ).hide();
	}


}


function cvjs_repeatMeasurementModal(){

// 3.2.01f  
// we change the functionality to permanently clear and start out again

//	if (cvjs_measurement_end){   // removed 3.2.01f
	if (true){
		cvjs_measurement_end = false;
	
//window.alert("cvjs_measureArea "+cvjs_measureArea);		
				
		if (cvjs_measurementInteractiveType == 2){
//		if (cvjs_measureArea){
			
			// remove modal
			cvjs_currentMeasurementLength = 0;

//			jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Distance+cvjs_currentMeasurementLength+" "+cvjs_units[cvjs_active_floorplan_div_nr]);
			jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Area);
//			jQuery( "#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(cvjs_currentMeasurementLength+" "+cvjs_units[cvjs_active_floorplan_div_nr]);
			jQuery( "#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("0 "+cvjs_units[cvjs_active_floorplan_div_nr]+"²");




	//		tPolygon_redline1.attr({'path': "M0,0"});

			var Ttrans_hG = "T0,0S0.01";
			tPolygon_redline1.attr({
				 transform: Ttrans_hG
			});

			tRubberBand_poly_redline1.attr({'path': "M0,0"});
			
			var Ttrans = "S0";
			measurement_Triangle.attr({
					fill: cvjs_currentRedline_color,
					transform: Ttrans
				});

				measurement_Triangle2.attr({
					fill: cvjs_currentRedline_color,
					transform: Ttrans
			});
				
			// 3.1.21g
			tPolygon_redline1.remove();
			measurement_Triangle.remove();
			measurement_Triangle2.remove();
				
		
			cvjs_addHandleFunc_MeasurementFilledPolygon();	
		}

		if (cvjs_measurementInteractiveType == 1 || cvjs_measurementInteractiveType == 3 || cvjs_measurementInteractiveType == 4 || cvjs_measurementInteractiveType == 5 || cvjs_measurementInteractiveType == 6 ||  cvjs_measurementInteractiveType == 7){
//		else{
			// remove modal
			cvjs_currentMeasurementLength = 0;
			
//6.2.18			jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Distance+cvjs_currentMeasurementLength+" "+cvjs_units[cvjs_active_floorplan_div_nr]);


			if (cvjs_measurementInteractiveType == 1){
				jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Distance);
				jQuery( "#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(cvjs_currentMeasurementLength+" "+cvjs_units[cvjs_active_floorplan_div_nr]);
			}


			if (cvjs_measurementInteractiveType == 3 || cvjs_measurementInteractiveType == 4){
				jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Point);
				jQuery( "#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("(0,0)");
			}


			if (cvjs_measurementInteractiveType == 5 || cvjs_measurementInteractiveType == 6){
				jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Points);
				jQuery( "#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("(0,0)");
			}


			if (cvjs_measurementInteractiveType == 7){
				jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Points);
				jQuery( "#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("M0,0");
			}


	
			var Ttrans_hG = "T0,0S0.01";
			tPolygon_redline1.attr({
				 transform: Ttrans_hG
			});
	
	
			tRubberBand_poly_redline1.attr({'path': "M0,0"});
			var Ttrans = "S0";
			measurement_Triangle.attr({
					fill: cvjs_currentRedline_color,
					transform: Ttrans
				});

				measurement_Triangle2.attr({
					fill: cvjs_currentRedline_color,
					transform: Ttrans
			});
			
			// 3.1.21g
			tPolygon_redline1.remove();
			measurement_Triangle.remove();
			measurement_Triangle2.remove();
							
			cvjs_Measurement_RedlinePolyline();			
			
		}
		


	}else{
			// do nothing

	}


}

/*
 * Returns the HEX color as AutoCAD Color table
 * @return {string} hexNumber - hex value of color.
 * @return {int} colorNumber - number of color 
 */

function cvjs_getAutoCADColor(hexNumber){

	var colorNumber = 1;
	if (hexNumber.indexOf("#")==0) hexNumber = hexNumber.substring(1);

	hexNumber = hexNumber.toUpperCase();;
//window.alert(" first "+colorNumber+"  "+hexNumber);		
	
	switch(hexNumber) {
		case "000000":
			colorNumber = 0;
			break;
		case "FF0000":
			colorNumber = 1;
			break;
		case "FFF200":  // yellow
		case "FFFF00":
			colorNumber = 2;
			break;
		case "22B14C": // green
		case "00FF00":
			colorNumber = 3;
			break;
		case "00FFFF":
			colorNumber = 4;
			break;
		case "0000FF":
			colorNumber = 5;
			break;
		case "FF00FF":  // purple
		case "800080":
			colorNumber = 6;
			break;
		case "FFFFFF":
			colorNumber = 7;
			break;
		case "414141":
			colorNumber = 8;
			break;
		case "808080":
			colorNumber = 9;
			break;
		case "FF0000":
			colorNumber = 10;
			break;
		case "FFAAAA":
			colorNumber = 11;
			break;
		case "BD0000":
			colorNumber = 12;
			break;
		case "BD7E7E":
			colorNumber = 13;
			break;
		case "810000":
			colorNumber = 14;
			break;
		case "815656":
			colorNumber = 15;
			break;
		case "FF7500":  // orange
		case "FFA500":  // orange
			colorNumber = 30;
			break;
		case "808080":  // gray
		case "828282":
			colorNumber = 253;
			break;
		case "B97A57":   // brown
		case "814000":
			colorNumber = 34;
			break;
			
		default:
			colorNumber = 1;
	}

//window.alert(colorNumber);	
	
	return colorNumber;
	
}

function cvjs_get_dwg_scaled_value(n, page){

	var svgDx = cvjs_drawingCoordinates[page].SVG.upperRight.x - cvjs_drawingCoordinates[page].SVG.lowerLeft.x;
	var dwgDx = cvjs_drawingCoordinates[page].DWG.upperRight.x - cvjs_drawingCoordinates[page].DWG.lowerLeft.x;

	return (dwgDx/svgDx*n)
}


function cvjs_get_dwg_x_coord(x, page){

/*

	var svgDx = cvjs_drawingCoordinates.SVG.upperRight.x - cvjs_drawingCoordinates.SVG.lowerLeft.x;
	var svgDy = cvjs_drawingCoordinates.SVG.upperRight.y - cvjs_drawingCoordinates.SVG.lowerLeft.y;


	var dwgDx = cvjs_drawingCoordinates.DWG.upperRight.x - cvjs_drawingCoordinates.DWG.lowerLeft.x;
	var dwgDy = cvjs_drawingCoordinates.DWG.upperRight.y - cvjs_drawingCoordinates.DWG.lowerLeft.y;

//window.alert(svgDx+"  "+svgDy);

	var  svgpX =  (x - cvjs_drawingCoordinates.SVG.lowerLeft.x)/svgDx;
	var  svgpY =  (y - cvjs_drawingCoordinates.SVG.lowerLeft.y)/svgDy;


	var dwgPx =  cvjs_drawingCoordinates.DWG.lowerLeft.x+svgpX*dwgDx;
	var dwgPy =  cvjs_drawingCoordinates.DWG.lowerLeft.y+svgpY*dwgDy;

*/

	var svgDx = cvjs_drawingCoordinates[page].SVG.upperRight.x - cvjs_drawingCoordinates[page].SVG.lowerLeft.x;
	var dwgDx = cvjs_drawingCoordinates[page].DWG.upperRight.x - cvjs_drawingCoordinates[page].DWG.lowerLeft.x;
	var svgpX =  (x - cvjs_drawingCoordinates[page].SVG.lowerLeft.x)/svgDx;
	var dwgPx =  cvjs_drawingCoordinates[page].DWG.lowerLeft.x+(svgpX*dwgDx);

	return dwgPx;
}



function cvjs_get_dwg_y_coord(y, page){

/*

	var svgDx = cvjs_drawingCoordinates.SVG.upperRight.x - cvjs_drawingCoordinates.SVG.lowerLeft.x;
	var svgDy = cvjs_drawingCoordinates.SVG.upperRight.y - cvjs_drawingCoordinates.SVG.lowerLeft.y;


	var dwgDx = cvjs_drawingCoordinates.DWG.upperRight.x - cvjs_drawingCoordinates.DWG.lowerLeft.x;
	var dwgDy = cvjs_drawingCoordinates.DWG.upperRight.y - cvjs_drawingCoordinates.DWG.lowerLeft.y;

//window.alert(svgDx+"  "+svgDy);

	var  svgpX =  (x - cvjs_drawingCoordinates.SVG.lowerLeft.x)/svgDx;
	var  svgpY =  (y - cvjs_drawingCoordinates.SVG.lowerLeft.y)/svgDy;


	var dwgPx =  cvjs_drawingCoordinates.DWG.lowerLeft.x+svgpX*dwgDx;
	var dwgPy =  cvjs_drawingCoordinates.DWG.lowerLeft.y+svgpY*dwgDy;

*/

	var svgDy = cvjs_drawingCoordinates[page].SVG.upperRight.y - cvjs_drawingCoordinates[page].SVG.lowerLeft.y;
	var dwgDy = cvjs_drawingCoordinates[page].DWG.upperRight.y - cvjs_drawingCoordinates[page].DWG.lowerLeft.y;
	var svgpY =  (y - cvjs_drawingCoordinates[page].SVG.lowerLeft.y)/svgDy;
	var dwgPy =  cvjs_drawingCoordinates[page].DWG.lowerLeft.y+(svgpY*dwgDy);

	return dwgPy;
}



var cvjs_printPaperSize = "A4";   // allowed is A4, A3, A2  , US letter , ANSI A, ANSI B, ANSI C
var cvjs_printPaperWidth_mm = 297;   // A4
var cvjs_printPaperHeight_mm = 210;   // A4

var cvjs_printOrientation = "portrait";  // landscape and portrait
var cvjs_printResolutionDpi = 300;    // 75dpi and above

//var cvjs_printPixelWidth = 7016;   // A2 - 300 dpi
//var cvjs_printPixelHeight = 4960;   // A2 - 300 dpi
var cvjs_printPixelWidth = 3508;   // A2 - 300 dpi
var cvjs_printPixelHeight = 2480;   // A2 - 300 dpi



var cvjs_objectIsZoomedExtents = true;
var cvjs_serverSavePrintModeController = 0;
var cvjs_serverSave_php_controllerArray = {};
var cvjs_serverCreateThumb_StickyNote_Controller = "make_thumbnails.php";
var cvjs_batchFilesToPDF_Controller = "make_batch_pdf.php";
var cvjs_phpImagesUrlController  = "";
var cvjs_screenToPDF_Controller = "make_singlepage_pdf.php";


//4.1.02k
/**
 * Sets the server controller to save screen as bitmap and create thumbnails
  * @param {String} controller - the name of the controller
 */
function cvjs_setServerCreateThumb_StickyNote_Controller(controller){

	cvjs_serverCreateThumb_StickyNote_Controller = controller;

}



/**
 * Sets the server print mode controller. This variable is used to control what happens after a screenshot is sent to the server
  * @param {int} mode - the mode in which to control encapsulations of screenshots images sent down to server
  *                     mode = 0: Standard print mode in which a screenshot gets encapsulated into an html document that is opened through a pop-up for printing
  *                     mode = 1: The screenshot is saved to the server as part of stickyNote save, and thumbnails of the image is generated, see method: cvjs_saveScreenAsImage_stickyNoteInfo_makeTumbnails()
  *                     mode = 2: The screenshot is saved to the server as part of a multidocument batch print pdf creation, see method: cvjs_batchConvertDrawingsToPDF()
 */
function cvjs_setServerSavePrintModeController(mode){

	cvjs_serverSavePrintModeController = mode;

}



/**
 * Sets the server print mode controller. This variable is used to control what happens after a screenshot is sent to the server
  * @param {int} mode - the mode in which to control encapsulations of screenshots images sent down to server
  *                     mode = 0: Standard print mode in which a screenshot gets encapsulated into an html document that is opened through a pop-up for printing
  *                     mode = 1: The screenshot is saved to the server as part of stickyNote save, and thumbnails of the image is generated, see method: cvjs_saveScreenAsImage_stickyNoteInfo_makeTumbnails()
  *                     mode = 2: The screenshot is saved to the server as part of a multidocument batch print pdf creation, see method: cvjs_batchConvertDrawingsToPDF()
 */
function cvjs_setServerSavePrintModeHandler(mode){

	cvjs_serverSavePrintModeController = mode;

}


/**
 * Sets the server ScreenToPDF PHP controller document
  * @param {String} controller  - The location of this document is in: cvjs_phpPath if php, else it will use handler folder.
 */
function cvjs_setServerScreenToPDFController(controller){

	cvjs_screenToPDF_Controller = controller;

}

/**
 * Sets the server ScreenToPDF PHP controller document
  * @param {String} controller  - The location of this document is in: cvjs_phpPath  if php, else it will use handler folder.
 */
function cvjs_setServerScreenToPDFHandler(controller){

	cvjs_screenToPDF_Controller = controller;

}



/**
 * Save screen image to server
 * On the server two thumbnails are created
 * @param {string} serverPath - path on Server to save image content and create thumbnails
 * @param {string} image_fileName - name of image file on server. The file with sticky note content will be named fileName.txt
 * @param {int} sizeThumb1 - size in pixels of thumbnail one
 * @param {string} thumb1_fileName - filename of thumbnail one on server
 * @param {int} sizeThumb2 - size in pixels of thumbnail two
 * @param {string} thumb2_fileName - filename of thumbnail two on server
 */

function cvjs_saveScreenAsImage_makeTumbnails(serverPath, image_fileName, sizeThumb1, thumb1_fileName, sizeThumb2, thumb2_fileName ){

	cvjs_saveScreenAsImage_stickyNoteInfo_makeTumbnails(serverPath, image_fileName, sizeThumb1, thumb1_fileName, sizeThumb2, thumb2_fileName );
}

/**
 * Save screen image to server as well as list of stickyNote content and information
 * On the server two thumbnails are created
 * @param {string} serverPath - path on Server to save image content and create thumbnails
 * @param {string} image_fileName - name of image file on server. The file with sticky note content will be named fileName.txt
 * @param {int} sizeThumb1 - size in pixels of thumbnail one
 * @param {string} thumb1_fileName - filename of thumbnail one on server
 * @param {int} sizeThumb2 - size in pixels of thumbnail two
 * @param {string} thumb2_fileName - filename of thumbnail two on server
 */

 function cvjs_saveScreenAsImage_stickyNoteInfo_makeTumbnails(serverPath, image_fileName, sizeThumb1, thumb1_fileName, sizeThumb2, thumb2_fileName ){


// extract all strickynote information to txt file

	var stickyNoteContent="";
	for (var i=0; i<vqStickyNotes.length; i++){

		if (i>0) stickyNoteContent = stickyNoteContent + "\n";
		stickyNoteContent = stickyNoteContent + vqStickyNotes[i].data("id")+","+vqStickyNotes[i].data("name")+","+vqStickyNotes[i].data("userid")+","+vqStickyNotes[i].data("date")+","+vqStickyNotes[i].data("text");
	}


// when both elements are saved, call php document to create thumbnails and return

	cvjs_phpImagesUrlController = cvjs_serverHandlersPath + cvjs_serverCreateThumb_StickyNote_Controller;

	cvjs_serverSave_php_controllerArray = {};
	cvjs_serverSave_php_controllerArray['serverPath'] = serverPath;
	cvjs_serverSave_php_controllerArray['fileName'] = image_fileName.substring(0,image_fileName.indexOf(".png"));
	cvjs_serverSave_php_controllerArray['thumbFile1'] = thumb1_fileName;
	cvjs_serverSave_php_controllerArray['thumbFile1_size'] = sizeThumb1;
	cvjs_serverSave_php_controllerArray['thumbFile2'] = thumb2_fileName;
	cvjs_serverSave_php_controllerArray['thumbFile2_size'] = sizeThumb2;
	cvjs_serverSave_php_controllerArray['stickyNoteContent'] = stickyNoteContent;



// make a canvas element of screen content and save it
// global API settings of landscape/portrait, papersize and resolution is used


	cvjs_serverSavePrintModeController = 1;
	cvjs_saveScreenAsImage(serverPath, image_fileName);

	// the call to create thumbnails and save the stickynote content is done in the callback from when the ScreenImage has been saved


}




var cvjs_serverSavePrintMode_serverPath = "";
var cvjs_serverSavePrintMode_image_fileName = "";


/**
 * Save screen image to server as well as list of stickyNote content and information
 * On the server two thumbnails are created
 * @param {string} serverPath - path on Server to save image content
 * @param {string} image_fileName - name of image file on server.
 */
function cvjs_saveScreenAsImage(serverPath, image_fileName){

	// save screen image on server

	cvjs_serverSavePrintMode_serverPath = serverPath;
	cvjs_serverSavePrintMode_image_fileName = image_fileName.substring(0,image_fileName.lastIndexOf("."))+"_base64.png";

//	window.alert("saveScreenAsImage "+serverPath+"  "+cvjs_serverSavePrintMode_image_fileName+ "  controller "+cvjs_serverSavePrintModeController);

	if (cvjs_serverSavePrintModeController == 0){
	if (cvjs_debug) 		console.log("cvjs_saveScreenAsImage: cvjs_serverSavePrintModeController == 0 therefore returns");
		return;
	}

	cvjs_printCanvasPaperSize();

}


var cvjs_batchDrawingsArrLength = 0;
var cvjs_batchDrawingsArrLength_globalCounter = 0;
var cvjs_drawingFilesArray = new Array();
var cvjs_pageOrientationArray = new Array();
var cvjs_pageSizeArray = new Array();
var cvjs_pageResolutionArray = new Array();


var cvjs_singleDrawingFile = "";
var cvjs_singlePageOrientation = "";
var cvjs_singlePageSize = "";
var cvjs_singlePageResolution= "";


/**
 * Captures the screen image and creates a single page PDF
 * @param {string} pageOrientation - Orientation of drawings: landscape/portrait
 * @param {string} pageSize - Papersize of drawing
 * @param {string} pageResolution - Page resolution in dpi, default is 300
 */
function cvjs_saveScreenAsPDF(pageOrientation, pageSize, pageResolution){

	cvjs_setPrintPaperSize(pageSize);
	cvjs_setPrintOrientation(pageOrientation);
	cvjs_setPrintResolutionDpi(pageResolution);

	// 6.1.23
	var myDownloadFile = cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].substring(cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].lastIndexOf("/")+1);					
	myDownloadFile = myDownloadFile.substring(0, myDownloadFile.lastIndexOf("."));

	var currentdate = new Date();
	var datetime = "y"+currentdate.getFullYear() +"_m"+(currentdate.getMonth()+1)+"_d"+(currentdate.getDate())+"_h"+currentdate.getHours()+"_m"+currentdate.getMinutes()+"_s"+currentdate.getSeconds();

	var month = "jan";
	var hours = currentdate.getHours(); 
	
	if (hours<10) hours = "0"+hours;
	switch(currentdate.getMonth()) {
		case 0:
			month = "Jan";
			break;
		case 1:
			month = "Feb";
			break;
		case 2:
			month = "Mar";
			break;
		case 3:
			month = "Apr";
			break;
		case 4:
			month = "May";
			break;
		case 5:
			month = "Jun";
			break;
		case 6:
			month = "Jul";
			break;
		case 7:
			month = "Aug";
			break;
		case 8:
			month = "Sep";
			break;
		case 9:
			month = "Oct";
			break;
		case 10:
			month = "Nov";
			break;
		case 11:
			month = "Dec";
			break;
		default:
			month = "Jan";
	}							
	var datetime = month+"_"+(currentdate.getDate())+"_H"+hours+"_"+currentdate.getMinutes();

//	var random = Math.random().toString().substring(2,5);
//	var image_fileName = 'screendump_'+random+'.png';
//	cvjs_singleDrawingFile = 'screendump_'+random;

	myDownloadFile = myDownloadFile +"_"+datetime;
	var image_fileName = myDownloadFile+'.png';
	cvjs_singleDrawingFile = myDownloadFile;
	
	cvjs_singlePageOrientation = pageOrientation;
	cvjs_singlePageSize = pageSize;
	cvjs_singlePageResolution= pageResolution;

	// set the print mode to single page pdf
	cvjs_serverSavePrintModeController = 3;

	if (cvjs_serverSavePrintModeController == 3){

		jQuery('#cvjs_wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html('<table class=\"waitlooperTable\" width=\"100\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr><td><div id=\"looper_image_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\"></div></td></tr><tr><td><div class=\"cvjs_wait_text_4\" id=\"cvjs_wait_looper_text_id_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\">'+languageTable.languages[cvjs_currentLanguage].WaitModal.Printing+'</div></td></tr></table>');


		cvjs_setLooperPosition();
		

	//window.alert("after waitlooper");
		jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).fadeIn(1500);

	}


	var serverPath;
	
/* 6.1.21	
	if (cvjs_screenToPDF_Controller.indexOf(".php")>-1){


		if (cvjs_printObjectPathRelativeFlag){
			serverPath = cvjs_printObjectPath;
			serverPath = cvjs_phpPath  + "/tcpdf/batchconvert/" ;
		}
		else{
			serverPath = cvjs_printObjectPathAbsoluteServer;
			serverPath = cvjs_phpPath  + "/tcpdf/batchconvert/" ;
		}
	}
	else{  // servlet or other path controllers 3.2.01d
		
		serverPath = cvjs_ServerLocation  + "/converters/files/" ;		
	}
*/	
		// 6.1.21
		serverPath = cvjs_ServerLocation  + "/converters/files/" ;		


	
	cvjs_saveScreenAsImage(serverPath, image_fileName);

}

function cvjs_printSavedBitmapToPDF(){

	// 3.2.01d
	cvjs_serverSave_php_controllerArray = {};
	cvjs_serverSave_php_controllerArray['numberOfFiles'] = 1;

	var serverPath;

/* 6.1.21
	if (cvjs_screenToPDF_Controller.indexOf(".php")>-1){

		cvjs_phpImagesUrlController = cvjs_phpPath  + "/tcpdf/batchconvert/"  + cvjs_screenToPDF_Controller

		if (cvjs_printObjectPathRelativeFlag){
			serverPath = cvjs_printObjectPath;
			serverPath = cvjs_phpPath  + "/tcpdf/batchconvert/" ;
		}
		else{
			serverPath = cvjs_printObjectPathAbsoluteServer;
			serverPath = cvjs_phpPath  + "/tcpdf/batchconvert/" ;
		}

	}
	else{  // servlet or other path controllers 3.2.01d
		
		cvjs_phpImagesUrlController = cvjs_serverHandlersPath + cvjs_screenToPDF_Controller
		serverPath = cvjs_ServerLocation  + "/converters/files/" ;
		
	}
*/	
	// 6.1.21
	cvjs_phpImagesUrlController = cvjs_serverHandlersPath + cvjs_screenToPDF_Controller
	serverPath = cvjs_ServerLocation  + "/converters/files/" ;

	
	cvjs_serverSave_php_controllerArray['serverPath'] = serverPath;


	cvjs_serverSave_php_controllerArray['fileName_0'] = cvjs_singleDrawingFile ;
	cvjs_serverSave_php_controllerArray['rotation_0'] = cvjs_singlePageOrientation;
	cvjs_serverSave_php_controllerArray['page_format_0'] = jQuery("#cvjs_paperSize").val(); // 6.1.29 cvjs_singlePageSize;
	cvjs_serverSave_php_controllerArray['page_resolution_0'] = jQuery("#cvjs_paperOrientation").val() // 6.1.29 cvjs_singlePageResolution;

	cvjs_serverSave_php_controllerArray['org_fileName_0'] = cvjs_FileNameNoExtension ;

//window.alert("org_fileName_0 "+cvjs_serverSave_php_controllerArray['org_fileName_0']);

	jQuery('#cvjs_wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html('<table class=\"waitlooperTable\" width=\"100\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr><td><div id=\"looper_image_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\"></div></td></tr><tr><td><div class=\"cvjs_wait_text_5\" id=\"cvjs_wait_looper_text_id_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\">'+languageTable.languages[cvjs_currentLanguage].WaitModal.BatchPDF+'</div></td></tr></table>');

	cvjs_setLooperPosition();
	
	jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).fadeIn(1000);

	jQuery.ajax({
	  url:cvjs_phpImagesUrlController,
	  type: 'post',
	  data: cvjs_serverSave_php_controllerArray,
	  success: function(html){
			//window.alert(html+"  we have now created the single page pdf");
			cvjs_serverSavePrintModeController = 0;
			jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
			// hide modal
//				printWindow = window.open(cvjs_serverHandlersPath + "/tcpdf/batchconvert/" + html, 'CADViewer - Print', 'height='+screen.height*0.5+',width='+screen.width*0.5);


				// 6.1.21
								
//				printWindow = window.open(cvjs_ServerUrl  + "/converters/files/" + html, 'CADViewer - Print', 'height='+screen.height*0.8+',width='+screen.width*0.5);
				// 6.1.23
				printWindow = window.open(cvjs_ServerUrl  + "/converters/files/" + html, 'CADViewer - Print', 'width='+screen.width*cvjs_print_to_pdf_windowRelativeSize+',height='+ screen.height*cvjs_print_to_pdf_windowRelativeSize);
				printWindow.focus();


	  },
	  error:function(data_e){console.log("Error "+data_e); return;}

	});

}


/**
 * Loads a set of drawings, apply page size, page orientation and resolution to each page/drawing.
 * Produce a multi-page PDF out of the set of drawing.
 * @param string floorPlan - Name of the floorplan div for batch processing
 * @param {string[]} drawingFilesArray - String array with name and location of drawings
 * @param {string[]} pageOrientationArray - String array with orientation of drawings: landscape/portrait
 * @param {string[]} pageSizeArray - String array with papersizes of drawings
 * @param {string[]} pageResolutionArray - Array with page resolutions
 * @param string batchFilesToPDF_Controller - Name of the php document that creates the report when the graphics is created
 * @param Object callbackMethod - callBackMethod to decorate each drawing before publishing
 */
function cvjs_batchConvertDrawingsToPDF_CustomReport(floorPlan, drawingFilesArray, pageOrientationArray, pageSizeArray, pageResolutionArray, batchFilesToPDF_Controller, callbackMethod){

	cvjs_batchFilesToPDF_Controller = batchFilesToPDF_Controller;

	cvjs_batchDrawingsArrLength = drawingFilesArray.length;
	cvjs_batchDrawingsArrLength_globalCounter = 0;

	cvjs_drawingFilesArray = drawingFilesArray;
	cvjs_pageOrientationArray = pageOrientationArray;
	cvjs_pageSizeArray = pageSizeArray;
	cvjs_pageResolutionArray = pageResolutionArray;

	// set up OnLoadEnd to point to custom method

	// window.alert("cvjs_batchConvertDrawingsToPDF");

	// set the callback method to loop through array of drawings to be loaded

	//cvjs_setCustomCallbackMethodOnLoadEnd(true, cvjs_batchConvertOnLoadEndCustomMethod);
	cvjs_setCustomCallbackMethodOnLoadEnd(true, callbackMethod);
	
	
	// set the print mode to batch print
	cvjs_serverSavePrintModeController = 2;


	// start the process by loading the first file in the set
	//cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_drawingFilesArray[cvjs_batchDrawingsArrLength_globalCounter]);

	// 3.2.02d
	cvjs_LoadDrawing(floorplan_div_Array[cvjs_rPaperIndex(floorPlan)], cvjs_drawingFilesArray[cvjs_batchDrawingsArrLength_globalCounter]);
	
	

	// we will initiate the load the subsequent drawings from the callback, when the base64 bitmap image is saved on the server
	// cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_drawingFilesArray[cvjs_batchDrawingsArrLength_globalCounter++]);

}



/**
 * Sets the paper size of print output
 * @param {string} papersize - String containg paper size, allowed settings are: A4, A3, A2, US LETTER, ANSI A, ANSI B, ANSI C
 */

function cvjs_setPrintPaperSize(papersize){

	papersize = papersize.toLowerCase();

	// 6.1.27 rewrite

	if (papersize.indexOf("a4")==0){
		cvjs_printPaperSize = "A4";
		cvjs_printPaperWidth_mm = 297;   // A4        - landscape
		cvjs_printPaperHeight_mm = 210;   // A4
	}

	if (papersize.indexOf("a3")==0){
		cvjs_printPaperSize = "A3";
		cvjs_printPaperWidth_mm = 420;   // A3         - landscape
		cvjs_printPaperHeight_mm = 297;   // A3
	}

	if (papersize.indexOf("a2")==0){
		cvjs_printPaperSize = "A2";
		cvjs_printPaperWidth_mm = 594;    // A2         - landscape
		cvjs_printPaperHeight_mm = 420;   // A2
	}

	if (papersize.indexOf("a1")==0){
		cvjs_printPaperSize = "A1";
		cvjs_printPaperWidth_mm = 841;    //
		cvjs_printPaperHeight_mm = 594;   //
	}

	if (papersize.indexOf("a0")==0){
		cvjs_printPaperSize = "A0";
		cvjs_printPaperWidth_mm = 1183;    //
		cvjs_printPaperHeight_mm = 841;   //
	}


	if (papersize.indexOf("a5")==0){
		cvjs_printPaperSize = "A5";
		cvjs_printPaperWidth_mm = 210;    //
		cvjs_printPaperHeight_mm = 148;   //
	}

	if (papersize.indexOf("usa")==0){
		cvjs_printPaperSize = "USA";
		cvjs_printPaperWidth_mm = 279.4;    // US LETTER - ANSI A   8.5  x11  - landscape
		cvjs_printPaperHeight_mm = 215.9;   // US LETTER - ANSI A
	}

	if (papersize.indexOf("usb")==0){
		cvjs_printPaperSize = "USB";
		cvjs_printPaperWidth_mm = 431.8;    // ANSI B  17x11 - landscape
		cvjs_printPaperHeight_mm = 279.4;   // ANSI B
	}

	if (papersize.indexOf("usc")==0){
		cvjs_printPaperSize = "USC";
		cvjs_printPaperWidth_mm = 555.8;      // ANSI C 17x22 - lansacape
		cvjs_printPaperHeight_mm = 431.8;   // ANSI C
	}

	if (papersize.indexOf("usd")==0){
		cvjs_printPaperSize = "USD";
		cvjs_printPaperWidth_mm = 863.6;      // ANSI D 22x34 - lansacape
		cvjs_printPaperHeight_mm = 555.8;   // ANSI D
	}

	if (papersize.indexOf("use")==0){
		cvjs_printPaperSize = "USE";
		cvjs_printPaperWidth_mm = 1117.6;      // ANSI E 34x44 - lansacape
		cvjs_printPaperHeight_mm = 836.6;   // ANSI E
	}


	if (papersize.indexOf("letter")==0){
		cvjs_printPaperSize = "letter";
		cvjs_printPaperWidth_mm = 279.4;    // US LETTER - ANSI A     - landscape
		cvjs_printPaperHeight_mm = 215.9;   // US LETTER - ANSI A
	}

	if (papersize.indexOf("legal")==0){
		cvjs_printPaperSize = "legal";
		cvjs_printPaperWidth_mm = 356;    // US legal     - landscape
		cvjs_printPaperHeight_mm = 216;   // US
	}

	if (papersize.indexOf("ledger")==0){
		cvjs_printPaperSize = "ledger";
		cvjs_printPaperWidth_mm = 431.8;    // ANSI B  17x11 - landscape
		cvjs_printPaperHeight_mm = 279.4;   // ANSI B
	}

	if (papersize.indexOf("tabloid")==0){
		cvjs_printPaperSize = "tabloid";
		cvjs_printPaperWidth_mm = 431.8;    // ANSI B  17x11 - landscape
		cvjs_printPaperHeight_mm = 279.4;   // ANSI B
	}

	if (papersize.indexOf("archa")==0){
		cvjs_printPaperSize = "ARCHA";
		cvjs_printPaperWidth_mm = 304.8;    // ARCH A  9 x 12 - landscape
		cvjs_printPaperHeight_mm = 228.6;   //
	}


	if (papersize.indexOf("archb")==0){
		cvjs_printPaperSize = "ARCHB";
		cvjs_printPaperWidth_mm = 457.2;    // ARCH B  12 x 18 - landscape
		cvjs_printPaperHeight_mm = 304.8;   // 
	}

	if (papersize.indexOf("archc")==0){
		cvjs_printPaperSize = "ARCHC";
		cvjs_printPaperWidth_mm = 609.6;    // ARCH C  18 x 24 - landscape
		cvjs_printPaperHeight_mm = 457.2;   // 
	}


	if (papersize.indexOf("archd")==0){
		cvjs_printPaperSize = "ARCHD";
		cvjs_printPaperWidth_mm = 914.4;    // ARCH D  24x36 - landscape
		cvjs_printPaperHeight_mm = 609.6;   // 
	}

	if (papersize.indexOf("arche")==0){
		cvjs_printPaperSize = "ARCHE";
		cvjs_printPaperWidth_mm = 1219.2;    // ARCH E  36 x 48 - landscape
		cvjs_printPaperHeight_mm = 914.4;   // 
	}


	if (papersize.indexOf("alcoaa")==0){
		cvjs_printPaperSize = "ALCOAA";
		cvjs_printPaperWidth_mm = 914.4;    // ALCOAA  30 x 36 - landscape
		cvjs_printPaperHeight_mm = 762;   //
	}



	cvjs_printPixelWidth = Math.round(cvjs_printPaperWidth_mm * cvjs_printResolutionDpi/(2.54*10));
	cvjs_printPixelHeight = Math.round(cvjs_printPaperHeight_mm * cvjs_printResolutionDpi/(2.54*10));

}


/**
 * Sets the print resolution
 * @param {int} dpi - print resolution in dpi, minumum is 75dpi, standard is 300
 */

function cvjs_setPrintResolutionDpi(dpi){

	if (dpi >= 75){

		cvjs_printResolutionDpi = dpi;
		cvjs_printPixelWidth = Math.round(cvjs_printPaperWidth_mm * cvjs_printResolutionDpi/(2.54*10));
		cvjs_printPixelHeight = Math.round(cvjs_printPaperHeight_mm * cvjs_printResolutionDpi/(2.54*10));
	}
	//console.log("set resolution pixel width and height   "+cvjs_printPixelWidth+" "+cvjs_printPixelHeight);
}


/**
 * Sets the print orientation
 * @param {string} orientation - print orientation, portrait or landscape
 */

function cvjs_setPrintOrientation(orientation){

	orientation = orientation.toLowerCase();

	if (orientation.indexOf("landscape")==0){
		cvjs_printOrientation = "landscape";
	}

	if (orientation.indexOf("portrait")==0){
		cvjs_printOrientation = "portrait";
	}

	//console.log(" print orientation  "+cvjs_printOrientation);
}


var print_text_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];



/**
 * Funtion to open print model, interactively set paper size, resolution and orientation and then print
 * API method linked to icon interface
 * @param {string} floorplan_div - name of div containing CADViewer canvas
**/

function cvjs_Print(floorplan_div){

	
	if (cvjs_customPrintTextboxMode){		
		jQuery("#cvjs_SelectVariablesTextBox").empty();
		for (k=0; k<cvjs_printModalCustomTextBoxVariablesList.length; k++){
			jQuery("#cvjs_SelectVariablesTextBox").append('<option value=\"'+(k+1)+'\">'+cvjs_printModalCustomTextBoxVariablesList[k]+'</option>');
		}	
	}


	if (floorplan_div == undefined){
		cvjs_active_floorplan_div_nr = 0;
		floorplan_div = floorplan_div_Array[0];
	}
	else{
		if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
				// do nothing
		}
		else{
			floorplan_div = floorplan_div + "_svg";
		}
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	}
		
	jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
	jQuery('#floorPlanCanvasObject_table_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
	
	if (cvjs_PrintIconDisabled[cvjs_active_floorplan_div_nr]){
		cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], languageTable.languages[cvjs_currentLanguage].InfoMessageModal.PrintDisabled);
		return;
	}
	
	
	// 3.0.15c   - add "_svg" to div, if called through external API
	if (cvjs_debug) console.log(floorplan_div.lastIndexOf("_svg")+"  "+(floorplan_div.length-4));
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	
	
	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;


	if (print_text_offset_flag[cvjs_active_floorplan_div_nr]){
		print_text_offset_flag[cvjs_active_floorplan_div_nr] = false;
		// 3.1.21j .appendTo('body');
		jQuery("#printModal_"+floorplan_div).css({position: "fixed"});
		jQuery("#printModal_"+floorplan_div).offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});
	}
	
	jQuery('#printModal_'+floorplan_div).show();
	
	// check if cvjs_custom_checkbox checked XXXXX

	if (cvjs_customPrintCheckboxMode && !cvjs_initCustomPrintCheckboxMode){
		cvjs_initCustomPrintCheckboxMode = true;
		if( jQuery("#cvjs_custom_checkbox").is(":checked") ){
			cvjs_customPrintCheckbox = true;
			// show modals
			jQuery("#cvjs_printModalTextboxLocation").show();
			jQuery("#cvjs_printModalTextboxLocation_text").show();
			if (cvjs_customPrintDualTextboxMode){
				jQuery("#cvjs_printModalDualTextboxLocation").show();
				jQuery("#cvjs_printModalDualTextboxLocation_text").show();
			}


			var printModalClass = "printModal";
			if (cvjs_customPrintCheckboxMode || cvjs_customPrintTextboxMode)   // cvjs_customPrintTextboxMode
				printModalClass = "printModalTextbox" 
			
			
			var modalheight = jQuery('.'+printModalClass).css('height');
			modalheight = modalheight.substring(0, modalheight.indexOf("px"));
			var newheight = parseInt(modalheight) +70;
			jQuery('.'+printModalClass).css('height', newheight+"px");

			// make box larger
								
		}else{
			cvjs_customPrintCheckbox = false;
			jQuery("#cvjs_printModalTextboxLocation").hide();
			jQuery("#cvjs_printModalTextboxLocation_text").hide();
			if (cvjs_customPrintDualTextboxMode){
				jQuery("#cvjs_printModalDualTextboxLocation").hide();
				jQuery("#cvjs_printModalDualTextboxLocation_text").hide();						
			}
			// hide modals
			// make box smaller
			var printModalClass = "printModal";
			if (cvjs_customPrintCheckboxMode || cvjs_customPrintTextboxMode)   // cvjs_customPrintTextboxMode
				printModalClass = "printModalTextbox" 
			var modalheight = jQuery('.'+printModalClass).css('height');
			modalheight = modalheight.substring(0, modalheight.indexOf("px"));
			var newheight = parseInt(modalheight) - 70;
			jQuery('.'+printModalClass).css('height', newheight+"px");
		
		}
	}
	
}


// Internal function to pass over to print after print modal settings

function cvjs_exitPrintModal(floorplan_div, val){

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;

	if (val==1){
		jQuery('#printModal_'+floorplan_div).fadeOut(500);
		return;
	}

	var printResolution = jQuery("#cvjs_printResolution").val();
	cvjs_setPrintResolutionDpi(printResolution);

	//window.alert("cvjs_paperSize "+jQuery("#cvjs_paperSize").val());

	// 6.1.27
	cvjs_setPrintPaperSize(jQuery("#cvjs_paperSize").val());
/*
	var paperSize = jQuery("#cvjs_paperSize").val();
	if (paperSize == 1 )cvjs_setPrintPaperSize("A4");
	if (paperSize == 2 )cvjs_setPrintPaperSize("A3");
	if (paperSize == 3 )cvjs_setPrintPaperSize("A2");
	if (paperSize == 4 )cvjs_setPrintPaperSize("ANSI A");  // US Letter
	if (paperSize == 5 )cvjs_setPrintPaperSize("ANSI B");  // US Ledger
	if (paperSize == 6 )cvjs_setPrintPaperSize("US Legal");
	if (paperSize == 7 )cvjs_setPrintPaperSize("ANSI C");


	// IF we have US ARCH D, E or A1, A0, we print as PDF
	if (paperSize == 8 )cvjs_setPrintPaperSize("A1");
	if (paperSize == 9 )cvjs_setPrintPaperSize("A0");
	if (paperSize == 10 )cvjs_setPrintPaperSize("US Arch D");
	if (paperSize == 11 )cvjs_setPrintPaperSize("US Arch E1");

	if (paperSize>=8){
		if (!cvjs_printPdf){  // make pdf print message
			var textString = languageTable.languages[cvjs_currentLanguage].InfoMessageModal.PaperSizePDFPrintOnly;
			cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], textString);
//			jQuery('#printModal').hide();
			return;
		}
	}
*/


	jQuery.when( jQuery('#printModal_'+floorplan_div).fadeOut(100) ).done(function( x ) {

		if (cvjs_debug) console.log("we have faded out! parem "+x);

		jQuery('#cvjs_wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html('<table class=\"waitlooperTable\" width=\"100\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr><td><div id=\"looper_image_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\"></div></td></tr><tr><td><div class=\"cvjs_wait_text_4\" id=\"cvjs_wait_looper_text_id_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\">'+languageTable.languages[cvjs_currentLanguage].WaitModal.Printing+'</div></td></tr></table>');

		cvjs_setLooperPosition();


		jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).fadeIn(100);

		if (cvjs_debug) 	console.log("after waitlooper, printmodal Fade Out WaitLooper Fade IN");

		var paperOrientation = jQuery("#cvjs_paperOrientation").val();
		if (paperOrientation == 1 ) cvjs_setPrintOrientation("landscape");
		if (paperOrientation == 2 ) cvjs_setPrintOrientation("portrait");

		if (cvjs_printPdf){
			
			/*  6.1.22
			
			// we are translating US sizes to ANSI C
			if (paperSize == 4 || paperSize == 5 || paperSize == 6 || paperSize == 7 || paperSize == 10 || paperSize == 11) cvjs_setPrintPaperSize("ANSI C");
			// we are translating EU Sized to A2
			if (paperSize == 1 || paperSize == 2 || paperSize == 3 || paperSize == 8 || paperSize == 9) cvjs_setPrintPaperSize("A2");

			*/

	//		jQuery('#printModal').hide();

			if (!cvjs_custom_print_to_pdf)
				cvjs_printConvertedPDF();
			else{

				// we make ajax call to custom component
				var param_1 = "";
				var value_1 = "";


				for (var i=0; i<rest_nname[cvjs_active_floorplan_div_nr ].length; i++){
					if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="basic")  {param_1 = rest_nname[cvjs_active_floorplan_div_nr ][i]; value_1 = rest_vvalue[cvjs_active_floorplan_div_nr ][i]; i =rest_nname[cvjs_active_floorplan_div_nr ].length; }
					if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="layout")  {param_1 = rest_nname[cvjs_active_floorplan_div_nr ][i]; value_1 = rest_vvalue[cvjs_active_floorplan_div_nr ][i]; i =rest_nname[cvjs_active_floorplan_div_nr ].length; }
					if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="model")  {param_1 = rest_nname[cvjs_active_floorplan_div_nr ][i]; value_1 = rest_vvalue[cvjs_active_floorplan_div_nr ][i]; i =rest_nname[cvjs_active_floorplan_div_nr ].length; }
					if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="layoutsonly")  {param_1 = rest_nname[cvjs_active_floorplan_div_nr ][i]; value_1 = rest_vvalue[cvjs_active_floorplan_div_nr ][i]; i =rest_nname[cvjs_active_floorplan_div_nr ].length; }
					if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="lastsavedview")  {param_1 = rest_nname[cvjs_active_floorplan_div_nr ][i]; value_1 = rest_vvalue[cvjs_active_floorplan_div_nr ][i]; i =rest_nname[cvjs_active_floorplan_div_nr ].length; }
					if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="last")  {param_1 = rest_nname[cvjs_active_floorplan_div_nr ][i]; value_1 = rest_vvalue[cvjs_active_floorplan_div_nr ][i]; i =rest_nname[cvjs_active_floorplan_div_nr ].length; }
					if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="firstlayout")  {param_1 = rest_nname[cvjs_active_floorplan_div_nr ][i]; value_1 = rest_vvalue[cvjs_active_floorplan_div_nr ][i]; i =rest_nname[cvjs_active_floorplan_div_nr ].length; }
				}

				if (param_1 == ""){  // this is a file converted with -basic
										
					var pagename = multiPages[cvjs_active_floorplan_div_nr].pages[(multiPages[cvjs_active_floorplan_div_nr].currentPage)-1].pageName;					
					
					if (pagename.toLowerCase().indexOf("model")>-1){				
						param_1 = "model"; value_1 = "";
					}
					else {
						param_1 = "layout"; value_1 = multiPages[cvjs_active_floorplan_div_nr].pages[(multiPages[cvjs_active_floorplan_div_nr].currentPage)-1].pageName;						
					}

				}								
				
				// we hide modal, show print command and send instructions down.....

				jQuery('#cvjs_wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html('<table class=\"waitlooperTable\" width=\"100\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr><td><div id=\"looper_image_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\"></div></td></tr><tr><td><div class=\"cvjs_wait_text_5\" id=\"cvjs_wait_looper_text_id_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\">'+languageTable.languages[cvjs_currentLanguage].WaitModal.BatchPDF+'</div></td></tr></table>');

				cvjs_setLooperPosition();
				jQuery('#printModal_'+floorplan_div).hide();

				var finalUrl =  cvjs_serverHandlersPath + cvjs_customPDFprintController;

				var filelist_data = {};

				var file_to_use = "";

				if( currentLoadedDrawingFullName.indexOf(".js")>-1 || currentLoadedDrawingFullName.indexOf(".svg")>-1 )
					file_to_use = currentLoadedDrawingFullName;
				else
					file_to_use = cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ];


				filelist_data['file'] = file_to_use; //cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ];
				filelist_data['param1_name'] = param_1;
				filelist_data['param1_value'] = value_1;
				filelist_data['paper_size'] = cvjs_printPaperSize;
				filelist_data['paper_orientation'] = cvjs_printOrientation;
				
				
				
					// 2018-01-25  // creating grayscale
				if (cvjs_printGrayscale){
					
					// find selection of  grayscale or B/W
						// 6.2.33	
					if (jQuery('#cvjs_grayScaleType').val()==2)
						filelist_data['param2_name'] = "bw";
					else
						filelist_data['param2_name'] = "greyscale";

					//filelist_data['param2_name'] = "greyscale";
					filelist_data['param2_value'] = "";
				}
				else{
					filelist_data['param2_name'] = "";
					filelist_data['param2_value'] = "";					
				}
							

				jQuery.ajax({
					url:finalUrl,
					type: 'post',
					data: filelist_data,
					success: function(html){

						console.log("Response custom php: "+html);
						
						// We now ask to parse and make a print window similar to the standard php/servlet route, but based on a customer produced PDF file-load
					
						parseServerResponsePDFPrintCustom(html);
												
						jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();

					}

				});




			}


		}
		else{
						
			if (cvjs_printPaperSizeasSVGObjectFlag){
				// 6.1.30  - print using SVG canvas
				
				cvjs_printPaperSizeasSVGObject(floorplan_div);				
				
				// save the SVG in /converters/files/
				// initially or on server, change the   tmsMinLineWidth based on viewbox size, and print object size
			
				// make print encapsulation pop-up based on papersize and orientation.
				
				jQuery('#printModal').hide();
				
			}
			else{  // standard Canvas based print

				cvjs_printCanvasPaperSize();
				
			}

		}
	});

}

///////////// PRINT CONVERTED PDF                     DOWN
// function cvjs_LoadDrawing_Conversion_original

/**
 * Conversion for Print , either SVG or PDF with JSON handling. 
 * @param {string} floorplan_div - name of floorplan div
 * @param {string} originatingContent - base file name
 * @param {string} originatingUsername - username or ""
 * @param {string} originatingPassword - password or ""
 * @param {string} fileFormat - "pdf" or "svg"
 */
function cvjs_Conversion_forPrint(floorplan_div, originatingContent, originatingUsername, originatingPassword, fileFormat){

var json_titleblock = "";
	if (cvjs_customPrintCheckboxMode && cvjs_customPrintTextboxMode){

		if (cvjs_customPrintDualTextboxMode){
			cvjs_printModalCustomTextBoxVariablesContent[0]	= jQuery('#printmodal_text').val();
			cvjs_printModalCustomTextBoxVariablesContent[1]	= jQuery('#printmodal_dual_text').val();
		}
		else{
			// save the content of current print text modal box
			var variable = jQuery("#cvjs_SelectVariablesTextBox").val()	
			cvjs_printModalCustomTextBoxVariablesContent[cvjs_customPrintTextboxOnChange_pre-1]	= jQuery('#printmodal_text').val();
			jQuery('#printmodal_text').val(cvjs_printModalCustomTextBoxVariablesContent[variable-1]);	
			cvjs_customPrintTextboxOnChange_pre = variable;			
		}
		
		var json_titleblock = "[";
		// FOR EACH Variables // CREATE A VARIABLES ENTRY in JSON TITLEBLOCK
		for (k=0; k<cvjs_printModalCustomTextBoxVariablesList.length; k++){			
			if (k>0) json_titleblock += " , ";

			if (cvjs_customPrintDualTextboxMode) 
				json_titleblock += "{ \"Variables\": { \""+cvjs_printModalCustomTextBoxVariablesList[k]+"\": { \"Value\": \""+cvjs_printModalCustomTextBoxVariablesContent[k].replace(/(\r\n|\n|\r)/gm, "/P")+"\", \"FontSize\": \""+10+"\"";
			else
				json_titleblock += "{ \"Variables\": { \""+cvjs_printModalCustomTextBoxVariablesList[k]+"\": { \"Value\": \""+cvjs_printModalCustomTextBoxVariablesContent[k].replace(/(\r\n|\n|\r)/gm, "/P")+"\", \"FontSize\": \""+jQuery('#cvjs_printTextboxFontSizeInput_'+floorplan_div).val()+"\"";
			
			if (cvjs_printModalCustomTextBoxVariablesPrepend[k].indexOf("none")==0){
					// do nothing
			}
			else{
				json_titleblock += ", \"Prefix\": \""+cvjs_printModalCustomTextBoxVariablesPrepend[k]+"\"";
			}
			
			json_titleblock += " } } }";
//			  "titlevariable": {
//				  "Value": "This is the title stuff/nHow does it look?",
//				  "Prefix": "Title"
//			  },

		}	
		json_titleblock += "]";
				
		// CREATE A TEMP File			
		// SAVE SYNCRHONIZED
		var saveJsonUrl = cvjs_serverHandlersPath + cvjs_serverSaveFileController; //	var saveSettingsUrl = settings_data_url+'save-file-p1.php';
		var randomname = Math.floor(Math.random() * 1000000);
		var json_data_location = cvjs_ServerLocation+"/converters/files/"+"variables"+randomname+".json";
		var json_data = {};
		json_data['file'] = json_data_location;
		json_data['file_content'] = json_titleblock;
//if (cvjs_debug)	window.alert(json_data['file_content']+" "+json_data['file']+"  "+saveJsonUrl);
		jQuery.ajax({
		  url:saveJsonUrl,
		  type: 'post',
		  async: false,
		  data: json_data,
		  success: function(html){
//window.alert("saved");
		  }  // end success
		});
		// GIVE THE PATH TO FILE TO json_titleblock  (which is processed later)
		json_titleblock = json_data_location;
	}

	if (cvjs_debug) console.log(floorplan_div+" 2 "+originatingContent+" 3none  4 "+originatingUsername+" 5 "+originatingPassword);

	jQuery('#cvjs_wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html('<table class=\"waitlooperTable\" width=\"100\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr><td><div id=\"looper_image_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\"></div></td></tr><tr><td><div class=\"cvjs_wait_text_5\" id=\"cvjs_wait_looper_text_id_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\">'+languageTable.languages[cvjs_currentLanguage].WaitModal.BatchPDF+'</div></td></tr></table>');

	cvjs_setLooperPosition();
	
	jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).show();
	jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();

	if (printDebugFlag) jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).show();
	
	var rest_nname_temp = {};
	var rest_vvalue_temp = {};


	for (var i=0; i<rest_nname[cvjs_active_floorplan_div_nr ].length; i++){

		if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="f"){
			rest_nname_temp[i] = "f";
			
			if (fileFormat.indexOf("pdf")==0)
				rest_vvalue_temp[i] = "pdf";
			else
				if (fileFormat.indexOf("svg")==0)
					rest_vvalue_temp[i] = "svg";		
		}
		else{
			rest_nname_temp[i] = rest_nname[cvjs_active_floorplan_div_nr ][i];
			rest_vvalue_temp[i] = rest_vvalue[cvjs_active_floorplan_div_nr ][i];
		}
	}

	// if there is no initialization of the parameters we use -f=js
	if (rest_nname_temp.length==undefined || rest_nname_temp.length==0){
		rest_nname_temp[0] = "f";
		//rest_vvalue_temp[0] = "pdf";
		if (fileFormat.indexOf("pdf")==0)
			rest_vvalue_temp[0] = "pdf";
		else
			if (fileFormat.indexOf("svg")==0)
				rest_vvalue_temp[0] = "svg";
	}
	// if there is no layout defined as page to view or if -basic is not defined, I want the model to be converted
	var modelflag= true;

	for (var i=0; i<rest_nname_temp.length; i++){
		if (rest_nname_temp[i]=="basic")  modelflag = false;
		if (rest_nname_temp[i]=="layout")  modelflag = false;
		if (rest_nname_temp[i]=="model")  modelflag = false;
		if (rest_nname_temp[i]=="layoutsonly")  modelflag = false;
		if (rest_nname_temp[i]=="lastsavedview")  modelflag = false;
		if (rest_nname_temp[i]=="last")  modelflag = false;
		if (rest_nname_temp[i]=="firstlayout")  modelflag = false;
	}

	if (modelflag){
		var i=rest_nname_temp.length;
		if (rest_contentFormat.toLowerCase().indexOf("dwf")==0){   // for DWF, the first page in the set is found via -lastsavedview
			// if AX2015 , if AX2011
			rest_nname_temp[i] = "lastsavedview";
			// if AX2017
			if (rest_converter.indexOf("AutoXchange AX2017")==0)
				rest_nname_temp[i] = "firstlayout";
			if (rest_converter.indexOf("AutoXchange AX2019")==0)
				rest_nname_temp[i] = "firstlayout";
			// 4.1.01a
			if (rest_converter.indexOf("AutoXchange AX2020")==0)
				rest_nname_temp[i] = "firstlayout";
		}
		else{
			rest_nname_temp[i] = "model";
		}

		rest_vvalue_temp[i] = "";
		i=rest_nname_temp.length;
		rest_nname_temp[i] = "extents";
		rest_vvalue_temp[i] = "";
	}


	// if we have a pcf file, we have to tell that we are converting a dgn file
	if (rest_contentFormat.toLowerCase().indexOf("pcf")==0){
			var i=rest_nname_temp.length;
			rest_nname_temp[i] = "treatas";
			rest_vvalue_temp[i] = "DGN";
	}

	var l_len = rest_nname_temp.length;
	for (var i=0; i<l_len; i++){
		if (rest_nname_temp[i]=="RL"){
			rest_nname_temp.splice(i, 1);
			rest_vvalue_temp.splice(i, 1);
		}
	}

	var l_len = rest_nname_temp.length;
	for (var i=0; i<l_len; i++){
		if (rest_nname_temp[i]=="TL"){
			rest_nname_temp.splice(i, 1);
			rest_vvalue_temp.splice(i, 1);
		}
	}


	if (rest_nname_custom[cvjs_active_floorplan_div_nr ].length>0){

			var l_len = rest_nname_temp.length;
			var c_len = rest_nname_custom[cvjs_active_floorplan_div_nr ].length;

			for (var i=0; i<c_len; i++){
				var flag = false;
				for (var j=0; j<l_len; j++){
					if (rest_nname_temp[j]==rest_nname_custom[cvjs_active_floorplan_div_nr ][i])
						flag = true;					
					}
					
				if (!flag){
					rest_nname_temp[l_len] = rest_nname_custom[cvjs_active_floorplan_div_nr ][i];
					rest_vvalue_temp[l_len] = rest_vvalue_custom[cvjs_active_floorplan_div_nr ][i];
					l_len++;

				}
			}
	}

		
	// 6.1.20  - if we have -layout , we cannot have custom parameters with -last, -lastsavedview or -model
	var layoutflag = false;
	var l_len = rest_nname[cvjs_active_floorplan_div_nr ].length;
	for (var i=0; i<l_len; i++){
		if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="layout") layoutflag = true;
//		window.alert(i+"  "+rest_nname[cvjs_active_floorplan_div_nr ][i]);
	}
	for (var i=0; i<l_len; i++){
		if (layoutflag) 
			if ( rest_nname[cvjs_active_floorplan_div_nr ][i]=="last"){rest_nname[cvjs_active_floorplan_div_nr ][i]="";}; 
		if (layoutflag) 
			if ( rest_nname[cvjs_active_floorplan_div_nr ][i]=="lastsavedview"){rest_nname[cvjs_active_floorplan_div_nr ][i]="";};
		if (layoutflag) 
			if ( rest_nname[cvjs_active_floorplan_div_nr ][i]=="model"){rest_nname[cvjs_active_floorplan_div_nr ][i]="";};
		if (layoutflag) 
			if ( rest_nname[cvjs_active_floorplan_div_nr ][i]=="firstlayout"){rest_nname[cvjs_active_floorplan_div_nr ][i]="";};
	}
	
	
	var contentStreamGraphics;
	var contentStreamNodes;
	var contentStreamData;
	var contentStreamThumb;

	var contentLocationGraphics;
	var contentLocationNodes;
	var contentLocationData;
	var contentLocationThumb;

	var conv_extr_request = new Object();

	if (fileFormat.indexOf("pdf") == 0)
		conv_extr_request.action      = "pdf_creation";

	if (fileFormat.indexOf("svg") == 0)
		conv_extr_request.action      = "svg_creation";


	conv_extr_request.converter  = rest_converter ;
	conv_extr_request.version    = rest_version ;

	conv_extr_request.contentType  = rest_contentType;

	
	// 3.2.01b	
	originatingContent = originatingContent.replace(/\\/g, "/");
	// 3.2.01b	
	if (conv_extr_request.contentType == "file"){		
		if (originatingContent.indexOf("%")>0) // if %, then it is already URL encoded 
			conv_extr_request.contentLocation  = originatingContent;
		else
			conv_extr_request.contentLocation  = encodeURIComponent(originatingContent);
	}
	
	// 3.2.01b	
	if (conv_extr_request.contentType == "stream"){
		if (originatingContent.indexOf("%")>0) // if %, then it is already URL encoded 
			conv_extr_request.contentStream  = originatingContent;
		else
			conv_extr_request.contentStream  = encodeURIComponent(originatingContent);
	}

	// 3.2.01b	
	if (conv_extr_request.contentType == "embedded"){
		if (originatingContent.indexOf("%")>0) // if %, then it is already URL encoded 
			conv_extr_request.embeddedContent  = originatingContent;
		else
			conv_extr_request.embeddedContent  = encodeURIComponent(originatingContent);
	}

	conv_extr_request.contentFormat  = rest_contentFormat;
	conv_extr_request.contentUsername    = originatingUsername;
	conv_extr_request.contentPassword    = originatingPassword;
	conv_extr_request.userLabel  = rest_userLabel;

	
	// 3.2.01g
	if (rest_serviceCall){
		conv_extr_request.userLabel  = rest_ServiceToken;
		conv_extr_request.applicationPlatform = rest_applicationPlatform; 
		conv_extr_request.applicationPlatformUsername = rest_applicationPlatformUsername;
		conv_extr_request.applicationPlatformUserID = rest_applicationPlatformUserID; 
		if (conv_extr_request.contentResponse == "stream")
			conv_extr_request.leaveStreamOnServer = rest_leaveStreamOnServer;
		
	}
		
	conv_extr_request.contentResponse  = "file";  // we want to pick up a PDF
	conv_extr_request.parameters  = new Array();

	if (cvjs_debug) console.log("conv_extr_request.contentPassword x"+conv_extr_request.contentPassword+"x" );

	for (var i=0; i<rest_nname[cvjs_active_floorplan_div_nr ].length; i++){
		var params = new Object
		params.paramName = rest_nname_temp[i];
		params.paramValue = rest_vvalue_temp[i];
		conv_extr_request.parameters[i] = params;
	}

	// 2018-01-25  // creating grayscale
	if (cvjs_printGrayscale){
			
		var j = rest_nname[cvjs_active_floorplan_div_nr ].length;
		var params = new Object
		// 6.2.33
		if (jQuery('#cvjs_grayScaleType').val()==2)
			params.paramName = "bw";
		else
			params.paramName = "greyscale";
			
		params.paramValue = "";
		conv_extr_request.parameters[j] = params;
	}
	
	if (cvjs_customPrintCheckbox){
		// case for user adding variables modifications through 
		if ((cvjs_printModalCustomCheckBox.indexOf("add_json")==0) && cvjs_customPrintTextboxMode ) {
			var j = rest_nname[cvjs_active_floorplan_div_nr ].length;
			var params = new Object
			params.paramName = "json";
			params.paramValue = json_titleblock;
			conv_extr_request.parameters[j] = params;		
		}
		else{
			// Standard case checking for Block Attribute modification JSON, can be loaded externally or passed over directly 
			if ((cvjs_printModalCustomCheckBox.indexOf("add_json")==0)) {
				var j = rest_nname[cvjs_active_floorplan_div_nr ].length;
				var params = new Object
				params.paramName = "json";
				params.paramValue = cvjs_jsonLocation;
				conv_extr_request.parameters[j] = params;
			}
		}
	}

	// 6.1.22 add papersize and orientation
	// 6.1.50 add papersize and orientation

	if (fileFormat.indexOf("pdf") == 0){
		
		var j = conv_extr_request.parameters.length;
		var params = new Object
		params.paramName = cvjs_printPaperSize;
		params.paramValue = "";
		conv_extr_request.parameters[j] = params;

		var j = conv_extr_request.parameters.length;
		var params = new Object
		params.paramName = cvjs_printOrientation;
		params.paramValue = "";
		conv_extr_request.parameters[j] = params;
	}


	api_data = JSON.stringify(conv_extr_request);

	tms_rest_api_url = tms_rest_api_url1+rest_php_version;

if (cvjs_debug) console.log(" index of"+tms_rest_api_url1.indexOf("tms-restful-api"));

	if (tms_rest_api_url1.indexOf("tms-restful-api")>-1){
		cvjs_passwordProtected = true;
		//cvjs_checkLicensePre();
		if (cvjs_isLicensed){
			cvjs_usr = "tms";
			cvjs_pwd = "restful";
		}
		
		if (cvjs_Community_Version){
			cvjs_usr = "tms";
			cvjs_pwd = "restful";
		}

if (cvjs_debug) console.log(cvjs_isLicensed+" "+cvjs_usr+" "+cvjs_pwd);

	}

	var tms_rest_api_url_pw;


	if (cvjs_passwordProtected){
		var loc_1 = tms_rest_api_url.indexOf("//");
		var protocol_1 = tms_rest_api_url.substring(0,loc_1+2);
		var url_1 = tms_rest_api_url.substring(loc_1+2);
		tms_rest_api_url_pw = protocol_1+cvjs_usr+":"+cvjs_pwd+"@"+url_1;

	}else{
		tms_rest_api_url_pw = tms_rest_api_url;
	}

	// Encoding for Tomcat 8, xerces PHP server, we encode the json stream encodeURIComponent(api_data), previously only api_data
	var url_json = "";
	if (cvjs_encodeURIcall_server)
		url_json = tms_rest_api_url_pw+"?json="+encodeURIComponent(api_data);
	else
		url_json = tms_rest_api_url_pw+"?json="+api_data;
		
//	if (cvjs_debug) console.log(tms_rest_api_url_pw+" in makeConversion  request="+ encodeURIComponent(api_data));
	if (cvjs_debug) console.log(tms_rest_api_url_pw+" in makeConversion  request="+ encodeURIComponent(api_data)+"  non encoded request: "+api_data);

	if (cvjs_jsonp_handshake){

	if (cvjs_debug) console.log("before ajax call to php ");

		jQuery.ajax({
			url : url_json,
       		jsonp: "tms_restful_api",
        	dataType: 'jsonp',
			async: false,
			success:function(Api_response)
					{
	if (cvjs_debug) console.log("jsonP Conversion success: "+Api_response);

	if (fileFormat.indexOf("pdf") == 0)
						parseServerResponsePDFPrint(Api_response);
					
	if (fileFormat.indexOf("svg") == 0)
						parseServerResponseSVGPrint(Api_response);
					
					
					},
			error:function(xhr, status, error)
					{
						console.log("1 jsonp getEngines error="+xhr.responseText+" status="+status+" error="+error);
					}
		});
	}


	if (cvjs_servlet_handshake){

	if (cvjs_debug) console.log("1 before ajax call to Servlet");
	
		var filelist_data = {};
		filelist_data['request'] = api_data;
		
		if (cvjs_debug) console.log("1 before ajax call to Servlet filelist_data['request'] "+ filelist_data['request']);
	
		jQuery.ajax({
			url : tms_rest_api_url_pw,
			type: 'post',
			async: false,
			data: filelist_data,

			success:function(Api_response)
					{
	if (cvjs_debug) console.log("json Conversion success parseSErverResponsePDFPrint: "+Api_response);
						if (fileFormat.indexOf("pdf") == 0)
											parseServerResponsePDFPrint(Api_response);
										
						if (fileFormat.indexOf("svg") == 0)
											parseServerResponseSVGPrint(Api_response);

					},
			error:function(data_e)
					{
						console.log("2 json getEngines error="+data_e);
					}
		});
	}


	if (cvjs_post_handshake){

	if (cvjs_debug) console.log("before ajax post call");
			// not working for cross domain

		var json_data = {};
		json_data['json_data'] = api_data;

		jQuery.ajax({
			url : tms_rest_api_url_pw,
			type: 'POST',
			async: false,
        	data: json_data,
			success:function(Api_response)
					{
						if (cvjs_debug) console.log("post Conversion: "+Api_response);
						if (fileFormat.indexOf("pdf") == 0)
											parseServerResponsePDFPrint(Api_response);
										
						if (fileFormat.indexOf("svg") == 0)
											parseServerResponseSVGPrint(Api_response);

					},
			error:function(data_e)
					{
						console.log("2 json getEngines error="+data_e);
					}
		});
	}
};


String.prototype.replaceAll = function(str1, str2, ignore)
{
    return this.replace(new RegExp(str1.replace(/([\/\,\!\\\^\$\{\}\[\]\(\)\.\*\+\?\|\<\>\-\&])/g,"\\$&"),(ignore?"gi":"g")),(typeof(str2)=="string")?str2.replace(/\$/g,"$$$$"):str2);
}



function parseServerResponsePDFPrint(Api_response){

	var q = jQuery.parseJSON(Api_response);
	var local = false;

	if (q.errorCode == "E0"){
		//console.log("Everything is fine");
		jQuery("#looper").hide();
		jQuery('#cvjs_wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();

	}
	else{

		// the file did not convert
		jQuery("#looper").hide();
		jQuery('#cvjs_wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
		var textString = "";

		if (q.errorCode == "E1"){
			textString = languageTable.languages[cvjs_currentLanguage].InfoMessageModal.ServerSideFormatForPDFPrint;
			cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], textString);
		}
		else{
			textString = "Server side conversion error, AutoXchange responded with errorcode: "+q.errorCode;
			cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], textString);
		}

		return;

	}

	// loading an PDF from the server
	if (q.completedAction=="pdf_creation"){

		var filelocation = 	"";

		if (rest_contentResponse == "stream") filelocation = q.contentStreamData;
		if (rest_contentResponse == "file") filelocation = q.contentStreamData;

	if (cvjs_debug) 		console.log("filelocation "+filelocation);

		var fUrl = cvjs_serverHandlersPath + cvjs_returnPDFparamsController;
		var f_data = {};
		f_data['file'] = "";  // void

		
		
	if (cvjs_debug) 		console.log("fUrl "+fUrl);
		
		
		jQuery.ajax({
		  url: fUrl,
		  type: 'post',
		  data: f_data,
		  success: function(html){

	if (cvjs_debug) 		console.log("success "+html);

				var tempstr = html;
				var dir = tempstr.substring(0, tempstr.indexOf("|"));
				var tempstr = tempstr.substring(tempstr.indexOf("|")+1);
				var dir_url = tempstr.substring(0, tempstr.indexOf("|"));
				var is_explorer = (navigator.userAgent.indexOf('MSIE') > -1) || (navigator.userAgent.indexOf('Trident') > -1);

//				window.open('http://localhost/cadviewer_6_1_0//converters/files/10986.html');				
//window.open('', '_self', 'location=yes,menubar=yes,height=400,left=10,titlebar=yes,toolbar=yes,top=10,width=700', false); 
//if (true) return;

				
				//window.open('width='+screen.width*cvjs_print_to_pdf_windowRelativeSize+',height='+ screen.height*cvjs_print_to_pdf_windowRelativeSize);
				
				// 6.1.22	

				printWindow = window.open('', 'CADViewer - Print', 'width='+screen.width*cvjs_print_to_pdf_windowRelativeSize+',height='+ screen.height*cvjs_print_to_pdf_windowRelativeSize);
				var text = "";

				printWindow.document.write('<!DOCTYPE html><html><title>CADViewer - Print</title><head><script src="'+cvjs_defaultJSPath+'/jquery-2.2.3.js" type="text/javascript"></script><script src="'+cvjs_defaultJSPath+'/popper.js" type="text/javascript"></script><script src="'+cvjs_defaultJSPath+'/bootstrap.min.js" type="text/javascript"></script><link href="'+cvjs_defaultJSPath+'../css/bootstrap.min.css" rel="stylesheet"></script>');				
				printWindow.document.write('<link href="'+cvjs_defaultJSPath+'../css/font-awesome.min.css" rel="stylesheet"></script>');
				printWindow.document.write('<style>.btn {  background-color: DodgerBlue;  border: none;  color: white;  padding: 12px 30px;  cursor: pointer;  font-size: 20px;} /* Darker background on mouse-over */ .btn:hover {  background-color: RoyalBlue;} </style>');
								
				text = text + '<!DOCTYPE html><html><title>CADViewer - Print</title><head><script src="'+cvjs_defaultJSPath+'/jquery-2.2.3.js" type="text/javascript"></script>';

				printWindow.document.write('<script type="text/javascript">');
				text = text + '<script type="text/javascript">';
				var xfilelocation = dir + filelocation.substring(filelocation.lastIndexOf('/')+1);
				xfilelocation= xfilelocation.replaceAll("\\","/");


//				printWindow.document.write("jQuery(window).on('beforeunload', function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}});  }); jQuery(window).on('unload', function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}})  }); window.onbeforeunload = function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}}) };");

//        		printWindow.document.write('jQuery("#downloadbutton").on("mousedown", function () { window.alert("Hello World!"); jQuery(this).attr("href", "'+filelocation+'"); });</script>');
//        		printWindow.document.write('jQuery("#downloadbutton").on("mousedown", function () { window.alert("Hello World!"); jQuery(this).attr("href", "'+filelocation+'"); });');

//        		printWindow.document.write('jQuery(".btn").on("mousedown", function () { window.alert("Hello World!"); jQuery(this).attr("href", "'+filelocation+'"); });</script>');


				// 6.1.22
				var filename = filelocation.substring(filelocation.lastIndexOf("/")+1);
				
				var readystring = "jQuery(document).ready(function(){"
				+"	jQuery('#downloadbutton').click(function (e) { "
				+"		var element = document.createElement('a'); "
				+"		element.setAttribute('href', '"+filelocation+"'); "
				+"		element.setAttribute('download', '"+filename+"'); "
				+"		document.body.appendChild(element); "
				+"		element.click(); "
				+"		document.body.removeChild(element); 		"
				+"	});"
				+"});"
				+"</script>";

				printWindow.document.write(readystring);
				
				printWindow.document.write('</head><body>')	
				printWindow.document.write('<button id="downloadbutton" class="btn" style="width:100%"><i class="fa fa-download"></i> Download: '+filename+'</button> <br>');
			
//				printWindow.document.write('<div>XXX<button type="button" class="btn btn-primary">Primary</button><strong><a href="'+filelocation+'"  download>Download '+filename+'</a><br><br></strong></div><div id="pdf">');

				printWindow.document.write('<div id="pdf"><object width="'+screen.width*cvjs_print_to_pdf_windowRelativeSize+'" height="'+screen.width*cvjs_print_to_pdf_windowRelativeSize*2339/1654+'" type="application/pdf" data="'+filelocation+'" id="pdf_content"><p>Please install a PDF viewer, the CADViewer batch file PDF cannot be displayed.</p></object></div></body></html>');
				text = text + '<object width="'+screen.width*cvjs_print_to_pdf_windowRelativeSize+'" height="'+screen.width*cvjs_print_to_pdf_windowRelativeSize*2339/1654+'" type="application/pdf" data="'+filelocation+'" id="pdf_content"><p>Please install a PDF viewer, the CADViewer batch file PDF cannot be displayed.</p></object></div></body></html>';

				printWindow.document.close(); //this seems to be the thing doing the trick
				printWindow.focus();
			}
		});
	}
	// remove the print modal
	// fetch the link with the pdf
	// open the print-modal with the converted object
}




function parseServerResponsePDFPrintCustom(Api_response){


	Api_response = Api_response.replace(/\\/g, "/");

	if (cvjs_debug) 		console.log("Api_response "+Api_response);

	var q = jQuery.parseJSON(Api_response);
	var local = false;

	if (q.errorCode == "E0"){
		//console.log("Everything is fine");
		jQuery("#looper").hide();
		jQuery('#cvjs_wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();

	}
	else{

		// the file did not convert
		jQuery("#looper").hide();
		jQuery('#cvjs_wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
		var textString = "";

		if (q.errorCode == "E1"){
			textString = languageTable.languages[cvjs_currentLanguage].InfoMessageModal.ServerSideFormatForPDFPrint;
			cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], textString);
		}
		else{
			textString = "Server side conversion error, AutoXchange responded with errorcode: "+q.errorCode;
			cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], textString);
		}

		return;

	}

	// loading an SVG from the server
	if (q.completedAction=="pdf_creation"){

		var filelocation = 	"";

		if (rest_contentResponse == "stream") filelocation = q.contentStreamData;
		if (rest_contentResponse == "file") filelocation = q.contentStreamData;

	if (cvjs_debug) 		console.log("filelocation "+filelocation);

		var fUrl = cvjs_serverHandlersPath + cvjs_returnPDFparamsController;
		var f_data = {};
		f_data['file'] = "";  // void

		jQuery.ajax({
		  url: fUrl,
		  type: 'post',
		  data: f_data,
		  success: function(html){
				var tempstr = html;
				var dir = tempstr.substring(0, tempstr.indexOf("|"));
				var tempstr = tempstr.substring(tempstr.indexOf("|")+1);
				var dir_url = tempstr.substring(0, tempstr.indexOf("|"));

				var is_explorer = (navigator.userAgent.indexOf('MSIE') > -1) || (navigator.userAgent.indexOf('Trident') > -1);

				printWindow = window.open('', 'CADViewer - Print', 'width='+screen.width*cvjs_print_to_pdf_windowRelativeSize+',height='+ screen.height*cvjs_print_to_pdf_windowRelativeSize);
				var text = "";

				printWindow.document.write('<!DOCTYPE html><html><title>CADViewer - Print</title><head><script src="'+cvjs_defaultJSPath+'/jquery-2.2.3.js" type="text/javascript"></script>');
				text = text + '<!DOCTYPE html><html><title>CADViewer - Print</title><head><script src="'+cvjs_defaultJSPath+'/jquery-2.2.3.js" type="text/javascript"></script>';

				printWindow.document.write('<script type="text/javascript">');
				text = text + '<script type="text/javascript">';
				// file=
				var xfilelocation = dir + filelocation.substring(filelocation.lastIndexOf('/')+1);
				xfilelocation= xfilelocation.replaceAll("\\","/");

				printWindow.document.write("jQuery(window).on('beforeunload', function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}});  }); jQuery(window).on('unload', function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}})  }); window.onbeforeunload = function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}}) }; </script>");
				text = text + "jQuery(window).on('beforeunload', function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}});  }); jQuery(window).on('unload', function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}})  }); window.onbeforeunload = function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}}) }; </script>";


				printWindow.document.write('</head><body><div id="pdf">');
				text = text + '</head><body><div id="pdf">';

//				printWindow.document.write('<object width="1654" height="2339" type="application/pdf" data="'+filelocation+'" id="pdf_content"><p>Please install a PDF viewer, the CADViewer batch file PDF cannot be displayed.</p></object></div></body></html>');
//				text = text + '<object width="1654" height="2339" type="application/pdf" data="'+filelocation+'" id="pdf_content"><p>Please install a PDF viewer, the CADViewer batch file PDF cannot be displayed.</p></object></div></body></html>';

				printWindow.document.write('<object width="'+screen.width*cvjs_print_to_pdf_windowRelativeSize+'" height="'+screen.width*cvjs_print_to_pdf_windowRelativeSize*2339/1654+'" type="application/pdf" data="'+filelocation+'" id="pdf_content"><p>Please install a PDF viewer, the CADViewer batch file PDF cannot be displayed.</p></object></div></body></html>');
				text = text + '<object width="'+screen.width*cvjs_print_to_pdf_windowRelativeSize+'" height="'+screen.width*cvjs_print_to_pdf_windowRelativeSize*2339/1654+'" type="application/pdf" data="'+filelocation+'" id="pdf_content"><p>Please install a PDF viewer, the CADViewer batch file PDF cannot be displayed.</p></object></div></body></html>';

				
				
				//console.log(text);

				printWindow.document.close(); //this seems to be the thing doing the trick
				printWindow.focus();

				//printWindow.print();
				//if (local) printWindow.close();
				//if (!local && is_explorer) printWindow.close();
			}
		});
	}

	// remove the print modal

	// fetch the link with the pdf

	// open the print-modal with the converted object

}



function cvjs_printConvertedPDF(){

	// set up call to converter to call current view and file-name to a pdf file
	cvjs_Conversion_forPrint(floorplan_div_Array[cvjs_active_floorplan_div_nr ], cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ], cvjs_conversion_originatingUsername[cvjs_active_floorplan_div_nr ], cvjs_conversion_originatingPassword[cvjs_active_floorplan_div_nr ], "pdf");

}



var cvjs_PrintToScale = false;   // 3.3.02f    3.3.02g  - new parameter for print to scale


var cvjs_ctx;


/**
 * Function to print to papersize, based on settings provided in cvjs_setPrintOrientation(), cvjs_setPrintResolutionDpi() and cvjs_setPrintPaperSize()
 */
function cvjs_printCanvasPaperSize(){

	// case where cvjs_objectIsZoomedExtents = true;

	var svgString;
	var is_explorer = (navigator.userAgent.indexOf('MSIE') > -1) || (navigator.userAgent.indexOf('Trident') > -1);
	var is_firefox = navigator.userAgent.indexOf('Firefox') > -1;

	svgString = cvjs_rPaper[cvjs_active_floorplan_div_nr].toString();

	var svgStringOrg = svgString;

	if (printDebugFlag) console.log("1A "); //console.log("1A "+svgString);

	// we are changing the setting to be based on actual viewBox
	// NOTE!  - we must make the variable naming generic so it does not interfere

	var x_svg = viewBox[cvjs_active_floorplan_div_nr].X;
	var y_svg = viewBox[cvjs_active_floorplan_div_nr].Y;
	var width_svg_box = viewBoxWidth[cvjs_active_floorplan_div_nr];
	var height_svg_box = viewBoxHeight[cvjs_active_floorplan_div_nr];

	var tempString1 = svgString.substring(0, svgString.indexOf("width:")+6);
	var tempString2 = svgString.substring(svgString.indexOf("height:")+6);
	tempString2 = tempString2.substring(tempString2.indexOf(";"));
	svgString = tempString1+width_svg_box+"; height:"+height_svg_box+tempString2;

	var xml = svgString;
	xml = xml.replace(/xmlns=\"http:\/\/www.w3.org\/2000\/svg\"/g, '');
	svgString = xml;

	if (printDebugFlag) console.log("1B "); // console.log("1B "+svgString);

	var location = window.location.href;  //console.log(location);
	var is_local= false;
	if (location.indexOf("file:")>-1) is_local = true;

	//console.log( fileLoad_contentFormat.toLowerCase());
	//if (printDebugFlag) console.log("2B "+svgString);

//	if (printDebugFlag) window.prompt("Copy to clipboard: Ctrl+C, Enter", svgString);

	var widthHeightFactorSVG = width_svg_box/height_svg_box;    // which side to scale from is based on the actual box object
	var widthHeightFactorPaper = cvjs_printPixelWidth/cvjs_printPixelHeight;
	var widthHeightFactorSVGless1 = true;

	if (widthHeightFactorSVG>=1)
		widthHeightFactorSVGless1 = false;

    cvjs_ctx = jQuery("#floorPlanCanvasObject_"+floorplan_div_Array[cvjs_active_floorplan_div_nr])[0].getContext('2d');

	//return;

	// bitmap image loaded in stand-alone


	if ( fileLoad_contentFormat.toLowerCase().indexOf("png")>-1 || fileLoad_contentFormat.toLowerCase().indexOf("gif")>-1 || fileLoad_contentFormat.toLowerCase().indexOf("jpg")>-1){
	
	
	// NOTE 2018-02-14   WE DISABLE THE PURE BITMAP PRINT BECAUSE WE HAVE ADDED VECTOR FRAMES TO THE BITMAP, AND WE MAY ALSO HAVE STAMPS
	// CORRECTION, cannot change this because of cross-domain issues, when adding stamps for Newgen
		// we have to cut out the image
		var tempString1 = svgString.substring(0, svgString.indexOf("<image"));
		tempString2 = svgString.substring(svgString.indexOf("<image")+6);
		tempString2 = tempString2.substring(tempString2.indexOf("</image>")+8);
		svgString = tempString1+tempString2;

		if (!cvjs_objectIsZoomedExtents){  // bitmap zoomed in

			
/*
			if (cvjs_printOrientation.indexOf("landscape")==0){
				cvjs_ctx.canvas.height = Math.round(cvjs_printPixelHeight);
				cvjs_ctx.canvas.width = Math.round(cvjs_printPixelWidth);
				jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height(Math.round(cvjs_printPixelHeight));
				jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width(Math.round(cvjs_printPixelWidth));
				jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css("width",Math.round(cvjs_printPixelWidth));
				jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css("height",Math.round(cvjs_printPixelHeight));
			}else{
				cvjs_ctx.canvas.height = Math.round(cvjs_printPixelWidth);
				cvjs_ctx.canvas.width = Math.round(cvjs_printPixelHeight);
				jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height(Math.round(cvjs_printPixelWidth));
				jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width(Math.round(cvjs_printPixelHeight));
				jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css("width",Math.round(cvjs_printPixelHeight));
				jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css("height",Math.round(cvjs_printPixelWidth));

			}
*/
			widthHeightFactorSVG = widthHeightFactorPaper;
			widthHeightFactorSVGless1 = false;

			// let us find the fulle extents of the viewbox

			if (printDebugFlag) jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).show();

			var tempString1 = svgString.substring(svgString.indexOf("width=")+7);
			var tempString1 = tempString1.substring(0, tempString1.indexOf("\""));

			if (cvjs_debug) console.log("print bitmap1 "+tempString1);

			var boxWidth = Number(tempString1)
			var tempString2 = svgString.substring(svgString.indexOf("height=")+8);
			//console.log(tempString2);
			var tempString2 = tempString2.substring(0, tempString2.indexOf("\""));

			if (cvjs_debug) console.log("print bitmap2 "+tempString1);

			var boxHeight = Number(tempString2)
			if (printDebugFlag) console.log("1C "); //console.log("1C "+svgString);

			cvjs_ctx.canvas.height = Math.round(boxHeight);
			cvjs_ctx.canvas.width = Math.round(boxWidth);
			jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height(Math.round(boxHeight));
			jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width(Math.round(boxWidth));
			jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css("width",Math.round(boxWidth));
			jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css("height",Math.round(boxHeight));


			if (printDebugFlag) console.log("viewBox[cvjs_active_floorplan_div_nr].X "+viewBox[cvjs_active_floorplan_div_nr].X+" viewBox[cvjs_active_floorplan_div_nr].Y "+viewBox[cvjs_active_floorplan_div_nr].Y+" viewBoxWidth[cvjs_active_floorplan_div_nr] "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" viewBoxHeight[cvjs_active_floorplan_div_nr]"+viewBoxHeight[cvjs_active_floorplan_div_nr]+" boxWidth "+boxWidth+" boxHeight "+boxHeight);

			cvjs_ctx.drawImage(cvjs_rasterImageLoaded, viewBox[cvjs_active_floorplan_div_nr].X, viewBox[cvjs_active_floorplan_div_nr].Y, viewBoxWidth[cvjs_active_floorplan_div_nr], viewBoxHeight[cvjs_active_floorplan_div_nr], 0, 0, boxWidth, boxHeight);
			cvjs_ctx.drawSvg(svgString, 0, 0, boxWidth, boxHeight);
			cvjs_callPrintAfter_canvg(widthHeightFactorSVGless1, widthHeightFactorSVG);
			
			

		}
		else{  // bitmap extents
			if (printDebugFlag) console.log("1D "); // console.log("1D before "+svgString);
	
				
			//cvjs_ctx.canvas.height = Math.round(cvjs_rasterImageLoaded.height);
			//cvjs_ctx.canvas.width = Math.round(cvjs_rasterImageLoaded.width);
			
			// we use the extents of the layers_all 
			
			var bbox;

			if (!cvjs_customLayerContentAdded){
				bbox = layers_all.getBBox();
				cvjs_ctx.canvas.height = bbox.height;
				cvjs_ctx.canvas.width = bbox.width*1.2;  // we have problems with scaling on Chrome

			}
			else{

				bbox = cvjs_customLayerContent.getBBox();
				
				console.log(bbox.x+" "+bbox.y+"  "+bbox.height+"  "+bbox.width);
			
				cvjs_ctx.canvas.height = Math.round(cvjs_rasterImageLoaded.height);
				
				if ((bbox.width+bbox.x)>cvjs_rasterImageLoaded.width)
					cvjs_ctx.canvas.width = Math.round(bbox.x+ bbox.width*1.5);   // we have problems with scaling on Chrome
				else
					cvjs_ctx.canvas.width = Math.round(cvjs_rasterImageLoaded.width);
				

				if ((bbox.height+bbox.y)>cvjs_rasterImageLoaded.height)
					cvjs_ctx.canvas.height = Math.round(bbox.y+ bbox.height*1.5);   // we have problems with scaling on Chrome
				else
					cvjs_ctx.canvas.height = Math.round(cvjs_rasterImageLoaded.height);

			}
			
			jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height(Math.round(cvjs_rasterImageLoaded.height));
			jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width(Math.round(cvjs_rasterImageLoaded.width));
			jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css("width",Math.round(cvjs_rasterImageLoaded.width));
			jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css("height",Math.round(cvjs_rasterImageLoaded.height));
			if (printDebugFlag) jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).show();

			cvjs_ctx.drawImage(cvjs_rasterImageLoaded, 0, 0, cvjs_rasterImageLoaded.width, cvjs_rasterImageLoaded.height);
			cvjs_ctx.drawSvg(svgString, 0, 0, viewBoxWidth[cvjs_active_floorplan_div_nr], viewBoxHeight[cvjs_active_floorplan_div_nr]);
			cvjs_callPrintAfter_canvg(widthHeightFactorSVGless1, widthHeightFactorSVG)
		}

	}
	else{
		// vector drawing  - all zoom levels
		// vector drawing, either .js or pure SVG


		// new 2016-10-18
		if (cvjs_printOrientation.indexOf("landscape")==0){
			cvjs_ctx.canvas.height = Math.round(cvjs_printPixelHeight);
			cvjs_ctx.canvas.width = Math.round(cvjs_printPixelWidth);
			jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height(Math.round(cvjs_printPixelHeight));
			jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width(Math.round(cvjs_printPixelWidth));
			jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css("width",Math.round(cvjs_printPixelWidth));
			jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css("height",Math.round(cvjs_printPixelHeight));
		}else{
			cvjs_ctx.canvas.height = Math.round(cvjs_printPixelWidth);
			cvjs_ctx.canvas.width = Math.round(cvjs_printPixelHeight);
			jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height(Math.round(cvjs_printPixelWidth));
			jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width(Math.round(cvjs_printPixelHeight));
			jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css("width",Math.round(cvjs_printPixelHeight));
			jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css("height",Math.round(cvjs_printPixelWidth));

		}

	

		// NOTE: IE ONLY, but works on other platforms	
		// 2017-12-18	
		// we have to clean out references to cvjs namespace before passing over to canvg		
		while (svgStringOrg.indexOf("xmlns:cvjs")>-1){
			//xmlns:cvjs="http://www.tailormade.com/"
			var index1 = svgStringOrg.indexOf("xmlns:cvjs");
			var index2 = svgStringOrg.indexOf('\"', index1);
			var index3 = svgStringOrg.indexOf('\"', index2+1);
//			console.log("xmlns: "+index1+" "+index2+" "+index3);	
			svgStringOrg = svgStringOrg.substring(0,index1-1)+svgStringOrg.substring(index3 +1);					
		}

		// we have to clean out references to cvjs: namespace objects before passing over to canvg				
		while (svgStringOrg.indexOf("cvjs:")>-1){
			var index1 = svgStringOrg.indexOf("cvjs:");
			var index2 = svgStringOrg.indexOf('\"', index1);
			var index3 = svgStringOrg.indexOf('\"', index2+1);
//			console.log("cvjs: "+index1+" "+index2+" "+index3);	
			svgStringOrg = svgStringOrg.substring(0,index1-1)+svgStringOrg.substring(index3 +1);			
		}

		
			// we have to clean out references to cvjs: namespace objects before passing over to canvg				
		while (svgStringOrg.indexOf("xmlns:NS")>-1){
			var index1 = svgStringOrg.indexOf("xmlns:NS");
			var index2 = svgStringOrg.indexOf("NS", index1+8);
			//window.alert("NS1 "+index1);
			
			var index4 = svgStringOrg.indexOf(' ', index2+2);     // NSxx whitespace
            var index3 = svgStringOrg.indexOf('>', index2+2);	  // NSxx>		
			if (index3<index4) index4 = index3;   // we take the separator that comes first
	
//			console.log("before "+svgStringOrg.substring(index1-30, index4+30)+"  end of before");
//			var index3 = svgStringOrg.indexOf('\"', index2);
//			var index4 = svgStringOrg.indexOf('\"', index3+1);
//			console.log("NS1: "+index1+" "+index2+" "+index3+" "+index4+"  "+svgStringOrg.substring(index1-10,index4+10));	

			svgStringOrg = svgStringOrg.substring(0,index1-1)+svgStringOrg.substring(index4);
					
//			console.log("after "+svgStringOrg.substring(index1-30, index1+100)+" end of after");
		}
			
		if (printDebugFlag) console.log(svgStringOrg);// console.log("1C "+svgString);

		// first we remove multiple instances of the xmlns definition of SVG    2017-12-18
		var xml = svgStringOrg;
		xml = xml.replace(/xmlns=\"http:\/\/www.w3.org\/2000\/svg\"/g, '');
		svgStringOrg = xml;
		
		// then we add a single instance of the xmlns definition of SVG    2017-12-18
		var indexsvg = svgStringOrg.indexOf('<svg');     // NSxx whitespace
		svgStringOrg = svgStringOrg.substring(0,indexsvg+4)+" xmlns=\"http://www.w3.org/2000/svg\" "+svgStringOrg.substring(indexsvg+4);



//		var xml = svgStringOrg;
//		xml = xml.replace(/xmlns=\"http:\/\/www.w3.org\/2000\/svg\"/g, '');
//		svgStringOrg = xml;

//		if (printDebugFlag) window.alert(tempString1+cvjs_printPixelWidth+"; height:"+cvjs_printPixelHeight+tempString2);


		var tempString1 = svgStringOrg.substring(0, svgStringOrg.indexOf("width:")+6);
		var tempString2 = svgStringOrg.substring(svgStringOrg.indexOf("height:")+6);
		tempString2 = tempString2.substring(tempString2.indexOf(";"));
		// new 2016-10-18
		if (cvjs_printOrientation.indexOf("landscape")==0){
			svgStringOrg = tempString1+cvjs_printPixelWidth+"; height:"+cvjs_printPixelHeight+tempString2;
		}
		else{
			svgStringOrg = tempString1+cvjs_printPixelHeight+"; height:"+cvjs_printPixelWidth+tempString2;
		}
		// end new 2016-10-18

		widthHeightFactorSVG = widthHeightFactorPaper;  // widthHeightFactocvjs_rPaper[cvjs_active_floorplan_div_nr];
		widthHeightFactorSVGless1 = false;
		if (printDebugFlag) console.log("1C ");// console.log("1C "+svgString);
		svgString = svgStringOrg;

		if (printDebugFlag) console.log("ÅÅÅÅÅÅÅÅÅÅÅÅÅÅ\n\r"+svgString);// console.log("1C "+svgString);

		// in case of PRINT to SCALE we need to adjust the viewBox to the proper scale
		// 3.3.02f    3.3.02g
		if (cvjs_PrintToScale){
					
			var printScale = jQuery("#cvjs_printToScaleValue").val();
		
			if (printDebugFlag) window.alert("printScale "+printScale);
			
			var scaleSplit = printScale.split(":");
		
			//scale_factor = 1;
			
			var UserSelectedScale = 1;     // 1:10 -> 0.1 , 1:100 -> 0.01, etc.


		
			if (scaleSplit.length == 2){
			
					UserSelectedScale = scaleSplit[0]/scaleSplit[1] 
			
					if (printDebugFlag) window.alert("OK Scale:"+UserSelectedScale);			
			}
			else{

					if (printDebugFlag) window.alert("not valid scale");
					jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
					
					return;					
			
			}
			
			
			index1 = svgStringOrg.indexOf("viewBox=");
			var temp_string_0 = svgStringOrg.substring(0, index1+9)
			var temp_string_1 = svgStringOrg.substring(index1+9);
			index1 = temp_string_1.indexOf("\"");
			var temp_string_2= temp_string_1.substring(index1);
			// parse viewbox
			var v_box = temp_string_1.substring(0, index1);
			var v_res = v_box.split(" ");
				
			//		window.alert("XX"+v_res[2]+"X X"+v_res[3]+"XX");
						
			/**		
					
			<text id="cadviewer_worldUnits" style="stroke-width: 0;">
			{ "globalOrigin": { "x": -50, "y" : -50}, 
									"units": "mm",
									"svgToWorldUnits": 25
			}
			</text>
			<text id="cadviewer_drawingCoordinates" style="stroke-width: 0;">
			{ "DWG": 
				{ "lowerLeft": { "x": 0, "y" : 0}, 
				  "upperRight": { "x": 100, "y" : 100} 
				},
			 "SVG": 
				{ "lowerLeft": { "x": 0, "y" : 2500}, 
				  "upperRight": { "x": 2500, "y" : 0} 
				},
			 "Drawing Height": 2500
			}
			</text>


				cvjs_printPaperSize = "A4";
				cvjs_printPaperWidth_mm = 297;   // A4        - landscape
				cvjs_printPaperHeight_mm = 210;   // A4
				
			multiPages[cvjs_active_floorplan_div_nr].currentPage		

			var dwgDx = cvjs_drawingCoordinates[page].DWG.upperRight.x - cvjs_drawingCoordinates[page].DWG.lowerLeft.x;

			var dwgDy = cvjs_drawingCoordinates[page].DWG.upperRight.y - cvjs_drawingCoordinates[page].DWG.lowerLeft.y;

			**/		

				// adjust length and width according to scale

			var dwgDx = cvjs_drawingCoordinates[multiPages[cvjs_active_floorplan_div_nr].currentPage].DWG.upperRight.x - cvjs_drawingCoordinates[multiPages[cvjs_active_floorplan_div_nr].currentPage].DWG.lowerLeft.x;
			
			// NOTE!!!!!, here we have to adjust to the actual unit in original drawing, if mm, cm, in, feet, m, etc. 
			
			if (cvjs_units[cvjs_active_floorplan_div_nr] == "mm") {}; // do nothing
			if (cvjs_units[cvjs_active_floorplan_div_nr] == "cm") { dwgDx*=10; }; 
			if (cvjs_units[cvjs_active_floorplan_div_nr] == "m") { dwgDx*=1000; }; 
			if (cvjs_units[cvjs_active_floorplan_div_nr] == "in") { dwgDx*=25.4; }; 
			if (cvjs_units[cvjs_active_floorplan_div_nr] == "feet") { dwgDx*=304.8; }; 
		
		
			//  we assume that the shortest side of the paper termines the scale
		
			// we have to adjust to vertical or horizontal and change the width/height accordingly, due to paper output margins
			
			
			var scale_factor = 1;

			// we adjust as we remove 40mm in output print

			if (cvjs_printOrientation.indexOf("landscape")==0)
				scale_factor = (cvjs_printPaperHeight_mm-40)/dwgDx; 

			if (cvjs_printOrientation.indexOf("portrait")==0)	
				scale_factor = (cvjs_printPaperHeight_mm-40.0)/dwgDx; 
			
					
			
			scale_factor = scale_factor / UserSelectedScale;
			
			if (printDebugFlag) window.alert(cvjs_printOrientation+"  "+dwgDx+" cvjs_printPaperHeight_mm="+cvjs_printPaperHeight_mm+"  "+scale_factor);
						
			v_res[2] = v_res[2]*scale_factor;
			v_res[3] = v_res[3]*scale_factor;
				
			var vbox_string = v_res[0]+" "+v_res[1]+" "+v_res[2]+" "+v_res[3];
			// build the viewbox back together
				
			// build the svgString back together
					
			svgString = temp_string_0+vbox_string+temp_string_2;		
				// here we have to adjust depending on horizontal or vertical
					
			if (printDebugFlag) console.log("ÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖ\r\n")		
			if (printDebugFlag) console.log("ÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖ\r\n")		
			if (printDebugFlag) console.log("ÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖ\r\n")		
			if (printDebugFlag) console.log(svgString);				
					// pass over as print object
		}
		// up-up-up
		// 3.3.02f    3.3.02g
		// 3.3.02f    3.3.02g

		
	
		if (printDebugFlag) jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).show();
		
if (cvjs_debug) console.log("floorPlanCanvasObject "+floorplan_div_Array[cvjs_active_floorplan_div_nr]+" "+svgString);		
		
		canvg('floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr], svgString, { renderCallback: function() { cvjs_callPrintAfter_canvg(widthHeightFactorSVGless1, widthHeightFactorSVG);}} );
	}


	
}



function cvjs_callPrintAfter_canvg(widthHeightFactorSVGless1, widthHeightFactorSVG){

	if (printDebugFlag) console.log("before canvg");

	// new 2018-02-05
	var img = new Image;

	// 3.3.01e
	if (printDebugFlag) { console.log("no return from cvjs_callPrintAfter_canvg");}

		
//  let us move this to the loading of JPG/PNG/GIG image, it can be this source which is not allowed to me moved cross domaing
//	img.crossOrigin = "Anonymous";
		
		
	var canv = document.getElementById("floorPlanCanvasObject_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	var cvjs_ctx = jQuery("#floorPlanCanvasObject_"+floorplan_div_Array[cvjs_active_floorplan_div_nr])[0].getContext('2d');

	
	var canvw = canv.width;
	var canvh = canv.height;
	
		
	
	// FILL SPACES	
	// Identify all objects on the System ID Layer
	// Find the insertion point of each object
	// translate that insertion point into flood-fill
	// 3.3.01f
	if (cvjs_spaceFloodFill){
		// fill spaces
		cvjs_floodfill(cvjs_ctx, canvw, canvh, widthHeightFactorSVG, widthHeightFactorSVGless1);

		// extract png
		img = canv.toDataURL("image/png");

		// save png as html random name
		// 3.3.01f
		cvjs_serverSavePrintModeController = 6;
		
		var random = Math.random().toString().substring(2,5);
		var image_fileName = 'floodFill_'+random+'.png';
		
		sendServerStringToServer(img, image_fileName);

		
		// call php script to make png file
		
		// when return, call image tracer to make svg
		
		// edit svg to remove extra Z 
		
		// transform svg to drawing svg coordinates
		
		// make xml to dwgmerge2019/
		
		// call dwgmerge2019/
		
		// reload after -hl -la conversion calculation
			
		
		return;
	}
	// we hide if not floodfill
	if (printDebugFlag) jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();

	
	
	if (cvjs_printGrayscale){
		var imageData = cvjs_ctx.getImageData(0, 0, canv.width, canv.height);
		var data = imageData.data;
		for(var i = 0; i < data.length; i += 4) {
		  var brightness = 0.34 * data[i] + 0.5 * data[i + 1] + 0.16 * data[i + 2];
		  // red
		  data[i] = brightness;
		  // green
		  data[i + 1] = brightness;
		  // blue
		  data[i + 2] = brightness;
		}
		// overwrite original image
		cvjs_ctx.putImageData(imageData, 0, 0);
	}

//	var canv = document.getElementById("floorPlanCanvasObject");

	img = canv.toDataURL("image/png");
	// 2018-02-05	
//	var img = canv.toDataURL("image/png");

	

	if (printDebugFlag) console.log("Image canvas element width "+canv.width+" height "+canv.height);
	// here we recalculate the width/height factor to be based on the canvas element
	widthHeightFactorSVG  = canv.width/canv.height;

	if (widthHeightFactorSVG<1) widthHeightFactorSVGless1 = true; else widthHeightFactorSVGless1 = false;


	var translate = (cvjs_printPixelWidth - cvjs_printPixelHeight)/2;
	if (cvjs_printOrientation.indexOf("landscape")==0){
		cvjs_printImagePaperSizeRotated(img, screen.width*0.5, screen.height*0.75, widthHeightFactorSVGless1, widthHeightFactorSVG );  // this is the size of the page display
	}
	else{
		cvjs_printImagePaperSize(img, screen.width*0.5, screen.height*0.75, widthHeightFactorSVGless1, widthHeightFactorSVG );  // this is the size of the page display
	}
}


function cvjs_printImagePaperSizeRotated(image, wwidth, wheight, widthHeightFactorSVGless1, widthHeightFactorSVG ){

		var is_explorer = (navigator.userAgent.indexOf('MSIE') > -1) || (navigator.userAgent.indexOf('Trident') > -1);
		var location = window.location.href;  //console.log(location);
		var is_local= false;
		if (location.indexOf("file:")>-1) is_local = true;
		var printWindow;

		if (is_local){ // if local just make own window content
			//console.log("local rot");
			printWindow = window.open('', 'CADViewer - Print', 'height='+wheight+',width='+wwidth);
			printOnLoadedDocumentRotated(printWindow, image, widthHeightFactorSVGless1, widthHeightFactorSVG, true );
		}
		else{ // if web upload template so there can be a onload return call
			//console.log("web rot");
			printOnLoadedDocumentRotated_Server(image, widthHeightFactorSVGless1, widthHeightFactorSVG);
		}
}


function cvjs_printImagePaperSize(image, wwidth, wheight, widthHeightFactorSVGless1, widthHeightFactorSVG ){

		var is_explorer = (navigator.userAgent.indexOf('MSIE') > -1) || (navigator.userAgent.indexOf('Trident') > -1);
		var location = window.location.href;  //console.log(location);
		var is_local= false;
		if (location.indexOf("file:")>-1) is_local = true;
		var printWindow;

		if (is_local){ // if local just make own window content
			//console.log("local");
			printWindow = window.open('', 'CADViewer - Print', 'height='+wheight+',width='+wwidth);
			printOnLoadedDocument(printWindow, image, widthHeightFactorSVGless1, widthHeightFactorSVG, true );
		}
		else{ // if web upload template so there can be a onload return call
			//console.log("web ");
			printOnLoadedDocument_Server(image, widthHeightFactorSVGless1, widthHeightFactorSVG);
		}

}


function printOnLoadedDocument(printWindow, image, widthHeightFactorSVGless1, widthHeightFactorSVG, local ){

if (printDebugFlag) window.alert("printOnLoadedDocument");

	var is_explorer = (navigator.userAgent.indexOf('MSIE') > -1) || (navigator.userAgent.indexOf('Trident') > -1);

	printWindow.document.write('<!DOCTYPE html><html><head><title>CADViewer - Print</title>');
// style settings are overwriting the wwidth, wheight controls ....
	printWindow.document.write('<style>');
	printWindow.document.write(' body {');

	// portrait mode

	var pheight =  cvjs_printPaperWidth_mm -10;   // mm landscape long side
	var pwidth =  cvjs_printPaperHeight_mm  -10;  // mm landscape short side

	var translate = (cvjs_printPaperWidth_mm - cvjs_printPaperHeight_mm)/2;

	var ph1 = pheight;
	var pw1 = pwidth;

	printWindow.document.write('     height: '+ph1+'mm;');  // we make the height based on US letter 279,4mm minus 10mm
	printWindow.document.write('     width: '+pw1+'mm;');   // we make the width based on A4 210   US letter 215.9mm
	printWindow.document.write('     /* to centre page on screen*/');
	printWindow.document.write('     margin-left: auto;');
	printWindow.document.write('     margin-right: auto;');
	if (widthHeightFactorSVGless1){
		printWindow.document.write('     transform: translate(0mm ,0mm);');
		if (printDebugFlag)	console.log('less1 no rot    transform: translate(0mm ,0mm);');
	}else{
		printWindow.document.write('     transform: translate(0mm ,0mm);');
		if (printDebugFlag)	console.log('over1 no rot    transform: translate(0mm ,0mm);');
	}
	printWindow.document.write(' }');
	printWindow.document.write(' </style> ');
	printWindow.document.write('</head><body><img src=\'');
	printWindow.document.write(image);

	if (widthHeightFactorSVGless1){

		if (printDebugFlag)	console.log('b1 a \'  style=\"height: auto; width:'+(pw1-40)+'mm;\" /></body></html>');
		printWindow.document.write('\'  style=\"height: auto; width:'+(pw1-40)+'mm;\" /></body></html>');
	}
	else{
//		if (printDebugFlag)	console.log('b1 b   \'  style=\"height:'+((pw1-10)/widthHeightFactorSVG)+'mm; width: '+(pw1-10)+'mm;\" /></body></html>');
//		printWindow.document.write('\'  style=\"height:'+((pw1-10)/widthHeightFactorSVG)+'mm; width: '+(pw1-10)+'mm;\" /></body></html>');
		if (printDebugFlag)	console.log('b1 b   \'  style=\"height: : auto; width: '+(pw1-10)+'mm;\" /></body></html>');
		printWindow.document.write('\'  style=\"height: auto; width: '+(pw1-10)+'mm;\" /></body></html>');
	}
	printWindow.document.close(); //this seems to be the thing doing the trick
	printWindow.focus();
	printWindow.print();
	if (local) printWindow.close();
	if (!local && is_explorer) printWindow.close();

}



function printOnLoadedDocumentRotated(printWindow, image, widthHeightFactorSVGless1, widthHeightFactorSVG, local ){

if (printDebugFlag) window.alert("printOnLoadedDocumentRotated");


	var is_explorer = (navigator.userAgent.indexOf('MSIE') > -1) || (navigator.userAgent.indexOf('Trident') > -1);

	printWindow.document.write('<!DOCTYPE html><html><head><title>CADViewer - Print</title>');
	printWindow.document.write('<style>');
	printWindow.document.write(' body {');

	var pheight =  cvjs_printPaperWidth_mm -10;   // mm  landscape long side
	var pwidth =  cvjs_printPaperHeight_mm -10;  // mm  landscape short side

	var translate = (cvjs_printPaperWidth_mm - cvjs_printPaperHeight_mm)/2;

	//translate = 0;

	var ph1 = pheight;
	var pw1 = pwidth;

	printWindow.document.write('     height: '+ph1+'mm;');  // we make the height based on US letter 279,4mm minus 10mm
	printWindow.document.write('     width: '+pw1+'mm;');   // we make the width based on A4 210   US letter 215.9mm

	printWindow.document.write('     /* to centre page on screen*/');

	printWindow.document.write('     margin-left: auto;');
	printWindow.document.write('     margin-right: auto;');

	printWindow.document.write('     -webkit-transform: rotate(90deg);');
	printWindow.document.write('     -moz-transform: rotate(90deg);');

	if (widthHeightFactorSVGless1){
		printWindow.document.write('     transform: rotate(90deg) translate('+(-translate/2)+'mm, '+(translate)+'mm);');
		if (printDebugFlag)	console.log('less1  rot          transform: rotate(90deg) translate('+(-translate/2)+'mm, '+(translate)+'mm);');
	}else{
		printWindow.document.write('     transform: rotate(90deg) translate('+(-translate/2)+'mm, '+(translate)+'mm);');
		if (printDebugFlag)	console.log('over1  rot          transform: rotate(90deg) translate('+(-translate/2)+'mm, '+(translate)+'mm);');
	}
	printWindow.document.write(' };');
	printWindow.document.write(' </style> ');
	printWindow.document.write('</head><body ><div id=\"imagetag\"><img src=\'');

	printWindow.document.write(image);

	if (widthHeightFactorSVGless1){

		if (printDebugFlag)	console.log('b2 a \'  style=\"height: auto; width:'+(pw1-40)+'mm;\" /></body></html>');
		printWindow.document.write('\'  style=\"height: auto; width:'+(pw1-40)+'mm;\" /></body></html>');

	}
	else{

		var widthHeightFactorPaper = cvjs_printPixelWidth/cvjs_printPixelHeight;
		//console.log(widthHeightFactocvjs_rPaper[cvjs_active_floorplan_div_nr]);

		if (widthHeightFactorSVG>widthHeightFactorPaper){

			if (printDebugFlag)	console.log('b2 b 1 \'  style=\"height: auto; width:'+(ph1-40)+'mm;\" /></body></html>');
			printWindow.document.write('\'  style=\"height: auto; width:'+(ph1-40)+'mm;\" /></body></html>');

		}
		else{

			if (printDebugFlag)	console.log('b2 b 2 \'  style=\"height: auto; width:'+(ph1-40)+'mm;\" /></body></html>');
			printWindow.document.write('\'  style=\"height: auto; width:'+(ph1-40)+'mm;\" /></body></html>');

		}

	}
	printWindow.document.close(); //this seems to be the thing doing the trick
	printWindow.focus();
	printWindow.print();
	if (local) printWindow.close();
}



var cvjs_removePrintObject = true;
var cvjs_javaScriptsAbsoluteFolder = "../app/js";


/**
 * Set flag to clean temporary print object after use. Requires the cvjs_setServerHandlersPath() general php folder location to be defined with an absolute path
 * @param {boolean} flag - true for remove, false to leave as is
 */

function cvjs_removePrintObjectAfterPrint(flag){

	cvjs_removePrintObject = flag;

}


var JQ_absoluteFolder = false;


/**
 * Set javascripts absolute folder url path. Used for print object to find scripts folder to access jquery and ajax
 * @param {string} folder - absolute jQuery javascripts folder url path
 */

function cvjs_setJavaScriptsAbsoluteFolder(folder){

	cvjs_javaScriptsAbsoluteFolder = folder;
	JQ_absoluteFolder = false;


}



/**
 * Set javascripts absolute folder and jQuery url path. Used for print object to find scripts folder to access jquery and ajax
 * @param {string} folder - absolute jQuery javascripts folder url path and name
 */

function cvjs_setJavaScriptsJQ_AbsoluteFolder(folder){

	cvjs_javaScriptsAbsoluteFolder = folder;
	JQ_absoluteFolder = true;

}





function printOnLoadedDocumentRotated_Server(image, widthHeightFactorSVGless1, widthHeightFactorSVG){



	//3.3.02f  // 3.3.02g
	if (cvjs_PrintToScale){
		printOnLoadedDocumentRotated_Server_PrintToScale(image, widthHeightFactorSVGless1, widthHeightFactorSVG);
		return;
	}


	// in the case of batch print and stickynote creation, we send image directly to server
	if (cvjs_serverSavePrintModeController != 0){
		sendServerStringToServer(image, cvjs_serverSavePrintMode_serverPath+cvjs_serverSavePrintMode_image_fileName);
		return;
	}

if (printDebugFlag) window.alert("printOnLoadedDocumentRotated_Server");
	
		
	// standard processing of single page browser pop-up page print of canvas

	var temp_fileName = Math.floor((Math.random() * 1000) + 1);

	var	serverString = "";

	serverString = '<!DOCTYPE html><html><head><title>CADViewer - Print</title>';
	
	if (cvjs_removePrintObject){

		temp_fileName = Math.floor((Math.random() * 100000) + 1);

		var file_and_ext = "";
		if (cvjs_printObjectPathRelativeFlag){
			file_and_ext = cvjs_printObjectPath+temp_fileName+".html";
		}
		else{
			file_and_ext = cvjs_printObjectPathAbsoluteServer+temp_fileName+".html";
		}

		var finalUrl = cvjs_serverHandlersPath+cvjs_serverDeleteFileController+'?file='+encodeURIComponent(file_and_ext);


		if (JQ_absoluteFolder)
			serverString += '<script src="'+cvjs_javaScriptsAbsoluteFolder+'" type="text/javascript"></script>';
		else
			serverString += '<script src="'+cvjs_javaScriptsAbsoluteFolder+'/jquery-2.2.3.js" type="text/javascript"></script>';

		serverString += '<script type="text/javascript">';

		serverString += 'jQuery(window).on(\'beforeunload\', function ()';
		serverString += '{';
		serverString += 'jQuery.ajax({';
		serverString += 'url:\''+finalUrl+'\',';
		serverString += 'cache: false,';
		serverString += 'success: function(html){';
		serverString += '}';
		serverString += '});';
		serverString += '});';

		serverString += 'jQuery(window).on(\'unload\', function ()';
		serverString += '{';
		serverString += 'jQuery.ajax({';
		serverString += 'url:\''+finalUrl+'\',';
		serverString += 'cache: false,';
		serverString += 'success: function(html){';
		serverString += '}';
		serverString += '});';
		serverString += '});';

//		serverString += 'window.onbeforeunload = function () {window.open(\"http://www.tailormade.com\");return undefined;};';
		serverString += 'window.onbeforeunload = function () {';
		serverString += 'jQuery.ajax({';
		serverString += 'url:\''+finalUrl+'\',';
		serverString += 'cache: false,';
		serverString += 'success: function(html){';
		serverString += '}';
		serverString += '});';
		serverString += 'return undefined; }; ';

		serverString +='</script>';
	}

	
	// 2018-04-16 change into media - print control

	var is_chrome = navigator.userAgent.indexOf('Chrome') > -1;
	var is_firefox = navigator.userAgent.indexOf('Firefox') > -1;
	var is_explorer = (navigator.userAgent.indexOf('MSIE') > -1) || (navigator.userAgent.indexOf('Trident') > -1);

	var is_safari = navigator.userAgent.indexOf("Safari") > -1;
	var is_Opera = navigator.userAgent.indexOf("Presto") > -1;

	var is_Edge = navigator.userAgent.indexOf("Edge") > -1;

	if (is_Edge) is_chrome = false;
	
	

	var pheight =  cvjs_printPaperWidth_mm;   //10;   // mm  landscape long side
	var pwidth =  cvjs_printPaperHeight_mm;   //10;  // mm  landscape short side
	
	var ph1 = pheight;
	var pw1 = pwidth;


//window.alert(navigator.userAgent+"  "+is_chrome);
	
	if (is_chrome){
	
		serverString +="<style type=\"text/css\" media=\"print\">";
	 
	//window.alert("@media print "); 
	 
		serverString +="@page { "    					// works for Chrome, perfectly
		serverString +="    size: landscape";


//		serverString +="@media print { "             	// does not work in landscape for others
//		serverString +="    size: landscape";
			
		serverString +="}";
		serverString +="body {"; 
		serverString +="writing-mode: horizontal-tb";
		serverString +="}";
		serverString +="</style>";
	
	
	}
	else{
	
		serverString +='<style>';
		serverString +=' body {';

	//	    depressed 	// 2018-04-16 change into media - print control			
		
		var translate = (cvjs_printPaperWidth_mm - cvjs_printPaperHeight_mm)/2;
		//translate = 0;

//		window.alert("widthHeightFactorSVGless1 "+widthHeightFactorSVGless1+ "  translate "+translate);
			

		serverString +='     height: '+ph1+'mm;';  // we make the height based on US letter 279,4mm minus 10mm
		serverString +='     width: '+pw1+'mm;';   // we make the width based on A4 210   US letter 215.9mm
		serverString +='     /* to centre page on screen*/';

		serverString +='     margin-left: 10mm;';
		serverString +='     margin-right: 10mm;';
		serverString +='     margin-top: 10mm;';
		serverString +='     margin-bottom: 10mm;';

	//	serverString +='     -webkit-transform: rotate(90deg);';
	//	serverString +='     -moz-transform: rotate(90deg);';

		if (widthHeightFactorSVGless1){
			serverString +='     transform: rotate(90deg) translate('+(-translate/2)+'mm, '+(translate)+'mm);';
			if (printDebugFlag)	console.log('less1  rot          transform: rotate(90deg) translate('+(-translate/2)+'mm, '+(translate)+'mm);');
		}else{
	///		serverString +='     transform: rotate(90deg) translate('+(-translate/2*1.1)+'mm, '+(translate*1.4)+'mm);';
	//		serverString +='     transform: rotate(90deg) scale(0.9) translate('+(-translate/2*1.4)+'mm, '+(translate*1.4)+'mm);';
	//		serverString +='     -webkit-transform: rotate(90deg) translate('+(-translate/2)+'mm, '+(translate)+'mm);';
			serverString +='     transform: translate('+(-translate*1.5)+'mm, '+(-translate*1.2)+'mm) rotate(90deg); translate('+(+translate)+'mm, '+(+translate)+'mm) ';
			if (printDebugFlag)	console.log('over1  rot          transform: rotate(90deg) translate('+(-translate/2)+'mm, '+(translate)+'mm);');
		}
		serverString +=' };';
		serverString +=' </style> ';
	//*/

	}



	serverString +='</head><body onload=\"window.print();\"><div id=\"imagetag\"><img src=\'';
	serverString +=image;

	if (widthHeightFactorSVGless1){

		if (printDebugFlag)	console.log('b2 svg less 1 a  (pw1-40)    \'  style=\"height: auto; width:'+(pw1-40)+'mm;\" /></body></html>');
		serverString +='\'  style=\"height: auto; width:'+(pw1-40)+'mm;\" /></body></html>';

	}
	else{

		var widthHeightFactorPaper = cvjs_printPixelWidth/cvjs_printPixelHeight;
		//console.log(widthHeightFactocvjs_rPaper[cvjs_active_floorplan_div_nr]);

		if (widthHeightFactorSVG>widthHeightFactorPaper){

			if (printDebugFlag)	console.log('b2 b 1 (ph1-40) 40 removed  \'  style=\"height: auto; width:'+(ph1)+'mm;\" /></body></html>');
			serverString +='\'  style=\"height: auto; width:'+(ph1)+'mm;\" /></body></html>';

		}
		else{

//			if (printDebugFlag)	console.log('b2 b 2 (ph1-40) \'  style=\"height: auto; width:'+(ph1-40)+'mm;\" /></body></html>');
//			serverString +='\'  style=\"height: auto; width:'+(ph1-40)+'mm;\" /></body></html>';
		
			if (printDebugFlag)	console.log('b2 b 2 (ph1-40) \'  style=\"height: auto; width:'+(ph1-40)+'mm;\" /></body></html>');
			
//window.alert(ph1);			
			serverString +='\'  style=\"height: auto; width:'+(ph1-40)+'mm;\" /></body></html>';	
		}
	}
	sendServerStringToServer(serverString, temp_fileName);
}




// 3.3.02f    3.3.02g  - printToScale

function printOnLoadedDocumentRotated_Server_PrintToScale(image, widthHeightFactorSVGless1, widthHeightFactorSVG){


if (printDebugFlag) window.alert("printOnLoadedDocumentRotated_Server_ printToScale");


	// in the case of batch print and stickynote creation, we send image directly to server
	if (cvjs_serverSavePrintModeController != 0){
		sendServerStringToServer(image, cvjs_serverSavePrintMode_serverPath+cvjs_serverSavePrintMode_image_fileName);
		return;
	}

		
	// standard processing of single page browser pop-up page print of canvas

	var temp_fileName = Math.floor((Math.random() * 1000) + 1);

	var	serverString = "";

	serverString = '<!DOCTYPE html><html><head><title>CADViewer - Print</title>';
	
	if (cvjs_removePrintObject){

		temp_fileName = Math.floor((Math.random() * 100000) + 1);

		var file_and_ext = "";
		if (cvjs_printObjectPathRelativeFlag){
			file_and_ext = cvjs_printObjectPath+temp_fileName+".html";
		}
		else{
			file_and_ext = cvjs_printObjectPathAbsoluteServer+temp_fileName+".html";
		}

		var finalUrl = cvjs_serverHandlersPath+cvjs_serverDeleteFileController+'?file='+encodeURIComponent(file_and_ext);


		if (JQ_absoluteFolder)
			serverString += '<script src="'+cvjs_javaScriptsAbsoluteFolder+'" type="text/javascript"></script>';
		else
			serverString += '<script src="'+cvjs_javaScriptsAbsoluteFolder+'/jquery-2.2.3.js" type="text/javascript"></script>';

		serverString += '<script type="text/javascript">';

		serverString += 'jQuery(window).on(\'beforeunload\', function ()';
		serverString += '{';
		serverString += 'jQuery.ajax({';
		serverString += 'url:\''+finalUrl+'\',';
		serverString += 'cache: false,';
		serverString += 'success: function(html){';
		serverString += '}';
		serverString += '});';
		serverString += '});';

		serverString += 'jQuery(window).on(\'unload\', function ()';
		serverString += '{';
		serverString += 'jQuery.ajax({';
		serverString += 'url:\''+finalUrl+'\',';
		serverString += 'cache: false,';
		serverString += 'success: function(html){';
		serverString += '}';
		serverString += '});';
		serverString += '});';

//		serverString += 'window.onbeforeunload = function () {window.open(\"http://www.tailormade.com\");return undefined;};';
		serverString += 'window.onbeforeunload = function () {';
		serverString += 'jQuery.ajax({';
		serverString += 'url:\''+finalUrl+'\',';
		serverString += 'cache: false,';
		serverString += 'success: function(html){';
		serverString += '}';
		serverString += '});';
		serverString += 'return undefined; }; ';

		serverString +='</script>';
	}

	
	// 2018-04-16 change into media - print control

	var is_chrome = navigator.userAgent.indexOf('Chrome') > -1;
	var is_firefox = navigator.userAgent.indexOf('Firefox') > -1;
	var is_explorer = (navigator.userAgent.indexOf('MSIE') > -1) || (navigator.userAgent.indexOf('Trident') > -1);

	var is_safari = navigator.userAgent.indexOf("Safari") > -1;
	var is_Opera = navigator.userAgent.indexOf("Presto") > -1;

	var is_Edge = navigator.userAgent.indexOf("Edge") > -1;

	if (is_Edge) is_chrome = false;
	
	

	var pheight =  cvjs_printPaperWidth_mm;   
	var pwidth =  cvjs_printPaperHeight_mm;  
	
	var ph1 = pheight;
	var pw1 = pwidth;
	
if (printDebugFlag) window.alert(navigator.userAgent+" 3.3.02f g "+is_chrome+" ph1="+ph1+"  pw1="+pw1);


	// Fixed width/height, so any ajustment has to be scaled with Square(2), A size paper	
	// what happens if on US papersizes?
	
	// 3.3.02f    3.3.02g  - this relative measure is not sqrt 2 when on US paper sizes
	var square_two = cvjs_printPaperWidth_mm/cvjs_printPaperHeight_mm;

	var size_factor = 40;

	if (is_chrome){
		
		serverString +="<style type=\"text/css\" media=\"print\">";	 
		serverString +="@page { "    					// works for Chrome, perfectly
		serverString +="    size: landscape";			
		serverString +="}";
		serverString +="body {"; 
		serverString +="writing-mode: horizontal-tb";
		serverString +="}";
		serverString +="</style>";

	}
	else{
	
		if (is_firefox ){
			square_two = 1;
			size_factor = 0;
		}

		
		serverString +='<style>';
		serverString +=' body {';

	//	    depressed 	// 2018-04-16 change into media - print control			
		
		var translate = (cvjs_printPaperWidth_mm - cvjs_printPaperHeight_mm)/2;
		//translate = 0;

//		window.alert("widthHeightFactorSVGless1 "+widthHeightFactorSVGless1+ "  translate "+translate);
			
		
		serverString +='     height: '+ph1+'mm;';  // we make the height based on US letter 279,4mm minus 10mm
		serverString +='     width: '+pw1+'mm;';   // we make the width based on A4 210   US letter 215.9mm

		serverString +='     /* to centre page on screen*/';

		serverString +='     margin-left: 10mm;';     // 3.3.02g
		serverString +='     margin-right: 10mm;';
		serverString +='     margin-top: 10mm;';
		serverString +='     margin-bottom: 10mm;';

	//	serverString +='     -webkit-transform: rotate(90deg);';
	//	serverString +='     -moz-transform: rotate(90deg);';
	
		if (widthHeightFactorSVGless1){
			serverString +='     transform: rotate(90deg) translate('+(-translate/2)+'mm, '+(translate)+'mm);';
			if (printDebugFlag) console.log('less1  rot          transform: rotate(90deg) translate('+(-translate/2)+'mm, '+(translate)+'mm);');
		}else{
	///		serverString +='     transform: rotate(90deg) translate('+(-translate/2*1.1)+'mm, '+(translate*1.4)+'mm);';
	//		serverString +='     transform: rotate(90deg) scale(0.9) translate('+(-translate/2*1.4)+'mm, '+(translate*1.4)+'mm);';
	//		serverString +='     -webkit-transform: rotate(90deg) translate('+(-translate/2)+'mm, '+(translate)+'mm);';
			serverString +='     transform: translate('+(-translate*1.5)+'mm, '+(-translate*1.2)+'mm) rotate(90deg); translate('+(+translate)+'mm, '+(+translate)+'mm) ';
			if (printDebugFlag)	console.log('over1  rot          transform: rotate(90deg) translate('+(-translate/2)+'mm, '+(translate)+'mm);');
		}
		serverString +=' };';
		serverString +=' </style> ';
	//*/
	
	}

	
	
	serverString +='</head><body onload=\"window.print();\"><div id=\"imagetag\"><img src=\'';
	serverString +=image;

	
	if (is_Edge){
		pw1 = pheight;
		ph1 = pwidth;
	}
		
	
	// we have different factors depending on platform
	
	
	if (widthHeightFactorSVGless1){
		if (printDebugFlag)	window.alert('print scale b2 svg less 1 a  (pw1-40)    \'  style=\"height: '+(pw1-size_factor)+'mm ; width:'+(ph1-size_factor*square_two)+'mm;\" /></body></html>');
		serverString +='\'  style=\"height: '+(pw1-size_factor)+'mm ; width:'+(ph1-size_factor*square_two)+'mm;\" /></body></html>';
	}
	else{
		var widthHeightFactorPaper = cvjs_printPixelWidth/cvjs_printPixelHeight;
		if (widthHeightFactorSVG>widthHeightFactorPaper){
			if (printDebugFlag)	window.alert('print scale b2 b 1 (ph1-40) 40 removed  \'  style=\"height: '+(pw1-size_factor)+'mm ; width:'+(ph1-size_factor*square_two)+'mm;\" /></body></html>');
			serverString +='\'  style=\"height: '+(pw1-40)+'mm ; width:'+(ph1-40*square_two)+'mm;\" /></body></html>';
		}
		else{
			if (printDebugFlag)	window.alert('print scale b2 b 2 (ph1-40) \'  style=\"height: '+(pw1-size_factor)+'mm ; width:'+(ph1-size_factor*square_two)+'mm;\" /></body></html>');				
			serverString +='\'  style=\"height: '+(pw1-size_factor)+'mm ; width:'+(ph1-size_factor*square_two)+'mm;\" /></body></html>';
		}
	}			
	
	sendServerStringToServer(serverString, temp_fileName);
}


function printOnLoadedDocument_Server(image, widthHeightFactorSVGless1, widthHeightFactorSVG){


if (printDebugFlag) window.alert("printOnLoadedDocument_Server");


	// in the case of batch print and stickynote creation, we send image directly to server
	if (cvjs_serverSavePrintModeController != 0){
		sendServerStringToServer(image, cvjs_serverSavePrintMode_serverPath+cvjs_serverSavePrintMode_image_fileName);
		return;
	}

	
	// standard processing of single page browser pop-up page print of canvas

	var temp_fileName = Math.floor((Math.random() * 1000) + 1);

	var	serverString = "";

	serverString = '<!DOCTYPE html><html><head><title>CADViewer - Print</title>';

	if (cvjs_removePrintObject){

		temp_fileName = Math.floor((Math.random() * 100000) + 1);

		var file_and_ext = "";
		if (cvjs_printObjectPathRelativeFlag){
			file_and_ext = cvjs_printObjectPath+temp_fileName+".html";
		}
		else{
			file_and_ext = cvjs_printObjectPathAbsoluteServer+temp_fileName+".html";
		}

		var finalUrl = cvjs_serverHandlersPath+cvjs_serverDeleteFileController+'?file='+encodeURIComponent(file_and_ext);

		if (JQ_absoluteFolder)
			serverString += '<script src="'+cvjs_javaScriptsAbsoluteFolder+'" type="text/javascript"></script>';
		else
			serverString += '<script src="'+cvjs_javaScriptsAbsoluteFolder+'/jquery-2.2.3.js" type="text/javascript"></script>';

		serverString += '<script type="text/javascript">';

		serverString += 'jQuery(window).on(\'beforeunload\', function ()';
		serverString += '{';
		serverString += 'jQuery.ajax({';
		serverString += 'url:\''+finalUrl+'\',';
		//serverString += 'cache: true,';
		serverString += 'type: \'GET\',';
		serverString += 'async: false,';
		serverString += 'success: function(html){';
		serverString += '}';
		serverString += '});';
		serverString += '});';

		serverString += 'jQuery(window).on(\'unload\', function ()';
		serverString += '{';
		serverString += 'jQuery.ajax({';
		serverString += 'url:\''+finalUrl+'\',';
		//serverString += 'cache: true,';
		serverString += 'type: \'GET\',';
		serverString += 'async: false,';
		serverString += 'success: function(html){';
		serverString += '}';
		serverString += '});';
		serverString += '});';

//		serverString += 'window.onbeforeunload = function () {window.open(\"http://www.tailormade.com\");return undefined;};';
		serverString += 'window.onbeforeunload = function () {';
		serverString += 'jQuery.ajax({';
		serverString += 'url:\''+finalUrl+'\',';
		//serverString += 'cache: true,';
		serverString += 'type: \'GET\',';
		serverString += 'async: false,';
		serverString += 'success: function(html){';
		serverString += '}';
		serverString += '});';
		serverString += 'return undefined; }; ';

		serverString +='</script>';
  	}

//	serverString +='<style>';
//	serverString +='body {';

	
	
	var is_chrome = navigator.userAgent.indexOf('Chrome') > -1;
	var is_firefox = navigator.userAgent.indexOf('Firefox') > -1;
	var is_explorer = (navigator.userAgent.indexOf('MSIE') > -1) || (navigator.userAgent.indexOf('Trident') > -1);

	var is_safari = navigator.userAgent.indexOf("Safari") > -1;
	var is_Opera = navigator.userAgent.indexOf("Presto") > -1;

	var is_Edge = navigator.userAgent.indexOf("Edge") > -1;

	if (is_Edge) is_chrome = false;
	
	
	
		// 2018-04-16 change into media - print control
	
	serverString +="<style type=\"text/css\" media=\"print\">";
//	serverString +="@page { "               // chrome specific
	serverString +="@media print { "        // all others
    serverString +="    size: portrait";
    serverString +="}";
    serverString +="body {"; 
    serverString +="writing-mode: horizontal-tb";
    serverString +="}";
    serverString +="</style>";

	

	// portrait mode

	var pheight =  cvjs_printPaperWidth_mm;   // mm landscape long side
	var pwidth =  cvjs_printPaperHeight_mm;  // mm landscape short side

	var translate = cvjs_printPaperWidth_mm - cvjs_printPaperHeight_mm/2;

	var ph1 = pheight;
	var pw1 = pwidth;

	
	serverString +='</head><body onload=\"window.print()\"><img src=\'';
	serverString +=image;

	
	if (widthHeightFactorSVGless1){

		if (printDebugFlag)	console.log('b1 a (pw1-10)  \'  style=\"height: auto; width:'+(pw1-10)+'mm;\" /></body></html>');
		if (is_chrome)
			serverString +='\'  style=\"height: auto; width:'+(pw1-40)+'mm;\" /></body></html>';
		else
			serverString +='\'  style=\"height: auto; width:'+(pw1-0)+'mm;\" /></body></html>';
	}
	else{
		if (printDebugFlag)	console.log('b1 b (pw1-20)    \'  style=\"height: auto; width: '+(pw1-20)+'mm;\" /></body></html>');

		if (is_chrome)
			serverString +='\'  style=\"height: auto; width: '+(pw1-40)+'mm;\" /></body></html>';
		else
			serverString +='\'  style=\"height: auto; width: '+(pw1-0)+'mm;\" /></body></html>';
	
	}

	sendServerStringToServer(serverString, temp_fileName);
}





function sendServerStringToServer(serverString, temp_fileName){


	// 3.3.01f cvjs_serverSavePrintModeController == 6

	if (cvjs_serverSavePrintModeController == 0 || cvjs_serverSavePrintModeController == 6 || cvjs_serverSavePrintModeController == 3 || cvjs_serverSavePrintModeController == 4 || cvjs_serverSavePrintModeController == 5 ){

		jQuery('#cvjs_wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html('<table class=\"waitlooperTable\" width=\"100\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr><td><div id=\"looper_image_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\"></div></td></tr><tr><td><div class=\"cvjs_wait_text_4\" id=\"cvjs_wait_looper_text_id_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\">'+languageTable.languages[cvjs_currentLanguage].WaitModal.Printing+'</div></td></tr></table>');

		cvjs_setLooperPosition();

		jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).show();
	}


	var finalUrl = cvjs_serverHandlersPath + cvjs_serverSaveFileController;



//	var temp_fileName = Math.floor((Math.random() * 1000) + 1);
	var filelist_data = {};

	var fileLength = serverString.length;


	if (printDebugFlag) console.log("print object size! "+serverString.length);


	var serverString2 = "";
	var serverString3 = "";
	var serverString4 = "";
	var serverString5 = "";
	var serverString6 = "";
	var serverString7 = "";
	var serverString8 = "";
	var serverString9 = "";
	var serverString10 = "";
	var splitFile = 0;

	if (fileLength>8550000){
		splitFile = 9;
		serverString10=serverString.substring(8550000);
		serverString9=serverString.substring(7600000,8550000);
		serverString8=serverString.substring(6650000,7600000);
		serverString7=serverString.substring(5700000,6650000);
		serverString6=serverString.substring(4750000,5700000);
		serverString5=serverString.substring(3800000,4750000);
		serverString4=serverString.substring(2850000,3800000);
		serverString3=serverString.substring(1900000,2850000);
		serverString2=serverString.substring( 950000,1900000);
		serverString =serverString.substring(      0, 950000);
	}
	else{
		if (fileLength>7600000){
			splitFile = 8;
			serverString9=serverString.substring(7600000);
			serverString8=serverString.substring(6650000,7600000);
			serverString7=serverString.substring(5700000,6650000);
			serverString6=serverString.substring(4750000,5700000);
			serverString5=serverString.substring(3800000,4750000);
			serverString4=serverString.substring(2850000,3800000);
			serverString3=serverString.substring(1900000,2850000);
			serverString2=serverString.substring( 950000,1900000);
			serverString =serverString.substring(      0, 950000);
		}
		else{
			if (fileLength>6650000){
				splitFile = 7;
				serverString8=serverString.substring(6650000);
				serverString7=serverString.substring(5700000,6650000);
				serverString6=serverString.substring(4750000,5700000);
				serverString5=serverString.substring(3800000,4750000);
				serverString4=serverString.substring(2850000,3800000);
				serverString3=serverString.substring(1900000,2850000);
				serverString2=serverString.substring( 950000,1900000);
				serverString =serverString.substring(      0, 950000);
			}
			else{
				if (fileLength>5700000){
					splitFile = 6;
					serverString7=serverString.substring(5700000);
					serverString6=serverString.substring(4750000,5700000);
					serverString5=serverString.substring(3800000,4750000);
					serverString4=serverString.substring(2850000,3800000);
					serverString3=serverString.substring(1900000,2850000);
					serverString2=serverString.substring( 950000,1900000);
					serverString =serverString.substring(      0, 950000);
				}
				else{
					if (fileLength>4750000){
						splitFile = 5;
						serverString6=serverString.substring(4750000);
						serverString5=serverString.substring(3800000,4750000);
						serverString4=serverString.substring(2850000,3800000);
						serverString3=serverString.substring(1900000,2850000);
						serverString2=serverString.substring( 950000,1900000);
						serverString =serverString.substring(      0, 950000);
					}
					else{
						if (fileLength>3800000){
							splitFile = 4;
							serverString5=serverString.substring(3800000);
							serverString4=serverString.substring(2850000,3800000);
							serverString3=serverString.substring(1900000,2850000);
							serverString2=serverString.substring( 950000,1900000);
							serverString =serverString.substring(      0, 950000);
						}
						else{
							if (fileLength>2850000){
								splitFile = 3;
								serverString4=serverString.substring(2850000);
								serverString3=serverString.substring(1900000,2850000);
								serverString2=serverString.substring( 950000,1900000);
								serverString =serverString.substring(      0, 950000);
							}
							else{
								if (fileLength>1900000){
									splitFile = 2;
									serverString3=serverString.substring(1900000);
									serverString2=serverString.substring( 950000,1900000);
									serverString =serverString.substring(      0, 950000);
								}
								else{
									if (fileLength>950000){
										splitFile = 1;
										serverString2=serverString.substring(950000);
										serverString =serverString.substring(     0,950000);
									}
								}
							}
						}
					}
				}
			}
		}
	}


	if (cvjs_debug) console.log("xSPLITFILE "+splitFile+" length "+fileLength);

	filelist_data['file_content'] = serverString;

	var htmlPrintFile = "";

//window.alert("cvjs_printObjectPathAbsoluteServer"+cvjs_printObjectPathAbsoluteServer)	;
	
	if (cvjs_printObjectPathRelativeFlag){
		
		if (cvjs_debug) console.log("BRANCH 1"); 		
		filelist_data['file'] = cvjs_printObjectPath+temp_fileName+".html";
		
		htmlPrintFile = cvjs_serverHandlersPath +cvjs_printObjectPath +temp_fileName+".html";

		//4.1.03a 
		if (cvjs_NodeJSserver){
			htmlPrintFile = cvjs_serverHandlersPath +cvjs_printObjectPath +"?file="+temp_fileName+".html";
		}
		
	}
	else{
		if (cvjs_debug) console.log("BRANCH 2"); 		
		filelist_data['file'] = cvjs_printObjectPathAbsoluteServer+temp_fileName+".html";
		
		htmlPrintFile = cvjs_printObjectPathAbsolute+temp_fileName+".html";
		
		//4.1.03a 
		if (cvjs_NodeJSserver){
			htmlPrintFile = cvjs_printObjectPathAbsolute +"?file="+temp_fileName+".html";
		}

		
	}


	
	//window.alert(temp_fileName+"  "+cvjs_serverSavePrintModeController);
	
	
	if (cvjs_serverSavePrintModeController == 0 || cvjs_serverSavePrintModeController == 6){
		
		// do nothing		
	}
	else{
		if (cvjs_serverSavePrintModeController == 1 || cvjs_serverSavePrintModeController == 2 || cvjs_serverSavePrintModeController == 7){
			
			// this is the branch where there is no standard print, we simply set the filedata to the filename passed over
			// this is save of bitmap for either stickynote save or for batch print of files
			
			
			filelist_data['file'] = temp_fileName;	

			// 3.2.01f
			if (cvjs_serverSavePrintModeController == 2){  // this is for batch processing only  cvjs_serverSavePrintModeController == 2
				// it was not working based on an http path,so changing into 
				// filelist_data['file'] = ServerLocation + "/php/tcpdf/batchconvert/" +temp_fileName.substring(temp_fileName.lastIndexOf("/"));				

				// 6.1.21
				filelist_data['file'] = cvjs_ServerLocation  + "/converters/files/" +temp_fileName.substring(temp_fileName.lastIndexOf("/"));				

			}
			
			
			
			

			
		}
		else{  // cvjs_serverSavePrintModeController == 3 


		// NOTE 3.1.21c  - for this to work cvjs_setPhpPath(ServerUrl+"/php/");  cannot be absolute, must be a relative path
		// DISPLAY PDF

			if (cvjs_printObjectPathRelativeFlag){
				
				if (cvjs_debug) console.log("xxBRANCH 1"); 		
				filelist_data['file'] = cvjs_printObjectPath+temp_fileName+".html";
				htmlPrintFile = cvjs_serverHandlersPath +cvjs_printObjectPath +temp_fileName+".html";
			}
			else{
				if (cvjs_debug) console.log("xxBRANCH 2");
				
				// 3.1.21c
				var temp_fileName2 = temp_fileName.substring(temp_fileName.lastIndexOf("/")+1);

				/* 6.1.21
				// 3.2.01d				
				if (cvjs_screenToPDF_Controller.indexOf(".php")>-1){
					filelist_data['file'] = cvjs_ServerLocation+"php/tcpdf/batchconvert/"+temp_fileName2;
				}
				else{  // servlet or other path controllers 3.2.01d
					
					filelist_data['file'] = cvjs_ServerLocation  + "/converters/files/"+temp_fileName2;
				}
				*/
				// 6.1.21
				filelist_data['file'] = cvjs_ServerLocation  + "/converters/files/"+temp_fileName2;
				
				
					// 3.1.21c
				temp_fileName2 = temp_fileName.substring(0,temp_fileName.lastIndexOf("."));
				htmlPrintFile = temp_fileName2+".html";
				
			}
			
		}
		
	}
		

	if (cvjs_debug) console.log("Final URL:"+finalUrl+" filelist_data['file']="+filelist_data['file']+" htmlPrintFile="+htmlPrintFile+" serverString.length()  "+serverString.length);

	if (cvjs_debug) console.log("Mode: "+cvjs_serverSavePrintModeController+"  2:  filelist_data['file'] "+filelist_data['file']+" htmlPrintFile="+htmlPrintFile);



	if (cvjs_serverSavePrintModeController == 1 || cvjs_serverSavePrintModeController == 7){

		//console.log(finalUrl+"  "+filelist_data['file'] );
		// AAAAA
		jQuery('#cvjs_wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html('<table class=\"waitlooperTable\" width=\"100\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr><td><div id=\"looper_image_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\"></div></td></tr><tr><td><div class=\"cvjs_wait_text_4\" id=\"cvjs_wait_looper_text_id_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\">'+languageTable.languages[cvjs_currentLanguage].WaitModal.Thumbnails+'</div></td></tr></table>');

		cvjs_setLooperPosition();

		jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).fadeIn(100);

	}

	jQuery.ajax({
	  url:finalUrl,
	  type: 'post',
	  data: filelist_data,
	  success: function(html){
	  		if (cvjs_debug) console.log("final URL="+finalUrl+"return server "+html+" cvjs_serverSavePrintModeController="+cvjs_serverSavePrintModeController+"  "+filelist_data['file']+" splitfile "+splitFile);
	
				//window.alert("return server   cvjs_phpImagesUrlController X"+cvjs_phpImagesUrlController+"X cvjs_serverSave_php_controllerArray "+cvjs_serverSave_php_controllerArray);
	
				if (splitFile==0){

					// we are making thumbnails on the server
					if (cvjs_serverSavePrintModeController == 1 || cvjs_serverSavePrintModeController == 7){

						jQuery.ajax({
						  url:cvjs_phpImagesUrlController,
						  type: 'post',
						  data: cvjs_serverSave_php_controllerArray,
						  success: function(html){

	  							//console.log(cvjs_phpImagesUrlController+"   2nd call return server "+html+" "+cvjs_serverSavePrintModeController);
							  	cvjs_ajaxPostStatus_thumbNails = true;
								
								if (cvjs_serverSavePrintModeController == 7){
									jQuery.ajax({
									  url:cvjs_serverHandlersPath+"CV-JS_sharepoint_uploadlistattachment.php",
									  type: 'post',
									  data: cvjs_serverSave_php_controllerArray,
									  success: function(html){
									  
											console.log(html+"  sharepoint list item call back");
											jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
											cvjs_serverSavePrintModeController = 0;
									  }
									});
									return;
								}
								
															
	  							//console.log("2nd call return server cvjs_ajaxPostStatus_thumbNails "+cvjs_ajaxPostStatus_thumbNails);

								//window.alert(html+"  we have now created the thumbnails");
								jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
								cvjs_serverSavePrintModeController = 0;
						  }
						});
						return;

					}

					// we are batch processing drawings
					if (cvjs_serverSavePrintModeController == 2){
						jQuery.ajax({
						  url:cvjs_phpImagesUrlController,
						  type: 'post',
						  data: cvjs_serverSave_php_controllerArray,
						  success: function(html){
								// increment array and load next drawing in the set
								cvjs_batchDrawingsArrLength_globalCounter++;

								if (cvjs_batchDrawingsArrLength_globalCounter == cvjs_batchDrawingsArrLength){
									cvjs_batchConvertOnLoadEndCustomMethod();
								}else{
									cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_drawingFilesArray[cvjs_batchDrawingsArrLength_globalCounter]);
								}
						  }
						});
						return;
					}

					// single page pdf
					if (cvjs_serverSavePrintModeController == 3 || cvjs_serverSavePrintModeController == 4 || cvjs_serverSavePrintModeController == 5 ){
//  6.1.26
						if (cvjs_serverSavePrintModeController == 3)
							cvjs_printSavedBitmapToPDF();									
						if (cvjs_serverSavePrintModeController == 4)
							cvjs_printSavedBitmapToPDF_email();
						if (cvjs_serverSavePrintModeController == 5)
							cvjs_printSavedBitmapToPDF_uploadServer();
						return;
/*
						jQuery.ajax({
						  url:cvjs_phpImagesUrlController,
						  type: 'post',
						  data: cvjs_serverSave_php_controllerArray,
						  success: function(html){

						  
								if (cvjs_serverSavePrintModeController == 3)
									cvjs_printSavedBitmapToPDF();									
								if (cvjs_serverSavePrintModeController == 4)
									cvjs_printSavedBitmapToPDF_email();
								if (cvjs_serverSavePrintModeController == 5)
									cvjs_printSavedBitmapToPDF_uploadServer();
						  
						  }
						});
*/	
					}

					jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
//					printWindow = window.open( cvjs_phpPath+"temp_print/"+temp_fileName+".html", 'CADViewer - Print', 'height='+screen.height*0.5+',width='+screen.width*0.5);


					if (cvjs_serverSavePrintModeController == 0){
					// standard print case
						printWindow = window.open(htmlPrintFile, 'CADViewer - Print', 'height='+screen.height*0.5+',width='+screen.width*0.5);
//						printWindow = window.open(htmlPrintFile);
						printWindow.focus();
					}
					if (cvjs_serverSavePrintModeController == 6){ //3.3.01f						
							cvjs_pngForSVG(htmlPrintFile);
					}
					
					
					}
				else{
					filelist_data['file_content'] = serverString2;
					finalUrl = cvjs_serverHandlersPath + cvjs_serverAppendFileController;
					//console.log("append file");
					jQuery.ajax({
					  url:finalUrl,
					  type: 'post',
					  data: filelist_data,
					  success: function(html2){
						  	if (splitFile==1){

								// we are making thumbnails on the server
								if (cvjs_serverSavePrintModeController == 1 || cvjs_serverSavePrintModeController == 7){

									jQuery.ajax({
									  url:cvjs_phpImagesUrlController,
									  type: 'post',
									  data: cvjs_serverSave_php_controllerArray,
									  success: function(html){

							  				cvjs_ajaxPostStatus_thumbNails = true;
											
								if (cvjs_serverSavePrintModeController == 7){
									jQuery.ajax({
									  url:cvjs_serverHandlersPath+"CV-JS_sharepoint_uploadlistattachment.php",
									  type: 'post',
									  data: cvjs_serverSave_php_controllerArray,
									  success: function(html){
									  
											console.log(html+"  sharepoint list item call back");
											jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
											cvjs_serverSavePrintModeController = 0;
									  }
									});
									return;
								}
											
											
											//window.alert(html+"  we have now created the thumbnails");
											jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
											cvjs_serverSavePrintModeController = 0;
									  }
									});
									return;
								}

								// we are batch processing drawings
								if (cvjs_serverSavePrintModeController == 2){
									jQuery.ajax({
									  url:cvjs_phpImagesUrlController,
									  type: 'post',
									  data: cvjs_serverSave_php_controllerArray,
									  success: function(html){
											// increment array and load next drawing in the set
											cvjs_batchDrawingsArrLength_globalCounter++;
											if (cvjs_batchDrawingsArrLength_globalCounter == cvjs_batchDrawingsArrLength){
												cvjs_batchConvertOnLoadEndCustomMethod();
											}else{
												cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_drawingFilesArray[cvjs_batchDrawingsArrLength_globalCounter]);
											}
									  }
									});
									return;
								}

								// single page pdf
								if (cvjs_serverSavePrintModeController == 3 || cvjs_serverSavePrintModeController == 4 || cvjs_serverSavePrintModeController == 5 ){
//  6.1.26
						if (cvjs_serverSavePrintModeController == 3)
							cvjs_printSavedBitmapToPDF();									
						if (cvjs_serverSavePrintModeController == 4)
							cvjs_printSavedBitmapToPDF_email();
						if (cvjs_serverSavePrintModeController == 5)
							cvjs_printSavedBitmapToPDF_uploadServer();
						return;
/*
						jQuery.ajax({
						  url:cvjs_phpImagesUrlController,
						  type: 'post',
						  data: cvjs_serverSave_php_controllerArray,
						  success: function(html){

						  
								if (cvjs_serverSavePrintModeController == 3)
									cvjs_printSavedBitmapToPDF();									
								if (cvjs_serverSavePrintModeController == 4)
									cvjs_printSavedBitmapToPDF_email();
								if (cvjs_serverSavePrintModeController == 5)
									cvjs_printSavedBitmapToPDF_uploadServer();
						  
						  }
						});
*/	
								}


								jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
								//console.log(html2);

								if (cvjs_serverSavePrintModeController == 0){
								// standard print case
									printWindow = window.open(htmlPrintFile, 'CADViewer - Print', 'height='+screen.height*0.5+',width='+screen.width*0.5);
//								printWindow = window.open(htmlPrintFile);
									printWindow.focus();
								}
								if (cvjs_serverSavePrintModeController == 6){ //3.3.01f						
										cvjs_pngForSVG(htmlPrintFile);
								}
							}
							else{
								filelist_data['file_content'] = serverString3;
								finalUrl = cvjs_serverHandlersPath + cvjs_serverAppendFileController;
								//console.log("append file");
								jQuery.ajax({
								  url:finalUrl,
								  type: 'post',
								  data: filelist_data,
								  success: function(html3){
										if (splitFile==2){

											// we are making thumbnails on the server
											if (cvjs_serverSavePrintModeController == 1 || cvjs_serverSavePrintModeController == 7){

												jQuery.ajax({
												  url:cvjs_phpImagesUrlController,
												  type: 'post',
												  data: cvjs_serverSave_php_controllerArray,
												  success: function(html){

														cvjs_ajaxPostStatus_thumbNails = true;

								if (cvjs_serverSavePrintModeController == 7){
									jQuery.ajax({
									  url:cvjs_serverHandlersPath+"CV-JS_sharepoint_uploadlistattachment.php",
									  type: 'post',
									  data: cvjs_serverSave_php_controllerArray,
									  success: function(html){
									  
											console.log(html+"  sharepoint list item call back");
											jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
											cvjs_serverSavePrintModeController = 0;
									  }
									});
									return;
								}


														//window.alert(html+"  we have now created the thumbnails");
														jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
														cvjs_serverSavePrintModeController = 0;
												  }
												});
												return;
											}


											// we are batch processing drawings
											if (cvjs_serverSavePrintModeController == 2){
												jQuery.ajax({
												  url:cvjs_phpImagesUrlController,
												  type: 'post',
												  data: cvjs_serverSave_php_controllerArray,
												  success: function(html){
														// increment array and load next drawing in the set
														cvjs_batchDrawingsArrLength_globalCounter++;
														if (cvjs_batchDrawingsArrLength_globalCounter == cvjs_batchDrawingsArrLength){
															cvjs_batchConvertOnLoadEndCustomMethod();
														}else{
															cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_drawingFilesArray[cvjs_batchDrawingsArrLength_globalCounter]);
														}
												  }
												});
												return;
											}


											// single page pdf
											if (cvjs_serverSavePrintModeController == 3 || cvjs_serverSavePrintModeController == 4 || cvjs_serverSavePrintModeController == 5 ){
//  6.1.26
						if (cvjs_serverSavePrintModeController == 3)
							cvjs_printSavedBitmapToPDF();									
						if (cvjs_serverSavePrintModeController == 4)
							cvjs_printSavedBitmapToPDF_email();
						if (cvjs_serverSavePrintModeController == 5)
							cvjs_printSavedBitmapToPDF_uploadServer();
						return;
/*
						jQuery.ajax({
						  url:cvjs_phpImagesUrlController,
						  type: 'post',
						  data: cvjs_serverSave_php_controllerArray,
						  success: function(html){

						  
								if (cvjs_serverSavePrintModeController == 3)
									cvjs_printSavedBitmapToPDF();									
								if (cvjs_serverSavePrintModeController == 4)
									cvjs_printSavedBitmapToPDF_email();
								if (cvjs_serverSavePrintModeController == 5)
									cvjs_printSavedBitmapToPDF_uploadServer();
						  
						  }
						});
*/	
											}

											// standard print case
											jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();

											if (cvjs_serverSavePrintModeController == 0){
											// standard print case
												printWindow = window.open(htmlPrintFile, 'CADViewer - Print', 'height='+screen.height*0.5+',width='+screen.width*0.5);
//						printWindow = window.open(htmlPrintFile);
												printWindow.focus();
											}
											if (cvjs_serverSavePrintModeController == 6){ //3.3.01f						
													cvjs_pngForSVG(htmlPrintFile);
											}
										}
										else{
											filelist_data['file_content'] = serverString4;
											finalUrl = cvjs_serverHandlersPath + cvjs_serverAppendFileController;
											console.log("saving serverString 4");
											jQuery.ajax({
											  url:finalUrl,
											  type: 'post',
											  data: filelist_data,
											  success: function(html4){
													if (splitFile==3){


														// we are making thumbnails on the server
														if (cvjs_serverSavePrintModeController == 1 || cvjs_serverSavePrintModeController == 7){

															jQuery.ajax({
															  url:cvjs_phpImagesUrlController,
															  type: 'post',
															  data: cvjs_serverSave_php_controllerArray,
															  success: function(html){
																	//window.alert(html+"  we have now created the thumbnails");
																	cvjs_ajaxPostStatus_thumbNails = true;

								if (cvjs_serverSavePrintModeController == 7){
									jQuery.ajax({
									  url:cvjs_serverHandlersPath+"CV-JS_sharepoint_uploadlistattachment.php",
									  type: 'post',
									  data: cvjs_serverSave_php_controllerArray,
									  success: function(html){
									  
											console.log(html+"  sharepoint list item call back");
											jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
											cvjs_serverSavePrintModeController = 0;
									  }
									});
									return;
								}

																	
																	jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
																	cvjs_serverSavePrintModeController = 0;
															  }
															});
															return;
														}


														// we are batch processing drawings
														if (cvjs_serverSavePrintModeController == 2){
															jQuery.ajax({
															  url:cvjs_phpImagesUrlController,
															  type: 'post',
															  data: cvjs_serverSave_php_controllerArray,
															  success: function(html){
																	// increment array and load next drawing in the set
																	cvjs_batchDrawingsArrLength_globalCounter++;
																	if (cvjs_batchDrawingsArrLength_globalCounter == cvjs_batchDrawingsArrLength){
																		cvjs_batchConvertOnLoadEndCustomMethod();
																	}else{
																		cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_drawingFilesArray[cvjs_batchDrawingsArrLength_globalCounter]);
																	}
															  }
															});
															return;
														}

														// single page pdf
														if (cvjs_serverSavePrintModeController == 3 || cvjs_serverSavePrintModeController == 4 || cvjs_serverSavePrintModeController == 5 ){
//  6.1.26
						if (cvjs_serverSavePrintModeController == 3)
							cvjs_printSavedBitmapToPDF();									
						if (cvjs_serverSavePrintModeController == 4)
							cvjs_printSavedBitmapToPDF_email();
						if (cvjs_serverSavePrintModeController == 5)
							cvjs_printSavedBitmapToPDF_uploadServer();
						return;
/*
						jQuery.ajax({
						  url:cvjs_phpImagesUrlController,
						  type: 'post',
						  data: cvjs_serverSave_php_controllerArray,
						  success: function(html){

						  
								if (cvjs_serverSavePrintModeController == 3)
									cvjs_printSavedBitmapToPDF();									
								if (cvjs_serverSavePrintModeController == 4)
									cvjs_printSavedBitmapToPDF_email();
								if (cvjs_serverSavePrintModeController == 5)
									cvjs_printSavedBitmapToPDF_uploadServer();
						  
						  }
						});
*/	
														}


														// standard print case
														jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();

														if (cvjs_serverSavePrintModeController == 0){
														// standard print case
															printWindow = window.open(htmlPrintFile, 'CADViewer - Print', 'height='+screen.height*0.5+',width='+screen.width*0.5);
//						printWindow = window.open(htmlPrintFile);
															printWindow.focus();
														}
														if (cvjs_serverSavePrintModeController == 6){ //3.3.01f						
																cvjs_pngForSVG(htmlPrintFile);
														}
													}
													else{
												console.log(splitFile+" saving serverString 5");

														filelist_data['file_content'] = serverString5;
														finalUrl = cvjs_serverHandlersPath + cvjs_serverAppendFileController;
														//console.log("append file");
														jQuery.ajax({
														  url:finalUrl,
														  type: 'post',
														  data: filelist_data,
														  success: function(html5){
																if (splitFile==4){

																	// we are making thumbnails on the server
																	if (cvjs_serverSavePrintModeController == 1 || cvjs_serverSavePrintModeController == 7){
																		jQuery.ajax({
																		  url:cvjs_phpImagesUrlController,
																		  type: 'post',
																		  data: cvjs_serverSave_php_controllerArray,
																		  success: function(html){
																				//window.alert(html+"  we have now created the thumbnails");
																				cvjs_ajaxPostStatus_thumbNails = true;

								if (cvjs_serverSavePrintModeController == 7){
									jQuery.ajax({
									  url:cvjs_serverHandlersPath+"CV-JS_sharepoint_uploadlistattachment.php",
									  type: 'post',
									  data: cvjs_serverSave_php_controllerArray,
									  success: function(html){
									  
											console.log(html+"  sharepoint list item call back");
											jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
											cvjs_serverSavePrintModeController = 0;
									  }
									});
									return;
								}
																				
																				jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
																				cvjs_serverSavePrintModeController = 0;
																		  }
																		});
																		return;
																	}


																	// we are batch processing drawings
																	if (cvjs_serverSavePrintModeController == 2){
																		jQuery.ajax({
																		  url:cvjs_phpImagesUrlController,
																		  type: 'post',
																		  data: cvjs_serverSave_php_controllerArray,
																		  success: function(html){
																				// increment array and load next drawing in the set
																				cvjs_batchDrawingsArrLength_globalCounter++;
																				if (cvjs_batchDrawingsArrLength_globalCounter == cvjs_batchDrawingsArrLength){
																					cvjs_batchConvertOnLoadEndCustomMethod();
																				}else{
																					cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_drawingFilesArray[cvjs_batchDrawingsArrLength_globalCounter]);
																				}
																		  }
																		});
																		return;
																	}

																	// single page pdf
																	if (cvjs_serverSavePrintModeController == 3 || cvjs_serverSavePrintModeController == 4 || cvjs_serverSavePrintModeController == 5 ){
//  6.1.26
						if (cvjs_serverSavePrintModeController == 3)
							cvjs_printSavedBitmapToPDF();									
						if (cvjs_serverSavePrintModeController == 4)
							cvjs_printSavedBitmapToPDF_email();
						if (cvjs_serverSavePrintModeController == 5)
							cvjs_printSavedBitmapToPDF_uploadServer();
						return;
/*
						jQuery.ajax({
						  url:cvjs_phpImagesUrlController,
						  type: 'post',
						  data: cvjs_serverSave_php_controllerArray,
						  success: function(html){

						  
								if (cvjs_serverSavePrintModeController == 3)
									cvjs_printSavedBitmapToPDF();									
								if (cvjs_serverSavePrintModeController == 4)
									cvjs_printSavedBitmapToPDF_email();
								if (cvjs_serverSavePrintModeController == 5)
									cvjs_printSavedBitmapToPDF_uploadServer();
						  
						  }
						});
*/	
																	}

																	// standard print case
																	jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
																	//console.log(html2);

																	if (cvjs_serverSavePrintModeController == 0){
																	// standard print case
																		printWindow = window.open(htmlPrintFile, 'CADViewer - Print', 'height='+screen.height*0.5+',width='+screen.width*0.5);
//						printWindow = window.open(htmlPrintFile);
																		printWindow.focus();
																	}
																	if (cvjs_serverSavePrintModeController == 6){ //3.3.01f						
																			cvjs_pngForSVG(htmlPrintFile);
																	}
																}
																else{  // splitfile =5
	if (cvjs_debug) 												console.log(splitFile+" saving serverString 6");

																	filelist_data['file_content'] = serverString6;
																	finalUrl = cvjs_serverHandlersPath + cvjs_serverAppendFileController;
																	//console.log("append file");
																	jQuery.ajax({
																	  url:finalUrl,
																	  type: 'post',
																	  data: filelist_data,
																	  success: function(html5){

																				if (splitFile==5){
																				// we are making thumbnails on the server
																				if (cvjs_serverSavePrintModeController == 1 || cvjs_serverSavePrintModeController == 7){
																					jQuery.ajax({
																					  url:cvjs_phpImagesUrlController,
																					  type: 'post',
																					  data: cvjs_serverSave_php_controllerArray,
																					  success: function(html){
																							//window.alert(html+"  we have now created the thumbnails");
																							cvjs_ajaxPostStatus_thumbNails = true;
																				
																							
								if (cvjs_serverSavePrintModeController == 7){
									jQuery.ajax({
									  url:cvjs_serverHandlersPath+"uploadlistitem_sharepoint.php",
									  type: 'post',
									  data: cvjs_serverSave_php_controllerArray,
									  success: function(html){
									  
											console.log(html+"  sharepoint list item call back");
											jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
											cvjs_serverSavePrintModeController = 0;
									  }
									});
									return;
								}
																							
																							
																							
																							
																							
																							
																							jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
																							cvjs_serverSavePrintModeController = 0;
																					  }
																					});
																					return;
																				}


																				// we are batch processing drawings
																				if (cvjs_serverSavePrintModeController == 2){
																					jQuery.ajax({
																					  url:cvjs_phpImagesUrlController,
																					  type: 'post',
																					  data: cvjs_serverSave_php_controllerArray,
																					  success: function(html){
																							// increment array and load next drawing in the set
																							cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_drawingFilesArray[cvjs_batchDrawingsArrLength_globalCounter++]);
																					  }
																					});
																					return;
																				}

																				// single page pdf
																				if (cvjs_serverSavePrintModeController == 3 || cvjs_serverSavePrintModeController == 4 || cvjs_serverSavePrintModeController == 5 ){
//  6.1.26
						if (cvjs_serverSavePrintModeController == 3)
							cvjs_printSavedBitmapToPDF();									
						if (cvjs_serverSavePrintModeController == 4)
							cvjs_printSavedBitmapToPDF_email();
						if (cvjs_serverSavePrintModeController == 5)
							cvjs_printSavedBitmapToPDF_uploadServer();
						return;
/*
						jQuery.ajax({
						  url:cvjs_phpImagesUrlController,
						  type: 'post',
						  data: cvjs_serverSave_php_controllerArray,
						  success: function(html){

						  
								if (cvjs_serverSavePrintModeController == 3)
									cvjs_printSavedBitmapToPDF();									
								if (cvjs_serverSavePrintModeController == 4)
									cvjs_printSavedBitmapToPDF_email();
								if (cvjs_serverSavePrintModeController == 5)
									cvjs_printSavedBitmapToPDF_uploadServer();
						  
						  }
						});
*/	
																				}

																				// standard print case
																				jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
																				//console.log(html3);

																				if (cvjs_serverSavePrintModeController == 0){
																				// standard print case
																					printWindow = window.open(htmlPrintFile, 'CADViewer - Print', 'height='+screen.height*0.5+',width='+screen.width*0.5);
//						printWindow = window.open(htmlPrintFile);
																					printWindow.focus();
																				}
																				if (cvjs_serverSavePrintModeController == 6){ //3.3.01f						
																						cvjs_pngForSVG(htmlPrintFile);
																				}
																				}
																				else{ // splitfile =6
	if (cvjs_debug) 												console.log(splitFile+" saving serverString 7");
																					filelist_data['file_content'] = serverString7;
																					finalUrl = cvjs_serverHandlersPath + cvjs_serverAppendFileController;
																					//console.log("append file");
																					jQuery.ajax({
																					  url:finalUrl,
																					  type: 'post',
																					  data: filelist_data,
																					  success: function(html5){

																								if (splitFile==6){
																								// we are making thumbnails on the server
																								if (cvjs_serverSavePrintModeController == 1 || cvjs_serverSavePrintModeController == 7){
																									jQuery.ajax({
																									  url:cvjs_phpImagesUrlController,
																									  type: 'post',
																									  data: cvjs_serverSave_php_controllerArray,
																									  success: function(html){
																											if (cvjs_debug) console.log(cvjs_phpImagesUrlController+" "+ html+"  we have now created the thumbnails");
																											cvjs_ajaxPostStatus_thumbNails = true;

																											
								if (cvjs_serverSavePrintModeController == 7){
									jQuery.ajax({
									  url:cvjs_serverHandlersPath+"CV-JS_sharepoint_uploadlistattachment.php",
									  type: 'post',
									  data: cvjs_serverSave_php_controllerArray,
									  success: function(html){
									  
											console.log(html+"  sharepoint list item call back");
											jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
											cvjs_serverSavePrintModeController = 0;
									  }
									});
									return;
								}
																											
																											
																											
																											jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
																											cvjs_serverSavePrintModeController = 0;
																									  }
																									});
																									return;
																								}


																								// we are batch processing drawings
																								if (cvjs_serverSavePrintModeController == 2){
																									jQuery.ajax({
																									  url:cvjs_phpImagesUrlController,
																									  type: 'post',
																									  data: cvjs_serverSave_php_controllerArray,
																									  success: function(html){
																											// increment array and load next drawing in the set
																											cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_drawingFilesArray[cvjs_batchDrawingsArrLength_globalCounter++]);
																									  }
																									});
																									return;
																								}

																								// single page pdf
																								if (cvjs_serverSavePrintModeController == 3 || cvjs_serverSavePrintModeController == 4 || cvjs_serverSavePrintModeController == 5 ){
//  6.1.26
						if (cvjs_serverSavePrintModeController == 3)
							cvjs_printSavedBitmapToPDF();									
						if (cvjs_serverSavePrintModeController == 4)
							cvjs_printSavedBitmapToPDF_email();
						if (cvjs_serverSavePrintModeController == 5)
							cvjs_printSavedBitmapToPDF_uploadServer();
						return;
/*
						jQuery.ajax({
						  url:cvjs_phpImagesUrlController,
						  type: 'post',
						  data: cvjs_serverSave_php_controllerArray,
						  success: function(html){

						  
								if (cvjs_serverSavePrintModeController == 3)
									cvjs_printSavedBitmapToPDF();									
								if (cvjs_serverSavePrintModeController == 4)
									cvjs_printSavedBitmapToPDF_email();
								if (cvjs_serverSavePrintModeController == 5)
									cvjs_printSavedBitmapToPDF_uploadServer();
						  
						  }
						});
*/	
																								}

																								// standard print case
																								jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
																								//console.log(html3);

																								if (cvjs_serverSavePrintModeController == 0){
																								// standard print case
																									printWindow = window.open(htmlPrintFile, 'CADViewer - Print', 'height='+screen.height*0.5+',width='+screen.width*0.5);
//						printWindow = window.open(htmlPrintFile);
																									printWindow.focus();
																								}
																								if (cvjs_serverSavePrintModeController == 6){ //3.3.01f						
																										cvjs_pngForSVG(htmlPrintFile);
																								}
																								}
																								else{ // splitfile =7
	if (cvjs_debug) 																									console.log(splitFile+" saving serverString 8");

																										filelist_data['file_content'] = serverString8;
																										finalUrl = cvjs_serverHandlersPath + cvjs_serverAppendFileController;
																										//console.log("append file");
																										jQuery.ajax({
																										  url:finalUrl,
																										  type: 'post',
																										  data: filelist_data,
																										  success: function(html5){
																													if (splitFile==7){
																													// we are making thumbnails on the server
																													if (cvjs_serverSavePrintModeController == 1 || cvjs_serverSavePrintModeController == 7){
																														jQuery.ajax({
																														  url:cvjs_phpImagesUrlController,
																														  type: 'post',
																														  data: cvjs_serverSave_php_controllerArray,
																														  success: function(html){
																																//window.alert(html+"  we have now created the thumbnails");
																																cvjs_ajaxPostStatus_thumbNails = true;
								if (cvjs_serverSavePrintModeController == 7){
									jQuery.ajax({
									  url:cvjs_serverHandlersPath+"CV-JS_sharepoint_uploadlistattachment.php",
									  type: 'post',
									  data: cvjs_serverSave_php_controllerArray,
									  success: function(html){
									  
											console.log(html+"  sharepoint list item call back");
											jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
											cvjs_serverSavePrintModeController = 0;
									  }
									});
									return;
								}

																																jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
																																cvjs_serverSavePrintModeController = 0;
																														  }
																														});
																														return;
																													}


																													// we are batch processing drawings
																													if (cvjs_serverSavePrintModeController == 2){
																														jQuery.ajax({
																														  url:cvjs_phpImagesUrlController,
																														  type: 'post',
																														  data: cvjs_serverSave_php_controllerArray,
																														  success: function(html){
																																// increment array and load next drawing in the set
																																cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_drawingFilesArray[cvjs_batchDrawingsArrLength_globalCounter++]);
																														  }
																														});
																														return;
																													}

																													// single page pdf
																													if (cvjs_serverSavePrintModeController == 3 || cvjs_serverSavePrintModeController == 4 || cvjs_serverSavePrintModeController == 5 ){
//  6.1.26
						if (cvjs_serverSavePrintModeController == 3)
							cvjs_printSavedBitmapToPDF();									
						if (cvjs_serverSavePrintModeController == 4)
							cvjs_printSavedBitmapToPDF_email();
						if (cvjs_serverSavePrintModeController == 5)
							cvjs_printSavedBitmapToPDF_uploadServer();
						return;
/*
						jQuery.ajax({
						  url:cvjs_phpImagesUrlController,
						  type: 'post',
						  data: cvjs_serverSave_php_controllerArray,
						  success: function(html){

						  
								if (cvjs_serverSavePrintModeController == 3)
									cvjs_printSavedBitmapToPDF();									
								if (cvjs_serverSavePrintModeController == 4)
									cvjs_printSavedBitmapToPDF_email();
								if (cvjs_serverSavePrintModeController == 5)
									cvjs_printSavedBitmapToPDF_uploadServer();
						  
						  }
						});
*/	
																													}

																													// standard print case
																													jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
																													//console.log(html3);

																													if (cvjs_serverSavePrintModeController == 0){
																													// standard print case
																														printWindow = window.open(htmlPrintFile, 'CADViewer - Print', 'height='+screen.height*0.5+',width='+screen.width*0.5);
//						printWindow = window.open(htmlPrintFile);
																														printWindow.focus();
																													}
																													if (cvjs_serverSavePrintModeController == 6){ //3.3.01f						
																															cvjs_pngForSVG(htmlPrintFile);
																													}
																													}
																													else{ // splitfile =8
	if (cvjs_debug) 																													console.log(splitFile+" saving serverString 9");

																															filelist_data['file_content'] = serverString9;
																															finalUrl = cvjs_serverHandlersPath + cvjs_serverAppendFileController;
																															//console.log("append file");
																															jQuery.ajax({
																															  url:finalUrl,
																															  type: 'post',
																															  data: filelist_data,
																															  success: function(html5){
																																		if (splitFile==8){
																																		// we are making thumbnails on the server
																																		if (cvjs_serverSavePrintModeController == 1 || cvjs_serverSavePrintModeController == 7){
																																			jQuery.ajax({
																																			  url:cvjs_phpImagesUrlController,
																																			  type: 'post',
																																			  data: cvjs_serverSave_php_controllerArray,
																																			  success: function(html){
																																					//window.alert(html+"  we have now created the thumbnails");
																																					cvjs_ajaxPostStatus_thumbNails = true;
								if (cvjs_serverSavePrintModeController == 7){
									jQuery.ajax({
									  url:cvjs_serverHandlersPath+"CV-JS_sharepoint_uploadlistattachment.php",
									  type: 'post',
									  data: cvjs_serverSave_php_controllerArray,
									  success: function(html){
									  
											console.log(html+"  sharepoint list item call back");
											jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
											cvjs_serverSavePrintModeController = 0;
									  }
									});
									return;
								}

																																					jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
																																					cvjs_serverSavePrintModeController = 0;
																																			  }
																																			});
																																			return;
																																		}


																																		// we are batch processing drawings
																																		if (cvjs_serverSavePrintModeController == 2){
																																			jQuery.ajax({
																																			  url:cvjs_phpImagesUrlController,
																																			  type: 'post',
																																			  data: cvjs_serverSave_php_controllerArray,
																																			  success: function(html){
																																					// increment array and load next drawing in the set
																																					cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_drawingFilesArray[cvjs_batchDrawingsArrLength_globalCounter++]);
																																			  }
																																			});
																																			return;
																																		}

																																		// single page pdf
																																		if (cvjs_serverSavePrintModeController == 3 || cvjs_serverSavePrintModeController == 4 || cvjs_serverSavePrintModeController == 5 ){
//  6.1.26
						if (cvjs_serverSavePrintModeController == 3)
							cvjs_printSavedBitmapToPDF();									
						if (cvjs_serverSavePrintModeController == 4)
							cvjs_printSavedBitmapToPDF_email();
						if (cvjs_serverSavePrintModeController == 5)
							cvjs_printSavedBitmapToPDF_uploadServer();
						return;
/*
						jQuery.ajax({
						  url:cvjs_phpImagesUrlController,
						  type: 'post',
						  data: cvjs_serverSave_php_controllerArray,
						  success: function(html){

						  
								if (cvjs_serverSavePrintModeController == 3)
									cvjs_printSavedBitmapToPDF();									
								if (cvjs_serverSavePrintModeController == 4)
									cvjs_printSavedBitmapToPDF_email();
								if (cvjs_serverSavePrintModeController == 5)
									cvjs_printSavedBitmapToPDF_uploadServer();
						  
						  }
						});
*/	
																																		}

																																		// standard print case
																																		jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
																																		//console.log(html3);

																																		if (cvjs_serverSavePrintModeController == 0){
																																		// standard print case
																																			printWindow = window.open(htmlPrintFile, 'CADViewer - Print', 'height='+screen.height*0.5+',width='+screen.width*0.5);
//						printWindow = window.open(htmlPrintFile);
																																			printWindow.focus();
																																		}
																																		if (cvjs_serverSavePrintModeController == 6){ //3.3.01f						
																																				cvjs_pngForSVG(htmlPrintFile);
																																		}
																																		}
																																		else{ // splitfile =9
	if (cvjs_debug) 																																		console.log(splitFile+" saving serverString 10");

																																			filelist_data['file_content'] = serverString10;
																																			finalUrl = cvjs_serverHandlersPath + cvjs_serverAppendFileController;
																																			//console.log("append file");
																																			jQuery.ajax({
																																			  url:finalUrl,
																																			  type: 'post',
																																			  data: filelist_data,
																																			  success: function(html5){
																																						if (splitFile==9){
																																						// we are making thumbnails on the server
																																						if (cvjs_serverSavePrintModeController == 1 || cvjs_serverSavePrintModeController == 7){
																																							jQuery.ajax({
																																							  url:cvjs_phpImagesUrlController,
																																							  type: 'post',
																																							  data: cvjs_serverSave_php_controllerArray,
																																							  success: function(html){
																																									//window.alert(html+"  we have now created the thumbnails");
																																									cvjs_ajaxPostStatus_thumbNails = true;
								if (cvjs_serverSavePrintModeController == 7){
									jQuery.ajax({
									  url:cvjs_serverHandlersPath+"CV-JS_sharepoint_uploadlistattachment.php",
									  type: 'post',
									  data: cvjs_serverSave_php_controllerArray,
									  success: function(html){
									  
											console.log(html+"  sharepoint list item call back");
											jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
											cvjs_serverSavePrintModeController = 0;
									  }
									});
									return;
								}

																																									jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
																																									cvjs_serverSavePrintModeController = 0;
																																							  }
																																							});
																																							return;
																																						}


																																						// we are batch processing drawings
																																						if (cvjs_serverSavePrintModeController == 2){
																																							jQuery.ajax({
																																							  url:cvjs_phpImagesUrlController,
																																							  type: 'post',
																																							  data: cvjs_serverSave_php_controllerArray,
																																							  success: function(html){
																																									// increment array and load next drawing in the set
																																									cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_drawingFilesArray[cvjs_batchDrawingsArrLength_globalCounter++]);
																																							  }
																																							});
																																							return;
																																						}

																																						// single page pdf
																																						if (cvjs_serverSavePrintModeController == 3 || cvjs_serverSavePrintModeController == 4 || cvjs_serverSavePrintModeController == 5 ){
																																							//  6.1.26
						if (cvjs_serverSavePrintModeController == 3)
							cvjs_printSavedBitmapToPDF();									
						if (cvjs_serverSavePrintModeController == 4)
							cvjs_printSavedBitmapToPDF_email();
						if (cvjs_serverSavePrintModeController == 5)
							cvjs_printSavedBitmapToPDF_uploadServer();
						return;
/*
						jQuery.ajax({
						  url:cvjs_phpImagesUrlController,
						  type: 'post',
						  data: cvjs_serverSave_php_controllerArray,
						  success: function(html){

						  
								if (cvjs_serverSavePrintModeController == 3)
									cvjs_printSavedBitmapToPDF();									
								if (cvjs_serverSavePrintModeController == 4)
									cvjs_printSavedBitmapToPDF_email();
								if (cvjs_serverSavePrintModeController == 5)
									cvjs_printSavedBitmapToPDF_uploadServer();
						  
						  }
						});
*/	

																																						}

																																						// standard print case
																																						jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
																																						//console.log(html3);

																																							if (cvjs_serverSavePrintModeController == 0){
																																							// standard print case
																																								printWindow = window.open(htmlPrintFile, 'CADViewer - Print', 'height='+screen.height*0.5+',width='+screen.width*0.5);
//						printWindow = window.open(htmlPrintFile);
																																								printWindow.focus();
																																							}
																																							if (cvjs_serverSavePrintModeController == 6){ //3.3.01f						
																																									cvjs_pngForSVG(htmlPrintFile);
																																							}
																																						}
																																						else{ // splitfile =10
	if (cvjs_debug) 																																						console.log(splitFile+" saving serverString 11 not implemented");








																																						}
																																			  }  // end success
																																			});









																																		}
																															  }  // end success
																															});

																													}

																										  }  // end success
																										});

																								}
																					  }  // end success
																					});
																				}
																	  }  // end success
																	});
																}
														  }  // end success
														});
													}
											  }  // end success
											});
										}
								  }  // end success
								});

							}
					  }  // end success
					});
				}
	  }  // end success

	});

}

//  REDLINE /STICKYNOTE SAVE LOAD  - PRINT  

var cvjs_displayMagnifyingGlassFlag = [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false];
var cvjs_firstDisplayMagnifying = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];

function cvjs_displayMagnifyingGlass(floorplan_div){


	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}



	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	cvjs_displayMagnifyingGlassFlag[cvjs_active_floorplan_div_nr] = !cvjs_displayMagnifyingGlassFlag[cvjs_active_floorplan_div_nr];

	
	
	if (cvjs_displayMagnifyingGlassFlag[cvjs_active_floorplan_div_nr]){

			
		if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
		cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;

		viewBox_X_magn = 0;
		viewBox_Y_magn = 0;
		viewBoxHeight_magn = 0;
		viewBoxWidth_magn = 0;

		if ( cvjs_firstDisplayMagnifying[cvjs_active_floorplan_div_nr]){
			cvjs_firstDisplayMagnifying[cvjs_active_floorplan_div_nr] = false;
			var pos = jQuery('#'+floorplan_div).position();
			var posmenu_x = pos.top+40;
			var posmenu_y = pos.left+jQuery('#'+floorplan_div).width()-648;
			if (posmenu_y <400) posmenu_y = 400;
			
	
			console.log(posmenu_x+"  "+posmenu_y);
			
			//jQuery('#cvjs_floorPlanMagnifyingGlassEncapsulate_'+floorplan_div).offset({ top: posmenu_x, left: posmenu_y });
			jQuery('#cvjs_floorPlanMagnifyingGlassEncapsulate_'+floorplan_div).offset({left:150+jQuery('#'+floorplan_div).position().left, top: 150+jQuery('#'+floorplan_div).position().top});

			}
		jQuery('#cvjs_floorPlanMagnifyingGlassEncapsulate_'+floorplan_div).show();
		cvjs_addHandleFunc_ZoomMagnifyingGlass();
	}
	else{

		jQuery('#cvjs_floorPlanMagnifyingGlassEncapsulate_'+floorplan_div).hide();
		cvjs_removeHandleFunc_ZoomMagnifyingGlass();

		cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;

		// clean up the rubberband
		tPath_r = "M0,0";
		tRubberBand_r.attr({'path': tPath_r});
	}
}


function cvjs_exitBirdsEye(floorplan_div){

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;

	cvjs_displayMagnifyingGlassFlag[cvjs_active_floorplan_div_nr] = false;

	jQuery('#cvjs_floorPlanMagnifyingGlassEncapsulate_'+floorplan_div).hide();
	cvjs_removeHandleFunc_ZoomMagnifyingGlass();

	// clean up the rubberband
	tPath_r = "M0,0";
	tRubberBand_r.attr({'path': tPath_r});

//	console.log("hello!");
//	jQuery('#cvjs_magnifyHeader').html("stuff...");

}







function cvjs_addHandleFunc_ZoomMagnifyingGlass() {

	tPath_r = "M" + firstX_r + "," + firstY_r;
	tRubberBand_r = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_r).attr({stroke: "#b00000", fill : "none"});

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,90, '');

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});
//	handleGroup.drag(move_cvjs_create_zoommagnify_rectangle,start_cvjs_create_zoommagnify_rectangle,stop_cvjs_create_zoommagnify_rectangle);
	handleGroup.mousemove(move_cvjs_create_zoommagnify_rectangle);
}

function cvjs_removeHandleFunc_ZoomMagnifyingGlass() {
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("handler removed");

}


var start_cvjs_create_zoommagnify_rectangle = function() {

	flag_rectangle= false;
	var zoomwindow_stroke = viewBoxWidth[cvjs_active_floorplan_div_nr]/400;

	var rectColor = "#0b0b0b";
	if (cvjs_blackBackground) rectColor = "#FbFbFb";
	console.log(cvjs_blackBackground+"  "+rectColor);

	var attr_2 =  '{\"stroke\": \"'+rectColor+'\", \"fill\" : \"none\", \"stroke-opacity\": \"0.5\", \"stroke-width\": \"'+zoomwindow_stroke+'\"}';
	var json_obj = jQuery.parseJSON(attr_2);
	tRubberBand_r.attr(json_obj);
}


var zoomwindow_counter = 0;


var cvjs_magnifyingGlassWidth = 648;
var cvjs_magnifyingGlassHeight = 450;
var cvjs_magnifyCanvasDrawn = true;

var magnify_startflag = true;
var startTime;
var deltaDist_pre;
var delta_dist;


// this is our idle mouse method

jQuery(document).ready(function(){

   idleTime = 0;

   //Increment the idle time counter every second.
   var idleInterval = setInterval(timerIncrement, 100);

   function timerIncrement()
   {
     idleTime++;
     if (idleTime > 2)
     {
       doIdleMouseSetting();
     }
   }

   //Zero the idle timer on mouse movement.
   jQuery(this).mousemove(function(e){
      idleTime = 0;
      magnify_startflag = true;
   });

   function doIdleMouseSetting()
   {

	//   console.log("idle mouse!");
      if (cvjs_displayMagnifyingGlassFlag[cvjs_active_floorplan_div_nr]){
			if (magnify_startflag){
				magnify_startflag = false;
				if (cvjs_magnifyCanvasDrawn && !viewBox_X_magn==0 && !viewBox_Y_magn==0 ){
					cvjs_magnifyCanvasDrawn = false;
					//tRubberBand_r.attr({fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1"});
					cvjs_renderMagnifyingGlass(viewBox_X_magn, viewBox_Y_magn, viewBoxWidth_magn, viewBoxHeight_magn);
				}
			}
		}
   }

})



var viewBox_X_magn;
var viewBox_Y_magn;
var viewBoxHeight_magn;
var viewBoxWidth_magn;


function cvjs_move_birdseye(x,y){

	var text = x+" "+y+" flag "+cvjs_magnifyCanvasDrawn+" move top "+delta_dist+"                                                 ";

	text = x+" "+y+" flag "+cvjs_magnifyCanvasDrawn+" ";
	//jQuery("#myText").html(text);

	var delta = (actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])/20;

		// 2016-04-11
	x = x+document.body.scrollLeft;
	y = y+document.body.scrollTop;

	firstX_r = x;
	firstY_r = y;

	tPath_r = "M" + ((firstX_r-delta_x)/global_scale-delta*1.44) + "," + ((firstY_r-delta_y)/global_scale-delta);
	tPath_r += "h" + (2*delta*1.44) + "v" + (2*delta)+"h"+(-2*delta*1.44)+"v"+(-2*delta)+" Z";

	tRubberBand_r.attr({'path': tPath_r});

	viewBox_X_magn = (firstX_r-delta_x)/global_scale-delta*0.98;
	viewBox_Y_magn = (firstY_r-delta_y)/global_scale-delta*0.98;
	viewBoxHeight_magn = 2*delta*0.96;
	viewBoxWidth_magn = 2*delta*0.96;

	delta_dist = Math.sqrt(Math.pow(x-lastX_r ,2)+Math.pow(y-lastY_r ,2));

}


var move_cvjs_create_zoommagnify_rectangle = function(e,x,y) {

	cvjs_move_birdseye(x,y);

}


function cvjs_renderMagnifyingGlass(viewBox_X_magn, viewBox_Y_magn, viewBoxWidth_magn, viewBoxHeight_magn){

	// case where cvjs_objectIsZoomedExtents = true;
	var svgString;
	var is_explorer = (navigator.userAgent.indexOf('MSIE') > -1) || (navigator.userAgent.indexOf('Trident') > -1);
	var is_firefox = navigator.userAgent.indexOf('Firefox') > -1;

	svgString = cvjs_rPaper[cvjs_active_floorplan_div_nr].toString();

	var svgStringOrg = svgString;

//console.log(svgString);

	// we are changing the setting to be based on magnify values
	// NOTE!  - we must make the variable naming generic so it does not interfere

	var x_svg = viewBox_X_magn;
	var y_svg = viewBox_Y_magn;

	var width_svg_box = viewBoxWidth_magn;
	var height_svg_box = viewBoxHeight_magn;

	var tempString1 = svgString.substring(0, svgString.indexOf("width:")+6);
	var tempString2 = svgString.substring(svgString.indexOf("height:")+6);
	tempString2 = tempString2.substring(tempString2.indexOf(";"));
//	svgString = tempString1+width_svg_box+"; height:"+height_svg_box+tempString2;

	svgString = tempString1+cvjs_magnifyingGlassWidth+"; height:"+cvjs_magnifyingGlassHeight+tempString2;


	var tempString1 = svgString.substring(0, svgString.indexOf("viewBox=")+9);
	var tempString2 = svgString.substring(svgString.indexOf("viewBox=")+10);
	var tempString2 = tempString2.substring(tempString2.indexOf("\""));

	svgString = tempString1+x_svg+" "+y_svg+" "+width_svg_box+" "+height_svg_box+tempString2;


	var xml = svgString;
	xml = xml.replace(/xmlns=\"http:\/\/www.w3.org\/2000\/svg\"/g, '');
	svgString = xml;


//console.log(svgString);


//	var widthHeightFactorSVG = width_svg/height_svg;    // which side to scale from is based on the actual box object
	var widthHeightFactorSVG = width_svg_box/height_svg_box;    // which side to scale from is based on the actual box object
	var widthHeightFactocrPaper = cvjs_printPixelWidth/cvjs_printPixelHeight;

//	console.log("widthHeightFactorSVG "+widthHeightFactorSVG+" widthHeightFactocvjs_rPaper[cvjs_active_floorplan_div_nr] "+widthHeightFactocvjs_rPaper[cvjs_active_floorplan_div_nr]);

    cvjs_ctx = jQuery("#floorPlanCanvasObject_"+floorplan_div_Array[cvjs_active_floorplan_div_nr])[0].getContext('2d');

	cvjs_ctx.canvas.height = Math.round(cvjs_magnifyingGlassHeight);
	cvjs_ctx.canvas.width = Math.round(cvjs_magnifyingGlassWidth);
	jQuery('#cvjs_floorPlanMagnifyingGlass_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height(cvjs_magnifyingGlassHeight);
	jQuery('#cvjs_floorPlanMagnifyingGlass_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width(cvjs_magnifyingGlassWidth);

	if (printDebugFlag) jQuery('#cvjs_floorPlanMagnifyingGlass_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).show();

	canvg('cvjs_floorPlanMagnifyingGlass_'+floorplan_div_Array[cvjs_active_floorplan_div_nr], svgString, { renderCallback: function() { cvjs_canvg_renderedMagnifyingGlass(false);}} );

	//console.log("svgString before calling "+svgString);
}


function cvjs_canvg_renderedMagnifyingGlass(mode){

	cvjs_magnifyCanvasDrawn = true;
	
	// why do we get this
	// block the return 2018-01-29
	if (true) return;

	if (cvjs_debug) console.log("do we reach this part");

	if (mode==false)
		setTimeout(function(){cvjs_canvg_renderedMagnifyingGlass(true)},256);
	else{
		cvjs_magnifyCanvasDrawn = true;
		return;
	}
}





	function cvjs_firstPage(floorplan_div){

		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
		
		try{

			var numberofpages = multiPages[cvjs_active_floorplan_div_nr].multiPages;
			var currentpagenr = multiPages[cvjs_active_floorplan_div_nr].currentPage;
			var newpage = 0;
			var textString = "";
			if (newpage == currentpagenr-1){
				//console.log("First page");

				if (multiPages[cvjs_active_floorplan_div_nr].multiPages == 1)
					textString = languageTable.languages[cvjs_currentLanguage].InfoMessageModal.SinglePage;
//					jQuery('#cvjs_informationModalText').html(languageTable.languages[cvjs_currentLanguage].InfoMessageModal.SinglePage);
				else
					textString = languageTable.languages[cvjs_currentLanguage].InfoMessageModal.FirstPage;
//					jQuery('#cvjs_informationModalText').html(languageTable.languages[cvjs_currentLanguage].InfoMessageModal.FirstPage);

				cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], textString);

				//jQuery('#info_messageModal').modal('show');

				return;
				// do nothing, as we are on the last page
			}
			var newfile = multiPages[cvjs_active_floorplan_div_nr].pages[newpage].fileName;
			//console.log(numberofpages+"  "+currentpagenr+" newpage="+newpage+"  newfile="+newfile);


			if (cvjs_loadDrawing_conversionMode){

				//console.log("conversion mode "+cvjs_loadDrawing_conversionMode);
				if (cvjs_conversion_getContentResponse()=="file"){   // this is a file so we just load up the page, it is already converted on the server
					//console.log("we have a file! path:"+cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ]+" file: "+newfile);
					cvjs_LoadDrawingInternal(floorplan_div_Array[cvjs_active_floorplan_div_nr ], cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ], newfile);
				}
				if (cvjs_conversion_getContentResponse()=="stream"){   // this is a file so we just load up the page, it is already converted on the server
				// I want -basic -model or -layout to be replaced with the new page
					if (multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName == "ModelSpace"){
						var changeflag= true;
						for (var i=0; i<rest_nname[cvjs_active_floorplan_div_nr ].length; i++){
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="layout" && changeflag)  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "model"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = "";}
						}
						if (changeflag){
							rest_nname[cvjs_active_floorplan_div_nr ][rest_nname[cvjs_active_floorplan_div_nr ].length] = "model";
							rest_vvalue[cvjs_active_floorplan_div_nr ][rest_nname[cvjs_active_floorplan_div_nr ].length] = "";
						}
					}
					else{
						var changeflag= true;
						for (var i=0; i<rest_nname[cvjs_active_floorplan_div_nr ].length; i++){
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="basic")  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "layout"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = escapeUnicode(multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName);}
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="layout"  && changeflag)  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "layout"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = escapeUnicode(multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName);}
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="model"  && changeflag)  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "layout"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = escapeUnicode(multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName);}
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="lastsavedview"  && changeflag)  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "layout"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = escapeUnicode(multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName);}
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="last"  && changeflag)  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "layout"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = escapeUnicode(multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName);}
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="firstlayout"  && changeflag)  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "layout"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = escapeUnicode(multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName);}
						}

						if (changeflag){
							rest_nname[cvjs_active_floorplan_div_nr ][rest_nname[cvjs_active_floorplan_div_nr ].length] = "layout";
							rest_vvalue[cvjs_active_floorplan_div_nr ][rest_nname[cvjs_active_floorplan_div_nr ].length] = multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName;
						}
					}


					// 6.2.35  Handling of PDF files
					if (rest_contentFormat.toLowerCase().indexOf("pdf")==0){						
						handle_pdf_page_change_internal(newpage);
					}	

					cvjs_LoadDrawing_Conversion(floorplan_div_Array[cvjs_active_floorplan_div_nr ], cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ], newfile, cvjs_conversion_originatingUsername[cvjs_active_floorplan_div_nr ], cvjs_conversion_originatingPassword[cvjs_active_floorplan_div_nr ]);
				}
			}
			else{

				// multipage SVG file
				if (cvjs_SVG_multiPagesFlag[cvjs_active_floorplan_div_nr]){
					// set the currentpage
					cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].currentPage = 1;
					// we need to clear out the svg file
					cvjs_rPaper[cvjs_active_floorplan_div_nr] = null;

//					cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr ], cvjs_multipageURL_FileNamePath+"/"+newfile);
					
					
					
					// 2018-03-05
					// we have a wait loop built in to check if the drawing is created on server
					cvjs_checkSVGOnServerBeforeLoad(newfile);					
					
// 					if (!cvjs_multipagePDFtoSVG_PhpLoadFlag)  // standard load
//						cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_multipageURL_FileNamePath + "/"+ newfile );
//					else  // load via getFile
//						cvjs_LoadDrawing( floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_phpPath+"getFile_09.php?fileTag="+cvjs_multipagePDFtoSVG_tempDir+"/"+newfile.substring(0, newfile.indexOf(".svg"))+"&remainOnServer=1&Type=svg"); 



//				
					
					
				}
				else  // standard case


					// 2017-08-08, here we have to distinquish between a .js load and .svg load
					if (currentLoadedDrawingFullName.toLowerCase().indexOf(".svg")>-1){
						var extension = currentLoadedDrawingFullName.substring(currentLoadedDrawingFullName.toLowerCase().lastIndexOf(".svg")+1);

						var path = "";  // 3.1.20e
						if (currentLoadedDrawingFullName.indexOf("fileName=")>-1){
							path = currentLoadedDrawingFullName.substring(0,currentLoadedDrawingFullName.lastIndexOf("fileName=")+9);							
						}
						else{  // standard case
							path = currentLoadedDrawingFullName.substring(0,currentLoadedDrawingFullName.lastIndexOf("/")+1);
						}


						cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr ], path+newfile+"."+extension );
					}
					else // standard .js file
						cvjs_LoadDrawingInternal(floorplan_div_Array[cvjs_active_floorplan_div_nr ], cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ], newfile);

			}

		}
		catch (err){
			var i=0;   // do nothing
			//return (err);
		}

		//console.log("open the first page in the set");
	}


	function cvjs_lastPage(floorplan_div){
	
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
		try{

			var numberofpages = multiPages[cvjs_active_floorplan_div_nr].multiPages;
			var currentpagenr = multiPages[cvjs_active_floorplan_div_nr].currentPage;
			var newpage = numberofpages-1;
			var textString = "";

			if (newpage == currentpagenr-1){
				//console.log("Last page");

				if (multiPages[cvjs_active_floorplan_div_nr].multiPages == 1)
					textString = languageTable.languages[cvjs_currentLanguage].InfoMessageModal.SinglePage;
					//jQuery('#cvjs_informationModalText').html(languageTable.languages[cvjs_currentLanguage].InfoMessageModal.SinglePage);
				else
					textString =languageTable.languages[cvjs_currentLanguage].InfoMessageModal.LastPage;
					//jQuery('#cvjs_informationModalText').html(languageTable.languages[cvjs_currentLanguage].InfoMessageModal.LastPage);


//				var textString = languageTable.languages[cvjs_currentLanguage].InfoMessageModal.UnitLess:
				cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], textString)

//				jQuery('#info_messageModal').modal('show');
				return;
				// do nothing, as we are on the last page
			}
			var newfile = multiPages[cvjs_active_floorplan_div_nr].pages[newpage].fileName;
			//console.log(numberofpages+"  "+currentpagenr+" newpage="+newpage+"  newfile="+newfile);


			if (cvjs_loadDrawing_conversionMode){

				//console.log("conversion mode "+cvjs_loadDrawing_conversionMode);
				if (cvjs_conversion_getContentResponse()=="file"){   // this is a file so we just load up the page, it is already converted on the server
					//console.log("we have a file! path:"+cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ]+" file: "+newfile);
					cvjs_LoadDrawingInternal(floorplan_div_Array[cvjs_active_floorplan_div_nr ], cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ], newfile);
				}
				if (cvjs_conversion_getContentResponse()=="stream"){   // this is a file so we just load up the page, it is already converted on the server
				// I want -basic -model or -layout to be replaced with the new page
					var changeflag= true;

					if (multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName == "ModelSpace"){
						var changeflag= true;
						for (var i=0; i<rest_nname[cvjs_active_floorplan_div_nr ].length; i++){
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="layout" && changeflag)  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "model"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = "";}
						}
						if (changeflag){
							rest_nname[cvjs_active_floorplan_div_nr ][rest_nname[cvjs_active_floorplan_div_nr ].length] = "model";
							rest_vvalue[cvjs_active_floorplan_div_nr ][rest_nname[cvjs_active_floorplan_div_nr ].length] = "";
						}
					}
					else{
						var changeflag= true;
						for (var i=0; i<rest_nname[cvjs_active_floorplan_div_nr ].length; i++){
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="basic")  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "layout"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = escapeUnicode(multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName);}
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="layout"  && changeflag)  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "layout"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = escapeUnicode(multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName);}
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="model"  && changeflag)  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "layout"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = escapeUnicode(multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName);}
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="lastsavedview"  && changeflag)  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "layout"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = escapeUnicode(multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName);}
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="last"  && changeflag)  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "layout"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = escapeUnicode(multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName);}
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="firstlayout"  && changeflag)  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "layout"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = escapeUnicode(multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName);}
						}

						if (changeflag){
							rest_nname[cvjs_active_floorplan_div_nr ][rest_nname[cvjs_active_floorplan_div_nr ].length] = "layout";
							rest_vvalue[cvjs_active_floorplan_div_nr ][rest_nname[cvjs_active_floorplan_div_nr ].length] = multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName;
						}
					}


					// 6.2.35  Handling of PDF files
					if (rest_contentFormat.toLowerCase().indexOf("pdf")==0){						
						handle_pdf_page_change_internal(newpage);
					}	


					cvjs_LoadDrawing_Conversion(floorplan_div_Array[cvjs_active_floorplan_div_nr ], cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ], newfile, cvjs_conversion_originatingUsername[cvjs_active_floorplan_div_nr ], cvjs_conversion_originatingPassword[cvjs_active_floorplan_div_nr ]);
				}
			}
			else{
				// multipage SVG file
				if (cvjs_SVG_multiPagesFlag[cvjs_active_floorplan_div_nr]){
					// set the currentpage
					cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].currentPage = cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].multiPages;
					// we need to clear out the svg file
					cvjs_rPaper[cvjs_active_floorplan_div_nr] = null;


//					cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr ], cvjs_multipageURL_FileNamePath+"/"+newfile);



					// 2018-03-05
					// we have a wait loop built in to check if the drawing is created on server
					cvjs_checkSVGOnServerBeforeLoad(newfile);					
					
//					if (!cvjs_multipagePDFtoSVG_PhpLoadFlag)  // standard load
//						cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_multipageURL_FileNamePath + "/"+ newfile );
//					else  // load via getFile
//						cvjs_LoadDrawing( floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_phpPath+"getFile_09.php?fileTag="+cvjs_multipagePDFtoSVG_tempDir+"/"+newfile.substring(0, newfile.indexOf(".svg"))+"&remainOnServer=1&Type=svg"); 
//				


				}
				else  // standard case

					// 2017-08-08, here we have to distinquish between a .js load and .svg load
					if (currentLoadedDrawingFullName.toLowerCase().indexOf(".svg")>-1){
						var extension = currentLoadedDrawingFullName.substring(currentLoadedDrawingFullName.toLowerCase().lastIndexOf(".svg")+1);

						var path = "";  // 3.1.20e
						if (currentLoadedDrawingFullName.indexOf("fileName=")>-1){
							path = currentLoadedDrawingFullName.substring(0,currentLoadedDrawingFullName.lastIndexOf("fileName=")+9);							
						}
						else{  // standard case
							path = currentLoadedDrawingFullName.substring(0,currentLoadedDrawingFullName.lastIndexOf("/")+1);
						}


						cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr ], path+newfile+"."+extension );
					}
					else // standard .js file
						cvjs_LoadDrawingInternal(floorplan_div_Array[cvjs_active_floorplan_div_nr ], cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ], newfile);
			}

		}
		catch (err){
			var i=0;   // do nothing
			//return (err);
		}

		//console.log("open the last page in the set");
	}


	function cvjs_nextPage(floorplan_div){


	
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
			
//	 if (cvjs_debug) window.alert(floorplan_div+" multiPages[cvjs_active_floorplan_div_nr].multiPages "+multiPages[cvjs_active_floorplan_div_nr].multiPages+" multiPages[cvjs_active_floorplan_div_nr].currentPage "+multiPages[cvjs_active_floorplan_div_nr].currentPage);
		try{
			var numberofpages = multiPages[cvjs_active_floorplan_div_nr].multiPages;
			var currentpagenr = multiPages[cvjs_active_floorplan_div_nr].currentPage;

			var newpage = currentpagenr+1;
			// make it the proper array number
			newpage = newpage-1;
			var textString = "";

			if (newpage > numberofpages-1){
//				console.log("Last page");

				if (multiPages[cvjs_active_floorplan_div_nr].multiPages == 1)
					textString = languageTable.languages[cvjs_currentLanguage].InfoMessageModal.SinglePage;
					//jQuery('#cvjs_informationModalText').html(languageTable.languages[cvjs_currentLanguage].InfoMessageModal.SinglePage);
				else
					textString = languageTable.languages[cvjs_currentLanguage].InfoMessageModal.LastPage;
					//jQuery('#cvjs_informationModalText').html(languageTable.languages[cvjs_currentLanguage].InfoMessageModal.LastPage);

//				jQuery('#info_messageModal').modal('show');

//				var textString = languageTable.languages[cvjs_currentLanguage].InfoMessageModal.UnitLess;
				cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], textString)


				return;
				// do nothing, as we are on the last page
			}
						
			var newfile = multiPages[cvjs_active_floorplan_div_nr].pages[newpage].fileName;

	if (cvjs_debug) 			console.log(numberofpages+"  "+currentpagenr+" newpage="+newpage+"  newfile="+newfile+" cvjs_loadDrawing_conversionMode "+cvjs_loadDrawing_conversionMode+" cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ]="+cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ]+" currentLoadedDrawingFullName="+currentLoadedDrawingFullName);


			if (cvjs_loadDrawing_conversionMode){

				//console.log("conversion mode "+cvjs_loadDrawing_conversionMode+"  newfile="+newfile);
				if (cvjs_conversion_getContentResponse()=="file"){   // this is a file so we just load up the page, it is already converted on the server
					//console.log("we have a file! path:"+cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ]+" file: "+newfile);
					cvjs_LoadDrawingInternal(floorplan_div_Array[cvjs_active_floorplan_div_nr ], cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ], newfile);
				}
				if (cvjs_conversion_getContentResponse()=="stream"){   //
						// we need to set up the conversion parameters so the proper page is picked up

				// I want -basic -model or -layout to be replaced with the new page
					if (multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName == "ModelSpace"){
						var changeflag= true;
						for (var i=0; i<rest_nname[cvjs_active_floorplan_div_nr ].length; i++){
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="layout" && changeflag)  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "model"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = "";}
						}
						if (changeflag){
							rest_nname[cvjs_active_floorplan_div_nr ][rest_nname[cvjs_active_floorplan_div_nr ].length] = "model";
							rest_vvalue[cvjs_active_floorplan_div_nr ][rest_nname[cvjs_active_floorplan_div_nr ].length] = "";
						}
					}
					else{
						var changeflag= true;
						for (var i=0; i<rest_nname[cvjs_active_floorplan_div_nr ].length; i++){
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="basic")  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "layout"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = escapeUnicode(multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName);}
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="layout"  && changeflag)  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "layout"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = escapeUnicode(multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName);}
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="model"  && changeflag)  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "layout"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = escapeUnicode(multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName);}
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="lastsavedview"  && changeflag)  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "layout"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = escapeUnicode(multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName);}
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="last"  && changeflag)  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "layout"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = escapeUnicode(multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName);}
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="firstlayout"  && changeflag)  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "layout"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = escapeUnicode(multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName);}

						}

						if (changeflag){
							rest_nname[cvjs_active_floorplan_div_nr ][rest_nname[cvjs_active_floorplan_div_nr ].length] = "layout";
							rest_vvalue[cvjs_active_floorplan_div_nr ][rest_nname[cvjs_active_floorplan_div_nr ].length] = multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName;
						}
					}

					// 6.2.35  Handling of PDF files
					if (rest_contentFormat.toLowerCase().indexOf("pdf")==0){						
						handle_pdf_page_change_internal(newpage);
					}	

					cvjs_LoadDrawing_Conversion(floorplan_div_Array[cvjs_active_floorplan_div_nr ], cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ], newfile, cvjs_conversion_originatingUsername[cvjs_active_floorplan_div_nr ], cvjs_conversion_originatingPassword[cvjs_active_floorplan_div_nr ]);

				}
			}
			else{
	
		
				// multipage SVG file
				if (cvjs_SVG_multiPagesFlag[cvjs_active_floorplan_div_nr]){
					// set the currentpage
					cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].currentPage = cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].currentPage+1;
					// we need to clear out the svg file
					cvjs_rPaper[cvjs_active_floorplan_div_nr] = null;

//					cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr ], cvjs_multipageURL_FileNamePath+"/"+newfile);



					// 2018-03-05
					// we have a wait loop built in to check if the drawing is created on server
					cvjs_checkSVGOnServerBeforeLoad(newfile);					

					
//					if (!cvjs_multipagePDFtoSVG_PhpLoadFlag)  // standard load
//						cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_multipageURL_FileNamePath + "/"+ newfile );
//					else  // load via getFile
//						cvjs_LoadDrawing( floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_phpPath+"getFile_09.php?fileTag="+cvjs_multipagePDFtoSVG_tempDir+"/"+newfile.substring(0, newfile.indexOf(".svg"))+"&remainOnServer=1&Type=svg"); 

						//				
					
					
//				
					
					
				}
				else  // standard case

					// 2017-08-08, here we have to distinquish between a .js load and .svg load
					if (currentLoadedDrawingFullName.toLowerCase().indexOf(".svg")>-1){
						var extension = currentLoadedDrawingFullName.substring(currentLoadedDrawingFullName.toLowerCase().lastIndexOf(".svg")+1);
	
						var path = "";  // 3.1.20e
						if (currentLoadedDrawingFullName.indexOf("fileName=")>-1){
							path = currentLoadedDrawingFullName.substring(0,currentLoadedDrawingFullName.lastIndexOf("fileName=")+9);							
						}
						else{  // standard case
							path = currentLoadedDrawingFullName.substring(0,currentLoadedDrawingFullName.lastIndexOf("/")+1);
						}
												
						cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr ], path+newfile+"."+extension );
					}
					else // standard .js file
						cvjs_LoadDrawingInternal(floorplan_div_Array[cvjs_active_floorplan_div_nr ], cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ], newfile);
			}

		}
		catch (err){
			var i=0;   // do nothing
			//return (err);
		}

	}




// 6.2.36
function handle_pdf_page_change_internal(newpage){


	var l_len = rest_nname[cvjs_active_floorplan_div_nr].length;
	var m_pages = multiPages[cvjs_active_floorplan_div_nr].multiPages;
	var layout_index = -1;
	var pg_index = -1;

	for (var i=0; i<l_len; i++){
		if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="pg"){
			rest_vvalue[cvjs_active_floorplan_div_nr ][i] = (newpage+1).toString();
			pg_index = i;
		}
	}
	if (pg_index>-1) {  // remove pg							
				rest_vvalue[cvjs_active_floorplan_div_nr ].splice(pg_index, 1);
				rest_nname[cvjs_active_floorplan_div_nr ].splice(pg_index, 1);											
	}

	for (var i=0; i<l_len; i++){
		if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="layout") {
			layout_index = i;						
			rest_vvalue[cvjs_active_floorplan_div_nr ][i] = escapeUnicode(multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName);
		}
	}
	if (layout_index ==-1) {  // add a layout							
		var loc = rest_nname[cvjs_active_floorplan_div_nr ].length;
		rest_nname[cvjs_active_floorplan_div_nr ][loc] = "layout";
		rest_vvalue[cvjs_active_floorplan_div_nr ][loc] = escapeUnicode(multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName);
	}

	
	
}









/**
 * Change page on the current drawing based on page number
 * @param {string} floorplan_div - name of Element on which CADViewer is located
 * @param {int} newpagenumber - a number between 1 and the total pages in the drawing
 * @return {boolean} status - false if newpagenumber outside of range, true if page change

 */
	

	function cvjs_changePageByNumber(floorplan_div, newpagenumber){

	
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
		
	
//	 if (cvjs_debug) window.alert(floorplan_div+" multiPages[cvjs_active_floorplan_div_nr].multiPages "+multiPages[cvjs_active_floorplan_div_nr].multiPages+" multiPages[cvjs_active_floorplan_div_nr].currentPage "+multiPages[cvjs_active_floorplan_div_nr].currentPage);
			

		try{
			var numberofpages = multiPages[cvjs_active_floorplan_div_nr].multiPages;
			var currentpagenr = multiPages[cvjs_active_floorplan_div_nr].currentPage;
			var newpage = newpagenumber-1;

			// In case of a multipage PDF the page number is stored in a different array
			if (cvjs_SVG_multiPagesFlag[cvjs_active_floorplan_div_nr]){
				numberofpages = cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].multiPages
				newpage = newpagenumber-1;

								
				// make it the proper array number			
				if ( (newpage>=0)  && (newpage < numberofpages)) {
					// OK, do nothing
				}
				else{
					// we are outside the allowed numbers return
					
					textString = languageTable.languages[cvjs_currentLanguage].InfoMessageModal.OutOfRange;
					cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], textString)
				
					return false;
				}


			}else{

				// make it the proper array number			
				if ( (newpage>=0)  && (newpage<numberofpages)) {
					// OK, do nothing
				}
				else{
					// we are outside the allowed numbers return
					textString = languageTable.languages[cvjs_currentLanguage].InfoMessageModal.OutOfRange;
					cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], textString)
					return false;
				}

			
				
			}
			

			
			var textString = "";

			if (newpage > numberofpages-1){
//				console.log("Last page");

				if (multiPages[cvjs_active_floorplan_div_nr].multiPages == 1)
					textString = languageTable.languages[cvjs_currentLanguage].InfoMessageModal.SinglePage;
					//jQuery('#cvjs_informationModalText').html(languageTable.languages[cvjs_currentLanguage].InfoMessageModal.SinglePage);
				else
					textString = languageTable.languages[cvjs_currentLanguage].InfoMessageModal.LastPage;
					//jQuery('#cvjs_informationModalText').html(languageTable.languages[cvjs_currentLanguage].InfoMessageModal.LastPage);

//				jQuery('#info_messageModal').modal('show');

//				var textString = languageTable.languages[cvjs_currentLanguage].InfoMessageModal.UnitLess;
				cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], textString)


				return;
				// do nothing, as we are on the last page
			}
			var newfile = multiPages[cvjs_active_floorplan_div_nr].pages[newpage].fileName;

	if (cvjs_debug) 			console.log(numberofpages+"  "+currentpagenr+" newpage="+newpage+"  newfile="+newfile+" cvjs_loadDrawing_conversionMode "+cvjs_loadDrawing_conversionMode+" cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ]="+cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ]+" currentLoadedDrawingFullName="+currentLoadedDrawingFullName);


			if (cvjs_loadDrawing_conversionMode){

				//console.log("conversion mode "+cvjs_loadDrawing_conversionMode+"  newfile="+newfile);
				if (cvjs_conversion_getContentResponse()=="file"){   // this is a file so we just load up the page, it is already converted on the server
					//console.log("we have a file! path:"+cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ]+" file: "+newfile);
					cvjs_LoadDrawingInternal(floorplan_div_Array[cvjs_active_floorplan_div_nr ], cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ], newfile);
				}
				if (cvjs_conversion_getContentResponse()=="stream"){   //
						// we need to set up the conversion parameters so the proper page is picked up

				// I want -basic -model or -layout to be replaced with the new page
					if (multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName == "ModelSpace"){
						var changeflag= true;
						for (var i=0; i<rest_nname[cvjs_active_floorplan_div_nr ].length; i++){
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="layout" && changeflag)  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "model"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = "";}
						}
						if (changeflag){
							rest_nname[cvjs_active_floorplan_div_nr ][rest_nname[cvjs_active_floorplan_div_nr ].length] = "model";
							rest_vvalue[cvjs_active_floorplan_div_nr ][rest_nname[cvjs_active_floorplan_div_nr ].length] = "";
						}
					}
					else{
						var changeflag= true;
						for (var i=0; i<rest_nname[cvjs_active_floorplan_div_nr ].length; i++){
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="basic")  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "layout"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = escapeUnicode(multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName);}
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="layout"  && changeflag)  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "layout"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = escapeUnicode(multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName);}
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="model"  && changeflag)  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "layout"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = escapeUnicode(multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName);}
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="lastsavedview"  && changeflag)  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "layout"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = escapeUnicode(multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName);}
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="last"  && changeflag)  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "layout"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = escapeUnicode(multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName);}
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="firstlayout"  && changeflag)  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "layout"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = escapeUnicode(multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName);}

						}

						if (changeflag){
							rest_nname[cvjs_active_floorplan_div_nr ][rest_nname[cvjs_active_floorplan_div_nr ].length] = "layout";
							rest_vvalue[cvjs_active_floorplan_div_nr ][rest_nname[cvjs_active_floorplan_div_nr ].length] = multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName;
						}
					}


					// 6.2.36  Handling of PDF files
					if (rest_contentFormat.toLowerCase().indexOf("pdf")==0){						
						handle_pdf_page_change_internal(newpage);
					}	


					cvjs_LoadDrawing_Conversion(floorplan_div_Array[cvjs_active_floorplan_div_nr ], cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ], newfile, cvjs_conversion_originatingUsername[cvjs_active_floorplan_div_nr ], cvjs_conversion_originatingPassword[cvjs_active_floorplan_div_nr ]);

				}
			}
			else{

				// multipage SVG file
				if (cvjs_SVG_multiPagesFlag[cvjs_active_floorplan_div_nr]){
					// set the currentpage
					cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].currentPage = newpage+1;  // +1, see below
//					cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].currentPage = cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].currentPage+1;
					// we need to clear out the svg file
					cvjs_rPaper[cvjs_active_floorplan_div_nr] = null;

//					cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr ], cvjs_multipageURL_FileNamePath+"/"+newfile);



					// 2018-03-05
					// we have a wait loop built in to check if the drawing is created on server
					cvjs_checkSVGOnServerBeforeLoad(newfile);					

					
//					if (!cvjs_multipagePDFtoSVG_PhpLoadFlag)  // standard load
//						cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_multipageURL_FileNamePath + "/"+ newfile );
//					else  // load via getFile
//						cvjs_LoadDrawing( floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_phpPath+"getFile_09.php?fileTag="+cvjs_multipagePDFtoSVG_tempDir+"/"+newfile.substring(0, newfile.indexOf(".svg"))+"&remainOnServer=1&Type=svg"); 

						//				
					
					
//				
					
					
				}
				else  // standard case

					// 2017-08-08, here we have to distinquish between a .js load and .svg load
					if (currentLoadedDrawingFullName.toLowerCase().indexOf(".svg")>-1){
						var extension = currentLoadedDrawingFullName.substring(currentLoadedDrawingFullName.toLowerCase().lastIndexOf(".svg")+1);

						var path = "";  // 3.1.20e
						if (currentLoadedDrawingFullName.indexOf("fileName=")>-1){
							path = currentLoadedDrawingFullName.substring(0,currentLoadedDrawingFullName.lastIndexOf("fileName=")+9);							
						}
						else{  // standard case
							path = currentLoadedDrawingFullName.substring(0,currentLoadedDrawingFullName.lastIndexOf("/")+1);
						}
						
						cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr ], path+newfile+"."+extension );
					}
					else // standard .js file
						cvjs_LoadDrawingInternal(floorplan_div_Array[cvjs_active_floorplan_div_nr ], cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ], newfile);
			}

		}
		catch (err){
			var i=0;   // do nothing
			return false;

			//return (err);
		}
		
		return true;

	}

	
	
	
	

function escapeUnicode(str) {

    return str.replace(/[^\0-~]/g, function(ch) {
        return "\\u" + ("0000" + ch.charCodeAt().toString(16)).slice(-4);
    });
}





	function cvjs_previousPage(floorplan_div){
	
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
		
		try{

			var numberofpages = multiPages[cvjs_active_floorplan_div_nr].multiPages;
			var currentpagenr = multiPages[cvjs_active_floorplan_div_nr].currentPage;
			var newpage = currentpagenr-1;
			// make it the proper array number
			newpage = newpage-1;
			var textString = "";

			if (newpage < 0){
//				console.log("First page");

				if (multiPages[cvjs_active_floorplan_div_nr].multiPages == 1)
					textString = languageTable.languages[cvjs_currentLanguage].InfoMessageModal.SinglePage;
				//	jQuery('#cvjs_informationModalText').html(languageTable.languages[cvjs_currentLanguage].InfoMessageModal.SinglePage);
				else
					textString = languageTable.languages[cvjs_currentLanguage].InfoMessageModal.FirstPage;
				//	jQuery('#cvjs_informationModalText').html(languageTable.languages[cvjs_currentLanguage].InfoMessageModal.FirstPage);

//				jQuery('#info_messageModal').modal('show');
//				var textString = languageTable.languages[cvjs_currentLanguage].InfoMessageModal.UnitLess;
				cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], textString)


				return;
				// do nothing, as we are on the last page
			}
			var newfile = multiPages[cvjs_active_floorplan_div_nr].pages[newpage].fileName;
			//console.log(numberofpages+"  "+currentpagenr+" newpage="+newpage+"  newfile="+newfile);


			if (cvjs_loadDrawing_conversionMode){

				//console.log("conversion mode "+cvjs_loadDrawing_conversionMode);
				if (cvjs_conversion_getContentResponse()=="file"){   // this is a file so we just load up the page, it is already converted on the server
					//console.log("we have a file! path:"+cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ]+" file: "+newfile);
					cvjs_LoadDrawingInternal(floorplan_div_Array[cvjs_active_floorplan_div_nr ], cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ], newfile);
				}
				if (cvjs_conversion_getContentResponse()=="stream"){   // this is a file so we just load up the page, it is already converted on the server
						// we need to set up the conversion parameters so the proper page is picked up
				// I want -basic -model or -layout to be replaced with the new page

					if (multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName == "ModelSpace"){
						var changeflag= true;
						for (var i=0; i<rest_nname[cvjs_active_floorplan_div_nr ].length; i++){
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="layout" && changeflag)  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "model"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = "";}
						}
						if (changeflag){
							rest_nname[cvjs_active_floorplan_div_nr ][rest_nname[cvjs_active_floorplan_div_nr ].length] = "model";
							rest_vvalue[cvjs_active_floorplan_div_nr ][rest_nname[cvjs_active_floorplan_div_nr ].length] = "";
						}
					}
					else{
						var changeflag= true;
						for (var i=0; i<rest_nname[cvjs_active_floorplan_div_nr ].length; i++){
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="basic")  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "layout"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = escapeUnicode(multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName);}
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="layout"  && changeflag)  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "layout"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = escapeUnicode(multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName);}
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="model"  && changeflag)  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "layout"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = escapeUnicode(multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName);}
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="lastsavedview"  && changeflag)  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "layout"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = escapeUnicode(multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName);}
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="last"  && changeflag)  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "layout"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = escapeUnicode(multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName);}
							if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="firstlayout"  && changeflag)  {changeflag = false; rest_nname[cvjs_active_floorplan_div_nr ][i] = "layout"; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = escapeUnicode(multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName);}
						}

						if (changeflag){
							rest_nname[cvjs_active_floorplan_div_nr ][rest_nname[cvjs_active_floorplan_div_nr ].length] = "layout";
							rest_vvalue[cvjs_active_floorplan_div_nr ][rest_nname[cvjs_active_floorplan_div_nr ].length] = multiPages[cvjs_active_floorplan_div_nr].pages[newpage].pageName;
						}
					}

					// 6.2.36  Handling of PDF files
					if (rest_contentFormat.toLowerCase().indexOf("pdf")==0){						
						handle_pdf_page_change_internal(newpage);
					}	


					cvjs_LoadDrawing_Conversion(floorplan_div_Array[cvjs_active_floorplan_div_nr ], cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ], newfile, cvjs_conversion_originatingUsername[cvjs_active_floorplan_div_nr ], cvjs_conversion_originatingPassword[cvjs_active_floorplan_div_nr ]);
				}
			}
			else{

				// multipage SVG file
				if (cvjs_SVG_multiPagesFlag[cvjs_active_floorplan_div_nr]){
					// set the currentpage
					cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].currentPage = cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].currentPage-1;
					// we need to clear out the svg file
					cvjs_rPaper[cvjs_active_floorplan_div_nr] = null;
//					cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr ], cvjs_multipageURL_FileNamePath+"/"+newfile);




					// 2018-03-05
					// we have a wait loop built in to check if the drawing is created on server
					cvjs_checkSVGOnServerBeforeLoad(newfile);					

					
//					if (!cvjs_multipagePDFtoSVG_PhpLoadFlag)  // standard load
//						cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_multipageURL_FileNamePath + "/"+ newfile );
//					else  // load via getFile
//						cvjs_LoadDrawing( floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_phpPath+"getFile_09.php?fileTag="+cvjs_multipagePDFtoSVG_tempDir+"/"+newfile.substring(0, newfile.indexOf(".svg"))+"&remainOnServer=1&Type=svg"); 
//				



				}
				else  // standard case

					// 2017-08-08, here we have to distinquish between a .js load and .svg load
					if (currentLoadedDrawingFullName.toLowerCase().indexOf(".svg")>-1){
						var extension = currentLoadedDrawingFullName.substring(currentLoadedDrawingFullName.toLowerCase().lastIndexOf(".svg")+1);

						var path = "";  // 3.1.20e
						if (currentLoadedDrawingFullName.indexOf("fileName=")>-1){
							path = currentLoadedDrawingFullName.substring(0,currentLoadedDrawingFullName.lastIndexOf("fileName=")+9);							
						}
						else{  // standard case
							path = currentLoadedDrawingFullName.substring(0,currentLoadedDrawingFullName.lastIndexOf("/")+1);
						}

						cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr ], path+newfile+"."+extension );
					}
					else // standard .js file
						cvjs_LoadDrawingInternal(floorplan_div_Array[cvjs_active_floorplan_div_nr ], cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ], newfile);

			}

		}
		catch (err){
			var i=0;   // do nothing
			//return (err);
		}

		//console.log("load the previous page in the set");
	}



/**
 * Sets the the response of
 * @param {boolean} supressflag - true to supress hyperlink colors, false to keep standard highlight
 */

	function cvjs_setSupressHyperlinkColors(supressflag){

		cvjs_supressHyperlinkColors = supressflag


	}


/**
 * Sets the click response of URl links to either single click or double click
 * @param {int} click - 1: single click 2: double click
 */

	function cvjs_setUrl_singleDoubleClick(click){

		cvjs_Url_click_control = 1;

		if (click == 1)	cvjs_Url_click_control = 1;
		if (click == 2) cvjs_Url_click_control = 2;

	}


var cvjs_Url_encapsulate_callback = false;

/**
 * Encapsulate Url in JavaScript callback method cvjs_Url_callback(). Developer gets control over all hyperlinks in drawing
 * @param {boolean} true: enable callback method false: disable callback method (link directly from drawing)
 */
	function cvjs_encapsulateUrl_callback(flag){

		cvjs_Url_encapsulate_callback = flag;


	}

/**
* Turn all Object Space layers off - Object Spaces, Sticky Notes and Redlines are differentiated.
 */
function cvjs_AllLayersOff(){

	for (var room in vqRooms[cvjs_active_floorplan_div_nr]){
		if (vqRooms[cvjs_active_floorplan_div_nr][room].data("layer") == "Undefined"){
		// do nothing
		}
		else{
		vqRooms[cvjs_active_floorplan_div_nr][room].attr(hide);
		}
	}
}

/**
* Turn single general layer on, either defined individually or as a Object Space layer or Text on a Space object  -  Sticky Notes and Redlines are differentiated.
 * @param {string} layer - name of layer to turn on
 */

function cvjs_LayerOn(layer){

	var flag = false;


	// layer list layer off
	try{
		if (!flag){
			for (id=0; id<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; id++){


				// 3.0.13d we add layerName and layer check
				if (layerTable[cvjs_active_floorplan_div_nr].layers[id].layerName == layer || layerTable[cvjs_active_floorplan_div_nr].layers[id].layer == layer){
				
//					console.log(id+" layer on "+layer+"   "+layerTable[cvjs_active_floorplan_div_nr].layers[id].layer);

					var mylayer = "#"+layerTable[cvjs_active_floorplan_div_nr].layers[id].layer;
					jQuery(mylayer).attr(show);					
					layerTable[cvjs_active_floorplan_div_nr].layers[id].status = "ON";
					flag = true;
					
					//console.log("before return");
					if (flag) return;

				}
			}	
		}
	}
	catch(err){console.log(err + " layer list layer on");};


	if (flag) return;
	
	
	try{

		for (var room in vqRooms[cvjs_active_floorplan_div_nr]){
			if (vqRooms[cvjs_active_floorplan_div_nr][room].data("layer") == layer){
				vqRooms[cvjs_active_floorplan_div_nr][room].attr(show);
				flag = true;
			}
		}

		for (var room in vqText){
			if (vqText[room].data("layer") == layer){
				vqText[room].attr(show);
				flag = true;
			}
		}

		if (!flag)
			layer.attr(show);

	}catch(err){ /*console.log(err);*/}

	if (!flag){
		var mylayer = "#"+layer;
		jQuery(mylayer).attr(show);
		
		
		// Handling of child blocks  ...... not needed 2017-11-29
		/*
		jQuery(mylayer).children("[id^=Block_]").each(function () {
			var id = jQuery(this).attr('id');	
			jQuery("#"+id).attr(show);
			if (cvjs_debug) console.log(id);
		});
		*/
		
		
		
		
	}

}

/**
* Turn single Object Space layer on, turn all other layers off - Object Spaces, Sticky Notes and Redlines are differentiated.
 * @param{string} layer - name of layer to turn on
 */

function cvjs_LayerOn_OthersOff(layer){

	for (var room in vqRooms[cvjs_active_floorplan_div_nr]){
		if (vqRooms[cvjs_active_floorplan_div_nr][room].data("layer") == layer){
			vqRooms[cvjs_active_floorplan_div_nr][room].attr(show);
		}
		else{
			vqRooms[cvjs_active_floorplan_div_nr][room].attr(hide);
		}
	}
}

/**
* Turn single Object Space layer on, turn all other layers off - Object Spaces, Sticky Notes and Redlines are differentiated.
 * @param {string} layer - name of layer to turn on
 */
function cvjs_LayerOn_AllOff(layer){

	for (var room in vqRooms[cvjs_active_floorplan_div_nr]){
		if (vqRooms[cvjs_active_floorplan_div_nr][room].data("layer") == layer){
			vqRooms[cvjs_active_floorplan_div_nr][room].attr(show);
		}
		else{
			vqRooms[cvjs_active_floorplan_div_nr][room].attr(hide);
		}
	}
}

/**
* Turn single general layer on, either defined individually or as a Object Space layer or Text on a Space object  -  Sticky Notes and Redlines are differentiated.
 * @param {string} layer - name of layer to turn off
 */

function cvjs_LayerOff(layer){

	//console.log("  "+layer);
	var flag = false;

	
//console.log("layer OFF 1"+layer);	

	// layer list layer off
	try{
		if (!flag){
			for (id=0; id<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; id++){


				// 3.0.13d we add layerName and layer check
				if (layerTable[cvjs_active_floorplan_div_nr].layers[id].layerName == layer || layerTable[cvjs_active_floorplan_div_nr].layers[id].layer == layer){
				
//					console.log(id+" layer off "+layer+"   "+layerTable[cvjs_active_floorplan_div_nr].layers[id].layer);
	
					var mylayer = "#"+layerTable[cvjs_active_floorplan_div_nr].layers[id].layer;
					jQuery(mylayer).attr(hide);					
					layerTable[cvjs_active_floorplan_div_nr].layers[id].status = "OFF";
					flag = true;
					
//					console.log("before return");
					if (flag) return;

				}
			}	
		}
	}
	catch(err){console.log(err + " layer list layer on");};


	if (flag) return;
	
//	console.log("layer OFF 2");	


	try{

		for (var room in vqRooms[cvjs_active_floorplan_div_nr]){
			if (vqRooms[cvjs_active_floorplan_div_nr][room].data("layer") == layer){
				vqRooms[cvjs_active_floorplan_div_nr][room].attr(hide);
				flag = true;
			}
		}

		for (var room in vqText){
			if (vqText[room].data("layer") == layer){
				vqText[room].attr(hide);
				flag = true;
			}
		}

		if (!flag){
			layer.attr(hide);
				flag = true;

		}
	}catch(err){ /*console.log(err);*/}

	

//console.log("layer OFF 3");	
	
	
	if (!flag){
		
		try{
		var mylayer = "#"+layer;
		jQuery(mylayer).attr(hide);
		
		
		// Handling of child blocks  ...... not needed 2017-11-29
		/*		
		
		jQuery(mylayer).children("[id^=Block_]").each(function () {
			var id = jQuery(this).attr('id');	
			jQuery("#"+id).attr(hide);
			if (cvjs_debug) console.log(id);
		});
		*/
		flag = true;
		}catch(err){  //console.log(err);
					}
		 
	}
	
	
	
	
	
	
}


/**
 * Enable or disable pan operations with a smaller thumbnail drawing object, thereby increasing redraw speed.
 * For large drawings and on limited capacity devices, set this option to true.
 * @param {boolean} panState - true for pan with thumbnails, false for pan with original image
 */

	function cvjs_setPanState(panState){

		panWithThumb = panState;

	}



/**
 * Resize CADViewer canvas after browser window changes, automatic adjustment based on canvas size and location
 * @param {boolean} doResize - flag to do resize of canvas or not: Parameter doResize is set to false when calling cvjs_windowResize_ after initialization and loading of file. Parameter doResize is set to true when cvjs_windowResize is implemented into the function  jQuery(window).resize(function() {}
 * @param {string} floorplan - name of SVG element containing canvas
 */

function cvjs_windowResize_position(doResize, floorplan){

	// 3.0.13f
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan);

	cvjs_windowResize_position_WidthHeight(doResize, 0, 0, floorplan);

	
	// 3.3.01d
	// 3.3.04a
	if (!cvjs_topDownloadButtonPane)
		jQuery("#topIconMenu"+"_"+floorplan+"_svg").css({left: jQuery("#"+floorplan).position().left+1, top: jQuery("#"+floorplan).position().top+1});  // 3.3.01d
	else 
		jQuery("#topIconMenu"+"_"+floorplan+"_svg").css({left: jQuery("#"+floorplan).position().left+1, top: jQuery("#"+floorplan).position().top+1+cvjs_topDownloadButtonPane_adjustment});  // 3.3.01d
			
//	jQuery("#topIconMenu"+"_"+floorplan+"_svg").css({left: jQuery("#"+floorplan).position().left+1, top: jQuery("#"+floorplan).position().top+1});  // 3.3.01d

	if (true) return;

		
		
}

/**
 * Resize CADViewer canvas after browser window changes, automatic adjustment based on canvas size and location
 * @param {string} floorplan - name of SVG element containing canvas
 */

function cvjs_resizeWindow_position(floorplan){

	var doResize = true;	
	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan);
	cvjs_windowResize_position_WidthHeight(doResize, 0, 0, floorplan);


		
	// 3.3.01d
	// 3.3.04a
	if (!cvjs_topDownloadButtonPane){
		jQuery("#topIconMenu"+"_"+floorplan+"_svg").css({left: jQuery("#"+floorplan).position().left+1, top: jQuery("#"+floorplan).position().top+1});  // 3.3.01d

		// 3.3.05e
		jQuery("#topIconMenu_placeholder_1_"+floorplan+"_svg").css({left: jQuery("#"+floorplan).position().left+1 +cvjs_iconmenu_pos_x, top: jQuery("#"+floorplan).position().top+1+cvjs_iconmenu_pos_y}); 
	}
	else{ 
		jQuery("#topIconMenu"+"_"+floorplan+"_svg").css({left: jQuery("#"+floorplan).position().left+1, top: jQuery("#"+floorplan).position().top+1+cvjs_topDownloadButtonPane_adjustment});  // 3.3.01d

		// 3.3.05e
		jQuery("#topIconMenu_placeholder_1_"+floorplan+"_svg").css({left: jQuery("#"+floorplan).position().left+1+cvjs_iconmenu_pos_x, top: jQuery("#"+floorplan).position().top+1+cvjs_topDownloadButtonPane_adjustment+cvjs_iconmenu_pos_y});
	}

		
	// 3.3.06c
//	var pos = jQuery("#"+floorplan).position();
//	jQuery('#gMenu_'+floorplan+"_svg").offset({ top: pos.top+cvjs_gMenu_pos_y, left: pos.left+cvjs_gMenu_pos_x });

	// 4.1.02l
	var pos_svg = jQuery("#"+floorplan+"_svg").position();
	jQuery('#gMenu_'+floorplan+"_svg").offset({ top: pos_svg.top+cvjs_gMenu_pos_y, left: pos_svg.left+cvjs_gMenu_pos_x });
	
//	window.alert("floorplan"+floorplan+" pos "+pos.top+"  "+pos.left+" svg "+pos_svg.top+"  "+pos_svg.left);		
	// 3.3.01d
//	jQuery("#topIconMenu"+"_"+floorplan+"_svg").css({left: jQuery("#"+floorplan).position().left+1, top: jQuery("#"+floorplan).position().top+1});  // 3.3.01d


	var pos = jQuery("#"+floorplan).position();

	// 4.1.01b
	var posmenu_x = pos.top+jQuery("#"+floorplan+"_svg").height()-75
	var posmenu_y = pos.left+jQuery("#"+floorplan+"_svg").width()-325;
	jQuery("#floatCompareDrawingMenu"+"_"+floorplan+"_svg").offset({ top: posmenu_x, left: posmenu_y});  
	
			
}



/**
 * Resize CADViewer canvas after browser window changes, automatic adjustment based on canvas size and location
 * @param {float}   widthFloorplan - width of containing element in pixels
 * @param {float}   heightFloorplan - height of containing element in pixels
 * @param {string} floorplan - name of SVG element containing canvas
 */

function cvjs_resizeWindow_fixedSize(widthFloorplan, heightFloorplan, floorplan){

	var doResize = true;	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan);

	cvjs_windowResize_position_WidthHeight(doResize, widthFloorplan, heightFloorplan, floorplan);
	
	// 3.3.01d
	jQuery("#topIconMenu"+"_"+floorplan+"_svg").css({left: jQuery("#"+floorplan).position().left+1, top: jQuery("#"+floorplan).position().top+1});  // 3.3.01d

	if (cvjs_debug) console.log("here insertion "+cvjs_iconmenu_pos_x);	
	// 3.3.05e
	jQuery("#topIconMenu_placeholder_1_"+floorplan+"_svg").css({left: jQuery("#"+floorplan).position().left+1+cvjs_iconmenu_pos_x, top: jQuery("#"+floorplan).position().top+1+cvjs_iconmenu_pos_y});


	// 3.3.06c
//	var pos = jQuery("#"+floorplan).position();
//	jQuery('#gMenu_'+floorplan+"_svg").offset({ top: pos.top+cvjs_gMenu_pos_y, left: pos.left+cvjs_gMenu_pos_x });

	// 4.1.02l
	var pos_svg = jQuery("#"+floorplan+"_svg").position();
	jQuery('#gMenu_'+floorplan+"_svg").offset({ top: pos_svg.top+cvjs_gMenu_pos_y, left: pos_svg.left+cvjs_gMenu_pos_x });

	
	var pos = jQuery("#"+floorplan).position();


	// 4.1.01b
	var posmenu_x = pos.top+jQuery("#"+floorplan+"_svg").height()-75
	var posmenu_y = pos.left+jQuery("#"+floorplan+"_svg").width()-325;
	jQuery("#floatCompareDrawingMenu"+"_"+floorplan+"_svg").offset({ top: posmenu_x, left: posmenu_y});  

	
}



/**
 * Resize CADViewer canvas after browser window changes, automatic adjustment based on canvas size and location
 * @param {float}   widthFloorplan - width of containing element in pixels
 * @param {float}   heightFloorplan - height of containing element in pixels
 * @param {string} floorplan - name of SVG element containing canvas
 * @param {int}   xPos - x position of element 
 * @param {int}   yPos - y position of element
 */

function cvjs_resizeWindow_fixedSize_location(widthFloorplan, heightFloorplan, floorplan, xPos, yPos){

	var doResize = true;	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan);

	jQuery("#"+floorplan).css('position','relative');
	jQuery("#"+floorplan).position(xPos, yPos);
	jQuery("#"+floorplan+"_svg").position(xPos, yPos);
	
	
	
	
	cvjs_windowResize_position_WidthHeight(doResize, widthFloorplan, heightFloorplan, floorplan);
	
	// 3.3.01d
	jQuery("#topIconMenu"+"_"+floorplan+"_svg").css({left: jQuery("#"+floorplan).position().left+1, top: jQuery("#"+floorplan).position().top+1});  // 3.3.01d

	if (cvjs_debug) console.log("here insertion "+cvjs_iconmenu_pos_x);	
	// 3.3.05e
	jQuery("#topIconMenu_placeholder_1_"+floorplan+"_svg").css({left: jQuery("#"+floorplan).position().left+1+cvjs_iconmenu_pos_x, top: jQuery("#"+floorplan).position().top+1+cvjs_iconmenu_pos_y});


	// 3.3.06c
//	var pos = jQuery("#"+floorplan).position();
//	jQuery('#gMenu_'+floorplan+"_svg").offset({ top: pos.top+cvjs_gMenu_pos_y, left: pos.left+cvjs_gMenu_pos_x });

	// 4.1.02l
	var pos_svg = jQuery("#"+floorplan+"_svg").position();
	jQuery('#gMenu_'+floorplan+"_svg").offset({ top: pos_svg.top+cvjs_gMenu_pos_y, left: pos_svg.left+cvjs_gMenu_pos_x });

	
	var pos = jQuery("#"+floorplan).position();


	// 4.1.01b
	var posmenu_x = pos.top+jQuery("#"+floorplan+"_svg").height()-75
	var posmenu_y = pos.left+jQuery("#"+floorplan+"_svg").width()-325;
	jQuery("#floatCompareDrawingMenu"+"_"+floorplan+"_svg").offset({ top: posmenu_x, left: posmenu_y});  

	
}




	// internal method to do resize
 function cvjs_windowResize_position_WidthHeight(doResize, widthFloorplan, heightFloorplan, floorplan){

 	
 if (cvjs_debug) console.log(floorplan+" top resize "); 
   
		floorplan = floorplan+"_svg";   // 2017-12-07 change	
		var floorplan_div = floorplan;
		floorplan ="#"+floorplan;

    // NOTE!!!   we trigger resize when a <div> has been generated, we have therefore to abort if current <div> not initialize
		try{ jQuery(floorplan).position().top }catch(err){ console.log("ERROR!!!");return;}  // we return if empty
	//  3.3.01d

		

		var is_chrome = navigator.userAgent.indexOf('Chrome') > -1;
		var is_firefox = navigator.userAgent.indexOf('Firefox') > -1;
		var is_explorer = (navigator.userAgent.indexOf('MSIE') > -1) || (navigator.userAgent.indexOf('Trident') > -1);

		var is_safari = navigator.userAgent.indexOf("Safari") > -1;
		var is_Opera = navigator.userAgent.indexOf("Presto") > -1;
		if ((is_chrome)&&(is_safari)) {is_safari=false;}


		var position = jQuery(floorplan).position();

		jQuery(floorplan).css('position','absolute');
		jQuery(floorplan).css('display','block');
		jQuery(floorplan).css('overflow','hidden');

//		if (cvjs_debug) console.log("Resize setting position absolute, block, hidden");
		
		
//		console.log(jQuery(floorplan).width()+"   "+jQuery(floorplan).height());

		if (widthFloorplan==0){   // this is the original  cvjs_windowResize_position_
			jQuery(floorplan).width(jQuery(window).width()-position.left);
			jQuery(floorplan).height(jQuery(window).height()-position.top);
		}
		else{			
			jQuery(floorplan).width(widthFloorplan);
			jQuery(floorplan).height(heightFloorplan);
		}

		
		fpWidth = jQuery(floorplan).width();
		fpHeight = jQuery(floorplan).height();

		rpWidth[cvjs_active_floorplan_div_nr] = fpWidth;
		rpHeight[cvjs_active_floorplan_div_nr] = fpHeight;

		floorplan_width = jQuery(floorplan).width()*0.9;
		floorplan_height = jQuery(floorplan).height()*0.9;		
			
//console.log("2 "+floorplan_width+" viewBox "+viewBox);

		
		if (doResize){
            ResizeVq(fpWidth, fpHeight );
		
		}


		// 3.3.01d
		// HERE WE NEED TO REPOSITION TOP NAVIGATION MENU

		
//      3.3.01d     
 				
		var pos = jQuery(floorplan).position();
		var posmenu_x = (pos.top)+5;

		// 3.3.01d
		var posmenu_y = pos.left+jQuery(floorplan).width()-475;
		
		if (posmenu_y <40) posmenu_y = 40;
				
//console.log("resize y "+ posmenu_y+" x "+posmenu_x);				
		
		//jQuery('#floatNavigationMenu_'+floorplan_div).css('position','absolute');  // 3.0.13f
		jQuery('#floatNavigationMenu_'+floorplan_div).offset({ top: posmenu_x, left: posmenu_y });

//		jQuery('#gMenu_'+floorplan_div).offset({ top: pos.top+20, left: pos.left+20 });
// 3.3.02b
		jQuery('#gMenu_'+floorplan_div).offset({ top: pos.top+30, left: pos.left+20 });
		

// 3.3.06c		
		jQuery('#gMenu_'+floorplan_div).offset({ top: pos.top+cvjs_gMenu_pos_x, left: pos.left+cvjs_gMenu_pos_y });
				
		
		var menu1_width = jQuery('#topIconMenu_placeholder_1_'+floorplan_div).width();
		var menu_location = jQuery('#topIconMenu_'+floorplan_div).position();

//		window.alert(menu1_width+"  "+pos.top+"  "+menu_location.top);
		
//		window.alert("menu_location top "+jQuery('#topIconMenu_'+floorplan_div).position().top+" svg top "+pos.top)
		
		if (jQuery(floorplan).width()-menu1_width>392){  // no problem, we have space for menu
			jQuery("#topIconMenu"+"_"+floorplan_div).css({height: '32px'});
			jQuery('#topIconMenu_placeholder_2_'+floorplan_div).offset({ top: jQuery(floorplan).position().top+1, left: posmenu_y+ 78 });  // 475-392   392 on the size of the modal			
		}
		else{  // we need to lower the navigation menu
			jQuery('#topIconMenu_placeholder_2_'+floorplan_div).offset({ top: jQuery(floorplan).position().top+33, left: posmenu_y+ 78 });  // 475-392   392 on the size of the modal			
			jQuery("#topIconMenu"+"_"+floorplan_div).css({height: '64px'});
		}
			
//		console.log(floorplan+"  "+floorplan_div+"  "+doResize+"  "+jQuery(floorplan).width()+"   "+jQuery(floorplan).height()+"  "+pos+"  "+pos.top);
			
	}

	

/**
 * Resize CADViewer canvas after browser window changes, automatic adjustment based on canvas size and location
 * @param {boolean} doResize - flag to do resize of canvas or not: Parameter doResize is set to false when calling cvjs_windowResize_ after initialization and loading of file. Parameter doResize is set to true when cvjs_windowResize is implemented into the function  jQuery(window).resize(function() {}
 * @param {float}   widthFloorplan - width of containing element in pixels
 * @param {float}   heightFloorplan - height of containing element in pixels
 * @param {string} floorplan - name of SVG element containing canvas
 */

function cvjs_windowResize_fixedSize(doResize, widthFloorplan, heightFloorplan, floorplan){

	cvjs_windowResize_position_WidthHeight(doResize, widthFloorplan, heightFloorplan, floorplan);
	
	// 3.3.01d
	jQuery("#topIconMenu"+"_"+floorplan+"_svg").css({left: jQuery("#"+floorplan).position().left+1, top: jQuery("#"+floorplan).position().top+1});  // 3.3.01d
	
}




/** CVJS setup and canvas methods  **/



/* Stop IE crying if there is not console support */
if(!(window.console && console.log)) {
	console = {
	log:	function(){},
	debug:	function(){},
	info:	function(){},
	warn:	function(){},
	error:	function(){}
	};
}



var touchCount = 0;
var x1 = 0;
var y1 = 0;
var x2 = 0;
var y2 = 0;
var pdx = 0 ;
var pdy = 0;
var vbx = 0;
var vby = 0;
var basex, basey;


var lastDx = 0;
var lastDy = 0;
var initFlagPolygons = true;


var DefaultZoomFactor = 1.075;
var DefaultZoomFactor_mouseWheel = 1.075;

function CheckPt(x,y)
{
	if (x < viewBox[cvjs_active_floorplan_div_nr].X)
		return false;
	if (x > (viewBox[cvjs_active_floorplan_div_nr].X+viewBox._viewBox[2]))
		return false;
	if (y < viewBox[cvjs_active_floorplan_div_nr].Y)
		return false;
	if (y > (viewBox[cvjs_active_floorplan_div_nr].Y+viewBox._viewBox[3]))
		return false;
	return true;
}

function CheckRoomOnScreen(spc)
{
	var bbox = spc.getBBox();
	var isOn = CheckPt(bbox.x, bbox.y);
	isOn = isOn && CheckPt(bbox.x2, bbox.y2);
	if (!isOn)
		{
		if ((bbox.width > viewBoxWidth[cvjs_active_floorplan_div_nr]) || (bbox.height > viewBoxHeight[cvjs_active_floorplan_div_nr]))
			zoomHere();
		else
			{
			viewBox[cvjs_active_floorplan_div_nr].X = bbox.x + ((bbox.width-viewBoxWidth[cvjs_active_floorplan_div_nr])/2);
			viewBox[cvjs_active_floorplan_div_nr].Y = bbox.y + ((bbox.height-viewBoxHeight[cvjs_active_floorplan_div_nr])/2);
			setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], viewBox[cvjs_active_floorplan_div_nr].X, viewBox[cvjs_active_floorplan_div_nr].Y, viewBoxWidth[cvjs_active_floorplan_div_nr], viewBoxHeight[cvjs_active_floorplan_div_nr]);
			}
		}
}


var cvjs_menu_firing = false;

var cvjs_initDataMapsDisplay = true;

var cvjs_modalsInitialized = false;

var cvjs_modalsInitialized_FileLoadModal = false;

// Initializes CADViewer modals, method to set up modals for print, background change, redline color and thickness change

var cvjs_containmentModalLeft = 150;
var cvjs_containmentModalTop = 150;
var cvjs_containmentModalRight = 150;
var cvjs_containmentModalBottom = 150;

// 3.3.04a
var cvjs_topDownloadButtonPane = false;
var cvjs_topDownloadButtonPane_adjustment = 50;

function cvjs_InitializeModals(floorplan_modal){

// loading and initializing multiple times  - we try to clean up for this usage
// highlight and room modals are broken after double initializations
	
		
// we have to ensure the instance is initialized only once!	
	for (i=0; i<floorplans_divs_Initialized.length; i++){	
//		console.log("X"+floorplans_divs_Initialized[i]);
		if (floorplans_divs_Initialized[i] == floorplan_modal){
			console.log(cvjs_versionNumber+" floorplan "+floorplan_modal+" is already initialized, returning");
			return;
		}
	}	
	var flooplanFlag = true;
	var counter = 0;
	while (flooplanFlag){
		if (floorplans_divs_Initialized[counter] == ""){
			floorplans_divs_Initialized[counter] = floorplan_modal;
			flooplanFlag = false;
		}
		counter++;
	}
		

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_modal+"_svg");
	jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("");
	
	floorPlan_Modal = floorplan_modal;  // we set the cvjs_Modal to the floorPlan definision
	floorPlan_div = floorplan_modal+"_svg";	

	var floorplan_div = floorPlan_div;


	jQuery("#"+floorPlan_Modal).append("<div class=\"topDownloadButtonPane\" id=\"topDownloadButtonPane"+"_"+floorplan_div+"\" ><table id=\"CVTable\"  width=\"1000\" height=\""+cvjs_topDownloadButtonPane_adjustment+"\" ><tr id=\"downloadrow\" ><td style=\"vertical-align: middle\" width=\"200\" height=\""+cvjs_topDownloadButtonPane_adjustment+"\"><div id=\"downloadbutton\">Hello this is the download button! <div></td></tr></table></div>");		
	jQuery("#topDownloadButtonPane"+"_"+floorplan_div).hide();
	
	jQuery("#"+floorPlan_Modal).append("<svg id=\""+floorPlan_div+"\"></svg>");
	jQuery("#"+floorPlan_Modal).append("<div id=\"gMenu"+"_"+floorplan_div+"\"></div><div id=\"tip"+"_"+floorplan_div+"\" ></div><div class=\"cvjs_wait_looper\" id=\"cvjs_wait_looper"+"_"+floorplan_div+"\"></div><div id=\"cvjs_modals"+"_"+floorplan_div+"\" ></div>");

	
	// topIconMenu  Icons + navigation Menu
	jQuery("#"+floorPlan_Modal).append("<div class=\"topIconMenu_placeholder_1\" id=\"topIconMenu_placeholder_1"+"_"+floorplan_div+"\"  ></div>");
	jQuery("#"+floorPlan_Modal).append("<div class=\"topIconMenu_placeholder_2\" id=\"topIconMenu_placeholder_2"+"_"+floorplan_div+"\"  ></div>");

		
	// put it at the location of the <svg> div
	jQuery("#topIconMenu"+"_"+floorplan_div).css({left: jQuery("#"+floorPlan_Modal).position().left+1, top: jQuery("#"+floorPlan_Modal).position().top+1});  // 3.3.01d
	jQuery("#topIconMenu"+"_"+floorplan_div).css({width: '100%'});
	jQuery("#topIconMenu"+"_"+floorplan_div).css({height: '32px'});
	jQuery("#topIconMenu"+"_"+floorplan_div).css({position: 'absolute'});
	jQuery("#topIconMenu"+"_"+floorplan_div).css({'z-index': 2 });
	jQuery("#topIconMenu"+"_"+floorplan_div).css({display: 'block'});
	

	// make the top Navigation menu draggable
	jQuery("#topIconMenu_placeholder_2"+"_"+floorplan_div).css({'z-index': 2 });
	jQuery("#topIconMenu_placeholder_2"+"_"+floorplan_div).css({display: 'block'});
	jQuery("#topIconMenu_placeholder_2"+"_"+floorplan_div).css({position: 'absolute'});
	jQuery("#topIconMenu_placeholder_2"+"_"+floorplan_div).css({overflow: 'visible'});
	//
	jQuery("#topIconMenu_placeholder_1"+"_"+floorplan_div).css({'z-index': 2 });
	jQuery("#topIconMenu_placeholder_1"+"_"+floorplan_div).css({display: 'block'});
	jQuery("#topIconMenu_placeholder_1"+"_"+floorplan_div).css({position: 'absolute'});
	jQuery("#topIconMenu_placeholder_1"+"_"+floorplan_div).css({overflow: 'visible'});

	jQuery("#topIconMenu_placeholder_2"+"_"+floorplan_div).draggable();	
    // 6.2.31
//	jQuery("#topIconMenu_placeholder_1"+"_"+floorplan_div ).draggable();
	
	// 3.3.05c
	jQuery("#topIconMenu"+"_"+floorplan_div).draggable();

	
	// 3.3.01c
	// we set the icon interface 
	cvjs_setIconInterfaceControls_MimimumDisk_internal(true, floorPlan_Modal);
		//
		
	// WE LOAD THE LANGUAGE FILE AND THEN SET THE ICON MENUS  (as they need the languages
	
	var cvjs_LanguageLoad = cvjs_serverHandlersPath + cvjs_serverLoadFileController;
	var js_data = {};
	js_data['file'] = cvjs_ServerLocation+cvjs_loadCADViewerLanguageLocation;

	if (cvjs_debug) console.log("language file Load! "+js_data['file']+"  "+cvjs_LanguageLoad);

	// 6.2.49
	var myType = 'post';
	// if Angular we change to get and make data void 	
	if (cvjs_isAngular){		
		myType = 'get';
		js_data = null;
		cvjs_LanguageLoad = cvjs_loadCADViewerLanguageLocation;
	}


	jQuery.ajax({
	  url:cvjs_LanguageLoad,
	  type: myType,
	  async: false,
	  data: js_data,
	  success: function(xmlLanguageString){	
		if (cvjs_debug) console.log(cvjs_LanguageLoad+" menu "+xmlLanguageString);		  
		// 6.2.49
		if (cvjs_isAngular){			
			// window.alert( convertStreamToString(xmlLanguageString));
			var xmlText = new XMLSerializer().serializeToString(xmlLanguageString);
			xmlLanguageString =  xmlText;
		}

		var x2js = new X2JS();				

		languageTable = x2js.xml_str2json(xmlLanguageString);	
		languageTable = languageTable.cvjs;
				
		if (cvjs_debug) console.log(languageTable);
		if (cvjs_debug) (languageTable.numberOfLanguages);
				
		try{
			cvjs_currentLanguage = 1;
			for (var i=0; i<languageTable.numberOfLanguages; i++) {
				//console.log(i+" "+Language.toLowerCase()+" "+(languageTable.languages[i].thisLanguage).toLowerCase());
				if ( cvjs_loadCADViewerLanguageName.toLowerCase().indexOf((languageTable.languages[i].thisLanguage).toLowerCase()) == 0  && (cvjs_loadCADViewerLanguageName.length == languageTable.languages[i].thisLanguage.length) )
					cvjs_currentLanguage = i;
			}
			if (cvjs_debug) console.log(languageTable.languages[cvjs_currentLanguage].thisLanguage)
		}
		catch (err){  console.log("Error:"+err)}

		//   After we have set the language, we have to update the modals
		//  No we do not update, because of the color palette and slider..... setLanguage is only called on intialization
		//  cvjs_updateModals();
		try{
			for (var i=0; i<languageTable.numberOfLanguages; i++) {
				//console.log(i+" "+Language.toLowerCase()+" "+(languageTable.languages[i].thisLanguage).toLowerCase());
				if ( cvjs_loadCADViewerLanguageName.indexOf(languageTable.languages[i].languageCode) == 0)
					cvjs_currentLanguage = i;
			}
			
		}
		catch (err){  console.log(err)}		

		if (cvjs_debug) console.log(languageTable.languages[cvjs_currentLanguage].thisLanguage)
	



		// NOW WE BUILD THE MENUS
		
			// 3.3.01b  - building the top navigation menu
			cvjs_LoadTopNavigationMenu(floorPlan_Modal);
			
			// check flag to turn page navigation menu on or off
			// if (cvjs_loadTopIconNavigationVisible==false) 
			
			
			// check flag to build top icon menu
			
			// if no icon menu load file
			// set standard page 1+2+3
			
			// if XML icon menu file, then load the file and build menu system based on icon menu file. 
			// allow a maximum of 3 pages, allows only the API defined methods
			// if there is only one page, then the page change icon is turned off

		//window.alert(floorplan_div+"  "+cvjs_loadTopIconMenuXML[cvjs_interfaceCounterIndex(floorplan_div)]+"  "+cvjs_interfaceCounterIndex(floorplan_div));
	


	
			if ( cvjs_loadTopIconMenuXML[cvjs_interfaceCounterIndex(floorplan_div)] ){
				// load XML
				var cvjs_XMLloadLocation = cvjs_serverHandlersPath + cvjs_serverLoadFileController;
				var js_data = {};
				js_data['file'] = cvjs_ServerLocation+cvjs_topIconMenuXML_location+cvjs_topIconMenuXML[cvjs_interfaceCounterIndex(floorplan_div)];
			
				if (cvjs_debug) console.log("opening menu config "+js_data['file']+"  cvjs_XMLloadLocation "+cvjs_XMLloadLocation );
			
			
				// 6.2.49
				var myType = 'post';
				// if Angular we change to get and make data void 	
				if (cvjs_isAngular){		
					myType = 'get';
					js_data = null;
					cvjs_XMLloadLocation = cvjs_topIconMenuXML_location+cvjs_topIconMenuXML[cvjs_interfaceCounterIndex(floorplan_div)];;
				}
			
			
			
				jQuery.ajax({
				  url:cvjs_XMLloadLocation,
				  type: myType,
				  data: js_data,
				  success: function(xmlMenuString){
		 
					if (cvjs_debug) console.log("menu "+xmlMenuString);		  
		//			var xmlMenuString = "<cvjs><totalpages>3</totalpages><startpage>1</startpage><pages><page1><command>cvjs_LayerList</command><command>cvjs_Print</command></page1><page2><command>cvjs_calibrateMeasurement</command><command>cvjs_activateLineThicknessModal</command></page2></pages></cvjs>";

					// 6.2.49
					if (cvjs_isAngular){			
						// window.alert( convertStreamToString(xmlLanguageString));
						var xmlText = new XMLSerializer().serializeToString(xmlMenuString);
						xmlMenuString =  xmlText;
					}

					var x2js = new X2JS();				
					var cvjsIconMenu_json = JSON.stringify(x2js.xml_str2json(xmlMenuString));		
		//			window.alert(cvjsIconMenu_json);
					var cvjsIconMenu = x2js.xml_str2json(xmlMenuString);
					// the start page is only for intialization, after the user takes over
					cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] = cvjsIconMenu.cvjs.iconmenu.startpage-1;
					cvjs_topIconMenu[cvjs_interfaceCounterIndex(floorplan_div)] = cvjsIconMenu;			
					cvjs_LoadTopIconMenuXML(floorplan_div, cvjsIconMenu );
				 },
				 error:function(data_e){console.log("Error "+data_e); return;}
			   });				
			}
			else{
				// call standard creation modal
				console.log("cvjs_loadTopIconMenuXML="+cvjs_loadTopIconMenuXML);
				cvjs_LoadTopIconMenuViewing(floorplan_div);
			}
			
			if (cvjs_debug) console.log("before cvjs_initCADViewerPro_FileLoadModal(floorplan_div)");
			// For CADViewer Pro and CADViewer Enterprise functionality
			if (!cvjs_Community_Version) cvjs_initCADViewerPro_FileLoadModal(floorplan_div);
			
				
				
				
		jQuery("#tip"+"_"+floorplan_div).css({position: 'absolute'});
		jQuery("#tip"+"_"+floorplan_div).css({border: '1px solid gray'});
		jQuery("#tip"+"_"+floorplan_div).css({'z-index': 2000});
		jQuery("#tip"+"_"+floorplan_div).css({color: "#333"});
		jQuery("#tip"+"_"+floorplan_div).css({'background-color': "#efefef"});
		jQuery("#tip"+"_"+floorplan_div).css({padding: "3px"});
		jQuery("#tip"+"_"+floorplan_div).css({'max-width': "300px"});
		jQuery("#tip"+"_"+floorplan_div).css({'white-space': "nowrap"});
		jQuery("#tip"+"_"+floorplan_div).css({'font-family': "arial, verdana, sans-serif"});
		jQuery("#tip"+"_"+floorplan_div).css({'font-size': "0.75em"});
		
			
		tip[cvjs_active_floorplan_div_nr] = jQuery("#tip"+"_"+floorplan_div);
		jQuery("#tip"+"_"+floorplan_div).hide();
			
		jQuery("#gMenu"+"_"+floorplan_div).css({width: '80px'});
		jQuery("#gMenu"+"_"+floorplan_div).css({height: '300px'});
		jQuery("#gMenu"+"_"+floorplan_div).css({position: 'absolute'});
	//	jQuery("#gMenu"+"_"+floorplan_div).css({'z-index': zindex});
		jQuery("#gMenu"+"_"+floorplan_div).css({'z-index': 1000 });
		jQuery("#gMenu"+"_"+floorplan_div).css({display: 'block'});
		var tipText = "";


		// For CADViewer Pro and CADViewer Enterprise functionality
		if (!cvjs_Community_Version) cvjs_initCADViewerPro_Section01(floorplan_div);
		
		
		// For CADViewer Pro and CADViewer Enterprise functionality
		if (!cvjs_Community_Version) cvjs_initCADViewerPro_Section02(floorplan_div);
		
		
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<table id=\"floorPlanCanvasObject_table"+"_"+floorplan_div+"\"><tr><td><canvas id=\"floorPlanCanvasObject"+"_"+floorplan_div+"\" width=\"10\" height=\"10\"></canvas></td></tr></table>");
		jQuery("#floorPlanCanvasObject_"+floorplan_div).hide(); // 2017-12-07 - hidden	
		jQuery("#floorPlanCanvasObject_table"+"_"+floorplan_div).hide(); // 2017-12-12 - hidden
		if (printDebugFlag) jQuery("#floorPlanCanvasObject_table"+"_"+floorplan_div).show(); // 3.3.01e
		

		// generic color modal - for external applications

		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<map name=\"PanZoomMap\" ><area shape=\"rect\" alt=\"\" title=\"Zoom Extents\" coords=\"16,6,69,58\" href=\"javascript:cvjs_resetZoomPan();\"/><area shape=\"rect\" alt=\"\" title=\"Zoom In\" coords=\"16,66,69,115\" href=\"javascript:cvjs_zoomIn(\""+floorplan_div+"\");\"/><area shape=\"rect\" alt=\"\" title=\"Zoom Out\" coords=\"16,116,69,161\" href=\"javascript:cvjs_zoomOut();\"/><area shape=\"rect\" alt=\"\" title=\"Zoom Window\" coords=\"16,162,69,210\" href=\"javascript:cvjs_zoomWindow();\"/><area shape=\"rect\" alt=\"\" title=\"Load Last Page\" coords=\"16,220,69,255\" href=\"javascript:cvjs_lastPage(\""+floorplan_div+"\");\"/><area shape=\"rect\" alt=\"\" title=\"Load Next Page\" coords=\"16,256,69,289\" href=\"javascript:cvjs_nextPage(\""+floorplan_div+"\");\"/><area shape=\"rect\" alt=\"\" title=\"Load Previous Page\" coords=\"16,290,69,324\" href=\"javascript:cvjs_previousPage(\""+floorplan_div+"\");\"/><area shape=\"rect\" alt=\"\" title=\"Load First Page\" coords=\"16,325,69,360\" href=\"javascript:cvjs_firstPage(\""+floorplan_div+"\");\"/></map>");


		// classic skin
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<map name=\"PanZoomMapClassic_"+floorplan_div+"\" ><area shape=\"rect\" alt=\"\" title=\"Zoom In\" coords=\"16,164,69,211\" href=\"javascript:cvjs_zoomIn(\""+floorplan_div+"\");\"/><area shape=\"rect\" alt=\"\" title=\"Zoom Out\" coords=\"16,211,69,258\" href=\"javascript:cvjs_zoomOut();\"/><area shape=\"rect\" alt=\"\" title=\"Zoom Extents\" coords=\"16,94,69,141\" href=\"javascript:cvjs_resetZoomPan();\"/><area shape=\"polygon\" alt=\"\" title=\"Pan Left\"  coords=\"13,29,32,23,29,44,9,56,5,39,6,21,9,13,13,11\" href=\"javascript:cvjs_panLeft();\"/><area shape=\"polygon\" alt=\"\" title=\"Pan Right\" coords=\"50,22,70,8,76,20,78,39,74,53,66,60,50,39,50,21\" href=\"javascript:cvjs_panRight();\"/><area shape=\"polygon\" alt=\"\" title=\"Pan Down\"  coords=\"13,57,31,43,50,42,65,61,55,69,42,69,25,68,19,63\" href=\"javascript:cvjs_panDown();\"/><area shape=\"polygon\" alt=\"\" title=\"Pan Up\"    coords=\"13,17,32,22,52,22,69,29,60,0,51,0,36,0,22,0,13,8\" href=\"javascript:cvjs_panUp();\"/><area shape=\"rect\" alt=\"\" title=\"Zoom Extents\" coords=\"30,22,50,43\" href=\"javascript:cvjs_resetZoomPan();\"/></map>");
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<map name=\"ZoomExtentsDeviceMapClassic_"+floorplan_div+"\" ><area shape=\"rect\" alt=\"\" title=\"Zoom In\" coords=\"16,75,69,124\" href=\"javascript:cvjs_zoomIn(\""+floorplan_div+"\");\"/><area shape=\"rect\" alt=\"\" title=\"Zoom Out\" coords=\"16,127,69,173\" href=\"javascript:cvjs_zoomOut();\"/><area shape=\"rect\" alt=\"\" title=\"Zoom Extents\" coords=\"16,6,69,54\" href=\"javascript:cvjs_resetZoomPan();\"/></map>");

	//	jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div id=\"floatNavigationMenu_"+floorplan_div+"\" class=\"changePagebox1\"><a class=\"cvjs_fastback\" id=\"cvjs_fastback_"+floorplan_div+"\" href=\"javascript:cvjs_firstPage(\'"+floorplan_div+"\');\"></a><a class=\"cvjs_back\" id=\"cvjs_back_"+floorplan_div+"\" href=\"javascript:cvjs_previousPage(\'"+floorplan_div+"\');\"></a><a class=\"cvjs_enterpagenumber\" id=\"cvjs_enterpagenumber_"+floorplan_div+"\" href=\"javascript:cvjs_enterPageChangeNumber(\'"+floorplan_div+"\');\"></a><div class=\"cvjs_floatpagemenutext\" id=\"floatpagemenuText_"+floorplan_div+"\">nr    page name</div><a class=\"cvjs_forward\" id=\"cvjs_forward_"+floorplan_div+"\" href=\"javascript:cvjs_nextPage(\'"+floorplan_div+"\');\"></a><a class=\"cvjs_fastforward\" id=\"cvjs_fastforward_"+floorplan_div+"\" href=\"javascript:cvjs_lastPage(\'"+floorplan_div+"\');\"></a></div>");
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div id=\"floatNavigationMenu_"+floorplan_div+"\" class=\"changePagebox1\"><a class=\"cvjs_zoomextents\" id=\"cvjs_zoomextents_"+floorplan_div+"\" href=\"javascript:cvjs_zoomExtents(\'"+floorplan_div+"\');\"></a><a class=\"cvjs_zoomwindow\" id=\"cvjs_zoomwindow_"+floorplan_div+"\" href=\"javascript:cvjs_zoomWindow(\'"+floorplan_div+"\');\"></a><a class=\"cvjs_rotateforward\" id=\"cvjs_rotateforward_"+floorplan_div+"\" href=\"javascript:cvjs_rotateForward(\'"+floorplan_div+"\');\"></a><a class=\"cvjs_rotateback\" id=\"cvjs_rotateback_"+floorplan_div+"\" href=\"javascript:cvjs_rotateBackward(\'"+floorplan_div+"\');\"></a><a class=\"cvjs_fastback\" id=\"cvjs_fastback_"+floorplan_div+"\" href=\"javascript:cvjs_firstPage(\'"+floorplan_div+"\');\"></a><a class=\"cvjs_back\" id=\"cvjs_back_"+floorplan_div+"\" href=\"javascript:cvjs_previousPage(\'"+floorplan_div+"\');\"></a><a class=\"cvjs_enterpagenumber\" id=\"cvjs_enterpagenumber_"+floorplan_div+"\" href=\"javascript:cvjs_enterPageChangeNumber(\'"+floorplan_div+"\');\"></a><a class=\"cvjs_selectpagefromlist\" id=\"cvjs_selectpagefromlist_"+floorplan_div+"\" href=\"javascript:cvjs_selectPageFromList(\'"+floorplan_div+"\');\"></a><div id=\"floatpagemenuText_"+floorplan_div+"\">nr    page name</div><a class=\"cvjs_forward\" id=\"cvjs_forward_"+floorplan_div+"\" href=\"javascript:cvjs_nextPage(\'"+floorplan_div+"\');\"></a><a class=\"cvjs_fastforward\" id=\"cvjs_fastforward_"+floorplan_div+"\" href=\"javascript:cvjs_lastPage(\'"+floorplan_div+"\');\"></a></div>");
		
		
		// file menu modals split into several append statements
	//	var serverfileModalString = "<table><tr><td><div id=\"cvjs_serverFileLoadModal\" class=\"measurement_modal-body\" ><div class=\"modal-content\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_exitServerFileLoadModal();\">&times;</button><table ><tr><td height=\"30px\"><a href=\"http://cadviewer.com\"><img src=\""+cvjs_imagesLocation+"logoJS.png\" width=\"30\" height=\"30\" alt=\"CADViewer Logo\" /></a></td><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td><td><h4 class=\"modal-title\"></canvas><div id=\"serverFileModalName\">XXX</div></div></h4></td><td></td>       </tr></table>";

		// for clone SVG handling
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div id=\"cloneObject_01\"></div>");

		// for make bitmaps inline when passing over to print object
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<canvas id=\"tempBitmapObjectHolder\" width=\"10\" height=\"10\"></canvas>");
		
		//3.0.14e
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<form id=\"datamaps_form\" style=\"display:none\"><table width=\"100%\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr></tr><tr><td><img src=\""+cvjs_imagesLocation+"7x7.png\" border=\"1\" width=\"7\" height=\"7\" /></td><td><div id=\"unlink_Modal_header\" class=\"datamaps_text_modal\">Data Maps</div></td><td><div class=\"onoffswitch\"><input type=\"checkbox\" name=\"onoffswitch\" class=\"onoffswitch-checkbox\" id=\"cvjs_displayData_switch\" ><label class=\"onoffswitch-label\" for=\"cvjs_displayData_switch\"><span class=\"onoffswitch-inner\"></span><span class=\"onoffswitch-switch\"></span></label></div></td>  </tr></table><div id =\"datamaps_modal_line\" class=\"horizontal_modal_line\"></div><table id=\"datamaps_modal_table\" class=\"text_modal_table_class\" width=\"100%\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" > 	<tr><td><div id=\"cv_link11_fixtures\" class=\"dropdown\"><span class=\"dropdown-toggle\" role=\"button\" data-toggle=\"dropdown\" href=\"#\" data-target=\"#\" id=\"drop_select_datamaps\">None Selected<b class=\"caret\"></b></span><ul id=\"select_datamaps\" class=\"dropdown-menu\" role=\"menu\" aria-labelledby=\"drop_select_datamaps\"></ul></div></td></tr> <tr><td>    <div id=\"cvjs_display_selection_1\" class=\"occupancy-colors\"><span class=\"hint--top void color-chip\" data-hint=\"No Data\"></span><span class=\"hint--top low2 color-chip\" data-hint=\"&gt; 10 min\"></span><span class=\"hint--top low1 color-chip\" data-hint=\"7.5 to 10 min\"></span><span class=\"hint--top mid0 color-chip\" data-hint=\"5 to 7.5 min\"></span><span class=\"hint--top high1 color-chip\" data-hint=\"2.5 to 5 min\"></span><span class=\"hint--top high2 color-chip\" data-hint=\"&lt; 2.5 min\"></span></div>        <div id=\"cvjs_display_selection_2\" class=\"power-colors\"><span class=\"hint--top void color-chip\" data-hint=\"No Data\"></span><span class=\"hint--top low2 color-chip\" data-hint=\"&lt; 0.1 W/sq ft | 1.08 W/sq m\"></span><span class=\"hint--top low1 color-chip\" data-hint=\"0.1 to 0.2 W/sq ft | 1.1 to 2.2 W/sq m\"></span><span class=\"hint--top mid0 color-chip\" data-hint=\"0.2 to 0.4 W/sq ft | 2.2 to 4.3 W/sq m\"></span><span class=\"hint--top high1 color-chip\" data-hint=\"0.4 to 0.5 W/sq ft | 4.3 to 5.4 W/sq m\"></span><span class=\"hint--top high2 color-chip\" data-hint=\"&gt; 0.5 W/sq ft | 5.4 W/sq m\"></span></div><div id=\"cvjs_display_selection_3\" class=\"temperature-colors\"><span class=\"hint--top void color-chip\" data-hint=\"No Data\"></span><span class=\"hint--bottom low2 color-chip\" data-hint=\"&lt; 70 &deg;F | 21 &deg;C\"></span></span><span class=\"hint--bottom low1 color-chip\" data-hint=\"70 to 72 &deg;F | 21 to 22 &deg;C\"></span><span class=\"hint--bottom mid0 color-chip\" data-hint=\"72 to 77 &deg;F | 22 to 25 &deg;C\"></span><span class=\"hint--bottom high1 color-chip\" data-hint=\"77 to 81 &deg;F | 25 to 27 &deg;C\"></span><span class=\"hint--bottom high2 color-chip\" data-hint=\"&gt; 81 &deg;F | 27 &deg;C\"></span></div> <div id=\"cvjs_display_selection_4\" class=\"lightlevel-colors\"> <span class=\"hint--top void color-chip\" data-hint=\"No Data\"></span><span class=\"hint--bottom low2 color-chip\" data-hint=\"&lt; 70 &deg;F | 21 &deg;C\"></span><span class=\"hint--bottom low1 color-chip\" data-hint=\"70 to 72 &deg;F | 21 to 22 &deg;C\"></span><span class=\"hint--bottom mid0 color-chip\" data-hint=\"72 to 77 &deg;F | 22 to 25 &deg;C\"></span><span class=\"hint--bottom high1 color-chip\" data-hint=\"77 to 81 &deg;F | 25 to 27 &deg;C\"></span><span class=\"hint--bottom high2 color-chip\" data-hint=\"&gt; 81 &deg;F | 27 &deg;C\"></span></div></td></tr></tr>     </table><table id=\"datamaps_select_save_changes\" width=\"100%\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" id=\"location_tags\"><tr><td><img src=\""+cvjs_imagesLocation+"10x10.png\" border=\"1\" width=\"10\" height=\"10\" /></td><td><img src=\""+cvjs_imagesLocation+"7x7.png\" border=\"1\" width=\"5\" height=\"5\" /></td><td><img src=\""+cvjs_imagesLocation+"white28x10.png\" border=\"1\" width=\"28\" height=\"10\" /></td><td><img src=\""+cvjs_imagesLocation+"white28x10.png\" border=\"1\" width=\"28\" height=\"10\" /></td><td><div style=\"width: 60px\" ><div id=\"button2-nounlink\"><img id=\"unlink_modal_cancel_image\" class=\"icon_img\" src=\""+cvjs_imagesLocation+"tools/Cancel_Inactive_4.png\" border=\"0\"></div></div></td><td><td div style=\"height: 10px\" ><img src=\""+cvjs_imagesLocation+"10x10.png\" border=\"1\" width=\"10\" height=\"10\" /></td><td><div style=\"width: 111px\" ><div id=\"button1-unlink\"><img id=\"unlink_modal_proceed_image\" class=\"icon_img\" src=\""+cvjs_imagesLocation+"tools/Proceed_111x28_Up.png\" border=\"0\"></div></div></td></tr><tr><td><img src=\""+cvjs_imagesLocation+"10x10.png\" border=\"1\" width=\"7\" height=\"7\" /></td></tr></table></form>");


		jQuery("#datamaps_form").hide();
		jQuery("#datamaps_modal_line").hide();
		jQuery("#datamaps_modal_table").hide();
		jQuery("#datamaps_select_save_changes").hide();

		jQuery("#cvjs_display_selection_1").hide();
		jQuery("#cvjs_display_selection_2").hide();
		jQuery("#cvjs_display_selection_3").hide();
		jQuery("#cvjs_display_selection_4").hide();



		var new_datamap_forms = "<div class=\"dropdown-content\">";

		for (var i=0; i<4; i++){
			new_datamap_forms = new_datamap_forms  + "<li><a href=\"javascript:cvjs_change_datamaps('"+i+"')\">"+languageTable.languages[cvjs_currentLanguage].DataMaps.Map[i]+"</a></li>";
	//		if (i==1) new_datamap_forms = new_datamap_forms  + "<li><a href=\"javascript:cvjs_change_datamaps('"+i+"')\">"+languageTable.languages[cvjs_currentLanguage].DataMaps.Map2+"</a></li>";
	//		if (i==2) new_datamap_forms = new_datamap_forms  + "<li><a href=\"javascript:cvjs_change_datamaps('"+i+"')\">"+languageTable.languages[cvjs_currentLanguage].DataMaps.Map3+"</a></li>";
	//		if (i==3) new_datamap_forms = new_datamap_forms  + "<li><a href=\"javascript:cvjs_change_datamaps('"+i+"')\">"+languageTable.languages[cvjs_currentLanguage].DataMaps.Map4+"</a></li>";

		}
		new_datamap_forms = new_datamap_forms  + "</div>"
		 jQuery("#select_datamaps").html(new_datamap_forms);


		jQuery("#cvjs_displayData_switch")
			.change(function(){
				if( jQuery(this).is(":checked") ){

					// clear data layer
					spaceLayer = cvjs_clearLayer(spaceLayer, floorplan_div_Array[cvjs_active_floorplan_div_nr]);
					
					cvjs_ParseDisplayDataMaps(cvjs_currentMapNumber);

					jQuery("#datamaps_modal_table").show();
					jQuery("#datamaps_select_save_changes").hide();
					jQuery("#datamaps_modal_line").show();

					jQuery("#datamaps_form").css({ 'height': 120 + "px" });

					jQuery("#datamaps_form").css("left", 40).css("top", jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position().top + jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height()-197);


					if (cvjs_initDataMapsDisplay){ cvjs_initDataMapsDisplay = false; cvjs_change_datamaps(0);}

					//cvjs_convertSpaceObject = true;
				}else{
					// clear data layer
					spaceLayer = cvjs_clearLayer(spaceLayer);

					jQuery("#datamaps_modal_table").hide();
					jQuery("#datamaps_select_save_changes").hide();
					jQuery("#datamaps_modal_line").hide();

					jQuery("#datamaps_form").css({ 'height': 43 + "px" });

					jQuery("#datamaps_form").css("left", 40).css("top", jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position().top + jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height()-120);

					//cvjs_convertSpaceObject = false;
				}
			});

		jQuery( function() {
			jQuery( "#datamaps_form" ).draggable();
		} );



		cvjs_layerlistModal_content = "<table class=\"layerListTable\" ><tr><td><div class=\"pagechangeListHeaderLayers\" id=\"layerListHeader\"><a class=\"modalIconLogo\" href=\"https://cadviewer.com\"><img class=\"cvjs_img\" src=\""+cvjs_imagesLocation+"logoJS.png\" /></a><div class=\"modalHeaderText\"  id=\"cvjs_layerListTextHeader\">"+languageTable.languages[cvjs_currentLanguage].LayerListModal.Header+"</div>"
//		cvjs_layerlistModal_content = "<table class=\"layerListTable\" ><tr><td><div class=\"layerListHeader\" id=\"layerListHeader\"><a class=\"modalIconLogo\" href=\"https://cadviewer.com\"><img class=\"cvjs_img\" src=\""+cvjs_imagesLocation+"logoJS.png\" /></a><div class=\"modalHeaderText\"  id=\"cvjs_layerListTextHeader\">"+languageTable.languages[cvjs_currentLanguage].LayerListModal.Header+"</div>"
		+"<input class=\"cvjs_new_header_button\" type=\"button\" value=\""+"&times;"+"\" onClick=\"cvjs_exit_layerlist(\'"+floorplan_div+"\');\">"
//		+"<button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_exit_layerlist(\'"+floorplan_div+"\');\">&times;<b class=\"top_bar_gray_underbar\">_</b></button>"
		+"</div></td></tr>"
		+"<tr><td><canvas id=\"dummy\" width=\"30\" height=\"8\"></canvas></td></tr><tr><td><canvas id=\"dummy\" width=\"30\" height=\"4\"></canvas><input id=\"cvjs_layer_search_field\" class=\"search cvjs_search \" placeholder=\""+languageTable.languages[cvjs_currentLanguage].LayerListModal.Search+"\" /><canvas id=\"dummy\" width=\"30\" height=\"4\"></canvas>"
		+"<button id=\"cvjs_layer_sort_button\" class=\"sort cvjs_sort\" data-sort=\"layer\">"+languageTable.languages[cvjs_currentLanguage].LayerListModal.Sort+"</button></td></tr><tr><td><canvas id=\"dummy\" width=\"30\" height=\"4\"></canvas></td></tr><tr><td><ul class=\"list cvjs_list\" id=\"layerlist_id\"></ul><canvas id=\"dummy\" width=\"30\" height=\"20\"></canvas><input id=\"cvjs_layer_settings_button1\" class=\"cvjs_input\" type=\"button_layer\" name=\"Button3\" value=\""+languageTable.languages[cvjs_currentLanguage].LayerListModal.AllLayerOn+"\" onClick=\"modal_all_layer_on();\" ><canvas id=\"dummy\" width=\"30\" height=\"20\"></canvas><input id=\"cvjs_layer_settings_button2\" class=\"cvjs_input\" type=\"button_layer\" name=\"Button3\" value=\""+languageTable.languages[cvjs_currentLanguage].LayerListModal.AllLayerOff+"\" onClick=\"modal_all_layer_off();\" ><canvas id=\"dummy\" width=\"30\" height=\"20\"></canvas><input id=\"cvjs_layer_settings_button3\" class=\"cvjs_input\" type=\"button_layer\" name=\"Button3\" value=\""+languageTable.languages[cvjs_currentLanguage].LayerListModal.SwapLayers+"\" onClick=\"modal_swap_layers_on_off();\" ></td></tr>"
		+"<tr><td>"
		+"<canvas id=\"\" width=\"10\" height=\"25\"></canvas><font id=\"cvjs_layer_selectdrawing\">"+languageTable.languages[cvjs_currentLanguage].LayerListModal.SelectDrawings+"</font><br><canvas id=\"dummy\" width=\"2\" height=\"21\"></canvas><div id=\"cvjs_LayerSelectorLocation\"><select id=\"cvjs_SelectLayerDrawings\" multiple=\"multiple\"><option value=\"1\">"+languageTable.languages[cvjs_currentLanguage].LayerListModal.BaseAndXref+"</option><option value=\"2\">Xref: TEMPLATE 1</option><option value=\"3\">Xref: TEMPLATE 2</option></select></div>"
		+"</td></tr><tr><td style=\"border-bottom: 6px solid #fff\"><canvas id=\"dummy\" width=\"10\" height=\"25\"></canvas><input class=\"cvjs_btn\" type=\"checkbox\" id=\"cvjs_layerlist_checkbox\" value=\"measurearea_status\"><canvas id=\"dummy\" width=\"15\" height=\"25\"></canvas>"
		+"<div id=\"cvjs_layerlist_checkboxText\">"+languageTable.languages[cvjs_currentLanguage].LayerListModal.XrefLayerName+"</div></td></tr>"	
		+"</table>";
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div id=\"layerList_"+floorplan_div+"\" class=\"cvjs_listwrapper\"></div>");
		jQuery("#layerList_"+floorplan_div).html(cvjs_layerlistModal_content);

		
		cvjs_pagechangeListModal_content = "<table class=\"pagechangeListTable\" ><tr><td><div class=\"pagechangeListHeader\" id=\"pagechangeListHeader\"><a class=\"modalIconLogo\" href=\"https://cadviewer.com\"><img class=\"cvjs_img\" src=\""+cvjs_imagesLocation+"logoJS.png\" /></a><div class=\"modalHeaderText\"  id=\"cvjs_pagechangeListTextHeader\">"+languageTable.languages[cvjs_currentLanguage].PageChangeListModal.Header+"</div>"
		+"<input class=\"cvjs_new_header_button\" type=\"button\" value=\""+"&times;"+"\" onClick=\"cvjs_exit_pagechangelist(\'"+floorplan_div+"\');\">"
//		+"<button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_exit_pagechangelist(\'"+floorplan_div+"\');\">&times;<b class=\"top_bar_gray_underbar\">_</b></button>"
		+"</div></td></tr><tr><td><canvas id=\"dummy\" width=\"30\" height=\"8\"></canvas></td></tr><tr><td><canvas id=\"dummy\" width=\"30\" height=\"4\"></canvas><input id=\"cvjs_pagechange_search_field\" class=\"search cvjs_search\" placeholder=\""+languageTable.languages[cvjs_currentLanguage].PageChangeListModal.Search+"\" /><canvas id=\"dummy\" width=\"30\" height=\"4\"></canvas>"
		+"<button id=\"cvjs_pagechange_sort_button\" class=\"sort cvjs_sort\" data-sort=\"layer\">"+languageTable.languages[cvjs_currentLanguage].PageChangeListModal.Sort+"</button></td></tr><tr><td><canvas id=\"dummy\" width=\"30\" height=\"4\"></canvas></td></tr><tr><td><ul class=\"list cvjs_list\" id=\"pagechangelist_id\"></ul></td></tr><tr><td><canvas id=\"dummy\" width=\"5\" height=\"4\"><></td></tr></table>";
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div id=\"pagechangeList_"+floorplan_div+"\" class=\"pagechangeListModal cvjs_listwrapper\"></div>");
		jQuery("#pagechangeList_"+floorplan_div).html(cvjs_pagechangeListModal_content);

			
		cvjs_birdseyeModal_content = "<table class=\"cvjs_floorPlanMagnifyingGlassTable\" ><tr><td><div class=\"cvjs_floorPlanMagnifyingGlassTop\"><a class=\"modalIconLogo\" href=\"https://cadviewer.com\"><img class=\"cvjs_img\" src=\""+cvjs_imagesLocation+"logoJS.png\" /></a><div class=\"modalHeaderText\"  id=\"cvjs_magnifyHeader\">"+languageTable.languages[cvjs_currentLanguage].BirdsEyeModal.Header+"</div>"
		+"<input class=\"cvjs_new_header_button\" type=\"button\" value=\""+"&times;"+"\" onClick=\"cvjs_exitBirdsEye(\'"+floorplan_div+"\');\">"
//		+"<button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_exitBirdsEye(\'"+floorplan_div+"\');\">&times;<b class=\"top_bar_gray_underbar\">_</b></button></div></tr></td><tr><td><canvas id=\"cvjs_floorPlanMagnifyingGlass_"+floorplan_div+"\" width=\"300\" height=\"200\"></canvas></td></tr></table>";
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div class=\"cvjs_floorPlanMagnifyingGlassEncapsulate\" id=\"cvjs_floorPlanMagnifyingGlassEncapsulate_"+floorplan_div+"\"></div>");
		jQuery("#cvjs_floorPlanMagnifyingGlassEncapsulate_"+floorplan_div).html(cvjs_birdseyeModal_content);


//		cvjs_calibrateModal_content = "<table class=\"calibrateModalanguageTable\"><tr><td><div class=\"calibrateModalHeader\"><a class=\"modalIconLogo\" href=\"https://cadviewer.com\"><img class=\"cvjs_img\" src=\""+cvjs_imagesLocation+"logoJS.png\" /></a><b id=\"cvjs_calibrateModalHeader\">"+languageTable.languages[cvjs_currentLanguage].CalibrateModal.Header+"</b><button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_exitCalibrateModal(\'"+floorplan_div+"\',1);\">&times;<b class=\"top_bar_gray_underbar\">_</b></button></div></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas><font id=\"cvjs_calibrate_modal_unit\">"+languageTable.languages[cvjs_currentLanguage].CalibrateModal.Unit+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><select id=\"cvjs_unitForScale\"><option value=\"1\">m</option><option value=\"2\">cm</option><option value=\"3\">mm</option><option value=\"4\">km</option><option value=\"5\">feet</option><option value=\"6\">inches</option><option value=\"7\">miles</option></select></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas><font id=\"cvjs_calibrate_modal_distance\">"+languageTable.languages[cvjs_currentLanguage].CalibrateModal.Distance+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"1\" id=\"cvjs_calibrateReferenceDistance\" class=\"cvjs_inputCalibrateModal\"><canvas id=\"dummy\" width=\"116\" height=\"10\"></canvas><input id=\"cvjs_calibrate_button\" type=\"button\" name=\"bPrint\" value=\""+languageTable.languages[cvjs_currentLanguage].CalibrateModal.OK+"\" onClick=\"cvjs_exitCalibrateModal(\'"+floorplan_div+"\',2);\"></td></tr><tr><td><div id=\"cvjs_calibrationModalText\"><canvas id=\"dummy\" width=\"0\" height=\"17\"></canvas><font id=\"cvjs_calibrate_modal_text\">"+languageTable.languages[cvjs_currentLanguage].CalibrateModal.Text+"</font></div></td></tr></table>";
		// TESTTEST

//		cvjs_calibrateModal_content = "<table class=\"calibrateModalanguageTable\"><tr><td><div class=\"calibrateModalHeader\"><a class=\"modalIconLogo\" href=\"https://cadviewer.com\"><img class=\"cvjs_img\" src=\""+cvjs_imagesLocation+"logoJS.png\" /></a><b id=\"cvjs_calibrateModalHeader\">"+languageTable.languages[cvjs_currentLanguage].CalibrateModal.Header+"</b>"

		cvjs_calibrateModal_content = "<table class=\"calibrateModalanguageTable\"><tr><td><div class=\"calibrateModalHeader\"><a class=\"modalIconLogo\" href=\"https://cadviewer.com\"><img class=\"cvjs_img\" src=\""+cvjs_imagesLocation+"logoJS.png\" /></a><div class=\"modalHeaderText\" id=\"cvjs_calibrateModalHeader\">"+languageTable.languages[cvjs_currentLanguage].CalibrateModal.Header+"</div>"
//		+"<input class=\"cvjs_new_header_button\" type=\"button\" value=\""+"&times;"+"\" onClick=\"cvjs_exitCalibrateModal(\'"+floorplan_div+"\',1);\">"
		+"<input class=\"cvjs_new_header_button\" type=\"button\" value=\"&times;\" onClick=\"cvjs_exitCalibrateModal(\'"+floorplan_div+"\',1);\">"
//		<button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_exitCalibrateModal(\'"+floorplan_div+"\',1);\">&times;<b class=\"top_bar_gray_underbar\">_</b></button>		
		+"</div></td></tr><tr><td><br><canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas><font id=\"cvjs_calibrate_modal_unit\">"+languageTable.languages[cvjs_currentLanguage].CalibrateModal.Unit+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><select id=\"cvjs_unitForScale\"><option value=\"1\">m</option><option value=\"2\">cm</option><option value=\"3\">mm</option><option value=\"4\">km</option><option value=\"5\">feet</option><option value=\"6\">inches</option><option value=\"7\">miles</option></select></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas><font id=\"cvjs_calibrate_modal_distance\">"+languageTable.languages[cvjs_currentLanguage].CalibrateModal.Distance+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"1\" id=\"cvjs_calibrateReferenceDistance\" class=\"cvjs_inputCalibrateModal\"><canvas id=\"dummy\" width=\"116\" height=\"10\"></canvas><input id=\"cvjs_calibrate_button\" type=\"button\" name=\"bPrint\" value=\""+languageTable.languages[cvjs_currentLanguage].CalibrateModal.OK+"\" onClick=\"cvjs_exitCalibrateModal(\'"+floorplan_div+"\',2);\"></td></tr><tr><td><div id=\"cvjs_calibrationModalText\"><canvas id=\"dummy\" width=\"0\" height=\"17\"></canvas><font id=\"cvjs_calibrate_modal_text\">"+languageTable.languages[cvjs_currentLanguage].CalibrateModal.Text+"</font></div></td></tr></table>";


//<button id=\"cvjs_settings_button_icon\" class=\"btn\" onClick=\"cvjs_exitSettingsModal(\'"+floorplan_div+"\',2);\"><i class=\"fa fa-check\"></i></button>


//		+"<input class=\"cvjs_new_header_button\" type=\"button\" value=\""+"&times;"+"\" onClick=\"(\'"+floorplan_div+"\');\">"

	
/*	
		cvjs_calibrateModal_content = "<table class=\"calibrateModalanguageTable\"><tr><td><div class=\"calibrateModalHeader\"><a class=\"modalIconLogo\" href=\"https://cadviewer.com\"><img class=\"cvjs_img\" src=\""+cvjs_imagesLocation+"logoJS.png\" /></a><b id=\"cvjs_calibrateModalHeader\">"+languageTable.languages[cvjs_currentLanguage].CalibrateModal.Header+"</b>
		+"<input id=\"cvjs_calibrate_button\" type=\"button\" name=\"bPrint\" value=\""+languageTable.languages[cvjs_currentLanguage].CalibrateModal.OK+"\" onClick=\"cvjs_exitCalibrateModal(\'"+floorplan_div+"\',2);\">
		//<button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_exitCalibrateModal(\'"+floorplan_div+"\',1);\">&times;<b class=\"top_bar_gray_underbar\">_</b></button>
		+"</div></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas><font id=\"cvjs_calibrate_modal_unit\">"+languageTable.languages[cvjs_currentLanguage].CalibrateModal.Unit+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><select id=\"cvjs_unitForScale\"><option value=\"1\">m</option><option value=\"2\">cm</option><option value=\"3\">mm</option><option value=\"4\">km</option><option value=\"5\">feet</option><option value=\"6\">inches</option><option value=\"7\">miles</option></select></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas><font id=\"cvjs_calibrate_modal_distance\">"+languageTable.languages[cvjs_currentLanguage].CalibrateModal.Distance+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"1\" id=\"cvjs_calibrateReferenceDistance\" class=\"cvjs_inputCalibrateModal\"><canvas id=\"dummy\" width=\"116\" height=\"10\"></canvas><input id=\"cvjs_calibrate_button\" type=\"button\" name=\"bPrint\" value=\""+languageTable.languages[cvjs_currentLanguage].CalibrateModal.OK+"\" onClick=\"cvjs_exitCalibrateModal(\'"+floorplan_div+"\',2);\"></td></tr><tr><td><div id=\"cvjs_calibrationModalText\"><canvas id=\"dummy\" width=\"0\" height=\"17\"></canvas><font id=\"cvjs_calibrate_modal_text\">"+languageTable.languages[cvjs_currentLanguage].CalibrateModal.Text+"</font></div></td></tr></table>";
*/	
	
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div class=\"calibrateModal\" id=\"calibrateModal_"+floorplan_div+"\"></div>");
		jQuery("#calibrateModal_"+floorplan_div).html(cvjs_calibrateModal_content);



// 6.02.18
		selectString = "";
		for (k=0; k<7; k++){  // 6.2.28 6-> 7
			selectString = selectString + "<option value=\""+(k+1)+"\">"+languageTable.languages[cvjs_currentLanguage].MeasurementModal.MenuItems.MenuItem[k]+"</option>";
		}
		cvjs_measurementModal_content = "<table class=\"measurementModalanguageTable\" ><tr><td><div class=\"measurementModalHeader\"><a class=\"modalIconLogo\" href=\"https://cadviewer.com\"><img class=\"cvjs_img\" src=\""+cvjs_imagesLocation+"logoJS.png\" /></a><div class=\"modalHeaderText\"  id=\"cvjs_measurementHeader\">"+languageTable.languages[cvjs_currentLanguage].MeasurementModal.Header+"</div>"
		+"<input class=\"cvjs_new_header_button\" type=\"button\" value=\""+"&times;"+"\" onClick=\"cvjs_exitMeasurementModal(\'"+floorplan_div+"\');\">"
//		+"<button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_exitMeasurementModal(\'"+floorplan_div+"\');\">&times;<b class=\"top_bar_gray_underbar\">_</b></button>"
		+"</div></td></tr><tr><td><br><canvas id=\"dummy\" width=\"10\" height=\"25\"></canvas>"
//		                                +"<div class=\"cvjs_measurementLength\" id=\"cvjs_measurementLength_"+floorplan_div+"\">"+languageTable.languages[cvjs_currentLanguage].MeasurementModal.Distance+"</div><canvas id=\"dummy\" width=\"5\" height=\"5\"></canvas><input id=\"cvjs_measurement_button\" type=\"button\" name=\"bPrint\" value=\""+languageTable.languages[cvjs_currentLanguage].MeasurementModal.MeasureAgain+"\" onClick=\"cvjs_repeatMeasurementModal();\"><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td></tr><tr><td><div id=\"cvjs_measurementModalText\"><canvas id=\"dummy\" width=\"0\" height=\"20\"></canvas>"+languageTable.languages[cvjs_currentLanguage].MeasurementModal.Text+"</div></td></tr><tr><td>"
		                                +"<textarea class=\"cvjs_measurementDisplayBox\" id=\"cvjs_measurementBox_"+floorplan_div+"\" cols=\"26\" rows=\"1\"></textarea>"
										+"<button id=\"cvjs_measurement_button_icon\" class=\"cvjs_btn btn\" onClick=\"cvjs_copyMeasurementField(\'"+floorplan_div+"\');\"><i class=\"fa fa-copy\"></i></button>"+
										"<div class=\"cvjs_measurementLength\" id=\"cvjs_measurementLength_"+floorplan_div+"\">"+languageTable.languages[cvjs_currentLanguage].MeasurementModal.Distance+"</div><canvas id=\"dummy\" width=\"5\" height=\"5\"></canvas><input id=\"cvjs_measurement_button\" type=\"button\" name=\"bPrint\" value=\""+languageTable.languages[cvjs_currentLanguage].MeasurementModal.MeasureAgain+"\" onClick=\"cvjs_repeatMeasurementModal();\"><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td></tr><tr><td><div id=\"cvjs_measurementModalText\"><canvas id=\"dummy\" width=\"0\" height=\"20\"></canvas>"+languageTable.languages[cvjs_currentLanguage].MeasurementModal.Text+"</div></td></tr><tr><td>"
//										+"<input type=\"checkbox\" id=\"cvjs_measurearea_checkbox\" value=\"measurearea_status\">"
										+"<select id=\"cvjs_measurementOption\">"+selectString+"</select>"
										+"<canvas id=\"dummy\" width=\"30\" height=\"30\"></canvas></td><div id=\"measureareaLocation\">"+languageTable.languages[cvjs_currentLanguage].MeasurementModal.Area+"</div></td><td><input id=\"cvjs_closearea_button\" type=\"button\" name=\"bPrint\" value=\""+languageTable.languages[cvjs_currentLanguage].MeasurementModal.ClosePolygon+"\" onClick=\"cvjs_closeAreaMeasurement();\"></td></tr></table>";

		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div class=\"measurementModal\" id=\"measurementModal_"+floorplan_div+"\"></div>");
		jQuery("#measurementModal_"+floorplan_div).html(cvjs_measurementModal_content);

		// 3.1.21h
		jQuery("#cvjs_closearea_button").hide();
		
		// 6.1.27 
		//<select id=\"cvjs_paperSize\"><option value=\"1\">A4</option>
		// loop over options value / content
		// when printing pull the pulldown value instead of content
		var paperSizes = languageTable.languages[cvjs_currentLanguage].PrintModal.PaperSizeTotal;
		var selectString = "";
		for (k=0; k<paperSizes; k++){
			selectString = selectString + '<option value=\"'+languageTable.languages[cvjs_currentLanguage].PrintModal.PaperSizes.PaperSize[k]+'\">'+languageTable.languages[cvjs_currentLanguage].PrintModal.MenuItems.MenuItem[k]+'</option>';
		}

/*
		cvjs_PrintModal_PrintPDF = true;
		cvjs_PrintModal_PrintToScale = false;
		cvjs_customPrintCheckboxMode = false;
		cvjs_customPrintTextboxMode = false;
		cvjs_customPrintDualTextboxMode = false;
		cvjs_PrintModal_PrintResolution = false;
*/

//window.alert(cvjs_PrintModal_PrintPDF +"  "+ cvjs_PrintModal_PrintToScale  +"  "+  cvjs_customPrintCheckboxMode  +"  "+  cvjs_customPrintTextboxMode  +"  "+  cvjs_customPrintDualTextboxMode);

// 6.1.34
		cvjs_printModal_content ="<table class=\"printModalanguageTable\"><tr><td><div class=\"printModalHeader\"><a class=\"modalIconLogo\" href=\"https://cadviewer.com\"><img class=\"cvjs_img\" src=\""+cvjs_imagesLocation+"logoJS.png\" /></a><div class=\"modalHeaderText\"  id=\"cvjs_printHeader\">"+languageTable.languages[cvjs_currentLanguage].PrintModal.Header+"</div>"
		+"<input class=\"cvjs_new_header_button\" type=\"button\" value=\""+"&times;"+"\" onClick=\"cvjs_exitPrintModal(\'"+floorplan_div+"\',1);\">"
//		+"<button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_exitPrintModal(\'"+floorplan_div+"\' ,1);\">&times;<b class=\"top_bar_gray_underbar\">_</b></button>"
		+"</div></td></tr><tr><td><br><canvas id=\"dummy\" width=\"10\" height=\"25\"></canvas><font id=\"cvjs_printmodal_paper\">"+languageTable.languages[cvjs_currentLanguage].PrintModal.Paper+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><select id=\"cvjs_paperSize\">"+
		selectString +
		"</select><canvas id=\"dummy\" width=\"16\" height=\"10\"></canvas><font id=\"cvjs_printorientation_text\">"+languageTable.languages[cvjs_currentLanguage].PrintModal.Orientation+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><select id=\"cvjs_paperOrientation\"><option value=\"1\">Landscape</option><option value=\"2\">Portrait</option></select></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"25\"></canvas>"

		// 
		if (cvjs_PrintModal_PrintResolution){
			cvjs_printModal_content += "<font id=\"cvjs_print_modal_resolution\">"+languageTable.languages[cvjs_currentLanguage].PrintModal.Resolution+"</print><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"300\" id=\"cvjs_printResolution\" class=\"cvjs_inputCalibrateModal\"><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><i class=\"cvjs_textModalSmall\"><font id=\"cvjs_print_modal_resolution_text\">"+languageTable.languages[cvjs_currentLanguage].PrintModal.ResolutionText+"</font></i><canvas id=\"dummy\" width=\"32\" height=\"10\"></canvas>"
			+"<input id=\"cvjs_print_button\" type=\"button\" name=\"bPrint\" value=\""+languageTable.languages[cvjs_currentLanguage].PrintModal.Print+"\" onmousedown=\"cvjs_exitPrintModal(\'"+floorplan_div+"\', 2);\">"					
		}
		else {
			cvjs_printModal_content +="<canvas id=\"dummy\" width=\"350\" height=\"10\"></canvas>"
			+"<input id=\"cvjs_print_button\" type=\"button\" name=\"bPrint\" value=\""+languageTable.languages[cvjs_currentLanguage].PrintModal.Print+"\" onmousedown=\"cvjs_exitPrintModal(\'"+floorplan_div+"\', 2);\">"					
		}


		if (cvjs_PrintModal_PrintPDF && cvjs_PrintModal_printGreyScaleflag){
//			cvjs_printModal_content += "<canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td></tr><tr><td></td></tr></table><input type=\"checkbox\" id=\"cvjs_grayscale_checkbox\" value=\"grayscale_status\"><canvas id=\"dummy\" width=\"30\" height=\"30\"></canvas></td><div id=\"greyscaleLocation\">"+languageTable.languages[cvjs_currentLanguage].PrintModal.Grayscale+"</div>"+
// 6.2.33
			selectString = "<select id=\"cvjs_grayScaleType\"><option value=\"1\">"+languageTable.languages[cvjs_currentLanguage].PrintModal.Grayscale+"</option><option value=\"2\">"+languageTable.languages[cvjs_currentLanguage].PrintModal.BlackWhite+"</option></select>";
			cvjs_printModal_content += "<canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td></tr><tr><td></td></tr></table><input type=\"checkbox\" id=\"cvjs_grayscale_checkbox\" value=\"grayscale_status\"><canvas id=\"dummy\" width=\"30\" height=\"30\"></canvas></td><div id=\"greyscaleLocation\">"+selectString+"</div>"+
			"<input type=\"checkbox\" id=\"cvjs_printpdf_checkbox\" value=\"grayscale_status\"><div id=\"printToPdfLocation\">"+languageTable.languages[cvjs_currentLanguage].PrintModal.PrintPDF+"</div>";
		}

		if (!cvjs_PrintModal_PrintPDF && cvjs_PrintModal_printGreyScaleflag){
//			cvjs_printModal_content += "<canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td></tr><tr><td></td></tr></table><input type=\"checkbox\" id=\"cvjs_grayscale_checkbox\" value=\"grayscale_status\"><canvas id=\"dummy\" width=\"30\" height=\"30\"></canvas></td><div id=\"greyscaleLocation\">"+languageTable.languages[cvjs_currentLanguage].PrintModal.Grayscale+"</div>"+
// 6.2.33
			selectString = "<select id=\"cvjs_grayScaleType\"><option value=\"1\">"+languageTable.languages[cvjs_currentLanguage].PrintModal.Grayscale+"</option><option value=\"2\">"+languageTable.languages[cvjs_currentLanguage].PrintModal.BlackWhite+"</option></select>";
			cvjs_printModal_content += "<canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td></tr><tr><td></td></tr></table><input type=\"checkbox\" id=\"cvjs_grayscale_checkbox\" value=\"grayscale_status\"><canvas id=\"dummy\" width=\"30\" height=\"30\"></canvas></td><div id=\"greyscaleLocation\">"+selectString+"</div>"+
			"</div>";
		}



		if (cvjs_PrintModal_PrintToScale){		
			cvjs_printModal_content += "<input type=\"checkbox\" id=\"cvjs_printtoscale_checkbox\" value=\"printtoscale_status\"><div id=\"printToScaleLocation\">"+languageTable.languages[cvjs_currentLanguage].PrintModal.PrintToScale+"</div><div id=\"enterPrintToScaleValueLocation\">"+languageTable.languages[cvjs_currentLanguage].PrintModal.EnterScale+"</div><input value=\"1:1\" id=\"cvjs_printToScaleValue\" class=\"cvjs_inputCalibrateModal\">";
		}


		if (cvjs_customPrintCheckboxMode){			
			cvjs_printModal_content += "<input type=\"checkbox\" id=\"cvjs_custom_checkbox\" value=\"grayscale_status\"><div id=\"printCustomCheckbox\">"+languageTable.languages[cvjs_currentLanguage].PrintModal.CustomCheckbox+"</div>";			
		}

		// 6.1.60
		cvjs_initCustomPrintCheckboxMode = false;


		if (cvjs_customPrintTextboxMode){
			// change the size of the modal
			// add the Redline Text Box + Font Size
			if (cvjs_customPrintDualTextboxMode){
//				cvjs_printModal_content += "<div id=\""+"cvjs_printModalTextboxLocation"+"\"><textarea class=\"cvjs_redlines_edit_text_1\" id=\"printmodal_text\" cols=\"35\" rows=\"2\"></textarea></div>";

				cvjs_printModal_content += "<div id=\"cvjs_printModalTextboxLocation_text\">"+languageTable.languages[cvjs_currentLanguage].PrintModal.TextBox1Header+"</div>";
				cvjs_printModal_content += "<div id=\"cvjs_printModalDualTextboxLocation_text\">"+languageTable.languages[cvjs_currentLanguage].PrintModal.TextBox2Header+"</div>";

				cvjs_printModal_content += "<div id=\""+"cvjs_printModalTextboxLocation"+"\"><textarea class=\"cvjs_redlines_edit_text_1\" id=\"printmodal_text\" cols=\"35\" rows=\"3\"></textarea></div>";
				cvjs_printModal_content += "<div id=\""+"cvjs_printModalDualTextboxLocation"+"\"><textarea class=\"cvjs_redlines_edit_text_1\" id=\"printmodal_dual_text\" cols=\"10\" rows=\"3\"></textarea></div>";
				jQuery("#cvjs_printModalTextboxLocation").hide();
				jQuery("#cvjs_printModalDualTextboxLocation").hide();


			}
			else{
				cvjs_printModal_content += "<div id=\""+"cvjs_printModalTextModalFont"+"\">"+languageTable.languages[cvjs_currentLanguage].RedlineTextModal.FontSize+"</div><div id=\"cvjs_inputPrintTextModal\"><input value=\"10\" id=\"cvjs_printTextboxFontSizeInput_"+floorplan_div+"\" class=\"cvjs_inputRedlineTextModal\"><canvas id=\"dummy\" width=\"70\" height=\"5\"></div>";
				cvjs_printModal_content += "<div id=\""+"cvjs_printModalTextboxLocation"+"\"><textarea class=\"cvjs_redlines_edit_text_1\" id=\"printmodal_text\" cols=\"35\" rows=\"3\"></textarea></div>";
				cvjs_printModal_content += "<div id=\"cvjs_printModalTextboxVariablesLocation\"><canvas id=\"dummy\" width=\"1\" height=\"10\"></canvas>"+languageTable.languages[cvjs_currentLanguage].PrintModal.JsonVariable+"<br><canvas id=\"dummy\" width=\"1\" height=\"16\"></canvas><select id=\"cvjs_SelectVariablesTextBox\"><option value=\"1\">"+"variable1"+"</option><option value=\"2\">variable2</option><option value=\"3\">variable3</option></select><div>"
			}
			// only at print time, is the textbox content used to call a JSON method
		}


		// For CADViewer Pro and CADViewer Enterprise functionality
		if (!cvjs_Community_Version) cvjs_initCADViewerPro_Section03(floorplan_div);

		var printModalClass = "printModal";
		
		if (cvjs_customPrintCheckboxMode || cvjs_customPrintTextboxMode)   // cvjs_customPrintTextboxMode
			printModalClass = "printModalTextbox" 
		
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div class=\""+printModalClass+"\" id=\"printModal_"+floorplan_div+"\"></div>");
		jQuery("#printModal_"+floorplan_div).html(cvjs_printModal_content);
		
		// 6.1.29		
		if (!cvjs_PrintModal_PrintToScale){  // reduce modal size if no print to scale
			var modalheight = jQuery('.'+printModalClass).css('height');
			modalheight = modalheight.substring(0, modalheight.indexOf("px"));
			var newheight = parseInt(modalheight) - 25;
			jQuery('.'+printModalClass).css('height', newheight+"px");
	    }


		if (!cvjs_PrintModal_PrintResolution ){  // reduce modal height if no resolution
			var modalheight = jQuery('.'+printModalClass).css('height');
			modalheight = modalheight.substring(0, modalheight.indexOf("px"));
			var newheight = parseInt(modalheight) - 25;
			jQuery('.'+printModalClass).css('height', newheight+"px");
	    }

// 6.1.34
		if (!cvjs_PrintModal_PrintResolution){  // move buttons 25 pixels up
			
			jQuery('#greyscaleLocation').css('top', "65px");
			jQuery('#printToPdfLocation').css('top', "65px");
			jQuery('#cvjs_grayscale_checkbox').css('top', "65px");
			jQuery('#cvjs_printpdf_checkbox').css('top', "65px");			
			// if no print resolution, then move up
			
			if (cvjs_customPrintTextboxMode){
				if (cvjs_customPrintDualTextboxMode){
					if (cvjs_PrintModal_PrintToScale){
						jQuery('#cvjs_printModalTextboxLocation').css('top', "139x");			
						jQuery('#cvjs_printModalDualTextboxLocation').css('top', "139px");			
					}
					else{
						jQuery('#cvjs_printModalTextboxLocation').css('top', "114x");			
						jQuery('#cvjs_printModalDualTextboxLocation').css('top', "114px");			
					}
				}
				else{
					if (cvjs_PrintModal_PrintToScale){					
						jQuery('#cvjs_printModalTextModalFont').css('top', "120px");			
						jQuery('#cvjs_printModalTextboxLocation').css('top', "120px");			
						jQuery('#cvjs_printModalTextboxVariablesLocation').css('top', "143px");								
					}
					else{
						jQuery('#cvjs_printModalTextModalFont').css('top', "95px");			
						jQuery('#cvjs_printModalTextboxLocation').css('top', "95px");			
						jQuery('#cvjs_printModalTextboxVariablesLocation').css('top', "118px");								
						
					}
				}
		
			}

			if (cvjs_PrintModal_PrintToScale){
				jQuery('#cvjs_printtoscale_checkbox').css('top', "95px");			
				jQuery('#printToScaleLocation').css('top', "95px");			
				jQuery('#enterPrintToScaleValueLocation').css('top', "95px");								
				jQuery('#cvjs_printToScaleValue').css('top', "95px");													
			}
		}

// 6.1.34
		if (cvjs_PrintModal_PrintToScale){
			jQuery('#cvjs_custom_checkbox').css('top', "105px");			
			jQuery('#printCustomCheckbox').css('top', "105px");			
		}

// 6.2.54   6.2.56
/*
			<InitSpaceObjects>
				<ModalPoly>Space Objects - Polygon</ModalPoly>
				<ModalRect>Space Objects - Rectangle</ModalRect>
				<ModalCircle>Space Objects - Rectangle</ModalCircle>
				<Layer>Layer:</Layer>
				<SpaceId>Space ID:</SpaceId>
				<Create>Create</Create>
			</InitSpaceObjects>			
*/

		cvjs_spaceobjectsChangeSettingsModal_content = "<table class=\"textsearchModalanguageTable\" ><tr><td><div class=\"textSearchHeader\"><a class=\"modalIconLogo\" href=\"https://cadviewer.com\"><img class=\"cvjs_img\" src=\""+cvjs_imagesLocation+"logoJS.png\" /></a><div class=\"modalHeaderText\"  id=\"cvjs_spaceobjectchangesettingsTextHeader\">"+languageTable.languages[cvjs_currentLanguage].InitSpaceObjects.ModalModify+"</div>"
		+"<input class=\"cvjs_new_header_button\" type=\"button\" value=\""+"&times;"+"\" onClick=\"cvjs_exitSpaceObjectsChangeSettingsModal(\'"+floorplan_div+"\');\">"
		+"</div></td></tr><tr><td><br><canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas><font id=\"cvjs_spaceobjectchangesettingsTextLayer\">"+languageTable.languages[cvjs_currentLanguage].InitSpaceObjects.Layer+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\""+cvjs_currentNode_layer+"\" id=\"cvjs_spaceobjectchangeLayerFromModal\" class=\"cvjs_inputTextSearchModalwide\"></td></tr>"
		+"<tr><td><canvas id=\"dummy\" width=\"10\" height=\"22\"></canvas><font id=\"cvjs_spaceobjectchangesettingsTextSpaceId\">"+languageTable.languages[cvjs_currentLanguage].InitSpaceObjects.SpaceId+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"myNodeId\" id=\"cvjs_spaceobjectchangeIdFromModal\" class=\"cvjs_inputTextSearchModal\">"
		+"<canvas id=\"dummy\" width=\"10\" height=\"22\"></canvas><font id=\"cvjs_spaceobjectchangesettingsTextType\">"+languageTable.languages[cvjs_currentLanguage].InitSpaceObjects.Type+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"myType\" id=\"cvjs_spaceobjectchangeTypeFromModal\" class=\"cvjs_inputTextSearchModal\"></td></tr>"
		+"<tr><td>"
		+"<canvas id=\"dummy\" width=\"5\" height=\"10\"></canvas></canvas><b class=\"cvjs_textModalSmall\"></b><canvas id=\"dummy\" width=\"30\" height=\"10\"></canvas><input id=\"cvjs_spaceobjectchangesettingsUnlink\" type=\"button\" name=\"bPrint\" value=\""+languageTable.languages[cvjs_currentLanguage].InitSpaceObjects.Unlink+"\" onClick=\"cvjs_unlinkChangeSpaceObjects();\"><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas>"
		+"<canvas id=\"dummy\" width=\"5\" height=\"10\"></canvas></canvas><b class=\"cvjs_textModalSmall\"></b><canvas id=\"dummy\" width=\"30\" height=\"10\"></canvas><input id=\"cvjs_spaceobjectchangesettingsUpdate\" type=\"button\" name=\"bPrint\" value=\""+languageTable.languages[cvjs_currentLanguage].InitSpaceObjects.Update+"\" onClick=\"cvjs_updateChangeSpaceObjects();\"><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas>"
		+"</td></tr><tr><td><b id=\"cvjs_spaceobjectchangesettingsExplanation\" class=\"cvjs_changespaceModalSmall\">"+languageTable.languages[cvjs_currentLanguage].InitSpaceObjects.Explanation+"</b></td></tr>"
		+"</table>"
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div class=\"spaceobjectchangeModal\" id=\"spaceobjectsChangeSettingsModal_"+floorplan_div+"\"></div>");
		jQuery("#spaceobjectsChangeSettingsModal_"+floorplan_div).html(cvjs_spaceobjectsChangeSettingsModal_content);



		cvjs_spaceobjectsInitSettingsModal_content = "<table class=\"textsearchModalanguageTable\" ><tr><td><div class=\"textSearchHeader\"><a class=\"modalIconLogo\" href=\"https://cadviewer.com\"><img class=\"cvjs_img\" src=\""+cvjs_imagesLocation+"logoJS.png\" /></a><div class=\"modalHeaderText\"  id=\"cvjs_spaceobjectsettingsTextHeader\">"+languageTable.languages[cvjs_currentLanguage].InitSpaceObjects.ModalPoly+"</div>"
		+"<input class=\"cvjs_new_header_button\" type=\"button\" value=\""+"&times;"+"\" onClick=\"cvjs_exitSpaceObjectsInitSettingsModal(\'"+floorplan_div+"\');\">"
		+"</div></td></tr><tr><td><br><canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas><font id=\"cvjs_spaceobjectsettingsTextLayer\">"+languageTable.languages[cvjs_currentLanguage].InitSpaceObjects.Layer+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\""+cvjs_currentNode_layer+"\" id=\"cvjs_spaceobjectLayerFromModal\" class=\"cvjs_inputTextSearchModalwide\"></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"22\"></canvas><font id=\"cvjs_spaceobjectsettingsTextSpaceId\">"+languageTable.languages[cvjs_currentLanguage].InitSpaceObjects.SpaceId+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"myNodeId\" id=\"cvjs_spaceobjectIdFromModal\" class=\"cvjs_inputTextSearchModal\"><canvas id=\"dummy\" width=\"5\" height=\"10\"></canvas></canvas><b class=\"cvjs_textModalSmall\"></b><canvas id=\"dummy\" width=\"30\" height=\"10\"></canvas><input id=\"cvjs_spaceobjectsettingsTextCreate\" type=\"button\" name=\"bPrint\" value=\""+languageTable.languages[cvjs_currentLanguage].InitSpaceObjects.Create+"\" onClick=\"cvjs_continueCreateSpaceObjects();\"><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td></tr></table>"
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div class=\"textsearchModal\" id=\"spaceobjectsInitSettingsModal_"+floorplan_div+"\"></div>");
		jQuery("#spaceobjectsInitSettingsModal_"+floorplan_div).html(cvjs_spaceobjectsInitSettingsModal_content);



		cvjs_textSearchModal_content = "<table class=\"textsearchModalanguageTable\" ><tr><td><div class=\"textSearchHeader\"><a class=\"modalIconLogo\" href=\"https://cadviewer.com\"><img class=\"cvjs_img\" src=\""+cvjs_imagesLocation+"logoJS.png\" /></a><div class=\"modalHeaderText\"  id=\"cvjs_searchTextHeader\">"+languageTable.languages[cvjs_currentLanguage].SearchTextModal.Header+"</div>"
		+"<input class=\"cvjs_new_header_button\" type=\"button\" value=\""+"&times;"+"\" onClick=\"cvjs_exit_textsearchmodal(\'"+floorplan_div+"\');\">"
//		+"<button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_exit_textsearchmodal(\'"+floorplan_div+"\');\">&times;<b class=\"top_bar_gray_underbar\">_</b></button>"
		+"</div></td></tr><tr><td><br><canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas><font id=\"cvjs_search_text_searchtext\">"+languageTable.languages[cvjs_currentLanguage].SearchTextModal.SearchText+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"\" id=\"cvjs_searchTextFromModal\" class=\"cvjs_inputTextSearchModalwide\"></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"22\"></canvas><font id=\"cvje_search_text_zoom\">"+languageTable.languages[cvjs_currentLanguage].SearchTextModal.Zoom+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"1000\" id=\"cvjs_percentageLevelFromModal\" class=\"cvjs_inputTextSearchModal\"><canvas id=\"dummy\" width=\"5\" height=\"10\"></canvas></canvas><b class=\"cvjs_textModalSmall\">(%)</b><canvas id=\"dummy\" width=\"30\" height=\"10\"></canvas><input id=\"cvjs_textsearch_button\" type=\"button\" name=\"bPrint\" value=\""+languageTable.languages[cvjs_currentLanguage].SearchTextModal.Search+"\" onClick=\"cvjs_startSearchText();\"><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td></tr></table>"
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div class=\"textsearchModal\" id=\"textsearchModal_"+floorplan_div+"\"></div>");
		jQuery("#textsearchModal_"+floorplan_div).html(cvjs_textSearchModal_content);
		
	
		cvjs_customSearchModal_content = "<table class=\"textsearchModalanguageTable\" ><tr><td><div class=\"textSearchHeader\"><a class=\"modalIconLogo\" href=\"https://cadviewer.com\"><img class=\"cvjs_img\" src=\""+cvjs_imagesLocation+"logoJS.png\" /></a><div class=\"modalHeaderText\"  id=\"cvjs_searchTextHeader\">"+languageTable.languages[cvjs_currentLanguage].SearchCustomModal.Header+"</div>"
		+"<input class=\"cvjs_new_header_button\" type=\"button\" value=\""+"&times;"+"\" onClick=\"cvjs_exit_customsearchmodal(\'"+floorplan_div+"\');\">"
//		+"<button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_exit_customsearchmodal(\'"+floorplan_div+"\');\">&times;<b class=\"top_bar_gray_underbar\">_</b></button>"
		+"</div></td></tr><tr><td><br><canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas><font id=\"cvjs_search_text_searchtext2\">"+languageTable.languages[cvjs_currentLanguage].SearchCustomModal.SearchText+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"\" id=\"cvjs_customSearchTestFromModal\" class=\"cvjs_inputTextSearchModalwide\"></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"22\"></canvas><canvas id=\"dummy\" width=\"230\" height=\"10\"></canvas><canvas id=\"dummy\" width=\"5\" height=\"10\"></canvas></canvas><canvas id=\"dummy\" width=\"30\" height=\"10\"></canvas><input id=\"cvjs_textsearch_button\" type=\"button\" name=\"bPrint\" value=\""+languageTable.languages[cvjs_currentLanguage].SearchTextModal.Search+"\" onClick=\"cvjs_startCustomSearchText();\"><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td></tr></table>"
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div class=\"textsearchModal\" id=\"customsearchModal_"+floorplan_div+"\"></div>");
		jQuery("#customsearchModal_"+floorplan_div).html(cvjs_customSearchModal_content);
		jQuery("#customsearchModal_"+floorplan_div).hide();


		cvjs_infoMessageModal_content = "<div class=\"modal-dialog modal-dialog-md\"><div class=\"info_messageModalWrapper\"><table><tr><td><div id=\"infoModalHeader\"><a class=\"modalIconLogo\" href=\"https://cadviewer.com\"><img class=\"cvjs_img\" src=\""+cvjs_imagesLocation+"logoJS.png\" /></a><div class=\"modalHeaderText\"  id=\"cvjs_infoMessageHeader\">"+languageTable.languages[cvjs_currentLanguage].InfoMessageModal.Header+"</div>"
		+"<input class=\"cvjs_new_header_button\" type=\"button\" value=\""+"&times;"+"\" onClick=\"cvjs_exit_informationmodal(\'"+floorplan_div+"\');\">"
//		+"<button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_exit_informationmodal(\'"+floorplan_div+"\');\">&times;<b class=\"top_bar_gray_underbar\">_</b></button>"
		+"</div></td></tr><tr><td><br><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><div id=\"cvjs_informationModalText\">Text here</div></td></tr></table></div></div>"
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div class=\"info_messageModal\" id=\"info_messageModal_"+floorplan_div+"\" class=\"modal fade\"></div>");
		jQuery("#info_messageModal_"+floorplan_div).html(cvjs_infoMessageModal_content);


		cvjs_infoMessageModal_content = "<table class=\"info_messageModal_2Table\"><tr><td><div class=\"infoModalHeader\"><a class=\"modalIconLogo\" href=\"https://cadviewer.com\"><img class=\"cvjs_img\" src=\""+cvjs_imagesLocation+"logoJS.png\" /></a><div class=\"modalHeaderText\"  id=\"cvjs_infoMessageHeader2\">"+languageTable.languages[cvjs_currentLanguage].InfoMessageModal.Header2+"</div>"
		+"<input class=\"cvjs_new_header_button\" type=\"button\" value=\""+"&times;"+"\" onClick=\"cvjs_exit_informationmodal_2(\'"+floorplan_div+"\');\">"
//		+"<button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_exit_informationmodal_2(\'"+floorplan_div+"\');\">&times;<b class=\"top_bar_gray_underbar\">_</b></button>"
		+"</div></td></tr><tr><td><div class=\"cvjs_informationModalText_2_div\"   id=\"cvjs_informationModalText_2_"+floorplan_div+"\"> Text here</div></td></tr></table>"
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div class=\"info_messageModal_2\" id=\"info_messageModal_2_"+floorplan_div+"\"></div>");
		jQuery("#info_messageModal_2_"+floorplan_div).html(cvjs_infoMessageModal_content);
		
		cvjs_documentPageChangeModal_content = "<table class=\"documentPageChangeModalanguageTable\"><tr><td><div class=\"thicknessHeader\"><a class=\"modalIconLogo\" href=\"https://cadviewer.com\"><img class=\"cvjs_img\" src=\""+cvjs_imagesLocation+"logoJS.png\" /></a><div class=\"modalHeaderText\"  id=\"cvjs_documentChangeModalHeader\">"+languageTable.languages[cvjs_currentLanguage].DocumentPageChangeModal.Header+"</div>"
		+"<input class=\"cvjs_new_header_button\" type=\"button\" value=\""+"&times;"+"\" onClick=\"cvjs_exit_documentpagechangemodal(\'"+floorplan_div+"\');\">"
//		+"<button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_exit_documentpagechangemodal(\'"+floorplan_div+"\');\">&times;<b class=\"top_bar_gray_underbar\">_</b></button>"
		+"</div></td></tr><tr><td><br><canvas id=\"dummy\" width=\"10\" height=\"24\"></canvas><font id=\"cvjs_documentPageChangeModal_changetext\">"+languageTable.languages[cvjs_currentLanguage].DocumentPageChangeModal.Page+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"1\" id=\"cvjs_inputDocumentPageChange_"+floorplan_div+"\" class=\"cvjs_inputDocumentPageChangeModal\"><canvas id=\"dummy\" width=\"70\" height=\"5\"></canvas><input id=\"cvjs_documentPageChangeModal_button\" type=\"button\" name=\"bPrint\" value=\""+languageTable.languages[cvjs_currentLanguage].DocumentPageChangeModal.OK+"\" onClick=\"cvjs_changePageByNumberViaButton(\'"+floorplan_div+"\');\"><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td></tr></table>";
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div class=\"documentPageChangeModal\" id=\"documentPageChangeModal_"+floorplan_div+"\"></div>");
		jQuery("#documentPageChangeModal_"+floorplan_div).html(cvjs_documentPageChangeModal_content);

		cvjs_publishPDFModal_content = "<table class=\"publishPDFModalanguageTable\"><tr><td><div class=\"publishPDFModalHeader\" id=\"publishPDFModalHeader\"><a class=\"modalIconLogo\" href=\"https://cadviewer.com\"><img class=\"cvjs_img\" src=\""+cvjs_imagesLocation+"logoJS.png\" /></a><div class=\"modalHeaderText\"  id=\"cvjs_publishPDFHeader\">"+languageTable.languages[cvjs_currentLanguage].PublishPDFModal.Header+"</div>"
		+"<input class=\"cvjs_new_header_button\" type=\"button\" value=\""+"&times;"+"\" onClick=\"cvjs_publishPDF_modal_hide(\'"+floorplan_div+"\');\">"
//		+"<button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_publishPDF_modal_hide(\'"+floorplan_div+"\');\">&times;<b class=\"top_bar_gray_underbar\">_</b></button>"
		+"</div></td></tr><tr><td><br><br><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><font id=\"cvjs_publish_pdf_selectmode\">"+languageTable.languages[cvjs_currentLanguage].PublishPDFModal.SelectMode+"</font><canvas id=\"dummy\" width=\"20\" height=\"10\"></canvas><input class=\"radioPublishPDF1\" id=\"radioPublishAsPDF1_"+floorplan_div+"\" type=\"radio\" name=\"radioColor\" value=\"1\" checked=\"checked\"><label id=\"cvjs_publishpdfmode1\" for=\"radio1\">"+languageTable.languages[cvjs_currentLanguage].PublishPDFModal.Mode1+"</label><canvas id=\"dummy\" width=\"26\" height=\"10\"></canvas><input class=\"radioPublishPDF2\" id=\"radioPublishAsPDF2_"+floorplan_div+"\" type=\"radio\" name=\"radioColor\" value=\"2\"><label id=\"cvjs_publishpdfmode2\" for=\"radio2\">"+languageTable.languages[cvjs_currentLanguage].PublishPDFModal.Mode2+"</label><canvas id=\"dummy\" width=\"303\" height=\"10\"></canvas><input class=\"radioPublishPDF3\" id=\"radioPublishAsPDF3_"+floorplan_div+"\" type=\"radio\" name=\"radioColor\" value=\"3\"><label id=\"cvjs_publishpdfmode3\" for=\"radio3\">"+languageTable.languages[cvjs_currentLanguage].PublishPDFModal.Mode3+"</label></td></tr><tr id=\"publishPDFModal_row2_"+floorplan_div+"\" ><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><font id=\"cvjs_entiredoc_checkbox_text\">"+languageTable.languages[cvjs_currentLanguage].PublishPDFModal.EntireDoc+"</font><input type=\"checkbox\" id=\"cvjs_entiredoc_checkbox\" value=\"grayscale_status\"></td></tr> <tr id=\"publishPDFModal_row3_"+floorplan_div+"\" ><td></td></tr> <tr class=\"publishPDFModal_row4\" id=\"publishPDFModal_row4_"+floorplan_div+"\" ><td><table id=\"enter_email_content_table\">         <tr><td><canvas id=\"dummy\" width=\"10\" height=\"20\"></canvas><font id=\"cvjs_entiredoc_checkbox_text_recep\">"+languageTable.languages[cvjs_currentLanguage].PublishPDFModal.Recipient+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"email\" id=\"cvjs_publishPDFemailrecipient_"+floorplan_div+"\" class=\"cvjs_publishPDFemailrecipient\"></td></tr>        <tr><td><canvas id=\"dummy\" width=\"10\" height=\"20\"></canvas><font id=\"cvjs_entiredoc_checkbox_title\">"+languageTable.languages[cvjs_currentLanguage].PublishPDFModal.Title+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"title\" id=\"cvjs_publishPDFemailtitle_"+floorplan_div+"\" class=\"cvjs_publishPDFemailtitle\"></td></tr>                <tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas>    <table><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><font id=\"cvjs_entiredoc_checkbox_message\">"+languageTable.languages[cvjs_currentLanguage].PublishPDFModal.Message+"</font></td></tr><tr><td></td></tr></table>    <textarea class=\"cvjs_pdfmail_edit_text_1\" id=\"pdfmail_text\" cols=\"43\" rows=\"3\"></textarea></td></tr>                         </table></td></tr> <tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input id=\"cvjs_publish_redline_to_pdf_button\" type=\"button\" name=\"bPrint\" value=\""+languageTable.languages[cvjs_currentLanguage].PublishPDFModal.OK+"\" onClick=\"cvjs_publishPDFViaButton(\'"+floorplan_div+"\');\"><canvas id=\"dummy\" width=\"10\" height=\"10\"></td></tr><tr></tr></table>";
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div  class=\"publishPDFModal\"  id=\"publishPDFModal_"+floorplan_div+"\"></div>");
		jQuery("#publishPDFModal_"+floorplan_div).html(cvjs_publishPDFModal_content);
		
		
		cvjs_backgroundColorModal_content = "<table class=\"backgroundModalanguageTable\"><tr><td><div class=\"backgroundModalHeader\"><a class=\"modalIconLogo\" href=\"https://cadviewer.com\"><img class=\"cvjs_img\" src=\""+cvjs_imagesLocation+"logoJS.png\" /></a><div class=\"modalHeaderText\"  id=\"cvjs_backgroundColorHeader\">"+languageTable.languages[cvjs_currentLanguage].BackgroundColorModal.Header+"</div>"
		+"<input class=\"cvjs_new_header_button\" type=\"button\" value=\""+"&times;"+"\" onClick=\"cvjs_exit_backgroundColor(\'"+floorplan_div+"\');\">"
//		+"<button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_exit_backgroundColor(\'"+floorplan_div+"\');\">&times;<b class=\"top_bar_gray_underbar\">_</b></button>"
		+"</div></td></tr><tr><td><br><canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas><font id=\"cvjs_background_color_pickcolor\">"+languageTable.languages[cvjs_currentLanguage].BackgroundColorModal.PickColor+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input id=\"cvjs_backgroundPickerValue\" value=\"FFFFFF\" class=\"cvjs_inputBackgroundColorModal jscolor {width:101, padding:10, shadow:false, borderWidth:0, backgroundColor:\'transparent\', insetColor:\'#000\',closable:true, closeText:'Close Color Picker!', onFineChange:\'cvjs_setBackgroundColorHex(this)\'}\"><canvas id=\"dummy\" width=\"20\" height=\"10\"></canvas><font id=\"cvjs_background_color_selectcolor\">"+languageTable.languages[cvjs_currentLanguage].BackgroundColorModal.SelectColor+"</font><canvas id=\"dummy\" width=\"20\" height=\"10\"></canvas><input class=\"radioColor1_background\" id=\"radioColor1_background_"+floorplan_div+"\" type=\"radio\" name=\"radioColor\" value=\"1\" checked=\"checked\"><img id=\"cvjs_radioColor1_img_background\" src=\""+cvjs_imagesLocation+"white_color.png\" border=\"1\"/><label id=\"cvjs_radio1\" for=\"radio1\"><font id=\"cvjs_radio1_text\">"+languageTable.languages[cvjs_currentLanguage].BackgroundColorModal.White+"</font></label><canvas id=\"dummy\" width=\"26\" height=\"10\"></canvas><input class=\"radioColor2_background\"  id=\"radioColor2_background_"+floorplan_div+"\" type=\"radio\" name=\"radioColor\" value=\"2\"><img id=\"cvjs_radioColor2_img_background\" src=\""+cvjs_imagesLocation+"black_color.png\" border=\"1\"/><label id=\"cvjs_radio2\" for=\"radio2\"><font id=\"cvjs_radio2_text\">"+languageTable.languages[cvjs_currentLanguage].BackgroundColorModal.Black+"</font></label></td></tr><tr><td><canvas id=\"dummy\" width=\"303\" height=\"10\"></canvas><input class=\"radioColor3_background\"  id=\"radioColor3_background_"+floorplan_div+"\" type=\"radio\" name=\"radioColor\" value=\"3\"><img id=\"cvjs_radioColor3_img_background\" src=\""+cvjs_imagesLocation+"azure_color.png\" border=\"1\"/><label id=\"cvjs_radio3\" for=\"radio3\"><font id=\"cvjs_radio3_text\">"+languageTable.languages[cvjs_currentLanguage].BackgroundColorModal.Azure+"</font></label><canvas id=\"dummy\" width=\"24\" height=\"10\"></canvas><input class=\"radioColor4_background\"  id=\"radioColor4_background_"+floorplan_div+"\" type=\"radio\" name=\"radioColor\" value=\"4\"><img id=\"cvjs_radioColor4_img_background\" src=\""+cvjs_imagesLocation+"pink_color.png\" border=\"1\"/><label id=\"cvjs_radio4\" for=\"radio4\"><font id=\"cvjs_radio4_text\">"+languageTable.languages[cvjs_currentLanguage].BackgroundColorModal.Pink+"</font></label></td></tr><tr><td><canvas id=\"dummy\" width=\"303\" height=\"10\"></canvas><input class=\"radioColor5_background\"  id=\"radioColor5_background_"+floorplan_div+"\" type=\"radio\" name=\"radioColor\" value=\"5\"><img id=\"cvjs_radioColor5_img_background\" src=\""+cvjs_imagesLocation+"snow_color.png\" border=\"1\"/><label id=\"cvjs_radio5\" for=\"radio5\"><font id=\"cvjs_radio5_text\">"+languageTable.languages[cvjs_currentLanguage].BackgroundColorModal.Snow+"</font></label><canvas id=\"dummy\" width=\"26\" height=\"10\"></canvas><input class=\"radioColor6_background\"  id=\"radioColor6_background_"+floorplan_div+"\" type=\"radio\" name=\"radioColor\" value=\"6\"><img id=\"cvjs_radioColor6_img_background\" src=\""+cvjs_imagesLocation+"silver_color.png\" border=\"1\"/><label id=\"cvjs_radio6\" for=\"radio6\"><font id=\"cvjs_radio6_text\">"+languageTable.languages[cvjs_currentLanguage].BackgroundColorModal.Silver+"</font></label></td></tr><tr><td><canvas id=\"dummy\" width=\"303\" height=\"10\"></canvas><input class=\"radioColor7_background\"  id=\"radioColor7_background_"+floorplan_div+"\" type=\"radio\" name=\"radioColor\" value=\"7\"><img id=\"cvjs_radioColor7_img_background\" src=\""+cvjs_imagesLocation+"gray_color.png\" border=\"1\"/><label id=\"cvjs_radio7\" for=\"radio7\"><font id=\"cvjs_radio7_text\">"+languageTable.languages[cvjs_currentLanguage].BackgroundColorModal.Gray+"</font></label><canvas id=\"dummy\" width=\"29\" height=\"10\"></canvas><input class=\"radioColor8_background\"  id=\"radioColor8_background_"+floorplan_div+"\" type=\"radio\" name=\"radioColor\" value=\"8\"><img id=\"cvjs_radioColor8_img_background\" src=\""+cvjs_imagesLocation+"brown_color.png\" border=\"1\"/><label id=\"cvjs_radio8\" for=\"radio8\"><font id=\"cvjs_radio8_text\">"+languageTable.languages[cvjs_currentLanguage].BackgroundColorModal.Brown+"</font></label> </td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input id=\"cvjs_backgroundcolor_button\" type=\"button\" name=\"bPrint\" value=\""+languageTable.languages[cvjs_currentLanguage].BackgroundColorModal.OK+"\" onClick=\"cvjs_setBackgroundColorViaButton(\'"+floorplan_div+"\');\"><canvas id=\"dummy\" width=\"10\" height=\"10\"></td></tr></table>";
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div class=\"backgroundModal\" id=\"backgroundModal_"+floorplan_div+"\"></div>");
		jQuery("#backgroundModal_"+floorplan_div).html(cvjs_backgroundColorModal_content);
											
		
		// changed to a selection of 8 colors controlled externally
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div id=\"genericColorModal_"+floorplan_div+"\"><table><tr><td><div id=\"genericColorModalHeader\"><a class=\"modalIconLogo\" href=\"https://cadviewer.com\"><img class=\"cvjs_img\" src=\""+cvjs_imagesLocation+"logoJS.png\" /></a><b id=\"cvjs_textSearchHeader\">Select Color</b>"
		+"<input class=\"cvjs_new_header_button\" type=\"button\" value=\""+"&times;"+"\" onClick=\"jQuery('#genericColorModal').hide();\">"
//		+"<button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"jQuery('#genericColorModal').hide();\">&times;<b class=\"top_bar_gray_underbar\">_</b></button>"
		+"</div></td></tr><tr><td><br><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas>Select Color:<canvas id=\"dummy\" width=\"30\" height=\"10\"></canvas><input id=\"radioColor1_generic\" type=\"radio\" name=\"radioColor\" value=\"1\" checked=\"checked\"><img id=\"cvjs_radioColor1_img_generic\" src=\""+cvjs_imagesLocation+"blue_color.png\" border=\"1\"/><label id=\"cvjs_radio1_generic\" for=\"radio1\">Blue</label><canvas id=\"dummy\" width=\"26\" height=\"10\"></canvas><input id=\"radioColor2_generic\" type=\"radio\" name=\"radioColor\" value=\"2\"><img id=\"cvjs_radioColor2_img_generic\" src=\""+cvjs_imagesLocation+"red_color.png\" border=\"1\"/><label id=\"cvjs_radio2_generic\" for=\"radio2\">Red</label><canvas id=\"dummy\" width=\"60\" height=\"10\"></canvas><input id=\"cvjs_genericcolor_button\" type=\"button\" name=\"bPrint\" value=\"OK\" onClick=\"cvjs_setGenericColorViaButton();\"><canvas id=\"dummy\" width=\"10\" height=\"10\"></td></tr><tr><td><canvas id=\"dummy\" width=\"121\" height=\"10\"></canvas><input id=\"radioColor3_generic\" type=\"radio\" name=\"radioColor\" value=\"3\"><img id=\"cvjs_radioColor3_img_generic\" src=\""+cvjs_imagesLocation+"orange_color.png\" border=\"1\"/><label id=\"cvjs_radio3_generic\" for=\"radio3\">Orange</label><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input id=\"radioColor4_generic\" type=\"radio\" name=\"radioColor\" value=\"4\"><img id=\"cvjs_radioColor4_img_generic\" src=\""+cvjs_imagesLocation+"yellow_color.png\" border=\"1\"/><label id=\"cvjs_radio4_generic\" for=\"radio4\">Yellow</label></td></tr><tr><td><canvas id=\"dummy\" width=\"121\" height=\"10\"></canvas><input id=\"radioColor5_generic\" type=\"radio\" name=\"radioColor\" value=\"5\"><img id=\"cvjs_radioColor5_img_generic\" src=\""+cvjs_imagesLocation+"green_color.png\" border=\"1\"/><label id=\"cvjs_radio5_generic\" for=\"radio5\">Green</label><canvas id=\"dummy\" width=\"17\" height=\"10\"></canvas><input id=\"radioColor6_generic\" type=\"radio\" name=\"radioColor\" value=\"6\"><img id=\"cvjs_radioColor6_img_generic\" src=\""+cvjs_imagesLocation+"purple_color.png\" border=\"1\"/><label id=\"cvjs_radio6_generic\" for=\"radio6\">Purple</label></td></tr><tr><td><canvas id=\"dummy\" width=\"121\" height=\"10\"></canvas><input id=\"radioColor7_generic\" type=\"radio\" name=\"radioColor\" value=\"7\"><img id=\"cvjs_radioColor7_img_generic\" src=\""+cvjs_imagesLocation+"gray_color.png\" border=\"1\"/><label id=\"cvjs_radio7_generic\" for=\"radio7\">Gray</label><canvas id=\"dummy\" width=\"24\" height=\"10\"></canvas><input id=\"radioColor8_generic\" type=\"radio\" name=\"radioColor\" value=\"8\"><img id=\"cvjs_radioColor8_img_generic\" src=\""+cvjs_imagesLocation+"brown_color.png\" border=\"1\"/><label id=\"cvjs_radio8_generic\" for=\"radio8\">Brown</label> </td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td></tr></table></div>");
		// Generic color modal is customer specific, therefore we do not make multi-language at this time.
		
// translate cvjs_initCADViewerPro_Section03(
		
// 6.2.14		
//		cvjs_lineThicknessModal_content = "<table class=\"linethicknessModalanguageTable\"><tr><td><div class=\"linethicknessModalHeader\"><a class=\"modalIconLogo\" href=\"https://cadviewer.com\"><img class=\"cvjs_img\" src=\""+cvjs_imagesLocation+"logoJS.png\" /></a><b id=\"cvjs_lineThicknessHeader\">"+languageTable.languages[cvjs_currentLanguage].LineThicknessModal.Header+"</b><button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_line_thickness_modal_hide(\'"+floorplan_div+"\');\">&times;<b class=\"top_bar_gray_underbar\">_</b></button></div></td></tr><tr><td><canvas id=\"dummy\" width=\"20\" height=\"5\"></canvas><div id=\"lineThicknessText\">"+languageTable.languages[cvjs_currentLanguage].LineThicknessModal.LineThickness+"<input value=\"1.00\" id=\"cvjs_calibrateReferenceDistance\" class=\"cvjs_inputCalibrateModal\"></div></td><td><div class=\"lineThickness\" id=\"lineThickness_"+floorplan_div+"\"></td></tr><tr><td><canvas id=\"dummy\" width=\"50\" height=\"5\"></canvas><div class=\"cvjs_slider2\" id=\"cvjs_slider2_"+floorplan_div+"\"><canvas id=\"dummy\" width=\"50\" height=\"5\"></canvas></td></tr>"
		cvjs_lineThicknessModal_content = "<table class=\"linethicknessModalanguageTable\"><tr><td><div class=\"linethicknessModalHeader\"><a class=\"modalIconLogo\" href=\"https://cadviewer.com\"><img class=\"cvjs_img\" src=\""+cvjs_imagesLocation+"logoJS.png\" /></a><div class=\"modalHeaderText\"  id=\"cvjs_lineThicknessHeader\">"+languageTable.languages[cvjs_currentLanguage].LineThicknessModal.Header+"</div>"
		+"<input class=\"cvjs_new_header_button\" type=\"button\" value=\""+"&times;"+"\" onClick=\"cvjs_line_thickness_modal_hide(\'"+floorplan_div+"\');\">"
//		+"<button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_line_thickness_modal_hide(\'"+floorplan_div+"\');\">&times;<b class=\"top_bar_gray_underbar\">_</b></button>"
		+"</div></td></tr><tr><td><canvas id=\"dummy\" width=\"20\" height=\"5\"></canvas><div id=\"lineThicknessText\">"+languageTable.languages[cvjs_currentLanguage].LineThicknessModal.LineThickness+"</div><canvas id=\"dummy\" width=\"20\" height=\"5\"></canvas><input value=\"1.00\" id=\"lineThickness_"+floorplan_div+"\" class=\"cvjs_inputLineweightModal\"></td><td><div class=\"lineThickness\" id=\"lineThickness_"+floorplan_div+"\"></td></tr><tr><td><canvas id=\"dummy\" width=\"50\" height=\"5\"></canvas><div class=\"cvjs_slider2\" id=\"cvjs_slider2_"+floorplan_div+"\"><canvas id=\"dummy\" width=\"50\" height=\"5\"></canvas></td></tr>"
		+"</table>";
		jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div class=\"linethicknessModal\" id=\"linethicknessModal_"+floorplan_div+"\"></div>");
		jQuery("#linethicknessModal_"+floorplan_div).html(cvjs_lineThicknessModal_content);

// 6.2.03

	var selectLanguageString = "<select id=\"cvjs_settingsSelectLanguage\">";
	for (var i=0; i<languageTable.numberOfLanguages; i++) {		
		
		if (i== cvjs_currentLanguage)
			selectLanguageString += "<option value=\""+(i+1)+"\" selected>"+languageTable.languages[i].thisLanguage+"</option>";
		else
			selectLanguageString += "<option value=\""+(i+1)+"\">"+languageTable.languages[i].thisLanguage+"</option>";
	}
	selectLanguageString +="</select>";
	
	// define each row of params and loop over them to add content	
	// add empty fields up till max number of convertion commands - perhaps 8	
//	var paramLinesInput = "<canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas><font id=\"cvjs_calibrate_modal_distance\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Distance+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"1\" id=\"cvjs_calibrateReferenceDistance\" class=\"cvjs_inputSettingsModal\">";
	
	var paramLinesInput =  "<canvas id=\"dummy\" width=\"10\" height=\"33\"></canvas><font id=\"cvjs_ax2020_paramtext\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.ConversionFixed+"</font><br>";


	var totalParameters = languageTable.languages[cvjs_currentLanguage].SettingsModal.TotalParameters;
	var selectString = "";
	var flag = false;
	for (k=0; k<totalParameters; k++){
		flag = false;
		for (i=0; i<rest_nname[cvjs_active_floorplan_div_nr ].length; i++){		
			if ( rest_nname[cvjs_active_floorplan_div_nr ][i] == languageTable.languages[cvjs_currentLanguage].SettingsModal.ParamNames.ParamName[k]) 
					flag = true;
		}
		
		if (!flag){
			var index = rest_nname[cvjs_active_floorplan_div_nr ].length;
			rest_nname[cvjs_active_floorplan_div_nr ][index] = languageTable.languages[cvjs_currentLanguage].SettingsModal.ParamNames.ParamName[k];
			rest_vvalue[cvjs_active_floorplan_div_nr ][index] = languageTable.languages[cvjs_currentLanguage].SettingsModal.ParamValues.ParamValue[k];				
		}

	}


/*
	var totalParameters = languageTable.languages[cvjs_currentLanguage].SettingsModal.TotalParameters;
	var selectString = "";
	for (k=0; k<totalParameters; k++){
		paramLinesInput += "<div id=\"settings_param_lines_input\"><canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas><font id=\"cvjs_param"+(k+1)+"\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Param+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\""+languageTable.languages[cvjs_currentLanguage].SettingsModal.ParamNames.ParamName[k]+"\" id=\"cvjs_calibrateReferenceDistance\" class=\"cvjs_inputSettingsModal\"><canvas id=\"dummy\" width=\"30\" height=\"23\"></canvas><font id=\"cvjs_param_value"+(k+1)+"\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Value+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\""+languageTable.languages[cvjs_currentLanguage].SettingsModal.ParamValues.ParamValue[k]+"\" id=\"cvjs_calibrateReferenceDistance\" class=\"cvjs_inputSettingsModal\"><br>";
	}

*/
	for (k=0; k<rest_nname[cvjs_active_floorplan_div_nr ].length; k++){
//		paramLinesInput += "<canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas><font id=\"cvjs_param1\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Param+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"1\" id=\"cvjs_calibrateReferenceDistance\" class=\"cvjs_inputSettingsModal\"><canvas id=\"dummy\" width=\"30\" height=\"23\"></canvas><font id=\"cvjs_param1\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Value+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"1\" id=\"cvjs_calibrateReferenceDistance\" class=\"cvjs_inputSettingsModal\"><br>";
		paramLinesInput += "<div id=\"settings_param_lines_input\"><canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas><font id=\"cvjs_param"+(k+1)+"\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Param+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\""+rest_nname[cvjs_active_floorplan_div_nr ][k]+"\" id=\"cvjs_param_list_name"+(k+1)+"\" class=\"cvjs_inputSettingsModal\"><canvas id=\"dummy\" width=\"30\" height=\"23\"></canvas><font id=\"cvjs_param_value"+(k+1)+"\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Value+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\""+rest_vvalue[cvjs_active_floorplan_div_nr ][k]+"\" id=\"cvjs_param_list_value"+(k+1)+"\" class=\"cvjs_inputSettingsModal\"><br>";
	}

	for (k=rest_nname[cvjs_active_floorplan_div_nr ].length; k<8; k++){
		paramLinesInput += "<div id=\"settings_param_lines_input\"><canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas><font id=\"cvjs_param"+(k+1)+"\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Param+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\""+""+"\" id=\"cvjs_param_list_name"+(k+1)+"\" class=\"cvjs_inputSettingsModal\"><canvas id=\"dummy\" width=\"30\" height=\"23\"></canvas><font id=\"cvjs_param_value"+(k+1)+"\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Value+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\""+""+"\" id=\"cvjs_param_list_value"+(k+1)+"\" class=\"cvjs_inputSettingsModal\"><br>";
	}
	paramLinesInput += "</div>";
	
/*
				<ParamNames>
					<ParamName>last</ParamName>
					<ParamName>lw</ParamName>
					<ParamName>lwmin</ParamName>
				</ParamNames>
				<ParamValues>
					<ParamValue></ParamValue>
					<ParamName>0.1</ParamName>
					<ParamName>0.1</ParamName>
				</ParamValues>

*/


/*	
		paramLinesInput += "<canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas><font id=\"cvjs_param1\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Param+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"1\" id=\"cvjs_calibrateReferenceDistance\" class=\"cvjs_inputSettingsModal\"><canvas id=\"dummy\" width=\"30\" height=\"23\"></canvas><font id=\"cvjs_param1\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Value+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"1\" id=\"cvjs_calibrateReferenceDistance\" class=\"cvjs_inputSettingsModal\"><br>";
		paramLinesInput += "<canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas><font id=\"cvjs_param1\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Param+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"1\" id=\"cvjs_calibrateReferenceDistance\" class=\"cvjs_inputSettingsModal\"><canvas id=\"dummy\" width=\"30\" height=\"23\"></canvas><font id=\"cvjs_param1\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Value+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"1\" id=\"cvjs_calibrateReferenceDistance\" class=\"cvjs_inputSettingsModal\"><br>";
		paramLinesInput += "<canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas><font id=\"cvjs_param1\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Param+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"1\" id=\"cvjs_calibrateReferenceDistance\" class=\"cvjs_inputSettingsModal\"><canvas id=\"dummy\" width=\"30\" height=\"23\"></canvas><font id=\"cvjs_param1\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Value+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"1\" id=\"cvjs_calibrateReferenceDistance\" class=\"cvjs_inputSettingsModal\"><br>";
		paramLinesInput += "<canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas><font id=\"cvjs_param1\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Param+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"1\" id=\"cvjs_calibrateReferenceDistance\" class=\"cvjs_inputSettingsModal\"><canvas id=\"dummy\" width=\"30\" height=\"23\"></canvas><font id=\"cvjs_param1\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Value+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"1\" id=\"cvjs_calibrateReferenceDistance\" class=\"cvjs_inputSettingsModal\"><br>";
		paramLinesInput += "<canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas><font id=\"cvjs_param1\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Param+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"1\" id=\"cvjs_calibrateReferenceDistance\" class=\"cvjs_inputSettingsModal\"><canvas id=\"dummy\" width=\"30\" height=\"23\"></canvas><font id=\"cvjs_param1\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Value+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"1\" id=\"cvjs_calibrateReferenceDistance\" class=\"cvjs_inputSettingsModal\"><br>";
		paramLinesInput += "<canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas><font id=\"cvjs_param1\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Param+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"1\" id=\"cvjs_calibrateReferenceDistance\" class=\"cvjs_inputSettingsModal\"><canvas id=\"dummy\" width=\"30\" height=\"23\"></canvas><font id=\"cvjs_param1\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Value+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"1\" id=\"cvjs_calibrateReferenceDistance\" class=\"cvjs_inputSettingsModal\"><br>";
		paramLinesInput += "<canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas><font id=\"cvjs_param1\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Param+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"1\" id=\"cvjs_calibrateReferenceDistance\" class=\"cvjs_inputSettingsModal\"><canvas id=\"dummy\" width=\"30\" height=\"23\"></canvas><font id=\"cvjs_param1\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Value+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"1\" id=\"cvjs_calibrateReferenceDistance\" class=\"cvjs_inputSettingsModal\"><br>";
		paramLinesInput += "<canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas><font id=\"cvjs_param1\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Param+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"1\" id=\"cvjs_calibrateReferenceDistance\" class=\"cvjs_inputSettingsModal\"><canvas id=\"dummy\" width=\"30\" height=\"23\"></canvas><font id=\"cvjs_param1\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Value+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"1\" id=\"cvjs_calibrateReferenceDistance\" class=\"cvjs_inputSettingsModal\">";
*/	

/*	
				<Param>Parameter:</Param>
				<Value>(Value):</Value>
				<ParamNames>
					<ParamName>last</ParamName>
					<ParamName>lw</ParamName>
					<ParamName>lwmin</ParamName>
				</ParamNames>
				<ParamValues>
					<ParamValue></ParamValue>
					<ParamName>0.1</ParamName>
					<ParamName>0.1</ParamName>
				</ParamValues>
	*/
	
	
	cvjs_settingsModal_content = "<table class=\"settingsModalTable\"><tr><td><div class=\"settingsModalHeader\"><a class=\"modalIconLogo\" href=\"https://cadviewer.com\"><img class=\"cvjs_img\" src=\""+cvjs_imagesLocation+"logoJS.png\" /></a><div class=\"modalHeaderText\"  id=\"cvjs_settingsModalHeader\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Header+"</div>"
	+"<input class=\"cvjs_new_header_button\" type=\"button\" value=\""+"&times;"+"\" onClick=\"cvjs_exitSettingsModal(\'"+floorplan_div+"\', 1);\">"
//	+"<button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_exitSettingsModal(\'"+floorplan_div+"\',1);\">&times;<b class=\"top_bar_gray_underbar\">_</b></button>"
	+"</div></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas><font id=\"cvjs_settings_language\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.OnlineLanguage+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas>"+selectLanguageString+"</td></tr><tr><td>"+paramLinesInput+"<canvas id=\"dummy\" width=\"116\" height=\"10\"></canvas><input id=\"cvjs_settings_button\" type=\"button\" name=\"bPrint\" value=\""+languageTable.languages[cvjs_currentLanguage].SettingsModal.OK+"\" onClick=\"cvjs_exitSettingsModal(\'"+floorplan_div+"\',2);\"><div id=\"cvjs_settingsModalText\"><canvas id=\"dummy\" width=\"0\" height=\"17\"></canvas><font id=\"cvjs_settings_modal_text\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Text+"</font></div></td></tr></table>";
	jQuery("#cvjs_modals"+"_"+floorplan_div).append("<div class=\"settingsModal\" id=\"settingsModal_"+floorplan_div+"\"></div>");
	jQuery("#settingsModal_"+floorplan_div).html(cvjs_settingsModal_content);


	jQuery( function() {
		jQuery( "#settingsModal_"+floorplan_div ).draggable({
				containment: [ jQuery('#'+floorplan_div).position().left - cvjs_containmentModalLeft , jQuery('#'+floorplan_div).position().top - cvjs_containmentModalTop, jQuery('#'+floorplan_div).position().left+ jQuery('#'+floorplan_div).width()- jQuery("#settingsModal_"+floorplan_div).width() + cvjs_containmentModalRight, jQuery('#'+floorplan_div).position().top + jQuery('#'+floorplan_div).height() - jQuery("#settingsModal_"+floorplan_div).height() + cvjs_containmentModalBottom  ]
			})
	} );

	jQuery( "#settingsModal_"+floorplan_div ).hide();
// 6.2.03

		jQuery("#genericColorModal_"+floorplan_div).hide();
		jQuery( function() {
			jQuery("#genericColorModal_"+floorplan_div).draggable({
					containment: [ jQuery('#'+floorplan_div).position().left - cvjs_containmentModalLeft , jQuery('#'+floorplan_div).position().top - cvjs_containmentModalTop, jQuery('#'+floorplan_div).position().left+ jQuery('#'+floorplan_div).width()- jQuery("#backgroundModal_"+floorplan_div).width() + cvjs_containmentModalRight, jQuery('#'+floorplan_div).position().top + jQuery('#'+floorplan_div).height() - jQuery("#backgroundModal_"+floorplan_div).height() + cvjs_containmentModalBottom  ]
				});
		} );

		jQuery("#backgroundModal_"+floorplan_div).hide();

		jQuery( function() {				
			jQuery("#backgroundModal_"+floorplan_div).draggable({
					containment: [ jQuery('#'+floorplan_div).position().left - cvjs_containmentModalLeft , jQuery('#'+floorplan_div).position().top - cvjs_containmentModalTop, jQuery('#'+floorplan_div).position().left+ jQuery('#'+floorplan_div).width()- jQuery("#backgroundModal_"+floorplan_div).width() + cvjs_containmentModalRight, jQuery('#'+floorplan_div).position().top + jQuery('#'+floorplan_div).height() - jQuery("#backgroundModal_"+floorplan_div).height() + cvjs_containmentModalBottom  ]
				})			
		} );

		jQuery("#colorModal_"+floorplan_div).hide();

		jQuery( function() {
			jQuery("#colorModal_"+floorplan_div).draggable({
					containment: [ jQuery('#'+floorplan_div).position().left - cvjs_containmentModalLeft , jQuery('#'+floorplan_div).position().top - cvjs_containmentModalTop, jQuery('#'+floorplan_div).position().left+ jQuery('#'+floorplan_div).width()- jQuery("#colorModal_"+floorplan_div).width() + cvjs_containmentModalRight, jQuery('#'+floorplan_div).position().top + jQuery('#'+floorplan_div).height() - jQuery("#colorModal_"+floorplan_div).height() + cvjs_containmentModalBottom  ]
				})
		} );

		jQuery("#creationModeModal_"+floorplan_div).hide();

		jQuery( function() {
			jQuery("#creationModeModal_"+floorplan_div).draggable({
					containment: [ jQuery('#'+floorplan_div).position().left - cvjs_containmentModalLeft , jQuery('#'+floorplan_div).position().top - cvjs_containmentModalTop, jQuery('#'+floorplan_div).position().left+ jQuery('#'+floorplan_div).width()- jQuery("#ellipseModal_"+floorplan_div).width() + cvjs_containmentModalRight, jQuery('#'+floorplan_div).position().top + jQuery('#'+floorplan_div).height() - jQuery("#ellipseModal_"+floorplan_div).height() + cvjs_containmentModalBottom  ]
				})
		} );


		jQuery("#publishPDFModal_"+floorplan_div).hide();

		jQuery( function() {
			jQuery("#publishPDFModal_"+floorplan_div).draggable({
					containment: [ jQuery('#'+floorplan_div).position().left - cvjs_containmentModalLeft , jQuery('#'+floorplan_div).position().top - cvjs_containmentModalTop, jQuery('#'+floorplan_div).position().left+ jQuery('#'+floorplan_div).width()- jQuery("#colorModal_"+floorplan_div).width() + cvjs_containmentModalRight, jQuery('#'+floorplan_div).position().top + jQuery('#'+floorplan_div).height() - jQuery("#colorModal_"+floorplan_div).height() + cvjs_containmentModalBottom  ]
				})
		} );


			
		jQuery("#documentPageChangeModal_"+floorplan_div).hide();

		jQuery( function() {
			jQuery("#documentPageChangeModal_"+floorplan_div).draggable({
					containment: [ jQuery('#'+floorplan_div).position().left - cvjs_containmentModalLeft , jQuery('#'+floorplan_div).position().top - cvjs_containmentModalTop, jQuery('#'+floorplan_div).position().left+ jQuery('#'+floorplan_div).width()- jQuery("#documentPageChangeModal_"+floorplan_div).width() + cvjs_containmentModalRight, jQuery('#'+floorplan_div).position().top + jQuery('#'+floorplan_div).height() - jQuery("#documentPageChangeModal_"+floorplan_div).height() + cvjs_containmentModalBottom  ]
				})
		} );
		
	

		jQuery("#printModal_"+floorplan_div).hide();

		jQuery( function() {
			jQuery("#printModal_"+floorplan_div).draggable({
					containment: [ jQuery('#'+floorplan_div).position().left - cvjs_containmentModalLeft , jQuery('#'+floorplan_div).position().top - cvjs_containmentModalTop, jQuery('#'+floorplan_div).position().left+ jQuery('#'+floorplan_div).width()- jQuery("#printModal_"+floorplan_div).width() + cvjs_containmentModalRight, jQuery('#'+floorplan_div).position().top + jQuery('#'+floorplan_div).height() - jQuery("#printModal_"+floorplan_div).height() + cvjs_containmentModalBottom  ]
				})
		} );




	// no restriction on magnifying glass
		jQuery( function() {
			jQuery("#cvjs_floorPlanMagnifyingGlassEncapsulate_"+floorplan_div).draggable();
		} );

		jQuery( "#cvjs_floorPlanMagnifyingGlassEncapsulate_"+floorplan_div).hide();


		
		
		// 3.1.20f
		jQuery( function() {
			jQuery( "#pagechangeList_"+floorplan_div ).draggable({
					containment: [ jQuery('#'+floorplan_div).position().left - cvjs_containmentModalLeft*2 , jQuery('#'+floorplan_div).position().top - cvjs_containmentModalTop*2, jQuery('#'+floorplan_div).position().left+ jQuery('#'+floorplan_div).width()- jQuery("#pagechangeList_"+floorplan_div).width() + cvjs_containmentModalRight*2, jQuery('#'+floorplan_div).position().top + jQuery('#'+floorplan_div).height() - jQuery("#pagechangeList_"+floorplan_div).height() + cvjs_containmentModalBottom*2  ]
				})
		  } );

		jQuery("#pagechangeList"+floorplan_div ).css("position","absolute");


		jQuery('#pagechangelist_id_'+floorplan_div).mouseover(function()
				{
					jQuery("#pagechangelist_"+floorplan_div).draggable({ disabled: true });
				});

		jQuery('#pagechangelist_id_'+floorplan_div).mouseout(function()
				{
					jQuery("#pagechangelist_"+floorplan_div).draggable({ disabled: false });
				});

		jQuery("#pagechangeList_"+floorplan_div).hide();

		jQuery('#exit_pagechangelist').mouseover(function()
			{
				jQuery('#exit_pagechangelist').css("filter", "alpha(opacity=70)");
				jQuery('#exit_pagechangelist').css("opacity", "0.7");
			});
		jQuery('#exit_pagechangelist').mouseout(function()
			{
				jQuery('#exit_pagechangelist').css("filter", "alpha(opacity=100)");
				jQuery('#exit_pagechangelist').css("opacity", "1.0");
			});

		// 3.1.20f
		
		jQuery( function() {
			jQuery( "#layerList_"+floorplan_div ).draggable({
					containment: [ jQuery('#'+floorplan_div).position().left - cvjs_containmentModalLeft*2 , jQuery('#'+floorplan_div).position().top - cvjs_containmentModalTop*2, jQuery('#'+floorplan_div).position().left+ jQuery('#'+floorplan_div).width()- jQuery("#layerList_"+floorplan_div).width() + cvjs_containmentModalRight*2, jQuery('#'+floorplan_div).position().top + jQuery('#'+floorplan_div).height() - jQuery("#layerList_"+floorplan_div).height() + cvjs_containmentModalBottom*2  ]
				})
		  } );

		jQuery("#layerList_"+floorplan_div ).css("position","absolute");


		jQuery('#layerlist_id_'+floorplan_div).mouseover(function()
				{
					jQuery("#layerList_"+floorplan_div).draggable({ disabled: true });
				});

		jQuery('#layerlist_id_'+floorplan_div).mouseout(function()
				{
					jQuery("#layerList_"+floorplan_div).draggable({ disabled: false });
				});


		jQuery("#layerList_"+floorplan_div).hide();

		jQuery('#exit_layerlist').mouseover(function()
			{
				jQuery('#exit_layerlist').css("filter", "alpha(opacity=70)");
				jQuery('#exit_layerlist').css("opacity", "0.7");
			});
		jQuery('#exit_layerlist').mouseout(function()
			{
				jQuery('#exit_layerlist').css("filter", "alpha(opacity=100)");
				jQuery('#exit_layerlist').css("opacity", "1.0");
			});




		jQuery('#cvjs_wait_looper_'+floorplan_div).hide();



		jQuery( function() {
			jQuery( "#gMenu"+"_"+floorplan_div ).draggable({
					containment: [ jQuery('#'+floorplan_div).position().left - cvjs_containmentModalLeft , jQuery('#'+floorplan_div).position().top - cvjs_containmentModalTop, jQuery('#'+floorplan_div).position().left+ jQuery('#'+floorplan_div).width()- jQuery("#gMenu_"+floorplan_div).width() + cvjs_containmentModalRight, jQuery('#'+floorplan_div).position().top + jQuery('#'+floorplan_div).height() - jQuery("#gMenu_"+floorplan_div).height() + cvjs_containmentModalBottom  ]
				})
		} );

		jQuery( function() {
			jQuery( "#calibrateModal_"+floorplan_div ).draggable({
					containment: [ jQuery('#'+floorplan_div).position().left - cvjs_containmentModalLeft , jQuery('#'+floorplan_div).position().top - cvjs_containmentModalTop, jQuery('#'+floorplan_div).position().left+ jQuery('#'+floorplan_div).width()- jQuery("#calibrateModal_"+floorplan_div).width() + cvjs_containmentModalRight, jQuery('#'+floorplan_div).position().top + jQuery('#'+floorplan_div).height() - jQuery("#calibrateModal_"+floorplan_div).height() + cvjs_containmentModalBottom  ]
				})
		} );

		jQuery( "#calibrateModal_"+floorplan_div ).hide();

		jQuery( function() {
			jQuery( "#measurementModal_"+floorplan_div ).draggable({
					containment: [ jQuery('#'+floorplan_div).position().left - cvjs_containmentModalLeft , jQuery('#'+floorplan_div).position().top - cvjs_containmentModalTop, jQuery('#'+floorplan_div).position().left+ jQuery('#'+floorplan_div).width()- jQuery("#measurementModal_"+floorplan_div).width() + cvjs_containmentModalRight, jQuery('#'+floorplan_div).position().top + jQuery('#'+floorplan_div).height() - jQuery("#measurementModal_"+floorplan_div).height() + cvjs_containmentModalBottom  ]
				})
		} );

		jQuery( "#measurementModal_"+floorplan_div ).hide();


		jQuery( function() {
			jQuery( "#textsearchModal_"+floorplan_div ).draggable({
					containment: [ jQuery('#'+floorplan_div).position().left - cvjs_containmentModalLeft , jQuery('#'+floorplan_div).position().top - cvjs_containmentModalTop, jQuery('#'+floorplan_div).position().left+ jQuery('#'+floorplan_div).width()- jQuery("#textsearchModal_"+floorplan_div).width() + cvjs_containmentModalRight, jQuery('#'+floorplan_div).position().top + jQuery('#'+floorplan_div).height() - jQuery("#textsearchModal_"+floorplan_div).height() + cvjs_containmentModalBottom  ]
				})
		} );

		jQuery( "#textsearchModal_"+floorplan_div ).hide();


		// 6.2.54
		jQuery( function() {
			jQuery( "#spaceobjectsInitSettingsModal_"+floorplan_div ).draggable({
					containment: [ jQuery('#'+floorplan_div).position().left - cvjs_containmentModalLeft , jQuery('#'+floorplan_div).position().top - cvjs_containmentModalTop, jQuery('#'+floorplan_div).position().left+ jQuery('#'+floorplan_div).width()- jQuery("#textsearchModal_"+floorplan_div).width() + cvjs_containmentModalRight, jQuery('#'+floorplan_div).position().top + jQuery('#'+floorplan_div).height() - jQuery("#textsearchModal_"+floorplan_div).height() + cvjs_containmentModalBottom  ]
				})
		} );

		jQuery( "#spaceobjectsInitSettingsModal_"+floorplan_div ).hide();


		// 6.2.55
		jQuery( function() {
			jQuery( "#spaceobjectsChangeSettingsModal_"+floorplan_div ).draggable({
					containment: [ jQuery('#'+floorplan_div).position().left - cvjs_containmentModalLeft , jQuery('#'+floorplan_div).position().top - cvjs_containmentModalTop, jQuery('#'+floorplan_div).position().left+ jQuery('#'+floorplan_div).width()- jQuery("#textsearchModal_"+floorplan_div).width() + cvjs_containmentModalRight, jQuery('#'+floorplan_div).position().top + jQuery('#'+floorplan_div).height() - jQuery("#textsearchModal_"+floorplan_div).height() + cvjs_containmentModalBottom  ]
				})
		} );

		jQuery( "#spaceobjectsChangeSettingsModal_"+floorplan_div ).hide();



		jQuery( function() {
			jQuery( "#linethicknessModal_"+floorplan_div ).draggable({
					containment: [ jQuery('#'+floorplan_div).position().left - cvjs_containmentModalLeft , jQuery('#'+floorplan_div).position().top - cvjs_containmentModalTop, jQuery('#'+floorplan_div).position().left+ jQuery('#'+floorplan_div).width()- jQuery("#linethicknessModal_"+floorplan_div).width() + cvjs_containmentModalRight, jQuery('#'+floorplan_div).position().top + jQuery('#'+floorplan_div).height() - jQuery("#linethicknessModal_"+floorplan_div).height() + cvjs_containmentModalBottom  ]
				})
		} );

		jQuery( "#linethicknessModal_"+floorplan_div ).hide();



		if (!cvjs_modalsInitialized_FileLoadModal){
		
			jQuery( function() {
				jQuery( "#cvjs_serverFileLoadModal").draggable();
			} );

			jQuery( "#cvjs_serverFileLoadModal").hide();
			jQuery( "#cvjs_serverFileLoadModal_table").hide();   // 2017-12-12
		
		}
		
		if (!cvjs_modalsInitialized_FileLoadModal) {cvjs_modalsInitialized_FileLoadModal = true;}   // we initialize the file-load modal only once  	
		


		jQuery( function() {
			jQuery( "#delete_form_"+floorplan_div ).draggable();
		} );

		jQuery( function() {
			jQuery( "#clear_form_"+floorplan_div ).draggable();
		} );

		jQuery( function() {
			jQuery( "#unlink_form_"+floorplan_div ).draggable();
		} );



		jQuery( function() {
			jQuery( "#info_messageModal_2_"+floorplan_div ).draggable({
					containment: [ jQuery('#'+floorplan_div).position().left - cvjs_containmentModalLeft , jQuery('#'+floorplan_div).position().top - cvjs_containmentModalTop, jQuery('#'+floorplan_div).position().left+ jQuery('#'+floorplan_div).width()- jQuery("#info_messageModal_2_"+floorplan_div).width() + cvjs_containmentModalRight, jQuery('#'+floorplan_div).position().top + jQuery('#'+floorplan_div).height() - jQuery("#info_messageModal_2_"+floorplan_div).height() + cvjs_containmentModalBottom  ]
				})
		} );

		jQuery( "#info_messageModal_2_"+floorplan_div ).hide();
		
		// we also have to hide the bootstrap fade-in modal
		jQuery( "#info_messageModal_"+floorplan_div ).hide();



		// here we build in the logic to control which icon menus are displayed, if any!


		if (cvjs_iconInterfaceDisabled[cvjs_interfaceCounterIndex(floorplan_div)]){

			// do nothing, the user has decided to build the interface themselves
			// classic skin!
			if (cvjs_iconInterfaceClassicSkin[cvjs_interfaceCounterIndex(floorplan_div)]){

				if (cvjs_iconInterfaceClassicSkin_MinimumDisk[cvjs_interfaceCounterIndex(floorplan_div)]){  // minimum 3x disk for space management


//					jQuery('#gMenu'+"_"+floorplan_div).html("<div class=\"cvjs_controls_min\"  style=\"list-style-type:none;\"  ><li style=\"list-style-type:none;\" id=\"zoom-extents"+"_"+floorplan_div+"\"><i class=\"fa fa-arrows-alt\"></i></li><li style=\"list-style-type:none\" id=\"zoom-in"+"_"+floorplan_div+"\"><i class=\"fa fa-plus\"></i></li><li style=\"list-style-type:none\" id=\"zoom-out"+"_"+floorplan_div+"\"><i class=\"fa fa-minus\"></i></li><li style=\"list-style-type:none\" id=\"zoom-window"+"_"+floorplan_div+"\"><i class=\"fa fa-search-plus\"></i></li></div>");
//					jQuery('#gMenu'+"_"+floorplan_div).html("<div class=\"cvjs_controls_min\"  style=\"list-style-type:none;\"  ><li style=\"list-style-type:none;\" id=\"zoom-extents"+"_"+floorplan_div+"\"><i class=\"fa fa-arrows-alt\"></i></li><li style=\"list-style-type:none\" id=\"zoom-in"+"_"+floorplan_div+"\"><i class=\"fa fa-plus\"></i></li><li style=\"list-style-type:none\" id=\"zoom-out"+"_"+floorplan_div+"\"><i class=\"fa fa-minus\"></i></li><li style=\"list-style-type:none\" id=\"zoom-window"+"_"+floorplan_div+"\"><i class=\"fa fa-search-plus\"></i></li></div>");
// 6.2.41
//					jQuery('#gMenu'+"_"+floorplan_div).html("<div class=\"cvjs_controls_main\"  ><div class=\"cvjs_controls_min\" id=\"zoom-extents"+"_"+floorplan_div+"\"><i class=\"fa fa-arrows-alt\"></i></div><div class=\"cvjs_controls_min\" id=\"zoom-in"+"_"+floorplan_div+"\"><i class=\"fa fa-plus\"></i></div><div class=\"cvjs_controls_min\" id=\"zoom-out"+"_"+floorplan_div+"\"><i class=\"fa fa-minus\"></i></div><div class=\"cvjs_controls_min\" id=\"zoom-window"+"_"+floorplan_div+"\"><i class=\"fa fa-search-plus\"></i></div></div>");

					jQuery('#gMenu'+"_"+floorplan_div).html("<div class=\"cvjs_controls_min\" ><li style=\"list-style-type:none;\" id=\"zoom-extents"+"_"+floorplan_div+"\"><i class=\"fa fa-arrows-alt\"></i></li><li style=\"list-style-type:none\" id=\"zoom-in"+"_"+floorplan_div+"\"><i class=\"fa fa-plus\"></i></li><li style=\"list-style-type:none\" id=\"zoom-out"+"_"+floorplan_div+"\"><i class=\"fa fa-minus\"></i></li><li style=\"list-style-type:none\" id=\"zoom-window"+"_"+floorplan_div+"\"><i class=\"fa fa-search-plus\"></i></li></div>");

// 6.2.14
//					jQuery('#gMenu'+"_"+floorplan_div).css('height', 122+"px");
//					jQuery('#gMenu'+"_"+floorplan_div).css('width', 32+"px");


					jQuery('#zoom-in'+"_"+floorplan_div).on('click', function() {
					
						cvjs_zoomIn(floorplan_div);
					});
					
					jQuery('#zoom-out'+"_"+floorplan_div).on('click', function() {
						cvjs_zoomOut(floorplan_div);
					});

					jQuery('#zoom-extents'+"_"+floorplan_div).on('click', function() {
						cvjs_resetZoomPan(floorplan_div);
					});

					jQuery('#zoom-window'+"_"+floorplan_div).on('click', function() {
						cvjs_zoomWindow(floorplan_div);
					});

					// 3.3.01a
					jQuery('#zoom-in'+"_"+floorplan_div).on('mouseover', function() {
						try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
						cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
						tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});												
						tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.ZoomIn);
						tip[cvjs_active_floorplan_div_nr].show();
						tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+42).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+66);				
					});
					
					jQuery('#zoom-in'+"_"+floorplan_div).on('mouseout', function() {
						tip[cvjs_active_floorplan_div_nr].hide();				
					});
					
					jQuery('#zoom-out'+"_"+floorplan_div).on('mouseover', function() {
						try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
						cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
						tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});												
						tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.ZoomOut);
						tip[cvjs_active_floorplan_div_nr].show();
						tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+42).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+96);								
					});
					
					jQuery('#zoom-out'+"_"+floorplan_div).on('mouseout', function() {
						tip[cvjs_active_floorplan_div_nr].hide();								
					});

					jQuery('#zoom-extents'+"_"+floorplan_div).on('mouseover', function() {
						try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
						cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
						tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});												
						tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.ZoomExtents);
						tip[cvjs_active_floorplan_div_nr].show();
						tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+42).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+35);												
					});
		
					jQuery('#zoom-extents'+"_"+floorplan_div).on('mouseout', function() {
						tip[cvjs_active_floorplan_div_nr].hide();								
					});
					
					jQuery('#zoom-window'+"_"+floorplan_div).on('mouseover', function() {
						try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
						cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
						tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});												
						tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.ZoomWindow);
						tip[cvjs_active_floorplan_div_nr].show();
						tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#gMenu'+"_"+floorplan_div).position().left+42).css("top", jQuery('#gMenu'+"_"+floorplan_div).position().top+127);												
					});
					
					jQuery('#zoom-window'+"_"+floorplan_div).on('mouseout', function() {
						tip[cvjs_active_floorplan_div_nr].hide();								
					});
					// 3.3.01a
					
									

				}
				else{
					if (cvjs_iconInterfaceClassicSkin_PanZoomDisk[cvjs_interfaceCounterIndex(floorplan_div)]){
						jQuery('#gMenu'+"_"+floorplan_div).html("<img src=\""+cvjs_imagesLocation+"PanZoomWindowFullPages7t.png\" usemap=\"#PanZoomMap\" border=\"0\" height=\"363\" width=\"78\" class=\"map\" hidefocus=\"true\">");
					}
					else{  // classic disk, but control for two platforms
						if (!isSmartPhoneOrTablet && !cvjs_iconInterfaceClassicSkinDeviceSize[cvjs_interfaceCounterIndex(floorplan_div)])
							jQuery('#gMenu'+"_"+floorplan_div).html("<img src=\""+cvjs_imagesLocation+"PanZoomFull.png\" usemap=\"#PanZoomMapClassic\" border=\"0\" height=\"267\" width=\"79\" class=\"map\" hidefocus=\"true\">");
						else
							jQuery('#gMenu'+"_"+floorplan_div).html("<img src=\""+cvjs_imagesLocation+"ZoomExtentsDevice.png\" usemap=\"#ZoomExtentsDeviceMapClassic\" border=\"0\" height=\"176\" width=\"79\" class=\"map\" hidefocus=\"true\">");
					}
				}
			}
		}
		else{
			// we have the interface completely active
			if (!isSmartPhoneOrTablet){
				if (pageChangeInterface[cvjs_interfaceCounterIndex(floorplan_div)]){
					if (cvjs_version_3_2_modal)  // modal with line thickness
						jQuery('#gMenu'+"_"+floorplan_div).html("<img src=\""+cvjs_imagesLocation+"cvjsToolbar_dra_p1_8.png\" style=\"margin-left: 10px; margin-top: 10px;\" usemap=\"#cvjsToolbarMap_p1_8"+"_"+floorplan_div+"\" border=\"0\" height=\"276\" width=\"62\" class=\"map\" hidefocus=\"true\">");
					else
						jQuery('#gMenu'+"_"+floorplan_div).html("<img src=\""+cvjs_imagesLocation+"cvjsToolbar_dra_p1_3.png\" style=\"margin-left: 10px; margin-top: 10px;\" usemap=\"#cvjsToolbarMap_p1_3\" border=\"0\" height=\"276\" width=\"62\" class=\"map\" hidefocus=\"true\">");

					}
				else{
						if (!pageChangeInterfaceFalse_noIconNavigation[cvjs_interfaceCounterIndex(floorplan_div)]){ // we want to use the icon menu with navigation buttons now pageChange is disables					}
							jQuery('#gMenu'+"_"+floorplan_div).html("<img src=\""+cvjs_imagesLocation+"cvjsToolbar_dra_p1_2.png\" style=\"margin-left: 10px; margin-top: 10px;\" usemap=\"#cvjsToolbarMap_p1\" border=\"0\" height=\"303\" width=\"62\" class=\"map\" hidefocus=\"true\">");
						}
						else{ // we have single page drawings, so we wont need the navigation buttons in the icon menu
							jQuery('#gMenu'+"_"+floorplan_div).html("<img src=\""+cvjs_imagesLocation+"cvjsToolbar_dra_p1_8.png\" style=\"margin-left: 10px; margin-top: 10px;\" usemap=\"#cvjsToolbarMap_p1_8"+"_"+floorplan_div+"\" border=\"0\" height=\"276\" width=\"62\" class=\"map\" hidefocus=\"true\">");
						}
					}
			}
			else
				jQuery('#gMenu'+"_"+floorplan_div).html("<img src=\""+cvjs_imagesLocation+"PanZoomWindowFullPages7t.png\" usemap=\"#PanZoomMap\" border=\"0\" height=\"363\" width=\"78\" class=\"map\" hidefocus=\"true\">");
		}

		// 3.1.21j		
		if (!cvjs_Community_Version)
			cvjs_initializeAllFileSelectorDivs(floorplan_div);

		  jQuery( function() {
			jQuery( "#cvjs_slider2_"+floorplan_div ).slider({
			  value: lineSliderStartValue,
			  min: 1,
			  max: 500,
			  step: 15,
			  slide: function( event, ui ) {
				  
//				jQuery( "#lineThickness_"+floorplan_div).html(  (ui.value/100*lineSliderValue).toFixed(2));
				jQuery( "#lineThickness_"+floorplan_div).val(  (ui.value/100*lineSliderValue).toFixed(2));

			   cvjs_MinWidthSVG = ui.value/100*lineSliderValue;
			   // 6.2.09  - we keep the initialization array with values						   
			   for (var prop in cvjs_SVGLineThicknessArray){				 
					jQuery("#"+prop).css("stroke-width", cvjs_SVGLineThicknessArray[prop] * cvjs_MinWidthSVG);
				}							
			   cvjs_MinWidthSVGZWfactor = ui.value/100;
				jQuery("#cv_styles").html(cvjs_cvStyles_part1+(cvjs_MinWidthSVGZWfactor*cvjs_MinWidthSVGZW)+cvjs_cvStyles_part2);
/*
				jQuery("#cv_styles").html(
				"svg{ background-color: white; }"
				+":root {"
				+"    --tmsMinLineWidth: "+(cvjs_MinWidthSVGZWfactor*cvjs_MinWidthSVGZW)+";"
				+"    --tmsbPostFix: 0;"
				+"}"
				+".tmsPoints {"
				+"    fill: none;"
				+"    stroke-width: var(--tmsMinLineWidth);"
				+"    r: calc(var(--tmsMinLineWidth)/2.0);"
				+"}"
				+".ZW {"
				+"    stroke-width: var(--tmsMinLineWidth);"
				+"}");
*/

			  }
			});
//			jQuery( "#lineThickness_"+floorplan_div ).html( (jQuery( "#cvjs_slider2_"+floorplan_div ).slider( "value" )/100*lineSliderValue).toFixed(2));
			jQuery( "#lineThickness_"+floorplan_div ).val( (jQuery( "#cvjs_slider2_"+floorplan_div ).slider( "value" )/100*lineSliderValue).toFixed(2));
		  } );

		// 6.2.14
		jQuery("#lineThickness_"+floorplan_div).change(function(){

			cvjs_MinWidthSVG = jQuery("#lineThickness_"+floorplan_div).val();
			// 6.2.09  - we keep the initialization array with values						   
			for (var prop in cvjs_SVGLineThicknessArray){				 
				jQuery("#"+prop).css("stroke-width", cvjs_SVGLineThicknessArray[prop] * cvjs_MinWidthSVG);
			}							
			cvjs_MinWidthSVGZWfactor = jQuery("#lineThickness_"+floorplan_div).val();
			jQuery("#cv_styles").html(cvjs_cvStyles_part1+(cvjs_MinWidthSVGZWfactor*cvjs_MinWidthSVGZW)+cvjs_cvStyles_part2);

			if (cvjs_MinWidthSVG>5.0){ 
				jQuery("#cvjs_slider2_"+floorplan_div).slider('value',500);
			}
			else{
				if (cvjs_MinWidthSVG<0.01)
					jQuery("#cvjs_slider2_"+floorplan_div).slider('value',1);
				else
					jQuery("#cvjs_slider2_"+floorplan_div).slider('value', 100.0*cvjs_MinWidthSVG);
			}
		
		}); 

		jQuery('#sortable').sortable({ disabled: false });    //   jQuery('#sortable').sortable({ disabled: false });


		jQuery( function() {
			jQuery( "#floatNavigationMenu_"+floorplan_div ).draggable({
				 // 3.1.21i
					containment: [ jQuery('#'+floorplan_div).position().left - cvjs_containmentModalLeft*2 , jQuery('#'+floorplan_div).position().top - cvjs_containmentModalTop, jQuery('#'+floorplan_div).position().left+ jQuery('#'+floorplan_div).width()- jQuery("#floatNavigationMenu_"+floorplan_div).width() + cvjs_containmentModalRight, jQuery('#'+floorplan_div).position().top + jQuery('#'+floorplan_div).height() - jQuery("#floatNavigationMenu_"+floorplan_div).height() + cvjs_containmentModalBottom  ]
				})
		} );
		// set the location of the navigation menu
		jQuery('#floatNavigationMenu_'+floorplan_div).hide();


		jQuery('#cvjs_zoomextents_'+floorplan_div).mouseover(function()
			{
				try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
				var thisDiv = "cvjs_zoomextents";
				var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
				//console.log(thisFloorplan);
				cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
				tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});		
				
				tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].PageModal.ZoomExtents);
				tip[cvjs_active_floorplan_div_nr].show();
				tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#floatNavigationMenu_'+floorplan_div).position().left-30).css("top", jQuery('#floatNavigationMenu_'+floorplan_div).position().top+33);

			});


		jQuery('#cvjs_zoomextents_'+floorplan_div).mouseout(function()
			{
				tip[cvjs_active_floorplan_div_nr].hide();
			});


		jQuery('#cvjs_zoomwindow_'+floorplan_div).mouseover(function()
			{
						
				try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
				var thisDiv = "cvjs_zoomwindow";
				var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
				//console.log(thisFloorplan);
				cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
				
				tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});		
						
				tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].PageModal.ZoomWindow);
				tip[cvjs_active_floorplan_div_nr].show();
				tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#floatNavigationMenu_'+floorplan_div).position().left).css("top", jQuery('#floatNavigationMenu_'+floorplan_div).position().top+33);

			});

		jQuery('#cvjs_zoomwindow_'+floorplan_div).mouseout(function()
			{
				tip[cvjs_active_floorplan_div_nr].hide();
			});
		
		
		
		
		
		jQuery('#cvjs_rotateback_'+floorplan_div).mouseover(function()
			{
						
				try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
				var thisDiv = "cvjs_rotateback";
				var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
				//console.log(thisFloorplan);
				cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
				
				
				
				tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});		
				tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].PageModal.RotateBack);
				tip[cvjs_active_floorplan_div_nr].show();
				tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#floatNavigationMenu_'+floorplan_div).position().left+30).css("top", jQuery('#floatNavigationMenu_'+floorplan_div).position().top+33);

			});


		jQuery('#cvjs_rotateback_'+floorplan_div).mouseout(function()
			{
				tip[cvjs_active_floorplan_div_nr].hide();
			});


		jQuery('#cvjs_rotateforward_'+floorplan_div).mouseover(function()
			{
						
				try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
				var thisDiv = "cvjs_rotateforward";
				var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
				//console.log(thisFloorplan);
				cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
				
						
				tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});		
				tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].PageModal.RotateBack);
				tip[cvjs_active_floorplan_div_nr].show();
				tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#floatNavigationMenu_'+floorplan_div).position().left+60).css("top", jQuery('#floatNavigationMenu_'+floorplan_div).position().top+33);

			});

		jQuery('#cvjs_rotateforward_'+floorplan_div).mouseout(function()
			{
				tip[cvjs_active_floorplan_div_nr].hide();
			});

		
		
		
		jQuery('#cvjs_fastback_'+floorplan_div).mouseover(function()
			{
						
				try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
				var thisDiv = "cvjs_fastback";
				var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
				//console.log(thisFloorplan);
				cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);
				
						
				tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});		
				tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].PageModal.First);
				tip[cvjs_active_floorplan_div_nr].show();
	//			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#floatNavigationMenu_'+floorplan_div).position().left-30).css("top", jQuery('#floatNavigationMenu_'+floorplan_div).position().top-25);
				tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#floatNavigationMenu_'+floorplan_div).position().left+90).css("top", jQuery('#floatNavigationMenu_'+floorplan_div).position().top+33);

			});

		jQuery('#cvjs_fastback_'+floorplan_div).mouseout(function()
			{
				tip[cvjs_active_floorplan_div_nr].hide();
			});



		jQuery('#cvjs_back_'+floorplan_div).mouseover(function()
			{

				try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
				var thisDiv = "cvjs_back";
				var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
				//console.log(thisFloorplan);
				cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);


				tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});		
				tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].PageModal.Previous);
				tip[cvjs_active_floorplan_div_nr].show();
	//			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#floatNavigationMenu_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position().left).css("top", jQuery('#floatNavigationMenu_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position().top-25);
				tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#floatNavigationMenu_'+floorplan_div).position().left+120).css("top", jQuery('#floatNavigationMenu_'+floorplan_div).position().top+33);

			});

		jQuery('#cvjs_back_'+floorplan_div).mouseout(function()
			{
				tip[cvjs_active_floorplan_div_nr].hide();
			});


			

		jQuery('#cvjs_enterpagenumber_'+floorplan_div).mouseover(function()
			{

				try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
				var thisDiv = "cvjs_enterpagenumber";
				var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
				//console.log(thisFloorplan);
				cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);


				tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});		
				tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].PageModal.EnterPage);
				tip[cvjs_active_floorplan_div_nr].show();
	//			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#floatNavigationMenu_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position().left).css("top", jQuery('#floatNavigationMenu_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position().top-25);
				tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#floatNavigationMenu_'+floorplan_div).position().left+160).css("top", jQuery('#floatNavigationMenu_'+floorplan_div).position().top+33);

			});

		jQuery('#cvjs_enterpagenumber_'+floorplan_div).mouseout(function()
			{
				tip[cvjs_active_floorplan_div_nr].hide();
			});


			
		jQuery('#cvjs_selectpagefromlist_'+floorplan_div).mouseover(function()
			{

				try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
				var thisDiv = "cvjs_selectpagefromlist";
				var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
				//console.log(thisFloorplan);
				cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);


				tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});		
				tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].PageModal.SelectPageFromList);
				tip[cvjs_active_floorplan_div_nr].show();
	//			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#floatNavigationMenu_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position().left).css("top", jQuery('#floatNavigationMenu_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position().top-25);
				tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#floatNavigationMenu_'+floorplan_div).position().left+240).css("top", jQuery('#floatNavigationMenu_'+floorplan_div).position().top+33);

			});

		jQuery('#cvjs_selectpagefromlist_'+floorplan_div).mouseout(function()
			{
				tip[cvjs_active_floorplan_div_nr].hide();
			});

			
		jQuery('#cvjs_selectpagefromlist_'+floorplan_div).mousedown(function()
			{
				cvjs_PageChangeList(floorplan_div);

			});
			
			
			
		jQuery('#cvjs_forward_'+floorplan_div).mouseover(function()
			{

			if (cvjs_debug) console.log(cvjs_active_floorplan_div_nr+"  "+jQuery(this).attr('id'));
			
				try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
				var thisDiv = "cvjs_forward";
				var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
				console.log(thisFloorplan);
				cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);


				tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});		
				tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].PageModal.Next);
				tip[cvjs_active_floorplan_div_nr].show();
	//			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#floatNavigationMenu_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position().left+190).css("top", jQuery('#floatNavigationMenu_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position().top-25);
				tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#floatNavigationMenu_'+floorplan_div).position().left+290).css("top", jQuery('#floatNavigationMenu_'+floorplan_div).position().top+33);

			});

		jQuery('#cvjs_forward_'+floorplan_div).mouseout(function()
			{
				tip[cvjs_active_floorplan_div_nr].hide();
			});



		jQuery('#cvjs_fastforward_'+floorplan_div).mouseover(function()
			{

				try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
				var thisDiv = "cvjs_fastforward";
				var thisFloorplan = jQuery(this).attr('id').substring(thisDiv.length+1);
				//console.log(thisFloorplan);
				cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(thisFloorplan);


				tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});		
				tip[cvjs_active_floorplan_div_nr].html(languageTable.languages[cvjs_currentLanguage].PageModal.Last);
				tip[cvjs_active_floorplan_div_nr].show();
	//			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#floatNavigationMenu_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position().left+210).css("top", jQuery('#floatNavigationMenu_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position().top-25);
	//			tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#floatNavigationMenu_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position().left+220).css("top", jQuery('#floatNavigationMenu_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position().top+35);
				tip[cvjs_active_floorplan_div_nr].css("left", jQuery('#floatNavigationMenu_'+floorplan_div).position().left+305).css("top", jQuery('#floatNavigationMenu_'+floorplan_div).position().top+33);

			});

		jQuery('#cvjs_fastforward_'+floorplan_div).mouseout(function()
			{
				tip[cvjs_active_floorplan_div_nr].hide();
			});



		cvjs_initialize_allColorCheckboxes(floorplan_div);


		var url_loc = "url("+cvjs_imagesLocation+"pageChange_08.png)";
		jQuery('.changePagebox1').css("background-image", url_loc );

		
		// 4.1.01b
		url_loc = "url("+cvjs_imagesLocation+"compareDrawingName_11B.png)";
		jQuery('.compareDrawingbox1').css("background-image", url_loc );

		// 4.1.01b
		url_loc = "url("+cvjs_imagesLocation+"cvjsToolbar_dra_pageChange_11B.png)";
		jQuery('.changePagebox_topBar').css("background-image", url_loc );
		
	//	window.alert("url_loc"+url_loc);
		
		 
					
		
		// 3.3.04c - QR Pane
		jQuery("#"+floorPlan_Modal).append("<div id=\"cvjs_qrcode_"+floorplan_div+"\" style=\"width:200px; height:200px; margin-top:15px;\"></div>");	
		jQuery("#cvjs_qrcode_"+floorplan_div).hide();
		
		
		cvjs_modalsInitialized = true;
		
		// end refactoring 
			

	 },
	 error:function(data_e){console.log("Error "+data_e); return;}
   });				
	

}



var cvjs_makePDFEntireDoc = false;


var radioButton_publishAsPDF = 1;


var radioButton_mergeAsDXF = 1;



function cvjs_initialize_allColorCheckboxes(floorplan_div){




		jQuery("#radioMergeAsDXF1_"+floorplan_div)
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					radioButton_mergeAsDXF = 1;

					
					// collapse email  3.0.13e
					if (cvjs_preConversionFileExtension[cvjs_active_floorplan_div_nr].indexOf("pdf")==0  && cvjs_customPdfFolderFlag){
						// show entire document button
						console.log("show entire document button");
						jQuery("#mergeDXFModal_row2_"+floorplan_div).show();
						jQuery("#mergeDXFModal_row3_"+floorplan_div).hide();
						jQuery("#mergeDXFModal_row4_"+floorplan_div).hide();
					}
					else{
					// remove entire document button
						console.log("hide button");
						jQuery("#mergeDXFModal_row2_"+floorplan_div).hide();
						jQuery("#mergeDXFModal_row3_"+floorplan_div).show();
						jQuery("#mergeDXFModal_row4_"+floorplan_div).hide();

					}
					
					

					
				}
			});

		jQuery("#radioMergeAsDXF2_"+floorplan_div)
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					radioButton_mergeAsDXF = 2;
				
					if (cvjs_mailServerSetup){				
						// expand email 3.0.13e
						jQuery("#mergeDXFModal_row2_"+floorplan_div).hide();
						jQuery("#mergeDXFModal_row3_"+floorplan_div).hide();
						jQuery("#mergeDXFModal_row4_"+floorplan_div).show();
					}
					else{
						window.alert("Please set up e-mail server.");						
					}
				
				
				}
			});

		jQuery("#radioMergeAsDXF3_"+floorplan_div)
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					radioButton_mergeAsDXF = 3;
					// collapse email

					
					// collapse email  3.0.13e
					if (cvjs_preConversionFileExtension[cvjs_active_floorplan_div_nr].indexOf("pdf")==0  && cvjs_customPdfFolderFlag){
						// show entire document button
						console.log("show entire document button");
						jQuery("#mergeDXFModal_row2_"+floorplan_div).show();
						jQuery("#mergeDXFModal_row3_"+floorplan_div).hide();
						jQuery("#mergeDXFModal_row4_"+floorplan_div).hide();
					}
					else{
					// remove entire document button
						console.log("hide button");
						jQuery("#mergeDXFModal_row2_"+floorplan_div).hide();
						jQuery("#mergeDXFModal_row3_"+floorplan_div).show();
						jQuery("#mergeDXFModal_row4_"+floorplan_div).hide();

					}
					
					
				}
			});






		jQuery("#radioPublishAsPDF1_"+floorplan_div)
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					radioButton_publishAsPDF = 1;

					
					// collapse email  3.0.13e
					if (cvjs_preConversionFileExtension[cvjs_active_floorplan_div_nr].indexOf("pdf")==0  && cvjs_customPdfFolderFlag){
						// show entire document button
						console.log("show entire document button");
						jQuery("#publishPDFModal_row2_"+floorplan_div).show();
						jQuery("#publishPDFModal_row3_"+floorplan_div).hide();
						jQuery("#publishPDFModal_row4_"+floorplan_div).hide();
					}
					else{
					// remove entire document button
						console.log("hide button");
						jQuery("#publishPDFModal_row2_"+floorplan_div).hide();
						jQuery("#publishPDFModal_row3_"+floorplan_div).show();
						jQuery("#publishPDFModal_row4_"+floorplan_div).hide();

					}
					
					

					
				}
			});

		jQuery("#radioPublishAsPDF2_"+floorplan_div)
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					radioButton_publishAsPDF = 2;
				
					if (cvjs_mailServerSetup){				
						// expand email 3.0.13e
						jQuery("#publishPDFModal_row2_"+floorplan_div).hide();
						jQuery("#publishPDFModal_row3_"+floorplan_div).hide();
						jQuery("#publishPDFModal_row4_"+floorplan_div).show();
					}
					else{
						window.alert("Please set up e-mail server.");						
					}
				
				
				}
			});

		jQuery("#radioPublishAsPDF3_"+floorplan_div)
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					radioButton_publishAsPDF = 3;
					// collapse email

					
					// collapse email  3.0.13e
					if (cvjs_preConversionFileExtension[cvjs_active_floorplan_div_nr].indexOf("pdf")==0  && cvjs_customPdfFolderFlag){
						// show entire document button
						console.log("show entire document button");
						jQuery("#publishPDFModal_row2_"+floorplan_div).show();
						jQuery("#publishPDFModal_row3_"+floorplan_div).hide();
						jQuery("#publishPDFModal_row4_"+floorplan_div).hide();
					}
					else{
					// remove entire document button
						console.log("hide button");
						jQuery("#publishPDFModal_row2_"+floorplan_div).hide();
						jQuery("#publishPDFModal_row3_"+floorplan_div).show();
						jQuery("#publishPDFModal_row4_"+floorplan_div).hide();

					}
					
					
					
					
					
					
					
					
				}
			});



			
		jQuery("#radioEllipse1_"+floorplan_div)
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					//blue
					cvjs_ellipseRedlineType = 1;
				}
			});

		jQuery("#radioEllipse2_"+floorplan_div)
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					//red
					cvjs_ellipseRedlineType = 2;
				}
			});
			

		jQuery("#radioCreation1_"+floorplan_div)
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					//blue
					cvjs_creationInputType = 1;
				}
			});

		jQuery("#radioCreation2_"+floorplan_div)
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					//red
					cvjs_creationInputType = 2;
				}
			});
			
			
			


		jQuery("#radioColor1_"+floorplan_div)
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					//blue
					cvjs_genericPickedColor = "#0000FF";
					cvjs_currentRedline_color = "#0000FF";
					document.getElementById('cvjs_colorPickerValue').jscolor.fromString("#0000FF");
				}
			});

		jQuery("#radioColor2_"+floorplan_div)
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					//red
					cvjs_genericPickedColor = "#FF0000";
					cvjs_currentRedline_color = "#FF0000";
					document.getElementById('cvjs_colorPickerValue').jscolor.fromString("#FF0000");
				}
			});

		jQuery("#radioColor3_"+floorplan_div)
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					//orange
					cvjs_genericPickedColor = "#ffa500";
					cvjs_currentRedline_color = "#ffa500";
					document.getElementById('cvjs_colorPickerValue').jscolor.fromString("#ffa500");
				}
			});


		jQuery("#radioColor4_"+floorplan_div)
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					//yellow
					cvjs_genericPickedColor = "#fff200";
					cvjs_currentRedline_color = "#fff200";
					document.getElementById('cvjs_colorPickerValue').jscolor.fromString("#fff200");
				}
			});


		jQuery("#radioColor5_"+floorplan_div)
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					//green
					cvjs_genericPickedColor = "#22B14C";
					cvjs_currentRedline_color = "#22B14C";
					document.getElementById('cvjs_colorPickerValue').jscolor.fromString("#22B14C");
				}
			});


		jQuery("#radioColor6_"+floorplan_div)
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					//purple
					cvjs_genericPickedColor = "#800080";
					cvjs_currentRedline_color = "#800080";
					document.getElementById('cvjs_colorPickerValue').jscolor.fromString("#800080");
				}
			});


		jQuery("#radioColor7_"+floorplan_div)
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					//gray
					cvjs_genericPickedColor = "#808080";
					cvjs_currentRedline_color = "#808080";
					document.getElementById('cvjs_colorPickerValue').jscolor.fromString("#808080");
				}
			});


		jQuery("#radioColor8_"+floorplan_div)
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					//brown
					cvjs_genericPickedColor = "#B97A57";
					cvjs_currentRedline_color = "#B97A57";
					document.getElementById('cvjs_colorPickerValue').jscolor.fromString("#B97A57");
				}
			});




		jQuery("#radioColor1_background_"+floorplan_div)
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					//blue
					cvjs_genericPickedColor = "#FFFFFF";  //white
					// 3.1.03b
					try {document.getElementById('cvjs_backgroundPickerValue').jscolor.fromString("#FFFFFF");}catch (err){console.log(err);}
					cvjs_setBackgroundColorHex("#FFFFFF", floorplan_div_Array[cvjs_active_floorplan_div_nr]);
			}
			});

		jQuery("#radioColor2_background_"+floorplan_div)
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					//red
					cvjs_genericPickedColor = "#000000";  //black
					// 3.1.03b
					try {document.getElementById('cvjs_backgroundPickerValue').jscolor.fromString("#000000");}catch (err){console.log(err);}
					cvjs_setBackgroundColorHex("#000000", floorplan_div_Array[cvjs_active_floorplan_div_nr]);
				}
			});

		jQuery("#radioColor3_background_"+floorplan_div)
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					//orange
					cvjs_genericPickedColor = "#F0FFFF";  // Azure  	#F0FFFF
					// 3.1.03b
					try {document.getElementById('cvjs_backgroundPickerValue').jscolor.fromString("#F0FFFF");}catch (err){console.log(err);}
					cvjs_setBackgroundColorHex("#F0FFFF", floorplan_div_Array[cvjs_active_floorplan_div_nr]);
				}
			});


		jQuery("#radioColor4_background_"+floorplan_div)
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					//yellow
					cvjs_genericPickedColor = "#FFC0CB"; // Pink  	#FFC0CB
					// 3.1.03b
					try {document.getElementById('cvjs_backgroundPickerValue').jscolor.fromString("#FFC0CB");}catch (err){console.log(err);}
					cvjs_setBackgroundColorHex("#FFC0CB", floorplan_div_Array[cvjs_active_floorplan_div_nr]);
				}
			});


		jQuery("#radioColor5_background_"+floorplan_div)
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					//green
					cvjs_genericPickedColor = "#FFFAFA";  // Snow  	#FFFAFA
					// 3.1.03b
					try {document.getElementById('cvjs_backgroundPickerValue').jscolor.fromString("#FFFAFA");}catch (err){console.log(err);}
					cvjs_setBackgroundColorHex("#FFFAFA", floorplan_div_Array[cvjs_active_floorplan_div_nr]);
				}
			});


		jQuery("#radioColor6_background_"+floorplan_div)
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					//purple
					cvjs_genericPickedColor = "#C0C0C0";  //Silver  	#C0C0C0
					// 3.1.03b
					try {document.getElementById('cvjs_backgroundPickerValue').jscolor.fromString("#C0C0C0");}catch (err){console.log(err);}
					cvjs_setBackgroundColorHex("#C0C0C0", floorplan_div_Array[cvjs_active_floorplan_div_nr]);
				}
			});


		jQuery("#radioColor7_background_"+floorplan_div)
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					//gray
					cvjs_genericPickedColor = "#808080";  // Gray
					// 3.1.03b
					try {document.getElementById('cvjs_backgroundPickerValue').jscolor.fromString("#808080");}catch (err){console.log(err);}
					cvjs_setBackgroundColorHex("#808080", floorplan_div_Array[cvjs_active_floorplan_div_nr]);
				}
			});


		jQuery("#radioColor8_background_"+floorplan_div)
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					//brown
					cvjs_genericPickedColor = "#B97A57";
					// 3.1.03b
					try {document.getElementById('cvjs_backgroundPickerValue').jscolor.fromString("#B97A57");}catch (err){console.log(err);}
					cvjs_setBackgroundColorHex("#B97A57", floorplan_div_Array[cvjs_active_floorplan_div_nr]);
				}
			});



		jQuery("#radioColor1_generic")
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					//blue
					cvjs_genericPickedColor = "#0000FF";
				}
			});

		jQuery("#radioColor2_generic")
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					//red
					cvjs_genericPickedColor = "#FF0000";
				}
			});

		jQuery("#radioColor3_generic")
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					//orange
					cvjs_genericPickedColor = "#ffa500";
				}
			});


		jQuery("#radioColor4_generic")
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					//yellow
					cvjs_genericPickedColor = "#ffff00";
				}
			});


		jQuery("#radioColor5_generic")
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					//green
					cvjs_genericPickedColor = "#22B14C";
				}
			});


		jQuery("#radioColor6_generic")
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					//purple
					cvjs_genericPickedColor = "#800080";
				}
			});


		jQuery("#radioColor7_generic")
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					//gray
					cvjs_genericPickedColor = "#808080";
				}
			});


		jQuery("#radioColor8_generic")
			.change(function(){
				if( jQuery(this).is(":checked") ){
					var val = jQuery(this).val();
					//brown
					cvjs_genericPickedColor = "#B97A57";
				}
			});


		jQuery("#cvjs_grayscale_checkbox")
			.change(function(){
				if( jQuery(this).is(":checked") ){
					cvjs_printGrayscale = true;
				}else{
					cvjs_printGrayscale = false;
				}
			});

			
		// 3.3.02f    3.3.02g
		jQuery("#cvjs_printtoscale_checkbox")
			.change(function(){
				if( jQuery(this).is(":checked") ){
					cvjs_PrintToScale = true;
				}else{
					cvjs_PrintToScale = false;
				}
			});



		jQuery("#cvjs_measurementOption")
			.change(function(){
				if( jQuery(this).val() == 1 ){
					
//					window.alert("length");
					cvjs_measureArea = false;
					cvjs_measurementInteractiveType = 1;

					jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Distance);
					jQuery( "#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("0 "+cvjs_units[cvjs_active_floorplan_div_nr]);
					jQuery( "#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).attr('rows', 1);

					// 3.2.01f
					tRubberBand_poly_redline1.attr({'path': "M0,0"});
					cvjs_removeHandleFunc_MeasurementFilledPolygon()			
					
					jQuery("#cvjs_measurementModalText").html("<canvas id=\"dummy\" width=\"0\" height=\"20\"></canvas>"+languageTable.languages[cvjs_currentLanguage].MeasurementModal.Text);
					jQuery("#cvjs_measurementModalText").css('top',52);
					jQuery("#cvjs_measurementModalText").css('left',0);

					// 3.1.21h
					jQuery("#cvjs_closearea_button").hide();
				
					// clean up then do this
					var Ttrans_hG = "T0,0S0.01";
					tPolygon_redline1.attr({
						 transform: Ttrans_hG
					});

					tRubberBand_poly_redline1.attr({'path': "M0,0"});
					var Ttrans = "S0";
					measurement_Triangle.attr({
							fill: cvjs_currentRedline_color,
							transform: Ttrans
						});

						measurement_Triangle2.attr({
							fill: cvjs_currentRedline_color,
							transform: Ttrans
					});
	
					// 3.1.21g
					tPolygon_redline1.remove();
					measurement_Triangle.remove();
					measurement_Triangle2.remove();
			
	
					cvjs_Measurement_RedlinePolyline();	

					
				}



				if( jQuery(this).val() == 2 ){


					cvjs_measureArea = true;
					
					cvjs_measurementInteractiveType = 2;
	
					jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Area);
					jQuery( "#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("0 "+cvjs_units[cvjs_active_floorplan_div_nr]+"²");
					jQuery( "#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).attr('rows',1);

	
					jQuery("#cvjs_measurementModalText").html("<canvas id=\"dummy\" width=\"0\" height=\"20\"></canvas>"+languageTable.languages[cvjs_currentLanguage].MeasurementModal.TextArea);				
					jQuery("#cvjs_measurementModalText").css('top',52);
					jQuery("#cvjs_measurementModalText").css('left',0);
				
					// 3.1.21h
					jQuery("#cvjs_closearea_button").show();

					// 3.2.01f
					cvjs_removeHandleFunc_MeasurementPolyline();
			
				
					// clean up then do this...
					var Ttrans_hG = "T0,0S0.01";
					tPolygon_redline1.attr({
						 transform: Ttrans_hG
					});

					tRubberBand_poly_redline1.attr({'path': "M0,0"});
					var Ttrans = "S0";
					measurement_Triangle.attr({
							fill: cvjs_currentRedline_color,
							transform: Ttrans
						});

						measurement_Triangle2.attr({
							fill: cvjs_currentRedline_color,
							transform: Ttrans
					});

					// 3.1.21g
					tPolygon_redline1.remove();
					measurement_Triangle.remove();
					measurement_Triangle2.remove();
					
					cvjs_addHandleFunc_MeasurementFilledPolygon();
					
					//cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
					//cvjs_drawSpaceObject_RedlineFilledPolygon();
					//window.alert("area");
					
				}



				if( jQuery(this).val() == 3 ){
					
//					window.alert("length");
					cvjs_measureArea = false;
					cvjs_measurementInteractiveType = 3;

					jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Point);
					jQuery( "#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("(0,0)");
					jQuery( "#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).attr('rows',1);

					tRubberBand_poly_redline1.attr({'path': "M0,0"});
					cvjs_removeHandleFunc_MeasurementFilledPolygon()			
					cvjs_removeHandleFunc_MeasurementPolyline();
					
					jQuery("#cvjs_measurementModalText").html("<canvas id=\"dummy\" width=\"0\" height=\"20\"></canvas>"+languageTable.languages[cvjs_currentLanguage].MeasurementModal.PointText);
					jQuery("#cvjs_measurementModalText").css('top',52);
					jQuery("#cvjs_measurementModalText").css('left',0);

					// 3.1.21h
					jQuery("#cvjs_closearea_button").hide();

					
					// clean up then do this
					var Ttrans_hG = "T0,0S0.01";
					tPolygon_redline1.attr({
						 transform: Ttrans_hG
					});

					tRubberBand_poly_redline1.attr({'path': "M0,0"});
					var Ttrans = "S0";
					measurement_Triangle.attr({
							fill: cvjs_currentRedline_color,
							transform: Ttrans
						});

						measurement_Triangle2.attr({
							fill: cvjs_currentRedline_color,
							transform: Ttrans
					});
	
					// 3.1.21g
					tPolygon_redline1.remove();
					measurement_Triangle.remove();
					measurement_Triangle2.remove();
			
	
					cvjs_Measurement_RedlinePolyline();	

					
				}



				if( jQuery(this).val() == 4 ){

					cvjs_measurementInteractiveType = 4;

//					window.alert("length");
					cvjs_measureArea = false;

					jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Point);
					jQuery( "#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("(0,0)");
					jQuery( "#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).attr('rows',1);

					tRubberBand_poly_redline1.attr({'path': "M0,0"});
					cvjs_removeHandleFunc_MeasurementFilledPolygon()			
					cvjs_removeHandleFunc_MeasurementPolyline();
					
					jQuery("#cvjs_measurementModalText").html("<canvas id=\"dummy\" width=\"0\" height=\"20\"></canvas>"+languageTable.languages[cvjs_currentLanguage].MeasurementModal.PointText);
					jQuery("#cvjs_measurementModalText").css('top',52);
					jQuery("#cvjs_measurementModalText").css('left',0);

					// 3.1.21h
					jQuery("#cvjs_closearea_button").hide();

					
					// clean up then do this
					var Ttrans_hG = "T0,0S0.01";
					tPolygon_redline1.attr({
						 transform: Ttrans_hG
					});

					tRubberBand_poly_redline1.attr({'path': "M0,0"});
					var Ttrans = "S0";
					measurement_Triangle.attr({
							fill: cvjs_currentRedline_color,
							transform: Ttrans
						});

						measurement_Triangle2.attr({
							fill: cvjs_currentRedline_color,
							transform: Ttrans
					});
	
					// 3.1.21g
					tPolygon_redline1.remove();
					measurement_Triangle.remove();
					measurement_Triangle2.remove();
				
					cvjs_Measurement_RedlinePolyline();	

				}


				if( jQuery(this).val() == 5 ){

					cvjs_measurementInteractiveType = 5;

//					window.alert("length");
					cvjs_measureArea = false;

					jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Points);
					jQuery( "#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("(0,0)");
					jQuery( "#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).attr('rows',2);

//		                                +"<textarea class=\"cvjs_measurementDisplayBox\" id=\"cvjs_measurementBox_"+floorplan_div+"\" cols=\"26\" rows=\"2\"></textarea><button id=\"cvjs_measurement_button_icon\" class=\"btn\" onClick=\"cvjs_copyMeasurementField(\'"+floorplan_div+"\');\"><i class=\"fa fa-copy\"></i></button>"+


					tRubberBand_poly_redline1.attr({'path': "M0,0"});
					cvjs_removeHandleFunc_MeasurementFilledPolygon()			
					cvjs_removeHandleFunc_MeasurementPolyline();
					
					jQuery("#cvjs_measurementModalText").html("<canvas id=\"dummy\" width=\"0\" height=\"20\"></canvas>"+languageTable.languages[cvjs_currentLanguage].MeasurementModal.PointsText);
					jQuery("#cvjs_measurementModalText").css('top',76);
					jQuery("#cvjs_measurementModalText").css('left',226);

					// 3.1.21h
					jQuery("#cvjs_closearea_button").hide();

					
					// clean up then do this
					var Ttrans_hG = "T0,0S0.01";
					tPolygon_redline1.attr({
						 transform: Ttrans_hG
					});

					tRubberBand_poly_redline1.attr({'path': "M0,0"});
					var Ttrans = "S0";
					measurement_Triangle.attr({
							fill: cvjs_currentRedline_color,
							transform: Ttrans
						});

						measurement_Triangle2.attr({
							fill: cvjs_currentRedline_color,
							transform: Ttrans
					});
	
					// 3.1.21g
					tPolygon_redline1.remove();
					measurement_Triangle.remove();
					measurement_Triangle2.remove();
				
					cvjs_Measurement_RedlinePolyline();	

				}


				if( jQuery(this).val() == 6 ){

					cvjs_measurementInteractiveType = 6;

//					window.alert("length");
					cvjs_measureArea = false;

					jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Points);
					jQuery( "#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("(0,0)");
					jQuery( "#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).attr('rows',2);

					tRubberBand_poly_redline1.attr({'path': "M0,0"});
					cvjs_removeHandleFunc_MeasurementFilledPolygon()			
					cvjs_removeHandleFunc_MeasurementPolyline();
					
					jQuery("#cvjs_measurementModalText").html("<canvas id=\"dummy\" width=\"0\" height=\"20\"></canvas>"+languageTable.languages[cvjs_currentLanguage].MeasurementModal.PointsText);
					jQuery("#cvjs_measurementModalText").css('top',76);
					jQuery("#cvjs_measurementModalText").css('left',226);

					// 3.1.21h
					jQuery("#cvjs_closearea_button").hide();

					
					// clean up then do this
					var Ttrans_hG = "T0,0S0.01";
					tPolygon_redline1.attr({
						 transform: Ttrans_hG
					});

					tRubberBand_poly_redline1.attr({'path': "M0,0"});
					var Ttrans = "S0";
					measurement_Triangle.attr({
							fill: cvjs_currentRedline_color,
							transform: Ttrans
						});

						measurement_Triangle2.attr({
							fill: cvjs_currentRedline_color,
							transform: Ttrans
					});
	
					// 3.1.21g
					tPolygon_redline1.remove();
					measurement_Triangle.remove();
					measurement_Triangle2.remove();
				
					cvjs_Measurement_RedlinePolyline();	

				}




				if( jQuery(this).val() == 7 ){

					cvjs_measurementInteractiveType = 7;

//					window.alert("length");
					cvjs_measureArea = false;

					jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Points);
					jQuery( "#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("M0,0");
					jQuery( "#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).attr('rows',2);

					tRubberBand_poly_redline1.attr({'path': "M0,0"});
					cvjs_removeHandleFunc_MeasurementFilledPolygon()			
					cvjs_removeHandleFunc_MeasurementPolyline();
					
					jQuery("#cvjs_measurementModalText").html("<canvas id=\"dummy\" width=\"0\" height=\"20\"></canvas>"+languageTable.languages[cvjs_currentLanguage].MeasurementModal.PointsText);
					jQuery("#cvjs_measurementModalText").css('top',76);
					jQuery("#cvjs_measurementModalText").css('left',226);

					// 3.1.21h
					jQuery("#cvjs_closearea_button").hide();

					
					// clean up then do this
					var Ttrans_hG = "T0,0S0.01";
					tPolygon_redline1.attr({
						 transform: Ttrans_hG
					});

					tRubberBand_poly_redline1.attr({'path': "M0,0"});
					var Ttrans = "S0";
					measurement_Triangle.attr({
							fill: cvjs_currentRedline_color,
							transform: Ttrans
						});

						measurement_Triangle2.attr({
							fill: cvjs_currentRedline_color,
							transform: Ttrans
					});
	
					// 3.1.21g
					tPolygon_redline1.remove();
					measurement_Triangle.remove();
					measurement_Triangle2.remove();
				
					cvjs_Measurement_RedlinePolyline();	

				}

		});

								
		jQuery("#cvjs_measurearea_checkbox")
			.change(function(){
				if( jQuery(this).is(":checked") ){
					cvjs_measureArea = true;
					jQuery("#cvjs_measurementModalText").html("<canvas id=\"dummy\" width=\"0\" height=\"20\"></canvas>"+languageTable.languages[cvjs_currentLanguage].MeasurementModal.TextArea);				
				
					// 3.1.21h
					jQuery("#cvjs_closearea_button").show();

					// 3.2.01f
					cvjs_removeHandleFunc_MeasurementPolyline();
			
				
					// clean up then do this...
					var Ttrans_hG = "T0,0S0.01";
					tPolygon_redline1.attr({
						 transform: Ttrans_hG
					});

					tRubberBand_poly_redline1.attr({'path': "M0,0"});
					var Ttrans = "S0";
					measurement_Triangle.attr({
							fill: cvjs_currentRedline_color,
							transform: Ttrans
						});

						measurement_Triangle2.attr({
							fill: cvjs_currentRedline_color,
							transform: Ttrans
					});

					// 3.1.21g
					tPolygon_redline1.remove();
					measurement_Triangle.remove();
					measurement_Triangle2.remove();
				
					
					cvjs_addHandleFunc_MeasurementFilledPolygon();
					
					//cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
					//cvjs_drawSpaceObject_RedlineFilledPolygon();
				
				}else{
					cvjs_measureArea = false;



					// 3.2.01f
					tRubberBand_poly_redline1.attr({'path': "M0,0"});
					cvjs_removeHandleFunc_MeasurementFilledPolygon()			

					
					jQuery("#cvjs_measurementModalText").html("<canvas id=\"dummy\" width=\"0\" height=\"20\"></canvas>"+languageTable.languages[cvjs_currentLanguage].MeasurementModal.Text);

					// 3.1.21h
					jQuery("#cvjs_closearea_button").hide();

					
					// clean up then do this
					var Ttrans_hG = "T0,0S0.01";
					tPolygon_redline1.attr({
						 transform: Ttrans_hG
					});

					tRubberBand_poly_redline1.attr({'path': "M0,0"});
					var Ttrans = "S0";
					measurement_Triangle.attr({
							fill: cvjs_currentRedline_color,
							transform: Ttrans
						});

						measurement_Triangle2.attr({
							fill: cvjs_currentRedline_color,
							transform: Ttrans
					});
	
					// 3.1.21g
					tPolygon_redline1.remove();
					measurement_Triangle.remove();
					measurement_Triangle2.remove();
			
	
					cvjs_Measurement_RedlinePolyline();	
					
				}
			});



		jQuery("#cvjs_SelectVariablesTextBox")
			.change(function(){
				cvjs_customPrintTextboxOnChange();	
			});



		jQuery("#cvjs_layerlist_checkbox")
			.change(function(){
//				console.log("cvjs_layerlist_checkbox changed");				
				if( jQuery(this).is(":checked") ){
					cvjs_layerList_checkbox = true;
				}else{
					cvjs_layerList_checkbox = false;
				}
//				console.log("checked "+cvjs_layerList_checkbox);
				cvjs_LayerListModalXrefOnChange(1);	
			});

		jQuery("#cvjs_SelectLayerDrawings")
			.change(function(){
				cvjs_LayerListModalXrefOnChange(2);	
			});


			
		jQuery("#cvjs_entiredoc_checkbox")
			.change(function(){
				if( jQuery(this).is(":checked") ){
					cvjs_makePDFEntireDoc = true;
				}else{
					cvjs_makePDFEntireDoc = false;
				}
			});
			
			
			

		jQuery("#cvjs_printpdf_checkbox")
			.change(function(){
				if( jQuery(this).is(":checked") ){
					cvjs_printPdf = true;
				}else{
					cvjs_printPdf = false;
				}
			});


		jQuery("#cvjs_custom_checkbox")
			.change(function(){
				if( jQuery(this).is(":checked") ){
					cvjs_customPrintCheckbox = true;
					// show modals
					jQuery("#cvjs_printModalTextboxLocation").show();
					jQuery("#cvjs_printModalTextboxLocation_text").show();
					if (cvjs_customPrintDualTextboxMode){
						jQuery("#cvjs_printModalDualTextboxLocation").show();
						jQuery("#cvjs_printModalDualTextboxLocation_text").show();
					}

					var printModalClass = "printModal";
					if (cvjs_customPrintCheckboxMode || cvjs_customPrintTextboxMode)   // cvjs_customPrintTextboxMode
						printModalClass = "printModalTextbox" 
					
					
					var modalheight = jQuery('.'+printModalClass).css('height');
					modalheight = modalheight.substring(0, modalheight.indexOf("px"));
					var newheight = parseInt(modalheight) +90;
					jQuery('.'+printModalClass).css('height', newheight+"px");

					// make box larger
										
				}else{
					cvjs_customPrintCheckbox = false;
					jQuery("#cvjs_printModalTextboxLocation").hide();
					jQuery("#cvjs_printModalTextboxLocation_text").hide();
					if (cvjs_customPrintDualTextboxMode){
						jQuery("#cvjs_printModalDualTextboxLocation").hide();
						jQuery("#cvjs_printModalDualTextboxLocation_text").hide();						
					}
					// hide modals
					// make box smaller
					var printModalClass = "printModal";
					if (cvjs_customPrintCheckboxMode || cvjs_customPrintTextboxMode)   // cvjs_customPrintTextboxMode
						printModalClass = "printModalTextbox" 
					var modalheight = jQuery('.'+printModalClass).css('height');
					modalheight = modalheight.substring(0, modalheight.indexOf("px"));
					var newheight = parseInt(modalheight) - 90;
					jQuery('.'+printModalClass).css('height', newheight+"px");
				
				}
			});


}

var cvjs_customPrintTextboxOnChange_pre = 1;

function cvjs_customPrintTextboxOnChange(){
		
	//window.alert("variable "+variable+ " " +cvjs_customPrintTextboxOnChange_pre+" "+cvjs_printModalCustomTextBoxVariablesList[cvjs_customPrintTextboxOnChange_pre-1]+"  "+cvjs_printModalCustomTextBoxVariablesContent[cvjs_customPrintTextboxOnChange_pre-1]);
	// save text box associated with _pre	
	// change text box into text associated with this selection
	var variable = jQuery("#cvjs_SelectVariablesTextBox").val()	
	cvjs_printModalCustomTextBoxVariablesContent[cvjs_customPrintTextboxOnChange_pre-1]	= jQuery('#printmodal_text').val();
	jQuery('#printmodal_text').val(cvjs_printModalCustomTextBoxVariablesContent[variable-1]);	
	cvjs_customPrintTextboxOnChange_pre = variable;
	// this action has to be repeated at print

}


function cvjs_LayerListModalXrefOnChange(mode){

	// extract values
//	window.alert("cvjs_LayerListModalXrefOnChange");
	
	var xreflist = jQuery("#cvjs_SelectLayerDrawings").val()

//	var xreflistlength = jQuery("#cvjs_SelectLayerDrawings option").length();
	
	var xreflistlength = document.getElementById("cvjs_SelectLayerDrawings").length;
	
	var XrefListArr = new Array();
	if (xreflist == null){
		XrefListArr[0] = "none";		
	}
	else{
		xreflist = xreflist.toString();
		XrefListArr = xreflist.split(",");
	}

	//window.alert("XrefListArr.length "+XrefListArr.length+"  "+XrefListArr[0]+" xreflistlength= "+xreflistlength);

// ASDF
		
	if (XrefListArr[0].indexOf("none") == 0){
		if (mode==2){
			cvjs_layerList.clear();			
			for (id=0; id<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; id++){				
					cvjs_LayerOff(layerTable[cvjs_active_floorplan_div_nr].layers[id].layer);
			}
		//	cvjs_AllLayersOff();
		// clear layer list 
		// all layers off
			return;
		}
	}		

	
	
//	if ( xreflist == 1){	// a					
	if ( XrefListArr.length == xreflistlength){	// all Files are selected for display					
		
		cvjs_layerList.clear();

//		console.log(cvjs_active_floorplan_div_nr+" "+layerTable[cvjs_active_floorplan_div_nr].numberOfLayers);	
//		if (true) return; 

		for (i=0; i<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; i++){
			var sLink = "javascript: cvjs_LayerListClick("+i+","+i+")";

			if( cvjs_layerList_checkbox ){
				
//				console.log("6245 A");				
				if (layerTable[cvjs_active_floorplan_div_nr].layers[i].status == "OFF"){
					
					
		// 6.2.43 ON
		cvjs_spaceObjectLayerOnOff(floorplan_div_Array[cvjs_active_floorplan_div_nr], layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName, "off");
					
					cvjs_LayerOff(layerTable[cvjs_active_floorplan_div_nr].layers[i].layer);
					cvjs_layerList.add({
					  selected: languageTable.languages[cvjs_currentLanguage].LayerListModal.Off,
					  link: sLink,
					  id: i,
					  layer: layerTable[cvjs_active_floorplan_div_nr].layers[i].layerBaseName,
					});
				}

				if (layerTable[cvjs_active_floorplan_div_nr].layers[i].status == "ON"){
					cvjs_LayerOn(layerTable[cvjs_active_floorplan_div_nr].layers[i].layer);

		// 6.2.43 ON
		cvjs_spaceObjectLayerOnOff(floorplan_div_Array[cvjs_active_floorplan_div_nr], layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName, "on");

					cvjs_layerList.add({
					  selected: languageTable.languages[cvjs_currentLanguage].LayerListModal.On,
					  link: sLink,
					  id: i,
					  layer: layerTable[cvjs_active_floorplan_div_nr].layers[i].layerBaseName,
					});
				}
			}
			else{
				if (layerTable[cvjs_active_floorplan_div_nr].layers[i].status == "OFF"){
				cvjs_LayerOff(layerTable[cvjs_active_floorplan_div_nr].layers[i].layer);
				cvjs_layerList.add({
					  selected: languageTable.languages[cvjs_currentLanguage].LayerListModal.Off,
					  link: sLink,
					  id: i,
					  layer: layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName,
					});
				}

				if (layerTable[cvjs_active_floorplan_div_nr].layers[i].status == "ON"){
					cvjs_LayerOn(layerTable[cvjs_active_floorplan_div_nr].layers[i].layer);
					cvjs_layerList.add({
					  selected: languageTable.languages[cvjs_currentLanguage].LayerListModal.On,
					  link: sLink,
					  id: i,
					  layer: layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName,
					});
				}
			}
		}
		
		//set all layers on, if they have been hidden
		if (mode==2) modal_all_layer_on();

	}
	else{
		// parsing through the list 
		// new is that the base file can be separately choosen	
		// nr 1 is base file
		// everything else is above. 
		var baseflag = false;
		var xrefflag = false;
		
		
		for (l=0; l<XrefListArr.length; l++){
			if (XrefListArr[l].indexOf("1") == 0 && XrefListArr[l].length == 1 ) baseflag = true;
			if (parseInt(XrefListArr[l])>=2) xrefflag = true;
		}
				
		//window.alert("baseflag "+baseflag+" xrefflag "+xrefflag);
	
		cvjs_layerList.clear();
		var k = 0; // layer counter
		for (i=0; i<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; i++){
			
			var thisXref = layerTable[cvjs_active_floorplan_div_nr].layers[i].xRefFile							
			
			// do someting if 1 is part of the list
			// if 1 is part of the list			
			if (thisXref.indexOf("none")==0 && baseflag){
				
				var sLink = "javascript: cvjs_LayerListClick("+i+","+k+")";

				if (mode ==1){
					if( cvjs_layerList_checkbox ){
						
//			window.alert("_6245 here 1");			
						if (layerTable[cvjs_active_floorplan_div_nr].layers[i].status == "OFF"){
							cvjs_LayerOff(layerTable[cvjs_active_floorplan_div_nr].layers[i].layer);
							cvjs_layerList.add({
							  selected: languageTable.languages[cvjs_currentLanguage].LayerListModal.Off,
							  link: sLink,
							  id: k,
							  layer: layerTable[cvjs_active_floorplan_div_nr].layers[i].layerBaseName,
							});
						}

						if (layerTable[cvjs_active_floorplan_div_nr].layers[i].status == "ON"){
							cvjs_LayerOn(layerTable[cvjs_active_floorplan_div_nr].layers[i].layer);
							cvjs_layerList.add({
							  selected: languageTable.languages[cvjs_currentLanguage].LayerListModal.On,
							  link: sLink,
							  id: k,
							  layer: layerTable[cvjs_active_floorplan_div_nr].layers[i].layerBaseName,
							});
						}
					}
					else{
						if (layerTable[cvjs_active_floorplan_div_nr].layers[i].status == "OFF"){
							cvjs_LayerOff(layerTable[cvjs_active_floorplan_div_nr].layers[i].layer);
							cvjs_layerList.add({
							  selected: languageTable.languages[cvjs_currentLanguage].LayerListModal.Off,
							  link: sLink,
							  id: k,
							  layer: layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName,
							});
						}

						if (layerTable[cvjs_active_floorplan_div_nr].layers[i].status == "ON"){
							cvjs_LayerOn(layerTable[cvjs_active_floorplan_div_nr].layers[i].layer);
							cvjs_layerList.add({
							  selected: languageTable.languages[cvjs_currentLanguage].LayerListModal.On,
							  link: sLink,
							  id: k,
							  layer: layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName,
							});
						}
					}
				}
				else{  // mode = 2
				
						if( cvjs_layerList_checkbox ){

//			window.alert("_6245 here 2");			


								cvjs_LayerOn(layerTable[cvjs_active_floorplan_div_nr].layers[i].layer);
								cvjs_layerList.add({
								  selected: languageTable.languages[cvjs_currentLanguage].LayerListModal.On,
								  link: sLink,
								  id: k,
								  layer: layerTable[cvjs_active_floorplan_div_nr].layers[i].layerBaseName,
								});

						}
						else{
								cvjs_LayerOn(layerTable[cvjs_active_floorplan_div_nr].layers[i].layer);
								cvjs_layerList.add({
								  selected: languageTable.languages[cvjs_currentLanguage].LayerListModal.On,
								  link: sLink,
								  id: k,
								  layer: layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName,
								});

						}
					
				}

				k++;				
				continue;
			} // end of base selected...
			

//window.alert("before xrefflag "+xrefflag+"  XrefListArr.length"+XrefListArr.length);

			// loop through 2-x in the list, 1 is base drawing
			var thisXrefInList = false;
			if (xrefflag){  // we check if this xref is in active list
				for (m=0; m<XrefListArr.length; m++){
					var optionNr = parseInt(XrefListArr[m]);
					if (optionNr>1){
						// get the xref in the list 
						var e = document.getElementById("cvjs_SelectLayerDrawings");
						var strUser = e.options[optionNr-1].text;
						console.log("first "+strUser+"  "+thisXref);
						strUser = strUser.substring(languageTable.languages[cvjs_currentLanguage].LayerListModal.Xref.length+1);
						console.log("second "+strUser+" "+thisXref);
						// then check if it equals the xref we have 
						if ( strUser.indexOf(thisXref) == 0  &&  strUser.length == thisXref.length ) thisXrefInList = true;											
					}					
				}	
			}

			if (thisXrefInList){
//			if (thisXref.indexOf(XrefFileList[xreflist-2]) == 0){
				var sLink = "javascript: cvjs_LayerListClick("+i+","+k+")";

				if (mode == 1){

					if( cvjs_layerList_checkbox ){
						
//			window.alert("_6245 here 3");			
						
						if (layerTable[cvjs_active_floorplan_div_nr].layers[i].status == "OFF"){
							cvjs_LayerOff(layerTable[cvjs_active_floorplan_div_nr].layers[i].layer);
							cvjs_layerList.add({
							  selected: languageTable.languages[cvjs_currentLanguage].LayerListModal.Off,
							  link: sLink,
							  id: k,
							  layer: layerTable[cvjs_active_floorplan_div_nr].layers[i].layerBaseName,
							});
						}

						if (layerTable[cvjs_active_floorplan_div_nr].layers[i].status == "ON"){
							cvjs_LayerOn(layerTable[cvjs_active_floorplan_div_nr].layers[i].layer);
							cvjs_layerList.add({
							  selected: languageTable.languages[cvjs_currentLanguage].LayerListModal.On,
							  link: sLink,
							  id: k,
							  layer: layerTable[cvjs_active_floorplan_div_nr].layers[i].layerBaseName,
							});
						}
					}
					else{
						if (layerTable[cvjs_active_floorplan_div_nr].layers[i].status == "OFF"){
							cvjs_LayerOff(layerTable[cvjs_active_floorplan_div_nr].layers[i].layer);
							cvjs_layerList.add({
							  selected: languageTable.languages[cvjs_currentLanguage].LayerListModal.Off,
							  link: sLink,
							  id: k,
							  layer: layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName,
							});
						}

						if (layerTable[cvjs_active_floorplan_div_nr].layers[i].status == "ON"){
							cvjs_LayerOn(layerTable[cvjs_active_floorplan_div_nr].layers[i].layer);
							cvjs_layerList.add({
							  selected: languageTable.languages[cvjs_currentLanguage].LayerListModal.On,
							  link: sLink,
							  id: k,
							  layer: layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName,
							});
						}
					}
				}
				else{ // mode = 2
				
						if( cvjs_layerList_checkbox ){
							
//			window.alert("_6245 here 4");			
							
								cvjs_LayerOn(layerTable[cvjs_active_floorplan_div_nr].layers[i].layer);
								cvjs_layerList.add({
								  selected: languageTable.languages[cvjs_currentLanguage].LayerListModal.On,
								  link: sLink,
								  id: k,
								  layer: layerTable[cvjs_active_floorplan_div_nr].layers[i].layerBaseName,
								});
						}
						else{
								cvjs_LayerOn(layerTable[cvjs_active_floorplan_div_nr].layers[i].layer);
								cvjs_layerList.add({
								  selected: languageTable.languages[cvjs_currentLanguage].LayerListModal.On,
								  link: sLink,
								  id: k,
								  layer: layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName,
								});
						}

				}
								
				k++;
			}
			else{
				cvjs_LayerOff(layerTable[cvjs_active_floorplan_div_nr].layers[i].layer);				
			}
		}
	}
	
}



function cvjs_line_thickness_modal_hide(floorplan_div){

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;

	jQuery('#linethicknessModal_'+floorplan_div).hide();
}


function cvjs_exit_documentpagechangemodal(floorplan_div){

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;

	jQuery('#documentPageChangeModal_'+floorplan_div).hide();
}



function cvjs_exit_redlinethicknessmodal(floorplan_div){

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;

	jQuery('#thicknessModal_'+floorplan_div).hide();
}


function cvjs_exit_informationmodal(floorplan_div){

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;

	jQuery('#info_messageModal_'+floorplan_div).modal('hide');
}


function cvjs_exit_informationmodal_2(floorplan_div){

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;

	jQuery('#info_messageModal_2_'+floorplan_div).hide();
}





function cvjs_exit_textsearchmodal(floorplan_div){

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;

	jQuery("#textsearchModal_"+floorplan_div).hide();

	jQuery( cvjs_textSearchPreElement ).css("fill" , cvjs_textSearchPreFill);

}


function cvjs_exit_layerlist_spaceobjects(floorplan_div){

// find the room and text layer


	for (i=0; i<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; i++){

			var item = cvjs_layerListSpace.get('id', i)[0];
			var text = item.values().text_room_layer;

			if (text.indexOf(languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.NotAssigned)>-1){
			}
			else
			if (text.indexOf(languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.TextLayer)>-1){
				cvjs_convertTextLayer = layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName;
			}
			else
				cvjs_convertRoomLayer = layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName;
	}

	// console.log(" "+cvjs_convertTextLayer+"   "+cvjs_convertRoomLayer+"   ");

	cvjs_layerListSpace.clear();
	jQuery("#layerListSpaceObject_"+floorplan_div).hide();
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
}


function cvjs_exit_layerlist(floorplan_div){

	cvjs_layerList.clear();
	jQuery("#layerList_"+floorplan_div).hide();
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;

}



function cvjs_exit_pagechangelist(floorplan_div){

	cvjs_pagechangeList.clear();
	jQuery("#pagechangeList_"+floorplan_div).hide();
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;

}

function cvjs_exitLineThicknessModal(floorplan_div){

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;

	jQuery('#linethicknessModal_'+floorplan_div).hide();

}

/**
 * Adjust minimum line thickness
 * @param {int} precentage - In percentage, set the factor to adjust the minumum line thickness, a value over 100 makes lines thicker, a value below 100 makes lines thinner
 */

function cvjs_adjustMinimumLineThickness(percentage){

	var factor = percentage/100.0;
	
	cvjs_svgLineThickness = true;  // 6.1.17
	
console.log("factor ="+factor+" "+cvjs_svgLineThickness);
	
	if (factor>0){

		if (!cvjs_svgLineThickness){

			cvjs_MinWidth =  cvjs_MinWidth*factor;
			layers_all.clear();
			drawDrawing(cvjs_rPaper[cvjs_active_floorplan_div_nr]);
			cvjs_masterBackground[cvjs_active_floorplan_div_nr].add(layers_all);
		}else{  // SVG line thickness 2017-08-03

console.log("We are adjusting!!!");
		 var oArr = {};			   
//       6.1.04e
		  var searchString =  "*[id]";
		  if (cvjs_zeroWidthHandling) searchString = "*[id] .ZW";		  
		  jQuery(searchString).each(function() {
			   
				   var id = jQuery(this).attr('id');
				   if (!oArr[id]) oArr[id] = true;
			   });

			   for (var prop in oArr){

					try{

						var target = "#"+prop;

						//console.log(target+" parent id"+jQuery(target).parent().attr("id"));

						if (jQuery(target).parent().attr("id").indexOf("layer_")==0 || jQuery(target).parent().attr("id").indexOf("Layer_")==0){

							// console.log("target with Layer/layour parent "+target);

							var valWidth = jQuery(target).css("stroke-width");

							//console.log(valWidth);

							if (valWidth.indexOf("px")>-1) {
								valWidth = valWidth.substring(0,valWidth.indexOf("px"));
								valWidth = parseFloat(valWidth);
								valWidth = valWidth *factor;
							}
							else
								valWidth = valWidth *factor;

							jQuery(target).css("stroke-width", valWidth);
						}

					}catch(err){}

				}
		}

	}

}





var linethickness_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];

var first_thickness = true;

var reference_thickness = 0.3;
var cvjs_cvStyles_part1 = "";
var cvjs_cvStyles_part2 = "";
var lineSliderValue = 0.3;
var lineSliderValue3 = 1.0;
var lineSliderStartValue = 100;
var lineSliderStartValue3 = 100;
var lineSliderMax = 0.5;
var lineSliderStep = lineSliderMax/5.0;
var cvjs_MinWidthSVG = 1;
var cvjs_MinWidthSVGZW = 0.6;
var cvjs_MinWidthSVGZWfactor = 1;
var cvjs_svgLineThickness = false;
var cvjs_SVGLineThicknessArray = {};


function cvjs_activateLineThicknessModal(floorplan_div){

	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;

	
	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}	
	
	
	if (linethickness_offset_flag[cvjs_active_floorplan_div_nr]){
		linethickness_offset_flag[cvjs_active_floorplan_div_nr] = false;
		// 3.1.21j .appendTo('body');		
		//window.alert("here");  // .appendTo('body')
		jQuery("#linethicknessModal_"+floorplan_div).css({position: "fixed"});
		jQuery("#linethicknessModal_"+floorplan_div).offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});
	}

		
	if (first_thickness){
		first_thickness = false;
		var svgFlag = false
		try{
			reference_thickness = cvjs_MinWidth;
		}
		catch(err){  // this is an SVG file, we set the reference thickness to 1   2017-08-03
			svgFlag = true;
		}

		try{
			if (cvjs_MinWidth==-1) { reference_thickness=1; cvjs_MinWidth=1; svgFlag = true;}
		}
		catch(err){  // this is an SVG file, we set the reference thickness to 1   2017-08-03
			svgFlag = true;
		}


//		window.alert("before "+jQuery("#cv_styles").html());
/*
		jQuery("#cv_styles").html(
	    "<![CDATA["
	    +"svg{ background-color: white; }"
		+":root {"
		+"    --tmsMinLineWidth: 4.6;"
		+"    --tmsbPostFix: 0;"
		+"}"
		+".tmsPoints {"
		+"    fill: none;"
		+"    stroke-width: var(--tmsMinLineWidth);"
		+"    r: calc(var(--tmsMinLineWidth)/2.0);"
		+"}"
		+".ZW {"
		+"    stroke-width: var(--tmsMinLineWidth);"
		+"}"
	    +"]]> );");
*/
/*
var zwWidth = 0.6;

		jQuery("#cv_styles").html(
	    "svg{ background-color: white; }"
		+":root {"
		+"    --tmsMinLineWidth: "+zwWidth+";"
		+"    --tmsbPostFix: 0;"
		+"}"
		+".tmsPoints {"
		+"    fill: none;"
		+"    stroke-width: var(--tmsMinLineWidth);"
		+"    r: calc(var(--tmsMinLineWidth)/2.0);"
		+"}"
		+".ZW {"
		+"    stroke-width: var(--tmsMinLineWidth);"
		+"}");
*/
		var cvStyles = jQuery("#cv_styles").html();

        try{
            cvjs_cvStyles_part1 = cvStyles.substring(0, cvStyles.indexOf("tmsMinLineWidth:")+17);
            cvjs_cvStyles_part2 = cvStyles.substring(cvStyles.indexOf("tmsMinLineWidth:")+17);
            cvjs_cvStyles_part2 = cvjs_cvStyles_part2.substring(cvjs_cvStyles_part2.indexOf(";"));
            var lwVal = cvStyles.substring(cvStyles.indexOf("tmsMinLineWidth:")+17);
            lwVal = lwVal.substring(0, lwVal.indexOf(";"));
            cvjs_MinWidthSVGZW = parseFloat(lwVal);		
        }catch (err){   //6.2.31

                // 6.2.31
                var elem, ZWstyle;
                elem = document.querySelector('.ZW');
                ZWstyle = getComputedStyle(elem);
                var ZW_strokeweight =  ZWstyle.getPropertyValue('stroke-width')
                try{
                    cvjs_MinWidthSVGZW = parseFloat(ZW_strokeweight.substring(0, ZW_strokeweight.indexOf("px")));
                }catch(err){
                    console.log("cv_styles as getproperty value: "+err);
                }




        }    

//		lineSliderValue3 = cvjs_MinWidthSVGZW; 
//		window.alert("the string "+cvjs_cvStyles_part1+cvjs_MinWidthSVGZW+cvjs_cvStyles_part2);
//		window.alert("after "+jQuery("#cv_styles").html());

		if (svgFlag){
			cvjs_MinWidthSVG = 1;
			reference_thickness = cvjs_MinWidthSVG;
			cvjs_svgLineThickness = true;
			
			cvjs_SVGLineThicknessArray = {}
		   var oArr = {};
		   
		   // 6.2.09
			jQuery("*[id^='cv_']").each(function (i, el) {			
				   var id = jQuery(this).attr('id');				
				  // console.log("id="+id+"  i="+i);
				   if (!oArr[id]) oArr[id] = true;
			 });		  
		   
		   for (var prop in oArr){
				try{
					var target = "#"+prop;
					//console.log(target+" parent id: "+jQuery(target).parent().attr("id"));
					// 6.2.09
					// if it has a CV color parent and is no a ZW object 
					if (jQuery(target).parent().attr("id").indexOf("cvclr_")==0 && !jQuery(target).hasClass( "ZW" )){
						//console.log("FIRST THICKNESS target with Layer/layour parent "+target);
						var valWidth = jQuery(target).css("stroke-width");
						//console.log(prop+" inside loop "+valWidth);

						if (valWidth.indexOf("px")>-1) {
							valWidth = valWidth.substring(0,valWidth.indexOf("px"));
							valWidth = parseFloat(valWidth);
						}
						cvjs_SVGLineThicknessArray[prop] = valWidth;						
					}
				}catch(err){}
			}
		}
	}


	try{
		lineSliderValue = cvjs_MinWidth;
	}
	catch(err){  // this is an SVG file, we set the value accordingly   2017-08-03

		lineSliderValue = cvjs_MinWidthSVG;
	}

	lineSliderStartValue  = 100.0;//*cvjs_MinWidth/reference_thickness;
	lineSliderStartValue3  = 100.0;//*cvjs_MinWidth/reference_thickness;
	jQuery( "#cvjs_slider2_"+floorplan_div ).slider('value',lineSliderStartValue);
//	jQuery( "#cvjs_slider3_"+floorplan_div ).slider('value',lineSliderStartValue3);
//	jQuery( "#linseThicknessZW_"+floorplan_div ).html((cvjs_MinWidth).toFixed(2));


	try{
//		jQuery( "#lineThickness_"+floorplan_div ).html((cvjs_MinWidth).toFixed(2));
		jQuery( "#lineThickness_"+floorplan_div ).val((cvjs_MinWidth).toFixed(2));	
	}
	catch(err){  // this is an SVG file, we set the value accordingly   2017-08-03
//		jQuery( "#lineThickness_"+floorplan_div ).html((cvjs_MinWidthSVG).toFixed(2));
		jQuery( "#lineThickness_"+floorplan_div ).val((cvjs_MinWidthSVG).toFixed(2));
	}

	jQuery('#linethicknessModal_'+floorplan_div).show();

}


//var cvjs_iconInterfaceDisabled = false;
//var cvjs_iconInterfaceClassicSkin = false;
//var cvjs_iconInterfaceClassicSkinDeviceSize = false;
//var cvjs_iconInterfaceClassicSkin_MinimumDisk = false;
//var pageChangeInterface = true;
//var pageChangeInterfaceFalse_noIconNavigation = false;
//var cvjs_iconInterfaceClassicSkin_PanZoomDisk = false;


// 3.2.02f
var cvjs_iconInterfaceDisabled = [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false];
var cvjs_iconInterfaceClassicSkin = [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false];
var cvjs_iconInterfaceClassicSkinDeviceSize = [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false];
var cvjs_iconInterfaceClassicSkin_MinimumDisk = [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false];
var pageChangeInterfaceFalse_noIconNavigation = [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false];
var cvjs_iconInterfaceClassicSkin_PanZoomDisk = [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false];

var pageChangeInterface = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];

// 3.2.02f
var interfaceCounterDiv = ["","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""];   // we start with the interface counter
var interfaceCounter = 0;   // we start with the interface counter, zero is default variables all others are allocation


function cvjs_interfaceCounterIndex(floorplan_div){

//window.alert("cvjs_interfaceCounterIndex"+floorplan_div);

	for (var i=0; i< interfaceCounterDiv.length; i++){
		if (interfaceCounterDiv[i].indexOf(floorplan_div)>-1 && interfaceCounterDiv[i].length == floorplan_div.length){
			return i;
		}
	}

	floorplan_div = floorplan_div+"_svg";
	
	for (var i=0; i< interfaceCounterDiv.length; i++){
		if (interfaceCounterDiv[i].indexOf(floorplan_div)>-1 && interfaceCounterDiv[i].length == floorplan_div.length){
			return i;
		}
	}
	// we simply return 0, assuming there is no allocation and therefore using the default values		
	return 0;  // as default
}


// var isSmartPhoneOrTablet  is not defined?????
//ÅÅÅÅÅ
//cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);


/**
 * Show the zoom disk 
 * @param {String} floorplan_div - the div running CADViewer
 */

function cvjs_displayAllInterfaceControlsZoomDisk(floorplan_div){

	var svgDiv = floorplan_div+"_svg";   //  floorPlan_div		
	jQuery('#gMenu'+"_"+svgDiv).show();

}


/**
 * Hide the page change modal
 * @param {String} floorplan_div - the div running CADViewer
 */

function cvjs_hideAllInterfaceControls(floorplan_div){

	var svgDiv = floorplan_div+"_svg";   //  floorPlan_div
	jQuery('#gMenu'+"_"+svgDiv).hide();
		
}



// 3.2.02f
/**
 * Disable/enable page change modal
 * @param {boolean} mode - Set the modal interface, default is true, false disables page change modal
 * @param {boolean} disableNavButtons - Disable page navigation icons in main menu disk. As a default when the page modal is disabled, extra navigation buttons are introduced in the icon interface. If always loading single page files, and no navigation is needed, set this to to true
 * @param {String} floorplan_div - the div running CADViewer
 */

function cvjs_setIconInterfaceControls_PageModal(mode, disableNavButtons, floorplan_div){

	interfaceCounter++;
	var selectedDiv = interfaceCounter;
	interfaceCounterDiv[selectedDiv] = floorplan_div+"_svg";  // adding _svg for internal processing
	
	pageChangeInterface[selectedDiv] = mode;
	pageChangeInterfaceFalse_noIconNavigation[selectedDiv] = disableNavButtons;

}


// 3.2.02f
/**
 * Removes the icon interface for viewing, redlining, etc. so that developers can control their own interface
 * @param {boolean} mode - Set the modal interface, default is true
 * @param {String} floorplan_div - the div running CADViewer
 */
function cvjs_setIconInterfaceControls_DisableIcons(mode, floorplan_div){
	
	interfaceCounter++;
	var selectedDiv = interfaceCounter;
	interfaceCounterDiv[selectedDiv] = floorplan_div+"_svg";  // adding _svg for internal processing
	
//window.alert("floorplan_div "+floorplan_div+"selectedDiv="+selectedDiv);
	
	cvjs_iconInterfaceDisabled[selectedDiv] = mode;
	pageChangeInterface[selectedDiv] = false;
	cvjs_iconInterfaceClassicSkin[selectedDiv] = false;
}



/**
 * Removes all icon interface components  for viewing, redlining, etc. so that developers can control their own interface
 * @param {boolean} mode - Set the modal interface, default is true
 * @param {String} floorplan_div - the div running CADViewer
 */
function cvjs_displayAllInterfaceControls(mode, floorplan_div){
	
	var selectedDiv = interfaceCounter;	
	var counter = cvjs_interfaceCounterIndex(floorplan_div);
	// zero is the default interface so we add one if 0
	if (counter>0){
		// we have a match
		selectedDiv = counter;
	}
	else{
		interfaceCounter++;
		selectedDiv = interfaceCounter;
		interfaceCounterDiv[selectedDiv] = floorplan_div+"_svg";  // adding _svg for internal processing
	//window.alert("floorplan_div "+floorplan_div+"selectedDiv="+selectedDiv);
	}

	cvjs_iconInterfaceDisabled[selectedDiv] = !mode;   // this must be false
	pageChangeInterface[selectedDiv] = false;
	cvjs_iconInterfaceClassicSkin[selectedDiv] = false;	
	
	
	// 3.3.01c
	cvjs_loadTopIconMenuVisible[selectedDiv] = mode;
	cvjs_loadTopIconNavigationVisible[selectedDiv] = mode;
	
}











// 3.2.02f
/**
 * Set the classic icon desk, larger on desktop, smaller on devices
 * @param {boolean} mode - Set the modal interface, default is true
 * @param {String} floorplan_div - the div running CADViewer
 */
function cvjs_setIconInterfaceControls_ClassicSkin(mode, floorplan_div){

	interfaceCounter++;
	var selectedDiv = interfaceCounter;
	interfaceCounterDiv[selectedDiv] = floorplan_div+"_svg";  // adding _svg for internal processing

	
	cvjs_iconInterfaceDisabled[selectedDiv] = mode;
	pageChangeInterface[selectedDiv] = false;
	cvjs_iconInterfaceClassicSkin[selectedDiv] = mode;
	cvjs_iconInterfaceClassicSkinDeviceSize[selectedDiv] = false;

}

// 3.2.02f
/**
 * Set the classic icon desk, device size on all platforms
 * @param {boolean} mode - Set the modal interface, default is true
 * @param {String} floorplan_div - the div running CADViewer
 */
function cvjs_setIconInterfaceControls_ClassicSkin_DevicesSizeOnly(mode, floorplan_div){

	interfaceCounter++;
	var selectedDiv = interfaceCounter;
	interfaceCounterDiv[selectedDiv] = floorplan_div+"_svg";  // adding _svg for internal processing

	
	cvjs_iconInterfaceDisabled[selectedDiv] = mode;
	pageChangeInterface[selectedDiv] = false;
	cvjs_iconInterfaceClassicSkin[selectedDiv] = mode;
	cvjs_iconInterfaceClassicSkinDeviceSize[selectedDiv] = mode;

}


// 3.2.02f
/**
 * Set minimum icon desk, same size on all platforms
 * @param {boolean} mode - Set the modal interface, default is true
 * @param {String} floorplan_div - the div running CADViewer
 */
function cvjs_setIconInterfaceControls_MimimumDisk(mode, floorplan_div){


	// 3.3.01c
	var selectedDiv = interfaceCounter;	
	var counter = cvjs_interfaceCounterIndex(floorplan_div);
	// zero is the default interface so we add one if 0


	if (counter>0){
		// we have a match
		selectedDiv = counter;
	}
	else{
		interfaceCounter++;
		selectedDiv = interfaceCounter;
		interfaceCounterDiv[selectedDiv] = floorplan_div+"_svg";  // adding _svg for internal processing
	//window.alert("floorplan_div "+floorplan_div+"selectedDiv="+selectedDiv);
	}
	
/*
	interfaceCounter++;
	var selectedDiv = interfaceCounter;
	interfaceCounterDiv[selectedDiv] = floorplan_div+"_svg";  // adding _svg for internal processing
*/
	
	// if interface is disabled we simply return
	if (cvjs_iconInterfaceDisabled[selectedDiv]) return;	
	
	
	cvjs_iconInterfaceDisabled[selectedDiv] = mode;
	pageChangeInterface[selectedDiv] = false;
	cvjs_iconInterfaceClassicSkin[selectedDiv] = mode;
	cvjs_iconInterfaceClassicSkinDeviceSize[selectedDiv] = false;
	cvjs_iconInterfaceClassicSkin_MinimumDisk[selectedDiv] = mode;


	window.alert(" 2cvjs_applicationFolder" + cvjs_applicationFolder);


	jQuery("<link/>", {
	   rel: "stylesheet",
	   type: "text/css",
	   href: cvjs_applicationFolder + "/user_resources/css/font-awesome.css"
	}).appendTo("head");



}






function cvjs_setIconInterfaceControls_MimimumDisk_internal(mode, floorplan_div){


	// 3.3.01c
	var selectedDiv = cvjs_interfaceCounterIndex(floorplan_div);
	// zero is the default interface so we add one if 0
	
	// if interface is disabled we simply return
	if (cvjs_iconInterfaceDisabled[selectedDiv]) return;	
	
	
	cvjs_iconInterfaceDisabled[selectedDiv] = mode;
	pageChangeInterface[selectedDiv] = false;
	cvjs_iconInterfaceClassicSkin[selectedDiv] = mode;
	cvjs_iconInterfaceClassicSkinDeviceSize[selectedDiv] = false;
	cvjs_iconInterfaceClassicSkin_MinimumDisk[selectedDiv] = mode;


	//window.alert("cvjs_applicationFolder" + cvjs_applicationFolder);

	jQuery("<link/>", {
	   rel: "stylesheet",
	   type: "text/css",
	   href: cvjs_applicationFolder + "/user_resources/css/font-awesome.css"
	}).appendTo("head");



}





















// 3.2.02f
/**
 * Set panzoom desk, same size on all platforms
 * @param {boolean} mode - Set the modal interface, default is true
 * @param {String} floorplan_div - the div running CADViewer
 */
function cvjs_setIconInterfaceControls_PanZoomDisk(mode, floorplan_div){

	interfaceCounter++;
	var selectedDiv = interfaceCounter;
	interfaceCounterDiv[selectedDiv] = floorplan_div+"_svg";  // adding _svg for internal processing

	
	cvjs_iconInterfaceDisabled[selectedDiv] = mode;
	pageChangeInterface[selectedDiv] = false;
	cvjs_iconInterfaceClassicSkin[selectedDiv] = mode;
	cvjs_iconInterfaceClassicSkinDeviceSize[selectedDiv] = false;
	cvjs_iconInterfaceClassicSkin_MinimumDisk[selectedDiv] = false;

	cvjs_iconInterfaceClassicSkin_PanZoomDisk[selectedDiv] = mode;

}




/**
 * Overwrite default icon menu settings on devices
 * @param {boolean} mode - true: sets the icon menu on devices similar to desktop environment, false: do not change default. False is default
 */

function cvjs_overwriteDefaultDeviceSettings(mode){

	if (mode) isSmartPhoneOrTablet = false;  // we set the mode to desktop as default

};




// methods to initalize floorPlan



var floorPlan_div = "";
var cvjs_location_flag = true;
var hbody = "";
var hbody_2 = "";
var dual_hbody_flag = false;


function cvjs_initFloorPlanDivArray(floorplan_div){

	var indx = floorplan_div_Array.length;
	cvjs_active_floorplan_div_nr = indx;  // we are setting the active floorplan_div to the drawing we are loading		
	floorplan_div_Array[indx] = floorplan_div;
	floorplan_div_Array_current_Drawing[indx] = "";
	vqRooms[indx] = new Array();	  // we intialize vqRooms for this space			
}


/**
 * Initializes CADViewer, any of the methods cvjs_InitCADViewer_ must always be called setting up CADViewer
 * @param {string} floorplan_div - the SVG canvas object to which CADViewer is allocated
 * @param {object} cvjsRoomPolygonBaseAttributes - javascript object containing fill, color and stroke properties for display of Space Object roompolygons
 * @param {object} cvjsRoomPolygonHighlightAttributes - javascript object containing fill, color and stroke properties for mouseover highlight of Space Object roompolygons
 * @param {object} cvjsRoomPolygonSelectAttributes - javascript object containing fill, color and stroke properties for select highlight of Space Object roompolygons
 * @param {object} cvjsPopUpBody - html/css styled object containing the content of the modal when selecting Space Objects
 * @param {object} cvjsPopUpBody2 - second html/css styled object containing the content of the modal when selecting Space Objects, internally controlled based on type of Space Object
 */


function cvjs_InitCADViewer_highLight_popUp_dual_Id(floorplan_div, cvjsRoomPolygonBaseAttributes, cvjsRoomPolygonHighlightAttributes, cvjsRoomPolygonSelectAttributes, cvjsPopUpBody, cvjsPopUpBody2){

	cvjs_InitCADViewerJS_highLight_popUp_dual_Id(floorplan_div, cvjsRoomPolygonBaseAttributes, cvjsRoomPolygonHighlightAttributes, cvjsRoomPolygonSelectAttributes, cvjsPopUpBody, cvjsPopUpBody2);

}


/**
 * Initializes CADViewer, any of the methods cvjs_InitCADViewerJS_ must always be called setting up CADViewer
 * @param {string} floorplan_div - the SVG canvas object to which CADViewer is allocated
 * @param {object} cvjsRoomPolygonBaseAttributes - javascript object containing fill, color and stroke properties for display of Space Object roompolygons
 * @param {object} cvjsRoomPolygonHighlightAttributes - javascript object containing fill, color and stroke properties for mouseover highlight of Space Object roompolygons
 * @param {object} cvjsRoomPolygonSelectAttributes - javascript object containing fill, color and stroke properties for select highlight of Space Object roompolygons
 * @param {object} cvjsPopUpBody - html/css styled object containing the content of the modal when selecting Space Objects
 * @param {object} cvjsPopUpBody2 - second html/css styled object containing the content of the modal when selecting Space Objects, internally controlled based on type of Space Object
 */

function cvjs_InitCADViewerJS_highLight_popUp_dual_Id(floorplan_div, cvjsRoomPolygonBaseAttributes, cvjsRoomPolygonHighlightAttributes, cvjsRoomPolygonSelectAttributes, cvjsPopUpBody, cvjsPopUpBody2){

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	if (cvjs_active_floorplan_div_nr==-1){
		cvjs_initFloorPlanDivArray(floorplan_div+"_svg");
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	
	}
	

	cvjs_location_flag = true;
	if (!cvjs_Community_Version) lastObj[cvjs_active_floorplan_div_nr] = -1;


	cvjs_InitializeModals(floorplan_div);

//console.log("first in init, 5 variables");

	defaultColor = {
	            fill: '#FFF',
	            "fill-opacity": "0.1",
	            stroke: '#CCC',
	            'stroke-width': 1,
	            'stroke-linejoin': 'round',
	        };
	highlight = {
	            fill: '#a4d7f4',
	            "fill-opacity": "0.5",
	            stroke: '#a4d7f4',
	            'stroke-width': 3
	        };
	selectColor = {
	            fill: '#5BBEF6',
	            "fill-opacity": "0.5",
	            stroke: '#5BBEF6',
	            'stroke-width': 3
	        };



	hbody = "<div class=\"cvjs_modal_1\" onclick=\"my_own_clickmenu1();\">Custom<br>Menu 1<br><i class=\"fa fa-undo\"></i></div>";
	hbody += "<div class=\"cvjs_modal_1\" onclick=\"my_own_clickmenu2();\">Custom<br>Menu 2<br><i class=\"fa fa-info-circle\"></i></div>";
	hbody += "<div class=\"cvjs_modal_1\" onclick=\"cvjs_zoomHere();\">Zoom<br>Here<br><i class=\"fa fa-search-plus\"></i></div>";

	hbody_2 = "<div class=\"cvjs_modal_1\" onclick=\"my_own_clickmenu1();\">Custom<br>Menu 1<br><i class=\"fa fa-undo\"></i></div>";
	hbody_2 += "<div class=\"cvjs_modal_1\" onclick=\"cvjs_zoomHere();\">Zoom<br>Here<br><i class=\"fa fa-search-plus\"></i></div>";


//	console.log("inside tms_InitCADViewer tmsRoomPolygonBaseAttributes="+cvjsRoomPolygonBaseAttributes);


	if (cvjsRoomPolygonBaseAttributes != undefined)
		defaultColor = cvjsRoomPolygonBaseAttributes;

	if (cvjsRoomPolygonHighlightAttributes != undefined)
		highlight = cvjsRoomPolygonHighlightAttributes;

	if (cvjsRoomPolygonSelectAttributes != undefined)
		selectColor = cvjsRoomPolygonSelectAttributes;


	if (cvjsPopUpBody != undefined)
		hbody = cvjsPopUpBody;

	if (cvjsPopUpBody2 != undefined)
		hbody_2 = cvjsPopUpBody2;

	dual_hbody_flag = true;

//	console.log("hbody="+hbody+"  cvjsPopUpBody="+cvjsPopUpBody);

}



/**
 * Initializes CADViewer, any of the methods cvjs_InitCADViewer_ must always be called setting up CADViewer
 * @param {string} floorplan_div - the SVG canvas object to which CADViewer is allocated
 * @param {string} app folder - the path (relative or absolute) to the main application folder "app" , the default is the relative path "../app/"
 * @param {object} cvjsRoomPolygonBaseAttributes - javascript object containing fill, color and stroke properties for display of Space Object roompolygons
 * @param {object} cvjsRoomPolygonHighlightAttributes - javascript object containing fill, color and stroke properties for mouseover highlight of Space Object roompolygons
 * @param {object} cvjsRoomPolygonSelectAttributes - javascript object containing fill, color and stroke properties for select highlight of Space Object roompolygons
 * @param {object} cvjsPopUpBody - html/css styled object containing the content of the modal when selecting Space Objects
 */

function cvjs_InitCADViewer_highLight_popUp_app(floorplan_div, app_folder, cvjsRoomPolygonBaseAttributes, cvjsRoomPolygonHighlightAttributes, cvjsRoomPolygonSelectAttributes, cvjsPopUpBody){

	cvjs_InitCADViewerJS_highLight_popUp_app(floorplan_div, app_folder, cvjsRoomPolygonBaseAttributes, cvjsRoomPolygonHighlightAttributes, cvjsRoomPolygonSelectAttributes, cvjsPopUpBody);

}


/**
 * Initializes CADViewer, any of the methods cvjs_InitCADViewerJS_ must always be called setting up CADViewer
 * @param {string} floorplan_div - the SVG canvas object to which CADViewer is allocated
 * @param {string} app folder - the path (relative or absolute) to the main application folder "app" , the default is the relative path "../app/"
 * @param {object} cvjsRoomPolygonBaseAttributes - javascript object containing fill, color and stroke properties for display of Space Object roompolygons
 * @param {object} cvjsRoomPolygonHighlightAttributes - javascript object containing fill, color and stroke properties for mouseover highlight of Space Object roompolygons
 * @param {object} cvjsRoomPolygonSelectAttributes - javascript object containing fill, color and stroke properties for select highlight of Space Object roompolygons
 * @param {object} cvjsPopUpBody - html/css styled object containing the content of the modal when selecting Space Objects
 */

function cvjs_InitCADViewerJS_highLight_popUp_app(floorplan_div, app_folder, cvjsRoomPolygonBaseAttributes, cvjsRoomPolygonHighlightAttributes, cvjsRoomPolygonSelectAttributes, cvjsPopUpBody){

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	if (cvjs_active_floorplan_div_nr==-1){
		cvjs_initFloorPlanDivArray(floorplan_div+"_svg");
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	
	}

	cvjs_location_flag = true;
	if (!cvjs_Community_Version) lastObj[cvjs_active_floorplan_div_nr] = -1;


	// standard settings
	cvjs_imagesLocation = cvjs_applicationFolder + "/images/";
	cvjs_relativeScriptsPath = cvjs_applicationFolder + "/js/";
	cvjs_defaultJSPath = cvjs_applicationFolder + "/js/";


	if (app_folder != undefined){
		cvjs_applicationFolder = app_folder;
		cvjs_imagesLocation = cvjs_applicationFolder + "/images/";
		cvjs_relativeScriptsPath = cvjs_applicationFolder + "/js/";
		cvjs_defaultJSPath = cvjs_applicationFolder + "/js/";

	}


	cvjs_InitializeModals(floorplan_div);

//console.log("first in init, 5 variables");

	defaultColor = {
	            fill: '#FFF',
	            "fill-opacity": "0.1",
	            stroke: '#CCC',
	            'stroke-width': 1,
	            'stroke-linejoin': 'round',
	        };
	highlight = {
	            fill: '#a4d7f4',
	            "fill-opacity": "0.5",
	            stroke: '#a4d7f4',
	            'stroke-width': 3
	        };
	selectColor = {
	            fill: '#5BBEF6',
	            "fill-opacity": "0.5",
	            stroke: '#5BBEF6',
	            'stroke-width': 3
	        };


	hbody = "<div class=\"cvjs_modal_1\" onclick=\"my_own_clickmenu1();\">Custom<br>Menu 1<br><i class=\"fa fa-undo\"></i></div>";
	hbody += "<div class=\"cvjs_modal_1\" onclick=\"my_own_clickmenu2();\">Custom<br>Menu 2<br><i class=\"fa fa-info-circle\"></i></div>";
	hbody += "<div class=\"cvjs_modal_1\" onclick=\"cvjs_zoomHere();\">Zoom<br>Here<br><i class=\"fa fa-search-plus\"></i></div>";



//	console.log("inside tms_InitCADViewer tmsRoomPolygonBaseAttributes="+cvjsRoomPolygonBaseAttributes);


	if (cvjsRoomPolygonBaseAttributes != undefined)
		defaultColor = cvjsRoomPolygonBaseAttributes;

	if (cvjsRoomPolygonHighlightAttributes != undefined)
		highlight = cvjsRoomPolygonHighlightAttributes;

	if (cvjsRoomPolygonSelectAttributes != undefined)
		selectColor = cvjsRoomPolygonSelectAttributes;

	if (cvjsPopUpBody != undefined)
		hbody = cvjsPopUpBody;


	dual_hbody_flag = false;


//	console.log("hbody="+hbody+"  cvjsPopUpBody="+cvjsPopUpBody);


}



/**
 * Initializes CADViewer, any of the methods cvjs_InitCADViewer_ must always be called setting up CADViewer
 * @param {string} floorplan_div - the SVG canvas object to which CADViewer is allocated
 * @param {object} cvjsRoomPolygonBaseAttributes - javascript object containing fill, color and stroke properties for display of Space Object roompolygons
 * @param {object} cvjsRoomPolygonHighlightAttributes - javascript object containing fill, color and stroke properties for mouseover highlight of Space Object roompolygons
 * @param {object} cvjsRoomPolygonSelectAttributes - javascript object containing fill, color and stroke properties for select highlight of Space Object roompolygons
 * @param {object} cvjsPopUpBody - html/css styled object containing the content of the modal when selecting Space Objects
 */

function cvjs_InitCADViewer_highLight_popUp(floorplan_div, cvjsRoomPolygonBaseAttributes, cvjsRoomPolygonHighlightAttributes, cvjsRoomPolygonSelectAttributes, cvjsPopUpBody){

	cvjs_InitCADViewerJS_highLight_popUp(floorplan_div, cvjsRoomPolygonBaseAttributes, cvjsRoomPolygonHighlightAttributes, cvjsRoomPolygonSelectAttributes, cvjsPopUpBody)

}


/**
 * Initializes CADViewer, any of the methods cvjs_InitCADViewerJS_ must always be called setting up CADViewer
 * @param {string} floorplan_div - the SVG canvas object to which CADViewer is allocated
 * @param {object} cvjsRoomPolygonBaseAttributes - javascript object containing fill, color and stroke properties for display of Space Object roompolygons
 * @param {object} cvjsRoomPolygonHighlightAttributes - javascript object containing fill, color and stroke properties for mouseover highlight of Space Object roompolygons
 * @param {object} cvjsRoomPolygonSelectAttributes - javascript object containing fill, color and stroke properties for select highlight of Space Object roompolygons
 * @param {object} cvjsPopUpBody - html/css styled object containing the content of the modal when selecting Space Objects
 */

function cvjs_InitCADViewerJS_highLight_popUp(floorplan_div, cvjsRoomPolygonBaseAttributes, cvjsRoomPolygonHighlightAttributes, cvjsRoomPolygonSelectAttributes, cvjsPopUpBody){


	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	if (cvjs_active_floorplan_div_nr==-1){
		cvjs_initFloorPlanDivArray(floorplan_div+"_svg");
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	
	}

	cvjs_location_flag = true;
	if (!cvjs_Community_Version) lastObj[cvjs_active_floorplan_div_nr] = -1;

	cvjs_InitializeModals(floorplan_div);

//console.log("first in init, 5 variables");

	defaultColor = {
	            fill: '#FFF',
	            "fill-opacity": "0.1",
	            stroke: '#CCC',
	            'stroke-width': 1,
	            'stroke-linejoin': 'round',
	        };
	highlight = {
	            fill: '#a4d7f4',
	            "fill-opacity": "0.5",
	            stroke: '#a4d7f4',
	            'stroke-width': 3
	        };
	selectColor = {
	            fill: '#5BBEF6',
	            "fill-opacity": "0.5",
	            stroke: '#5BBEF6',
	            'stroke-width': 3
	        };


	hbody = "<div class=\"cvjs_modal_1\" onclick=\"my_own_clickmenu1();\">Custom<br>Menu 1<br><i class=\"fa fa-undo\"></i></div>";
	hbody += "<div class=\"cvjs_modal_1\" onclick=\"my_own_clickmenu2();\">Custom<br>Menu 2<br><i class=\"fa fa-info-circle\"></i></div>";
	hbody += "<div class=\"cvjs_modal_1\" onclick=\"cvjs_zoomHere();\">Zoom<br>Here<br><i class=\"fa fa-search-plus\"></i></div>";



//	console.log("inside tms_InitCADViewer tmsRoomPolygonBaseAttributes="+cvjsRoomPolygonBaseAttributes);


	if (cvjsRoomPolygonBaseAttributes != undefined)
		defaultColor = cvjsRoomPolygonBaseAttributes;

	if (cvjsRoomPolygonHighlightAttributes != undefined)
		highlight = cvjsRoomPolygonHighlightAttributes;

	if (cvjsRoomPolygonSelectAttributes != undefined)
		selectColor = cvjsRoomPolygonSelectAttributes;


	if (cvjsPopUpBody != undefined)
		hbody = cvjsPopUpBody;


	dual_hbody_flag = false;


//	console.log("hbody="+hbody+"  cvjsPopUpBody="+cvjsPopUpBody);


}

/**
 * Initializes CADViewer, any of the methods cvjs_InitCADViewer_ must always be called setting up CADViewer
 * @param {string} floorplan_div - the SVG canvas object to which CADViewer is allocated
 * @param {object} cvjsRoomPolygonBaseAttributes - javascript object containing fill, color and stroke properties for display of Space Object roompolygons
 * @param {object} cvjsRoomPolygonHighlightAttributes - javascript object containing fill, color and stroke properties for mouseover highlight of Space Object roompolygons
 * @param {object} cvjsRoomPolygonSelectAttributes - javascript object containing fill, color and stroke properties for select highlight of Space Object roompolygons
 */

function cvjs_InitCADViewer_highLight(floorplan_div, cvjsRoomPolygonBaseAttributes, cvjsRoomPolygonHighlightAttributes, cvjsRoomPolygonSelectAttributes ){

	cvjs_InitCADViewerJS_highLight(floorplan_div, cvjsRoomPolygonBaseAttributes, cvjsRoomPolygonHighlightAttributes, cvjsRoomPolygonSelectAttributes );

}

/**
 * Initializes CADViewer, any of the methods cvjs_InitCADViewerJS_ must always be called setting up CADViewer
 * @param {string} floorplan_div - the SVG canvas object to which CADViewer is allocated
 * @param {object} cvjsRoomPolygonBaseAttributes - javascript object containing fill, color and stroke properties for display of Space Object roompolygons
 * @param {object} cvjsRoomPolygonHighlightAttributes - javascript object containing fill, color and stroke properties for mouseover highlight of Space Object roompolygons
 * @param {object} cvjsRoomPolygonSelectAttributes - javascript object containing fill, color and stroke properties for select highlight of Space Object roompolygons
 */

function cvjs_InitCADViewerJS_highLight(floorplan_div, cvjsRoomPolygonBaseAttributes, cvjsRoomPolygonHighlightAttributes, cvjsRoomPolygonSelectAttributes ){

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	if (cvjs_active_floorplan_div_nr==-1){
		cvjs_initFloorPlanDivArray(floorplan_div+"_svg");
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	
	}

	cvjs_location_flag = true;
	if (!cvjs_Community_Version) lastObj[cvjs_active_floorplan_div_nr] = -1;

	cvjs_InitializeModals(floorplan_div);


	defaultColor = {
	            fill: '#FFF',
	            "fill-opacity": "0.1",
	            stroke: '#CCC',
	            'stroke-width': 1,
	            'stroke-linejoin': 'round',
	        };
	highlight = {
	            fill: '#a4d7f4',
	            "fill-opacity": "0.5",
	            stroke: '#a4d7f4',
	            'stroke-width': 3
	        };
	selectColor = {
	            fill: '#5BBEF6',
	            "fill-opacity": "0.5",
	            stroke: '#5BBEF6',
	            'stroke-width': 3
	        };


	hbody = "<div class=\"cvjs_modal_1\" onclick=\"my_own_clickmenu1();\">Custom<br>Menu 1<br><i class=\"fa fa-undo\"></i></div>";
	hbody += "<div class=\"cvjs_modal_1\" onclick=\"my_own_clickmenu2();\">Custom<br>Menu 2<br><i class=\"fa fa-info-circle\"></i></div>";
	hbody += "<div class=\"cvjs_modal_1\" onclick=\"cvjs_zoomHere();\">Zoom<br>Here<br><i class=\"fa fa-search-plus\"></i></div>";



//	console.log("inside tms_InitCADViewer tmsRoomPolygonBaseAttributes="+cvjsRoomPolygonBaseAttributes);


	if (cvjsRoomPolygonBaseAttributes != undefined)
		defaultColor = cvjsRoomPolygonBaseAttributes;

	if (cvjsRoomPolygonHighlightAttributes != undefined)
		highlight = cvjsRoomPolygonHighlightAttributes;

	if (cvjsRoomPolygonSelectAttributes != undefined)
		selectColor = cvjsRoomPolygonSelectAttributes;

	dual_hbody_flag = false;


}


	
	// 4.1.03a
var cvjs_applicationFolder = "../app/";


/**
 * Initializes CADViewer, any of the methods cvjs_InitCADViewer_ must always be called setting up CADViewer
 * @param {string} floorplan_div - the SVG canvas object to which CADViewer is allocated
 * @param {string} app folder - the path (relative or absolute) to the main application folder "app" , the default is the relative path "../app/"
 * @param {string} imagePathDirect - direct paths to Images, typically "/assets/cadviewer/app/images/" 
 */
 

function cvjs_InitCADViewer_app(floorplan_div, app_folder, imagePathDirect){

	cvjs_InitCADViewerJS_app(floorplan_div, app_folder, imagePathDirect);
}


/**
 * Initializes CADViewer, any of the methods cvjs_InitCADViewerJS_ must always be called setting up CADViewer
 * @param {string} floorplan_div - the SVG canvas object to which CADViewer is allocated
 * @param {string} app folder - the path (relative or absolute) to the main application folder "app" , the default is the relative path "../app/", on Angular "/assets/cadviewer/app/
 */
 

function cvjs_InitCADViewerJS_app(floorplan_div, app_folder){
	
	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	if (cvjs_active_floorplan_div_nr==-1){
		
		cvjs_initFloorPlanDivArray(floorplan_div+"_svg");
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	
	}
		
	
	// floorPlan_div = floorplan_div;   //DevX
	
	cvjs_location_flag = true;
	if (!cvjs_Community_Version) lastObj[cvjs_active_floorplan_div_nr] = -1;

	// standard settings
	cvjs_imagesLocation = cvjs_applicationFolder + "/images/";
	cvjs_relativeScriptsPath = cvjs_applicationFolder + "/js/";
	cvjs_defaultJSPath = cvjs_applicationFolder + "/js/";


	if (app_folder != undefined){
		cvjs_applicationFolder = app_folder;
		cvjs_imagesLocation = cvjs_applicationFolder + "/images/";
		cvjs_relativeScriptsPath = cvjs_applicationFolder + "/js/";
		cvjs_defaultJSPath = cvjs_applicationFolder + "/js/";

	}
	
	cvjs_InitializeModals(floorplan_div);

	defaultColor = {
	            fill: '#FFF',  //   fill: '#000FFF'
	            "fill-opacity": "0.1",
	            stroke: '#CCC',
	            'stroke-width': 1,
	            'stroke-linejoin': 'round',
	        };
	highlight = {
	            fill: '#a4d7f4',
	            "fill-opacity": "0.5",
	            stroke: '#a4d7f4',
	            'stroke-width': 3
	        };
	selectColor = {
	            fill: '#5BBEF6',
	            "fill-opacity": "0.5",
	            stroke: '#5BBEF6',
	            'stroke-width': 3
	        };

	hbody = "<div class=\"cvjs_modal_1\" onclick=\"my_own_clickmenu1();\">Custom<br>Menu 1<br><i class=\"fa fa-undo\"></i></div>";
	hbody += "<div class=\"cvjs_modal_1\" onclick=\"my_own_clickmenu2();\">Custom<br>Menu 2<br><i class=\"fa fa-info-circle\"></i></div>";
	hbody += "<div class=\"cvjs_modal_1\" onclick=\"cvjs_zoomHere();\">Zoom<br>Here<br><i class=\"fa fa-search-plus\"></i></div>";

	dual_hbody_flag = false;

}


/**
 * Initializes CADViewer, any of the methods cvjs_InitCADViewer_ must always be called setting up CADViewer
 * @param {string} floorplan_div - the SVG canvas object to which CADViewer is allocated
 * @param {string} app folder - the path (relative or absolute) to the main application folder "app" , the default is the relative path "../app/", on Angular "/assets/cadviewer/app/
 * @param {object} cvjsRoomPolygonBaseAttributes - javascript object containing fill, color and stroke properties for display of Space Object roompolygons
 * @param {object} cvjsRoomPolygonHighlightAttributes - javascript object containing fill, color and stroke properties for mouseover highlight of Space Object roompolygons
 * @param {object} cvjsRoomPolygonSelectAttributes - javascript object containing fill, color and stroke properties for select highlight of Space Object roompolygons
 */
 

function cvjs_InitCADViewer_app_highLight(floorplan_div, app_folder, cvjsRoomPolygonBaseAttributes, cvjsRoomPolygonHighlightAttributes, cvjsRoomPolygonSelectAttributes){

	cvjs_InitCADViewerJS_app_highLight(floorplan_div, app_folder, cvjsRoomPolygonBaseAttributes, cvjsRoomPolygonHighlightAttributes, cvjsRoomPolygonSelectAttributes );

}


/**
 * Initializes CADViewer, any of the methods cvjs_InitCADViewerJS_ must always be called setting up CADViewer
 * @param {string} floorplan_div - the SVG canvas object to which CADViewer is allocated
 * @param {string} app folder - the path (relative or absolute) to the main application folder "app" , the default is the relative path "../app/", on Angular "/assets/cadviewer/app/
 * @param {object} cvjsRoomPolygonBaseAttributes - javascript object containing fill, color and stroke properties for display of Space Object roompolygons
 * @param {object} cvjsRoomPolygonHighlightAttributes - javascript object containing fill, color and stroke properties for mouseover highlight of Space Object roompolygons
 * @param {object} cvjsRoomPolygonSelectAttributes - javascript object containing fill, color and stroke properties for select highlight of Space Object roompolygons
 */
 

function cvjs_InitCADViewerJS_app_highLight(floorplan_div, app_folder, cvjsRoomPolygonBaseAttributes, cvjsRoomPolygonHighlightAttributes, cvjsRoomPolygonSelectAttributes){

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	if (cvjs_active_floorplan_div_nr==-1){
		cvjs_initFloorPlanDivArray(floorplan_div+"_svg");
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	
	}

	cvjs_location_flag = true;
	if (!cvjs_Community_Version) lastObj[cvjs_active_floorplan_div_nr] = -1;

	// standard settings
	cvjs_imagesLocation = cvjs_applicationFolder + "/images/";
	cvjs_relativeScriptsPath = cvjs_applicationFolder + "/js/";
	cvjs_defaultJSPath = cvjs_applicationFolder + "/js/";


	if (app_folder != undefined){
		cvjs_applicationFolder = app_folder;
		cvjs_imagesLocation = cvjs_applicationFolder + "/images/";
		cvjs_relativeScriptsPath = cvjs_applicationFolder + "/js/";
		cvjs_defaultJSPath = cvjs_applicationFolder + "/js/";

	}

	cvjs_InitializeModals(floorplan_div);

	defaultColor = {
	            fill: '#FFF',
	            "fill-opacity": "0.1",
	            stroke: '#CCC',
	            'stroke-width': 1,
	            'stroke-linejoin': 'round',
	        };
	highlight = {
	            fill: '#a4d7f4',
	            "fill-opacity": "0.5",
	            stroke: '#a4d7f4',
	            'stroke-width': 3
	        };
	selectColor = {
	            fill: '#5BBEF6',
	            "fill-opacity": "0.5",
	            stroke: '#5BBEF6',
	            'stroke-width': 3
	        };

	hbody = "<div class=\"cvjs_modal_1\" onclick=\"my_own_clickmenu1();\">Custom<br>Menu 1<br><i class=\"fa fa-undo\"></i></div>";
	hbody += "<div class=\"cvjs_modal_1\" onclick=\"my_own_clickmenu2();\">Custom<br>Menu 2<br><i class=\"fa fa-info-circle\"></i></div>";
	hbody += "<div class=\"cvjs_modal_1\" onclick=\"cvjs_zoomHere();\">Zoom<br>Here<br><i class=\"fa fa-search-plus\"></i></div>";


	dual_hbody_flag = false;
	
	if (cvjsRoomPolygonBaseAttributes != undefined)
		defaultColor = cvjsRoomPolygonBaseAttributes;

	if (cvjsRoomPolygonHighlightAttributes != undefined)
		highlight = cvjsRoomPolygonHighlightAttributes;

	if (cvjsRoomPolygonSelectAttributes != undefined)
		selectColor = cvjsRoomPolygonSelectAttributes;
	
	
}


/**
 * Initializes CADViewer, any of the methods cvjs_InitCADViewer_ must always be called setting up CADViewer
 * @param {string} floorplan_div - the SVG canvas object to which CADViewer is allocated
 * @param {string} app folder - the path (relative or absolute) to the main application folder "app" , the default is the relative path "../app/", on Angular "/assets/cadviewer/app/
 * @param {object} cvjsRoomPolygonBaseAttributes - javascript object containing fill, color and stroke properties for display of Space Object roompolygons
 * @param {object} cvjsRoomPolygonHighlightAttributes - javascript object containing fill, color and stroke properties for mouseover highlight of Space Object roompolygons
 * @param {object} cvjsRoomPolygonSelectAttributes - javascript object containing fill, color and stroke properties for select highlight of Space Object roompolygons
 * @param {object} cvjsPopUpBody - html/css styled object containing the content of the modal when selecting Space Objects
*/

function cvjs_InitCADViewer_app_highLight_popUp(floorplan_div, app_folder, cvjsRoomPolygonBaseAttributes, cvjsRoomPolygonHighlightAttributes, cvjsRoomPolygonSelectAttributes, cvjsPopUpBody ){

	cvjs_InitCADViewerJS_app_highLight_popUp(floorplan_div, app_folder, cvjsRoomPolygonBaseAttributes, cvjsRoomPolygonHighlightAttributes, cvjsRoomPolygonSelectAttributes, cvjsPopUpBody )

}


/**
 * Initializes CADViewer, any of the methods cvjs_InitCADViewerJS_ must always be called setting up CADViewer
 * @param {string} floorplan_div - the SVG canvas object to which CADViewer is allocated
 * @param {string} app folder - the path (relative or absolute) to the main application folder "app" , the default is the relative path "../app/", on Angular "/assets/cadviewer/app/
 * @param {object} cvjsRoomPolygonBaseAttributes - javascript object containing fill, color and stroke properties for display of Space Object roompolygons
 * @param {object} cvjsRoomPolygonHighlightAttributes - javascript object containing fill, color and stroke properties for mouseover highlight of Space Object roompolygons
 * @param {object} cvjsRoomPolygonSelectAttributes - javascript object containing fill, color and stroke properties for select highlight of Space Object roompolygons
 * @param {object} cvjsPopUpBody - html/css styled object containing the content of the modal when selecting Space Objects
*/

function cvjs_InitCADViewerJS_app_highLight_popUp(floorplan_div, app_folder, cvjsRoomPolygonBaseAttributes, cvjsRoomPolygonHighlightAttributes, cvjsRoomPolygonSelectAttributes, cvjsPopUpBody ){
	

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	if (cvjs_active_floorplan_div_nr==-1){
		cvjs_initFloorPlanDivArray(floorplan_div+"_svg");
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	
	}

	cvjs_location_flag = true;
	if (!cvjs_Community_Version) lastObj[cvjs_active_floorplan_div_nr] = -1;

	// standard settings
	cvjs_imagesLocation = cvjs_applicationFolder + "/images/";
	cvjs_relativeScriptsPath = cvjs_applicationFolder + "/js/";
	cvjs_defaultJSPath = cvjs_applicationFolder + "/js/";


	if (app_folder != undefined){
		cvjs_applicationFolder = app_folder;
		cvjs_imagesLocation = cvjs_applicationFolder + "/images/";
		cvjs_relativeScriptsPath = cvjs_applicationFolder + "/js/";
		cvjs_defaultJSPath = cvjs_applicationFolder + "/js/";

	}


	cvjs_InitializeModals(floorplan_div);

	defaultColor = {
	            fill: '#FFF',
	            "fill-opacity": "0.1",
	            stroke: '#CCC',
	            'stroke-width': 1,
	            'stroke-linejoin': 'round',
	        };
	highlight = {
	            fill: '#a4d7f4',
	            "fill-opacity": "0.5",
	            stroke: '#a4d7f4',
	            'stroke-width': 3
	        };
	selectColor = {
	            fill: '#5BBEF6',
	            "fill-opacity": "0.5",
	            stroke: '#5BBEF6',
	            'stroke-width': 3
	        };

	hbody = "<div class=\"cvjs_modal_1\" onclick=\"my_own_clickmenu1();\">Custom<br>Menu 1<br><i class=\"fa fa-undo\"></i></div>";
	hbody += "<div class=\"cvjs_modal_1\" onclick=\"my_own_clickmenu2();\">Custom<br>Menu 2<br><i class=\"fa fa-info-circle\"></i></div>";
	hbody += "<div class=\"cvjs_modal_1\" onclick=\"cvjs_zoomHere();\">Zoom<br>Here<br><i class=\"fa fa-search-plus\"></i></div>";


	dual_hbody_flag = false;
	
	if (cvjsRoomPolygonBaseAttributes != undefined)
		defaultColor = cvjsRoomPolygonBaseAttributes;

	if (cvjsRoomPolygonHighlightAttributes != undefined)
		highlight = cvjsRoomPolygonHighlightAttributes;

	if (cvjsRoomPolygonSelectAttributes != undefined)
		selectColor = cvjsRoomPolygonSelectAttributes;


	if (cvjsPopUpBody != undefined)
		hbody = cvjsPopUpBody;

	dual_hbody_flag = false;
	
}



/**
 * Initializes CADViewer, any of the methods cvjs_InitCADViewer_ must always be called setting up CADViewer
 * @param {string} floorplan_div - the SVG canvas object to which CADViewer is allocated
 * @param {string} image folder - the path to the image location folder with icon settings, default is "+cvjs_imagesLocation+"
 * @param {string} javascripts_folder - the path to javascripts folder with icon settings, default is ../javscripts/
 */
 
function cvjs_InitCADViewer(floorplan_div, image_location, javascripts_folder ){

	cvjs_InitCADViewerJS(floorplan_div, image_location, javascripts_folder);

}



/**
 * Initializes CADViewer, any of the methods cvjs_InitCADViewerJS_ must always be called setting up CADViewer
 * @param {string} floorplan_div - the SVG canvas object to which CADViewer is allocated
 * @param {string} image folder - the path to the image location folder with icon settings, default is "+cvjs_imagesLocation+"
 * @param {string} javascripts_folder - the path to javascripts folder with icon settings, default is ../javscripts/
 */
 
function cvjs_InitCADViewerJS(floorplan_div, image_location, javascripts_folder ){


	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	if (cvjs_active_floorplan_div_nr==-1){
		cvjs_initFloorPlanDivArray(floorplan_div+"_svg");
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	
	}

	cvjs_location_flag = true;
	if (!cvjs_Community_Version) lastObj[cvjs_active_floorplan_div_nr] = -1;

	if (image_location != undefined)
		cvjs_imagesLocation = image_location;

	if (javascripts_folder != undefined){
		 cvjs_relativeScriptsPath = javascripts_folder;
		 cvjs_defaultJSPath = javascripts_folder;
	}

	cvjs_InitializeModals(floorplan_div);


	defaultColor = {
	            fill: '#FFF',
	            "fill-opacity": "0.1",
	            stroke: '#CCC',
	            'stroke-width': 1,
	            'stroke-linejoin': 'round',
	        };
	highlight = {
	            fill: '#a4d7f4',
	            "fill-opacity": "0.5",
	            stroke: '#a4d7f4',
	            'stroke-width': 3
	        };
	selectColor = {
	            fill: '#5BBEF6',
	            "fill-opacity": "0.5",
	            stroke: '#5BBEF6',
	            'stroke-width': 3
	        };

	hbody = "<div class=\"cvjs_modal_1\" onclick=\"my_own_clickmenu1();\">Custom<br>Menu 1<br><i class=\"fa fa-undo\"></i></div>";
	hbody += "<div class=\"cvjs_modal_1\" onclick=\"my_own_clickmenu2();\">Custom<br>Menu 2<br><i class=\"fa fa-info-circle\"></i></div>";
	hbody += "<div class=\"cvjs_modal_1\" onclick=\"cvjs_zoomHere();\">Zoom<br>Here<br><i class=\"fa fa-search-plus\"></i></div>";

	dual_hbody_flag = false;

}

var cvjs_imagesLocation = "../images/";



var floor_loaded = false;
var nodes_loaded = false;
var stickynotesRedlines_loaded = false;

var current_jsNodesFloorNames = "";
var current_jsThumbFloorNames = "";
var current_jsFullFloorNames =  "";
var current_jsFloorNames =  "";
var current_jsRedlinename =  "";
var current_js_initialized = 0;
var current_redline_js_initialized = 0;
var js_loaded_flag = 0;

var current_FileNamePath = "";

var cvjs_relativeScriptsPath= "../app/js";


/**
 * Set the scripts path to folder with CADViewer javascripts
 * @param {string} scriptsPath - paths to Scripts, typically "../javascripts"
 */

function cvjs_setRelativeScriptsPath(scriptsPath){

	cvjs_relativeScriptsPath = scriptsPath;
}


var cvjs_customPdfFolderFlag = false;
var cvjs_customPdfFolderName = "";
var cvjs_customPdfFolderForcedUpdate = false;

/**
 * Sets the path to folder with converted PDF pages. If the folder exists and contain the converted pdf, the converted content will be used for visualization
 * @param {string} customPdfFolderName - custom PDF path id, for permanent storage of converted PDF file
 * @param {boolean} forcedUpdate - if true, force the folder to be reconverted (if the originating pdf has been updated), false is default
 */
function cvjs_setCustomPdfFolder(customPdfFolderName, forcedUpdate){

	cvjs_customPdfFolderFlag = true;
	cvjs_customPdfFolderName = customPdfFolderName;
	cvjs_customPdfFolderForcedUpdate = forcedUpdate;
	
//window.alert("inside custom pdf "+cvjs_customPdfFolderForcedUpdate);	
		
}


/**
 * Returns the current page number in the document loaded
 * @return {int} pageNumber
 */

function cvjs_getCurrentPage(){
		
		if (cvjs_SVG_multiPagesFlag[cvjs_active_floorplan_div_nr]){
				return(cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].currentPage);
		}else{
				return(multiPages[cvjs_active_floorplan_div_nr].currentPage);			
		}
		
		return -1;
}



function cvjs_LoadDrawingPDF_base(FileNamePath){


			// load the configuration file to find the files conversion folder
			var directory_base = "";
			var directory_base_url = "";

			var pdf_FileNamePath = FileNamePath;

			var fUrl = cvjs_serverHandlersPath + cvjs_returnPDFparamsController;

			console.log("pdf configuration file "+fUrl);


			var f_data = {};
			f_data['file'] = "";  // void

			jQuery.ajax({
			  url: fUrl,
			  type: 'post',
			  data: f_data,
			  success: function(html){

					console.log("return from fUrl: "+html);

					var tempstr = html;

					var dir = tempstr.substring(0, tempstr.indexOf("|"));
//					console.log(dir);

					var tempstr = tempstr.substring(tempstr.indexOf("|")+1);

//					console.log(tempstr);

					var dir_url = tempstr.substring(0, tempstr.indexOf("|"));

//					console.log(dir_url);

					directory_base = dir;
					directory_base_url = dir_url;

					var directory = directory_base;
					var directory_url = directory_base_url;

//					window.alert(directory+"  "+directory_url);

					// convert PDF into folder

					//FileNamePath
					var finalUrl = cvjs_serverHandlersPath + cvjs_serverPDFConverterController;
					var filelist_data = {};

					filelist_data['pdf_file'] = pdf_FileNamePath;
					
					
					//make temp dir  6 digits
					filelist_data['temp_dir'] = "pdf/"+Math.floor((Math.random() * 100000) + 1);
					filelist_data['custom_folder'] = 0;


					if (cvjs_customPdfFolderFlag){
						filelist_data['temp_dir'] = "pdf/custom_"+cvjs_customPdfFolderName;
											
//window.alert(" forced update "+cvjs_customPdfFolderForcedUpdate);						
						
						if (cvjs_customPdfFolderForcedUpdate){
							filelist_data['custom_folder'] = 0;   // in case we have a forced update we use the same custom folder name but redo the conversion
						}
						else{
							filelist_data['custom_folder'] = 1;   // standard case, we read the converted drawing if it is there
						}
					}

					
if (cvjs_debug) 					console.log(filelist_data['pdf_file']+" Temp folder: "+filelist_data['temp_dir']);

					

					var temp_dir = filelist_data['temp_dir'];
					directory = directory_base +temp_dir;
					directory_url = directory_base_url +temp_dir;

					cvjs_multipagePDFtoSVG_tempDir = temp_dir ;
					
//console.log("pdf creation directory ="+directory+" url="+directory_url);

					var file_name = pdf_FileNamePath.substring(pdf_FileNamePath.lastIndexOf("/")+1,pdf_FileNamePath.lastIndexOf("."));
					filelist_data['file_name'] = file_name;

					//window.alert(finalUrl+"  "+directory + "  " +directory_url);

					// http folder with url content
					cvjs_multipageURL_FileNamePath = directory_url;
					cvjs_multipage_FileNamePath = directory;
					
					// first we create a file with the list of pages
					filelist_data['request_type'] = "pages";

					// start loading modal

					jQuery.ajax({
					  url:finalUrl,
					  type: 'post',
					  data: filelist_data,
					  success: function(html){

if (cvjs_debug) 	console.log("WE now have the number of pages + status: "+html);

							// let us now create the multipage structure
							// when that is done, we load in the first page

									var serverResult = html.split(" ");
							
									var n = parseInt(serverResult[0]);
									//var n = parseInt(html);
									
									if (n>= 1){

if (cvjs_debug) console.log("Creating multipage SVG page structure n.length="+n.length+" "+cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].pages[0].fileName);

										cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].multiPages = n;
										cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].currentPage = 1;
										var buildPages = [];

										for (var i=0;i<n; i++){
											
											var fname = file_name+"_"+(i+1)+".svg";
											var pname = "Page "+(i+1);
											
if (cvjs_debug) 							console.log(fname+" "+pname);
											
											cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].pages[i] = { fileName : fname, pageName : pname };

										}

										cvjs_SVG_multiPagesFlag[cvjs_active_floorplan_div_nr] = true;
										cvjs_PDFloadFlag = false;

										actualLLX[cvjs_active_floorplan_div_nr] = 0;
										actualLLY[cvjs_active_floorplan_div_nr] = 0;
										actualURX[cvjs_active_floorplan_div_nr] = 1;
										actualURY[cvjs_active_floorplan_div_nr] = 1;
										
										cvjs_checkSVGOnServerBeforeLoadFirst();										
										
/*
										if (!cvjs_multipagePDFtoSVG_PhpLoadFlag)  // standard load
											cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_multipageURL_FileNamePath + "/"+ cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].pages[0].fileName, undefined, true );
										else  // load via getFile
											cvjs_LoadDrawing( floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_phpPath+"getFile_09.php?fileTag="+cvjs_multipagePDFtoSVG_tempDir+"/"+cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].pages[0].fileName.substring(0, cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].pages[0].fileName.indexOf(".svg"))+"&remainOnServer=1&Type=svg", undefined, true); 
										
	*/

									}

								
									// we now make the conversion to svg of all pages
									// only if the server sees that we have to
									//window.alert(serverResult[1]);
									
									if (serverResult[1] == "0"){
									
										//window.alert(serverResult[1]);
										
										filelist_data['request_type'] = "svg_conversion";
																	
										jQuery.ajax({
										  url:finalUrl,
										  type: 'post',
										  data: filelist_data,
										  success: function(html){
										  
												if (cvjs_debug) console.log("NOW THE ENTIRE PDF IS CONVERTED");
												
												// now we split the PDF into page
												//FileNamePath
												var finalUrl = cvjs_serverHandlersPath + cvjs_serverPDFSplitController;
												// we reuse the filelist_data array
																		
												jQuery.ajax({
												  url:finalUrl,
												  type: 'post',
												  data: filelist_data,
												  success: function(html){
		  

														if (cvjs_debug) console.log("We have now split the PDF");
												  
													}
												});
												
												
												
												//window.alert("NOW THE ENTIRE PDF IS CONVERTED");

												//var multiPages[cvjs_active_floorplan_div_nr] =  { multiPages[cvjs_active_floorplan_div_nr]: 1, currentPage:1, pages : [ { fileName:"default", pageName:"Single Page"}]};

											}
										});

									}

							}
					});


				}
			});

}

											

function cvjs_checkSVGOnServerBeforeLoadFirst(){		

	var fileUrl = "";
	if (!cvjs_multipagePDFtoSVG_PhpLoadFlag)  // standard load
		fileUrl = cvjs_multipageURL_FileNamePath + "/"+ cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].pages[0].fileName;
	else{
		//3.1.20e
		if (cvjs_getFileController.indexOf("getFile_09.php")==0)		
			fileUrl = cvjs_phpPath+"getFile_09.php?fileTag="+cvjs_multipagePDFtoSVG_tempDir+"/"+cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].pages[0].fileName.substring(0, cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].pages[0].fileName.indexOf(".svg"))+"&remainOnServer=1&Type=svg";
		else
			fileUrl = cvjs_serverHandlersPath+cvjs_getFileController+"?fileTag="+cvjs_multipagePDFtoSVG_tempDir+"/"+cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].pages[0].fileName.substring(0, cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].pages[0].fileName.indexOf(".svg"))+"&remainOnServer=1&Type=svg";
	}								
												
	jQuery.ajax({
		url: fileUrl,
		type: 'HEAD',
		error: function()
		{

		//file not exists
			console.log("does not exist");
			setTimeout(function(){cvjs_checkSVGOnServerBeforeLoadFirst()}, 2500);

		},
		success: function()
		{
			console.log("exist");
			//file exists													
if (cvjs_debug) console.log("loading "+cvjs_multipageURL_FileNamePath + "  /  "+ cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].pages[0].fileName);
															
				if (!cvjs_multipagePDFtoSVG_PhpLoadFlag)  // standard load
					cvjs_LoadDrawingInternal(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_multipageURL_FileNamePath + "/"+ cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].pages[0].fileName, undefined, true );
				else{
					//3.1.20e
					if (cvjs_getFileController.indexOf("getFile_09.php")==0)		
					// load via getFile
					cvjs_LoadDrawingInternal( floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_phpPath+"getFile_09.php?fileTag="+cvjs_multipagePDFtoSVG_tempDir+"/"+cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].pages[0].fileName.substring(0, cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].pages[0].fileName.indexOf(".svg"))+"&remainOnServer=1&Type=svg", undefined, true); 
					else
//						fileUrl = cvjs_serverHandlersPath+cvjs_getFileController+"?fileTag="+cvjs_multipagePDFtoSVG_tempDir+"/"+cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].pages[0].fileName.substring(0, cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].pages[0].fileName.indexOf(".svg"))+"&remainOnServer=1&Type=svg";
					cvjs_LoadDrawingInternal( floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_serverHandlersPath+cvjs_getFileController+"?fileTag="+cvjs_multipagePDFtoSVG_tempDir+"/"+cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].pages[0].fileName.substring(0, cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].pages[0].fileName.indexOf(".svg"))+"&remainOnServer=1&Type=svg", undefined, true); 	
				}

			
		}
	});
	
}


function cvjs_checkSVGOnServerBeforeLoad(newfile){											
	
	var fileUrl = "";
	if (!cvjs_multipagePDFtoSVG_PhpLoadFlag)  // standard load
		fileUrl = cvjs_multipageURL_FileNamePath + "/"+ newfile;
	else{
			//3.1.20e
		if (cvjs_getFileController.indexOf("getFile_09.php")==0)		
			fileUrl = cvjs_phpPath+"getFile_09.php?fileTag="+cvjs_multipagePDFtoSVG_tempDir+"/"+newfile.substring(0, newfile.indexOf(".svg"))+"&remainOnServer=1&Type=svg";
		else
			fileUrl = cvjs_serverHandlersPath+cvjs_getFileController+"?fileTag="+cvjs_multipagePDFtoSVG_tempDir+"/"+newfile.substring(0, newfile.indexOf(".svg"))+"&remainOnServer=1&Type=svg";
	}								
	
	jQuery.ajax({
		url: fileUrl,
		type:'HEAD',
		error: function()
		{

		//file not exists
			console.log("does not exist "+newfile);
			setTimeout(function(){cvjs_checkSVGOnServerBeforeLoad(newfile)}, 2500);

		},
		success: function()
		{
			console.log("exist");
			//file exists													
if (cvjs_debug) console.log("loading "+cvjs_multipageURL_FileNamePath + "  /  "+ cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].pages[0].fileName);
															
 					if (!cvjs_multipagePDFtoSVG_PhpLoadFlag)  // standard load
						cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_multipageURL_FileNamePath + "/"+ newfile );
					else{  // load via getFile
							//3.1.20e
						if (cvjs_getFileController.indexOf("getFile_09.php")==0)		
							cvjs_LoadDrawing( floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_phpPath+"getFile_09.php?fileTag="+cvjs_multipagePDFtoSVG_tempDir+"/"+newfile.substring(0, newfile.indexOf(".svg"))+"&remainOnServer=1&Type=svg"); 
						else
							cvjs_LoadDrawing( floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_serverHandlersPath+cvjs_getFileController+"?fileTag="+cvjs_multipagePDFtoSVG_tempDir+"/"+newfile.substring(0, newfile.indexOf(".svg"))+"&remainOnServer=1&Type=svg"); 
					}							
						//				
		}
	});
	
}









var currentLoadedDrawingFullName = "";

/**
 * Clears the drawing space of CADViewer
 * @param {string} floorplan_div - the div canvas object to which CADViewer is allocated
 */

function cvjs_ClearDrawing(floorplan_div){
	if (cvjs_loadInProgress){
		console.log("CADViewer: another load in progress, cannot clear: "+floorplan_div);
		return;
	}
	else{
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
		cvjs_rPaper[cvjs_active_floorplan_div_nr] = null;
		var myNode = document.getElementById(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
		while (myNode.firstChild) {
			myNode.removeChild(myNode.firstChild);
		}
		var svgDiv = "#"+floorplan_div+"_svg";   //  floorPlan_div
		cvjs_rPaper[cvjs_active_floorplan_div_nr] = Snap(svgDiv);					
	}
}








/**
 * Loads a drawing into CADViewer, this method can only be used after intialization of CADViewer through the cvjs_InitCADViewerJS_ methods
 * @param {string} floorplan_div - the SVG canvas object to which CADViewer is allocated
 * @param {string} FileName - the name and path to the location of the CADViewer drawing files to load in, the path is either absolute or relative to the document in which CADViewer is invoked
 */

function cvjs_LoadDrawing(floorplan_div, FileName){

	currentLoadedDrawingFullName = FileName;
	cvjs_LoadDrawingInternal(floorplan_div, FileName, undefined, false);

}


var cvjs_firstLoad = false;

var default_full_loaded = false;
var flagSetUpVqPngDefault = false;

var floorplan_div_Array = new Array();
var floorplan_div_Array_current_Drawing =new Array();

var loading_active_floorplan_div = "";
var json_inputfile_flag = false;
var json_inputfile_name = "";


/**
 * Loads a drawing into CADViewer, this method can only be used after intialization of CADViewer through the cvjs_InitCADViewerJS_ methods
 * @param {string} floorplan_div - the SVG canvas object to which CADViewer is allocated
 * @param {string} FileNamePath - the filepath to the location of the CADViewer drawing files to load in, the path is either absolute or relative to the document in which CADViewer is invoked
 * @param {string} FileNameNoExtension - file name of the drawing without extension (CADViewer will automatically generate naming and load in files associated with the file name)
 * @param {boolean} serverCallBack - set to false or undefined.
 */

function cvjs_LoadDrawingInternal(floorplan_div, FileNamePath, FileNameNoExtension, serverCallBack){


	// 6.02.16 - we overwrite to enable reload after crash
	cvjs_loadInProgress = false;

// 6.1.36
//window.alert("here");
cvjs_setBackgroundColorHex("none", floorplan_div);

//	window.alert("cvjs_fileLoadingFromSharePointServer"+cvjs_fileLoadingFromSharePointServer);
	
	if (serverCallBack == undefined) serverCallBack = false;

//window.alert(serverCallBack)	;
	
	// we return if we are loading on top of another drawing
	if (cvjs_loadInProgress && !serverCallBack){
		console.log("CADViewer: another load in progress, aborting: "+floorplan_div+"  "+FileNamePath+" we have "+cvjs_active_floorplan_div_nr);
		
		// we need to set the active floorplan back to the drawing we are loading
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(loading_active_floorplan_div);  
		
		console.log("Setting back : "+cvjs_active_floorplan_div_nr+"  "+loading_active_floorplan_div);
		
		try{
			cvjs_LoadDrawingAborted(floorplan_div, FileNamePath);;
			
		}catch(err){if (cvjs_debug) console.log("cvjs_LoadDrawing: "+err); }
		
		// close the loading pane		
		return;
	}

	// load in progress is true if we are loading first time
	if (!cvjs_loadInProgress && !serverCallBack){
		cvjs_loadInProgress = true;
		
		cvjs_firstLoad = true;  // 3.0.13k
	}
	
	// load in progress is still true if we are loading from a server callback
	if (!cvjs_loadInProgress && serverCallBack){
		cvjs_loadInProgress = true;
		
		cvjs_firstLoad = false; // 3.0.13k
	}
		
	// we are setting the active load to the name of the div being loaded
	loading_active_floorplan_div = floorplan_div;
	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
		
//	console.log("CADViewer version is: "+cvjs_versionNumber+" Div: "+floorplan_div+" (pre-init) div-index: "+cvjs_rPaperIndex(floorplan_div));
//	console.log(cvjs_versionNumber+" Div: "+floorplan_div+" (pre/post-init) div-index: "+cvjs_rPaperIndex(floorplan_div));
	console.log(cvjs_versionNumber+" Loading: "+FileNamePath);
	
//	// we are telling the system that only one drawing can be loaded

	floorplan_div = floorplan_div.toString();
	
	if (floorplan_div.indexOf("_svg")==-1 || (floorplan_div.indexOf("_svg")>-1 && floorplan_div.indexOf("_svg")< (floorplan_div.length-4)) ) floorplan_div = floorplan_div + "_svg"; 	// 2017-11-07

		// initialization
		if (FileNameNoExtension==undefined){
			currentLoadedDrawingFullName = FileNamePath;
		}
		else{
			currentLoadedDrawingFullName = FileNamePath+FileNameNoExtension+".js";
			cvjs_FileNameNoExtension = FileNameNoExtension;

		}

//console.log(floorplan_div+" "+FileNamePath+" "+FileNameNoExtension);

	if (FileNameNoExtension==undefined){

		//console.log("we have to parse the input file");

		var filePath = 	""; //FileNamePath.substring(0, FileNamePath.lastIndexOf('/')+1);
		var fileName =  ""; //FileNamePath.substring(FileNamePath.lastIndexOf('/')+1, FileNamePath.lastIndexOf('.')) ;
		//cvjs_FileNameNoExtension = fileName;

		var fileExtension =  FileNamePath.substring(FileNamePath.lastIndexOf('.')+1) ;

		// 2017-08-01 if we have a server side svg file to load in via script
		var fileServerExtension = "";
		var svgFileFromServer = false;
		
		
		// 3.1.20e  we extent this to fileName=
		if (FileNamePath.indexOf('fileName=')>-1){ // 3.1.20e  we extent this to fileName= , aspx, php, etc.
		
			fileServerExtension = FileNamePath.substring(FileNamePath.lastIndexOf('.')+1) ;
			fileExtension = fileServerExtension;

			filePath = FileNamePath.substring(0, FileNamePath.lastIndexOf('fileName=')+9);
			fileName =  FileNamePath.substring(FileNamePath.lastIndexOf('fileName=')+9) ;
			fileExtension =  FileNamePath.substring(FileNamePath.lastIndexOf('.')+1) ;

			if (fileServerExtension=="svg") svgFileFromServer = true;
		
if (cvjs_debug) console.log("fileName branch");
	
		}else{
	
			if (FileNamePath.indexOf('Type=')>-1){  // 2017-08-31  - handling of a stream from php

				fileServerExtension = FileNamePath.substring(FileNamePath.lastIndexOf('Type=')+5) ;
				fileExtension = fileServerExtension;

				filePath = FileNamePath.substring(0, FileNamePath.lastIndexOf('/')+1);
				fileName =  FileNamePath.substring(FileNamePath.lastIndexOf('/')) ;
				fileExtension =  FileNamePath.substring(FileNamePath.lastIndexOf('=')+1) ;


				if (fileServerExtension=="svg") svgFileFromServer = true;

			}
			else{  // standard chopping of file name and extension

				filePath = 	FileNamePath.substring(0, FileNamePath.lastIndexOf('/')+1);
				fileName =  FileNamePath.substring(FileNamePath.lastIndexOf('/')+1, FileNamePath.lastIndexOf('.')) ;
				cvjs_FileNameNoExtension = fileName;

				fileExtension =  FileNamePath.substring(FileNamePath.lastIndexOf('.')+1) ;
			}

		}
		
		// if it is .js we simply pass it on
		fileExtensionLower = fileExtension.toLowerCase();

if (cvjs_debug) 		console.log("fileExtension="+fileExtension+" lower "+fileExtensionLower);


// 2017-12-11  
// 2017-12-08
// here we build an array over number of floorplans in page

	//floorPlan_div = floorplan_div;   //2017-12-07	
	// build array with current floorplan_div, then we can add
		var fFlag = false;
		for (var i=0; i< floorplan_div_Array.length; i++){
						
			if (floorplan_div_Array[i] == floorplan_div){
				fFlag = true;
				floorplan_div_Array_current_Drawing[i] = FileNamePath;
				cvjs_active_floorplan_div_nr = i;  // we are setting the active floorplan_div to the drawing-div we are loading from	
				cvjs_scrollMouse_intialized[i] = false;		// we tell that the scroll mouse is not initalized for this floorplan_div								
				vqRooms[i] = new Array();	  // we intialize vqRooms for this space	
			}
		}


		if (fileExtensionLower.indexOf("json")==0){
			FileNamePath = filePath;
			FileNameNoExtension = fileName;
			fileLoad_contentFormat = "JSON";
	
			var cvjs_phpMergeLocation = cvjs_serverHandlersPath + cvjs_serverMergeDWGController;
			var js_data = {};
			js_data['base_file'] = "none";
			var jsonInputPath = FileNamePath; 
			if (FileNamePath.indexOf(cvjs_ServerUrl)>-1){	
				jsonInputPath = cvjs_ServerLocation + FileNamePath.substring(cvjs_ServerUrl.length);
			}
			js_data['merge_file'] = jsonInputPath +FileNameNoExtension+"."+fileExtension;
			js_data['out_file'] = cvjs_ServerLocation+"/converters/files/merged/"+FileNameNoExtension+".dwg";
			
			// 4.1.01j  - zip content										
			js_data['zip_output'] = "false";
			js_data['QR_code'] = "false";
			json_inputfile_flag = true;

			jQuery.ajax({
			  url:cvjs_phpMergeLocation,
			  type: 'post',
			  data: js_data,
			  async:true,
			  success: function(html){

//				window.alert("success "+html);
				
				FileNamePath = cvjs_ServerLocation+"/converters/files/merged/"+FileNameNoExtension+".dwg";
				fileExtensionLower = "dwg";
				fileExtension = "dwg";
	
				if (fileExtensionLower.indexOf("dwg")==0) cvjs_conversion_setContentFormat("DWG");
			
				cvjs_preConversionFileExtension[cvjs_active_floorplan_div_nr] = fileExtensionLower; 
				cvjs_preConversionFileName[cvjs_active_floorplan_div_nr] = FileNamePath;			

//				window.alert("before loading cvjs_LoadDrawing_Conversion( drawing: "+FileNamePath+"   "+FileNameNoExtension);
							
				cvjs_LoadDrawing_Conversion(floorplan_div, FileNamePath, FileNameNoExtension, cvjs_conversion_originatingUsername[cvjs_active_floorplan_div_nr ], cvjs_conversion_originatingPassword[cvjs_active_floorplan_div_nr ]);
				return;
	
			  },
			  error:function(data_ee){console.log("Error Merge "+data_ee); return;}
			});		
			return;			
		}

		
		if (fileExtensionLower.indexOf("js")==0){
			FileNamePath = filePath;
			FileNameNoExtension = fileName;
			fileLoad_contentFormat = "JS";
		}

		// if it is .png .gif .jpg , we set it up to be direct bitmap load
		if (fileExtensionLower.indexOf("png")==0 || fileExtensionLower.indexOf("gif")==0 || fileExtensionLower.indexOf("jpg")==0 || fileExtensionLower.indexOf("jpeg")==0){
			FileNamePath = filePath;
			FileNameNoExtension = fileName;
			fileLoad_contentFormat = fileExtension;
		}

		// new 6.6.07b
		var allBitmaps = " cut dds exr g3 hdr ico iff jng mng pcx pbm pfm pgm ppm pict psd raw ras sgi targa wbmp webp xbm xpm jpx j2c jxr jif";
		if (fileExtensionLower.indexOf("tif")==0 || fileExtensionLower.indexOf("tiff")==0 || allBitmaps.indexOf(fileExtensionLower)>0){
		
			if (fileExtensionLower.indexOf("tif")==0) cvjs_conversion_setContentFormat("TIF")
				else{
					if (fileExtensionLower.indexOf("tiff")==0) 
						cvjs_conversion_setContentFormat("TIF");
					else 
						cvjs_conversion_setContentFormat(fileExtensionLower.toUpperCase());
				}
				
			cvjs_preConversionFileExtension[cvjs_active_floorplan_div_nr] = fileExtensionLower; 
			cvjs_preConversionFileName[cvjs_active_floorplan_div_nr] = FileNamePath;			
			cvjs_LoadDrawing_Conversion(floorplan_div, FileNamePath, FileNameNoExtension, cvjs_conversion_originatingUsername[cvjs_active_floorplan_div_nr ], cvjs_conversion_originatingPassword[cvjs_active_floorplan_div_nr ]);
			return;

		}


		// 6.2.62  // angular , simply have the nodejs server pick up the SVG file
		
		
		if (cvjs_firstLoad && cvjs_isAngular && (fileExtensionLower.indexOf("svg")==0)){

			cvjs_conversion_setContentFormat("SVG");

			cvjs_preConversionFileExtension[cvjs_active_floorplan_div_nr] = fileExtensionLower; 
			cvjs_preConversionFileName[cvjs_active_floorplan_div_nr] = FileNamePath;			

			if (cvjs_debug) console.log("ANGULAR before loading cvjs_LoadDrawing_Conversion( drawing: "+FileNamePath+"   "+FileNameNoExtension);
						
			cvjs_LoadDrawing_Conversion(floorplan_div, FileNamePath, FileNameNoExtension, cvjs_conversion_originatingUsername[cvjs_active_floorplan_div_nr ], cvjs_conversion_originatingPassword[cvjs_active_floorplan_div_nr ]);
			return;
		}





		// 6.2.62
		// if it is .dwg, .dxf .dwf, we call the conversion setup
		if (fileExtensionLower.indexOf("dwg")==0 || fileExtensionLower.indexOf("dwf")==0 || fileExtensionLower.indexOf("dxf")==0){
			// Now I will have the rest server pick up the dwg file at http://creator.vizquery.com/City_base_map.dwg, which is not password protected,
			// If the file is on the same server as the converter, I can pass over a local file and path: /home/cadviewer/creator/City_skyway_map.dwg
			// convert it, and send it up to CADViewer in this document for display

			if (fileExtensionLower.indexOf("dwg")==0) cvjs_conversion_setContentFormat("DWG");
			if (fileExtensionLower.indexOf("dwf")==0) cvjs_conversion_setContentFormat("DWF");
			if (fileExtensionLower.indexOf("dxf")==0) cvjs_conversion_setContentFormat("DXF");
			
			// 3.0.13e
			cvjs_preConversionFileExtension[cvjs_active_floorplan_div_nr] = fileExtensionLower; 
			cvjs_preConversionFileName[cvjs_active_floorplan_div_nr] = FileNamePath;			

//			window.alert("before loading cvjs_LoadDrawing_Conversion( drawing: "+FileNamePath+"   "+FileNameNoExtension);
						
			cvjs_LoadDrawing_Conversion(floorplan_div, FileNamePath, FileNameNoExtension, cvjs_conversion_originatingUsername[cvjs_active_floorplan_div_nr ], cvjs_conversion_originatingPassword[cvjs_active_floorplan_div_nr ]);
			return;
		}


		// if it is .dgn we call the conversion setup
		if (fileExtensionLower.indexOf("dgn")==0){
if (cvjs_debug) console.log("IN DGN BRANCH");


			// 3.0.13e
			cvjs_preConversionFileExtension[cvjs_active_floorplan_div_nr] = fileExtensionLower; 
			cvjs_preConversionFileName[cvjs_active_floorplan_div_nr] = FileNamePath;			


			if (fileExtensionLower.indexOf("dgn")==0) cvjs_conversion_setContentFormat("DGN");
			cvjs_LoadDrawing_Conversion(floorplan_div, FileNamePath, FileNameNoExtension, cvjs_conversion_originatingUsername[cvjs_active_floorplan_div_nr ], cvjs_conversion_originatingPassword[cvjs_active_floorplan_div_nr ]);
			return;
		}

		// if it is .dgn we call the conversion setup
		if (fileExtensionLower.indexOf("pcf")==0){
if (cvjs_debug) console.log("IN PCF BRANCH");


			// 3.0.13e
			cvjs_preConversionFileExtension[cvjs_active_floorplan_div_nr] = fileExtensionLower; 
			cvjs_preConversionFileName[cvjs_active_floorplan_div_nr] = FileNamePath;			


			if (fileExtensionLower.indexOf("pcf")==0) cvjs_conversion_setContentFormat("PCF");
			cvjs_LoadDrawing_Conversion(floorplan_div, FileNamePath, FileNameNoExtension, cvjs_conversion_originatingUsername[cvjs_active_floorplan_div_nr ], cvjs_conversion_originatingPassword[cvjs_active_floorplan_div_nr ]);
			return;
		}



		// if it is .svg we pass it over to direct svg load
		// it is is .svgz we pass it over to direct svg load

		if (fileExtensionLower.indexOf("txt")==0 || fileExtensionLower.indexOf("svg")==0 || fileExtensionLower.indexOf("svgz")==0){

		
			// first load of svg from sharepoint server
			if (cvjs_firstLoad && cvjs_fileLoadingFromSharePointServer){  // 3.0.13k
				cvjs_firstLoad = false;
				// 3.0.14d  - if a svg first load, the SVG
				//// DO NOT SET AS SVG THROUGH PHP cvjs_preConversionFileExtension[cvjs_active_floorplan_div_nr] = fileExtensionLower;			
				// first load the file over to local folder
				// then load:
					
				var downloadSharepointPhpUrl = cvjs_serverHandlersPath + "CV-JS_sharepoint_downloadfile.php";
				// we need to wash out %20 and replace by whitespaces, if the filename originates from an external filename. Will not work with a %20 filename on a Sharepoint server
				var svgName=filePath+fileName+"."+fileExtension;
				
				svgName = svgName.replace(/%20/g, ' ');
				var filelist_data = {};
				filelist_data['sharepointfilename'] = svgName;
				filelist_data['targetfile'] = sharePoint_dataServerPath+svgName;
				filelist_data['user_name'] = cvjs_sharepoint_UserName;
				
				if (cvjs_debug) console.log("share point SVG filename="+svgName+"  "+cvjs_sharepoint_UserName+" "+(sharePoint_dataServerPath+svgName)+" "+sharePoint_dataUrlPath);
				jQuery.ajax({
					url : downloadSharepointPhpUrl,
					type: 'post',
					data: filelist_data,
					success:function(Api_response)
							{	
		console.log("download response"+Api_response);
		
							// 3.0.13k
					
								SVGloadFile =	sharePoint_dataUrlPath+svgName;
						


								// We cannot set the PDF multi-page loading page array flag to false, because we are loading the svg directly
								//cvjs_SVG_multiPagesFlag[cvjs_active_floorplan_div_nr] = false;				
								
								//2017-08-01  we load the svg directly from the server json/php stream or file indirection
								if (svgFileFromServer){
												SVGloadFile = FileNamePath;
												svgFileFromServer = false;
								}

								FileNamePath = cvjs_relativeScriptsPath;

								if (cvjs_debug) 			console.log("SVGloadFile "+ SVGloadFile);
								
								
								// 3.0.15c
								// if we are navigating from the page change and we have pre-converted into a fixed pdf folder in /converter/files/pdf
								// we have to strip out the initial path that leads to the location (html/data/)  defined by the sharepoint init file

								var innerHttp = SVGloadFile.lastIndexOf("://");
															
								if (innerHttp>6){
									// the filename internally contains http:// or https:// and we therefore truncate:
									
									if (SVGloadFile.lastIndexOf("http://")>6){
										SVGloadFile = SVGloadFile.substring(SVGloadFile.lastIndexOf("http://"));
									}
									else{
										if (SVGloadFile.lastIndexOf("https://")>6){
											SVGloadFile = SVGloadFile.substring(SVGloadFile.lastIndexOf("https://"));
										}
									}
								}
								
							
								if (cvjs_debug) console.log("After http / httpsSVGloadFile "+ SVGloadFile);


								

								SVGloadFlag = true;

								// we are faking the load of init.js   2018-02-07
								
								nodes_loaded = true;
								floor_loaded = true;
								thumbs_loaded = true;
								
								buildings = {
									BUILDING_NAME_GOES_HERE: {
										name: "",
										company: "",
										address: "",
										city: "",
										state: "",
										zipcode: "",
										country: "",
										FacMgr: "",
										FacMgr_title: "",
										FacMgr_email: "",
										FacMgr_phone: "",
										floors: {
											FLOOR_NAME_GOES_HERE: {
												name: "name_of_file_to_appear",
												file: "file_name",
												rooms: {

												}
											}
										}
									}
									
								}
								
								//console.log("ÖÖÖ  "+cvjs_rPaper[cvjs_active_floorplan_div_nr]);
								
								
								if (cvjs_rPaper[cvjs_active_floorplan_div_nr] == null || cvjs_rPaper[cvjs_active_floorplan_div_nr] == undefined){
													
									cvjs_rPaper[cvjs_active_floorplan_div_nr] = Snap("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]);
									console.log(cvjs_active_floorplan_div_nr+"  "+floorplan_div_Array[cvjs_active_floorplan_div_nr]);
													
								}
								
								if (fileOverlay){   // we only initialize if not overlay!!!   2018-05-05
									if (cvjs_debug) console.log("file overlay we do nothing, setup after SVG");
								}
								else{
									layers_all = cvjs_rPaper[cvjs_active_floorplan_div_nr].g();
									if (!cvjs_Community_Version)
										cvjs_redlineStickyNoteLayer[cvjs_active_floorplan_div_nr] = cvjs_rPaper[cvjs_active_floorplan_div_nr].g();  // 2018-03-21		
								}
											
								SetUpVq(1,15);
								return;

								// 3.0.13k
							

							},
					error:function(data_e)
							{
								console.log("2 json getEngines error="+data_e);
							}
				});	
				return;
				
			}
			else{  // standard SVG load, can be first load or second load 
	
//				window.alert(" (json_inputfile_flag "+json_inputfile_flag+"  "+cvjs_firstLoad);
				// if JSON and not first 
				if (json_inputfile_flag){
					json_inputfile_flag = false;
					cvjs_preConversionFileName[cvjs_active_floorplan_div_nr] = cvjs_preConversionFileName[cvjs_active_floorplan_div_nr].substring(0, cvjs_preConversionFileName[cvjs_active_floorplan_div_nr].lastIndexOf(".")) + ".json";
					cvjs_preConversionFileExtension[cvjs_active_floorplan_div_nr] = "json";	
				}

				// 3.0.14d  we cannot set the extension to SVG in second run			
				if (cvjs_firstLoad){
					cvjs_preConversionFileExtension[cvjs_active_floorplan_div_nr] = fileExtensionLower; 
					cvjs_firstLoad = false;
				}
		
//				window.alert(cvjs_preConversionFileExtension[cvjs_active_floorplan_div_nr]);
			
				SVGloadFile = filePath+fileName+"."+fileExtension;
				
				// 3.1.21j
				// IF foldertree structure, we encapsulate the drawing into the load-file handler, otherwise there will be cross-domain
				// loading issues

				//window.alert(cvjs_buildFolderTree_crossDomain+" "+SVGloadFile);

				if (cvjs_buildFolderTree_crossDomain){
					if (SVGloadFile.indexOf("converters/files/pdf")>0){
						
								SVGloadFile = cvjs_serverHandlersPath+cvjs_serverLoadFileController+"?file="+cvjs_ServerLocation+SVGloadFile.substring(SVGloadFile.indexOf("/converters/files/pdf"));
//						window.alert("this is a pdf!"+SVGloadFile);
					}
					else{
						SVGloadFile = cvjs_serverHandlersPath+cvjs_serverLoadFileController+"?file="+SVGloadFile;
					}
				}
				
				// We cannot set the PDF multi-page loading page array flag to false, because we are loading the svg directly
				//cvjs_SVG_multiPagesFlag[cvjs_active_floorplan_div_nr] = false;				
				
				//2017-08-01  we load the svg directly from the server json/php stream or file indirection
				if (svgFileFromServer){
								SVGloadFile = FileNamePath;
								svgFileFromServer = false;
				}

				FileNamePath = cvjs_relativeScriptsPath;

				if (cvjs_debug) 			console.log("SVGloadFile "+ SVGloadFile);

				SVGloadFlag = true;

				// we are faking the load of init.js   2018-02-07
				
				nodes_loaded = true;
				floor_loaded = true;
				thumbs_loaded = true;
				
				buildings = {
					BUILDING_NAME_GOES_HERE: {
						name: "",
						company: "",
						address: "",
						city: "",
						state: "",
						zipcode: "",
						country: "",
						FacMgr: "",
						FacMgr_title: "",
						FacMgr_email: "",
						FacMgr_phone: "",
						floors: {
							FLOOR_NAME_GOES_HERE: {
								name: "name_of_file_to_appear",
								file: "file_name",
								rooms: {

								}
							}
						}
					}
					
				}
								
				if (cvjs_debug) console.log("ZX1 Standard SVG load cvjs_active_floorplan_div_nr="+cvjs_active_floorplan_div_nr);	
				//if (cvjs_debug) console.log("ZX1 Standard SVG load cvjs_rPaper[cvjs_active_floorplan_div_nr]="+cvjs_rPaper[cvjs_active_floorplan_div_nr]);
				
				if (cvjs_rPaper[cvjs_active_floorplan_div_nr] == null || cvjs_rPaper[cvjs_active_floorplan_div_nr] == undefined){
									
					cvjs_rPaper[cvjs_active_floorplan_div_nr] = Snap("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]);
					console.log(cvjs_active_floorplan_div_nr+"  "+floorplan_div_Array[cvjs_active_floorplan_div_nr]);
				}
				
				if (fileOverlay){   // we only initialize if not overlay!!!   2018-05-05
					if (cvjs_debug) console.log("file overlay we do nothing, setup after SVG");
				}
				else{
					layers_all = cvjs_rPaper[cvjs_active_floorplan_div_nr].g();
					if (!cvjs_Community_Version)
						cvjs_redlineStickyNoteLayer[cvjs_active_floorplan_div_nr] = cvjs_rPaper[cvjs_active_floorplan_div_nr].g();  // 2018-03-21		
				}

//				if (cvjs_debug) console.log("ZX3 Prior SetUpVq Standard SVG load cvjs_active_floorplan_div_nr="+cvjs_active_floorplan_div_nr);		
//				if (cvjs_debug) console.log("ZX4 Prior SetUpVq load cvjs_rPaper[cvjs_active_floorplan_div_nr]="+cvjs_rPaper[cvjs_active_floorplan_div_nr]);

				SetUpVq(1,15);
				return;
			}	
		}


		// new PDF branch for converter
		if (fileExtensionLower.indexOf("pdf")==0){

			if (fileExtensionLower.indexOf("pdf")==0) cvjs_conversion_setContentFormat("PDF");
			
			cvjs_preConversionFileExtension[cvjs_active_floorplan_div_nr] = fileExtensionLower; 
			cvjs_preConversionFileName[cvjs_active_floorplan_div_nr] = FileNamePath;			
						
			cvjs_LoadDrawing_Conversion(floorplan_div, FileNamePath, FileNameNoExtension, cvjs_conversion_originatingUsername[cvjs_active_floorplan_div_nr ], cvjs_conversion_originatingPassword[cvjs_active_floorplan_div_nr ]);
			return;

		}
		
		// this is a pdf file
		if ((fileExtensionLower.indexOf("pdf")==0) && false){   // blocking BATIK LOAD


			//console.log("cvjs_LoadDrawing_PDF "+FileNamePath);
			cvjs_PDFloadFlag = true;   // this flag will ensure loading is displayed for the init load file up until the pdf is converted
			
			cvjs_last_FileName_PDF = FileNamePath.substring(FileNamePath.lastIndexOf("/")+1);
			
			if (cvjs_debug) console.log("loading PDF "+cvjs_customPdfFolderFlag+ "    cvjs_customPdfFolderFlag")

			// 3.0.13e
			cvjs_preConversionFileExtension[cvjs_active_floorplan_div_nr] = fileExtensionLower; 
			
		    // 2018-05-08, setting customFolder after each load of PDF file				
		  if (cvjs_customPdfFolderFlag){
			  	  
				var pdfFolderName = FileNamePath.substring(FileNamePath.lastIndexOf("/")+1);
				pdfFolderName = pdfFolderName.substring(0,pdfFolderName.lastIndexOf("."));
				
				//cvjs_setCustomPdfFolder(pdfFolderName, false);	
			  	  
				// 3.0.15b  - if the folder status has been set elsewhere, we repeat the status setting
				cvjs_setCustomPdfFolder(pdfFolderName, cvjs_customPdfFolderForcedUpdate);				  
		  };
			// We check if the file starts with http and are assuming that we need to change to the local file path
			// NOTE: this will not correct a file that is entered using fileName=  with http.

			cvjs_ClearDrawing(floorplan_div);
			
//if (cvjs_debug) window.alert("pdf cvjs_fileLoadingFromSharePointServer"+cvjs_fileLoadingFromSharePointServer+" FileNamePath "+FileNamePath+" cvjs_filepathServer "+cvjs_filepathServer );			
			// new 2017-12-31
			if (cvjs_fileLoadingFromSharePointServer){
				
				// first load the file over to local folder
				// then load:
			
				var downloadSharepointPhpUrl = cvjs_serverHandlersPath + "CV-JS_sharepoint_downloadfile.php";
				
				var filelist_data = {};
				filelist_data['sharepointfilename'] = FileNamePath;
				filelist_data['targetfile'] = sharePoint_dataServerPath+FileNamePath;
				filelist_data['targeturl'] = sharePoint_dataUrlPath+FileNamePath;
				filelist_data['user_name'] = cvjs_sharepoint_UserName;
		
//				window.alert("share point pdf "+cvjs_sharepoint_UserName);
		
				jQuery.ajax({
					url : downloadSharepointPhpUrl,
					type: 'post',
					data: filelist_data,
					success:function(Api_response)
							{	
		//window.alert(Api_response);
								cvjs_loadInProgress = false;
								cvjs_LoadDrawingPDF_base(filelist_data['targetfile']);	

							},
					error:function(data_e)
							{
								console.log("2 json getEngines error="+data_e);
							}
				});
				
			}
			else{   // standard loop

				if (FileNamePath.indexOf("http:")>-1 || FileNamePath.indexOf("https:")>-1){

					FileNamePath =  cvjs_filepathServer  + FileNamePath.substring(FileNamePath.lastIndexOf("/"));
				}
				cvjs_LoadDrawingPDF_base(FileNamePath);
			}

			//cvjs_LoadDrawingPDF_base(FileNamePath);

		//console.log(floor_loaded+" "+nodes_loaded+" "+thumbs_loaded+" "+default_full_loaded);

			//cvjs_InitializeModals(floorplan_div);

			cvjs_rPaper[cvjs_active_floorplan_div_nr] = null;
			var svgDiv = "#"+floorplan_div_Array[cvjs_active_floorplan_div_nr];
			if (!cvjs_rPaper[cvjs_active_floorplan_div_nr])
				cvjs_rPaper[cvjs_active_floorplan_div_nr] = Snap(svgDiv);


			jQuery('#cvjs_wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html('<table class=\"waitlooperTable\" width=\"100\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr><td><div id=\"looper_image_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\"></div></td></tr><tr><td><div class=\"cvjs_wait_text_4\" id=\"cvjs_wait_looper_text_id_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\">'+languageTable.languages[cvjs_currentLanguage].LoadingModal.Loading+'</div></td></tr></table>');

			jQuery("#cvjs_wait_looper_text_id_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].LoadingModal.Loading);
			
			cvjs_setLooperPosition();

			jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).show();


			// we are not loading in init.js, but simply setting the variables. 	
			nodes_loaded = true;
			floor_loaded = true;
			thumbs_loaded = true;
			
			buildings = {
				BUILDING_NAME_GOES_HERE: {
					name: "",
					company: "",
					address: "",
					city: "",
					state: "",
					zipcode: "",
					country: "",
					FacMgr: "",
					FacMgr_title: "",
					FacMgr_email: "",
					FacMgr_phone: "",
					floors: {
						FLOOR_NAME_GOES_HERE: {
							name: "name_of_file_to_appear",
							file: "file_name",
							rooms: {

							}
						}
					}
				}
				
			}
			
			layers_all = cvjs_rPaper[cvjs_active_floorplan_div_nr].g();
			if (!cvjs_Community_Version)
				cvjs_redlineStickyNoteLayer[cvjs_active_floorplan_div_nr] = cvjs_rPaper[cvjs_active_floorplan_div_nr].g();  // 2018-03-21
			

			return;

			
		
			// while file is converting load the init file
//			FileNamePath = cvjs_relativeScriptsPath;
//			FileNameNoExtension = "init";
//			fileLoad_contentFormat = "JS";
//			cvjs_FileNameNoExtension = "init";

		}

	}

	try{


		//SVGloadFlag = false;  // 2017-08-07, we need to test this MMMMM
		SVGloadedFragment = false;


		if (cvjs_initMasterBackground){
//if (cvjs_debug) 			console.log("C remove all "+cvjs_initMasterBackground);  // only remove if initMasterGround true (false=compare drawings)
//			cvjs_rPaper[cvjs_active_floorplan_div_nr].selectAll("*").remove();
//if (cvjs_debug) console.log("blocked cvjs_rPaper[cvjs_active_floorplan_div_nr] select all ");


			// new, we clear the element  IE 11 fix  2017-12-19
			//var element = document.getElementById(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
			//	element.parentNode.removeChild(element);			
			var myNode = document.getElementById(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
			while (myNode.firstChild) {
				myNode.removeChild(myNode.firstChild);
			}


			try{ if (cvjs_debug) console.log("before remove "+vqRooms[0].length);} catch(err) {console.log(err);}			

			cvjs_rPaper[cvjs_active_floorplan_div_nr] = null;
			var svgDiv = "#"+floorplan_div;   //  floorPlan_div
 			if (!cvjs_rPaper[cvjs_active_floorplan_div_nr])
					cvjs_rPaper[cvjs_active_floorplan_div_nr] = Snap(svgDiv);

//	if (cvjs_debug) console.log("1 MMMMMMMMMMMMMM setting active floorplan "+cvjs_active_floorplan_div_nr+"  snap() "+svgDiv);
//	try{ if (cvjs_debug) console.log("after remove "+vqRooms[0].length);} catch(err) {console.log(err);}			

			
		}
//		}else   // 2017-08-31 , removed
//			cvjs_rPaper[cvjs_active_floorplan_div_nr].selectAll("*").remove();

if (cvjs_debug) 		console.log("REMOVED removed  SVGloadFlag"+SVGloadFlag+" SVGloadedFragment"+SVGloadedFragment);

	}
	catch (err){};

	jQuery('#cvjs_wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html('<table class=\"waitlooperTable\" width=\"100\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr><td><div id=\"looper_image_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\"></div></td></tr><tr><td><div class=\"cvjs_wait_text_4\" id=\"cvjs_wait_looper_text_id_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\">'+languageTable.languages[cvjs_currentLanguage].LoadingModal.Loading+'</div></td></tr></table>');

	jQuery("#cvjs_wait_looper_text_id_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].LoadingModal.Loading);
	
	cvjs_setLooperPosition();

	jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).show();


	jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();

	// 3.3.01e
	if (printDebugFlag) jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).show();
	
	
	cvjs_objectIsZoomedExtents = true;

	cvjs_loadDrawing_conversionMode = false;
	cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ] = FileNamePath;


	jQuery("#"+floorplan_div).html('');
	floor_loaded = false;
	nodes_loaded = false;
	thumbs_loaded = false;

	VqSetup = false;

	current_FileNamePath = FileNamePath;


	js_loaded_flag = 0;

	//console.log("tms_LoadDrawing 1 current_js_initialized="+current_js_initialized+"  "+FileNamePath+FileNameNoExtension+".js");


	if (fileLoad_contentFormat.indexOf("JS")==0){

	if (current_js_initialized == 1){

if (cvjs_debug) console.log(FileNameNoExtension.indexOf('Type=')+ " JS ileNamePath.indexOf('Type=')  replacing current_jsFloorNames="+current_jsFloorNames+"  "+FileNamePath+FileNameNoExtension);

	if (FileNameNoExtension.indexOf('Type=')>-1) // 2017-08-31
		replacejscssfile(current_jsFloorNames, FileNamePath+FileNameNoExtension, "js");
	else
		replacejscssfile(current_jsFloorNames, FileNamePath+FileNameNoExtension+".js", "js");


		if (!cvjs_FourFilesInOne){
			replacejscssfile(current_jsNodesFloorNames, FileNamePath+FileNameNoExtension+"-nodes.js", "js");
			replacejscssfile(current_jsThumbFloorNames, FileNamePath+FileNameNoExtension+"-thumb.js", "js");
			replacejscssfile(current_jsFullFloorNames, FileNamePath+FileNameNoExtension+"-full.js", "js");
		}
	}
	else{

if (cvjs_debug) console.log("initial loading .js file files! "+FileNamePath+FileNameNoExtension);
		current_js_initialized = 1;

		if (FileNamePath.indexOf('Type=')>-1) // 2017-08-31
			loadJSbase(FileNamePath+FileNameNoExtension, "js");
		else
			loadJSbase(FileNamePath+FileNameNoExtension+".js");
		if (!cvjs_FourFilesInOne){
			loadJSbase(FileNamePath+FileNameNoExtension+"-nodes.js");
			loadJSbase(FileNamePath+FileNameNoExtension+"-thumb.js");
			loadJSbase(FileNamePath+FileNameNoExtension+"-full.js");
		}
	}

//console.log("replaced to: "+jsNodesFloorNames[drawing_nr]+"  "+jsFullFloorNames[drawing_nr]+" "+jsFloorNames[drawing_nr]+" "+jsThumbFloorNames[drawing_nr]);
	if (!cvjs_FourFilesInOne){
		current_jsNodesFloorNames = FileNamePath+FileNameNoExtension+"-nodes.js";
		current_jsThumbFloorNames = FileNamePath+FileNameNoExtension+"-thumb.js"
		current_jsFullFloorNames =  FileNamePath+FileNameNoExtension+"-full.js"
	}

	if (FileNameNoExtension.indexOf('Type=')>-1) // 2017-08-31
		current_jsFloorNames =  FileNamePath+FileNameNoExtension;
	else
		current_jsFloorNames =  FileNamePath+FileNameNoExtension+".js";

	rebuild_drop_spaces =1;  // make sure drop spaces are regenerated in spaces menu

//console.log("end of loadDrawing current_jsNodesFloorNames="+current_jsNodesFloorNames);

		// check if filename or path is incorrect

		waitForJSLoaded();


/*
		jQuery.getScript( FileNamePath+FileNameNoExtension+".js" )
		  .done(function( script, textStatus ) {
		    //console.log( textStatus );
		    console.log("ok");
		  })
		  .fail(function( jqxhr, settings, exception ) {
		    console.log("fail "+jqxhr+" "+settings+" "+exception);
		});


		var len = jQuery('script[src*="FileNamePath+FileNameNoExtension+".js"]').length;
		if (len == 0){
			jQuery("#looper").hide();
			jQuery('#cvjs_wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
			var status = "Path to file not found: "+FileNamePath+FileNameNoExtension+".js";
			jQuery('#cvjs_informationModalText').html(status);
			jQuery('#info_messageModal').modal('show');
		}


*/

	}
	else{   // We are loading PNG

	
			// 3.0.13e
			cvjs_preConversionFileExtension[cvjs_active_floorplan_div_nr] = fileExtensionLower; 
	
	
	
		// We set the PDF multi-page loading page array flag to false
		cvjs_SVG_multiPagesFlag[cvjs_active_floorplan_div_nr] = false;				
	
	
		// because it is png we need to load default_full_loaded		
		cvjs_bitmapLoadFlag = true;
		
		try{
			cvjs_rPaper[cvjs_active_floorplan_div_nr] = Snap("#"+floorplan_div);
			var fileName=FileNamePath+FileNameNoExtension+"."+fileLoad_contentFormat
			
			
			// 3.1.21j
			// IF foldertree structure, we encapsulate the drawing into the load-file handler, otherwise there will be cross-domain
			// loading issues
			if (cvjs_buildFolderTree_crossDomain)
				fileName = cvjs_serverHandlersPath+cvjs_serverLoadFileController+"?file="+fileName;

					

if (cvjs_debug) console.log("calling setup Png "+fileName);

			default_full_loaded = true;

			SetUpVqPngDefault( fileName, floorplan_div_Array[cvjs_active_floorplan_div_nr] );
		}catch(err) {console.log(err);}

	}

 }


function waitForJSLoaded(){

		try{	// check if layers in -full are there
				layers_all.length;
				
				if (cvjs_debug) console.log("waitForJSLoaded");

			}
		catch (err){

			if (load_failures < 40){
				load_failures++;
				jQuery("#loading").html(languageTable.languages[cvjs_currentLanguage].LoadingModal.Loading);
				setTimeout(function(){waitForJSLoaded()},256);
			}
			else{
				jQuery("#looper").hide();
				jQuery('#cvjs_wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
				//var status = "Path to file not found: "+FileNamePath+FileNameNoExtension+".js";
				//jQuery('#cvjs_informationModalText').html(status);
				//jQuery('#info_messageModal').modal('show');

				var textString = "Path to file not found: "+current_FileNamePath+cvjs_FileNameNoExtension+".js";
					
				cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], textString);

			}
		}
}


var cvjs_rasterImageLoaded;

var sharePoint_dataServerPath = "";
var sharePoint_dataUrlPath = "";
var cvjs_sharepoint_UserName = "";
var cvjs_sharepoint_DocLib = "";



function SetUpVqPngDefault(fileName)
{

	if (cvjs_fileLoadingFromSharePointServer){
		
		// first load the file over to local folder
		// then load:
			
		var downloadSharepointPhpUrl = cvjs_serverHandlersPath + "CV-JS_sharepoint_downloadfile.php";
		
		// we need to wash out %20 and replace by whitespaces, if the filename originates from an external filename. Will not work with a %20 filename on a Sharepoint server
		
		fileName = fileName.replace(/%20/g, ' ');
		
		
		var filelist_data = {};
		filelist_data['sharepointfilename'] = fileName;
		filelist_data['targetfile'] = sharePoint_dataServerPath+fileName;
		filelist_data['user_name'] = cvjs_sharepoint_UserName;
		
		if (cvjs_debug) console.log("share point bitmap filename="+fileName+"  "+cvjs_sharepoint_UserName+" "+(sharePoint_dataServerPath+fileName)+" "+sharePoint_dataUrlPath);

			

		jQuery.ajax({
			url : downloadSharepointPhpUrl,
			type: 'post',
			data: filelist_data,
			success:function(Api_response)
					{	
console.log("download response"+Api_response);
						SetUpVqPngDefault_base(sharePoint_dataUrlPath+fileName);	

					},
			error:function(data_e)
					{
						console.log("2 json getEngines error="+data_e);
					}
		});

		
	}
	else{
		SetUpVqPngDefault_base(fileName);	
	}

}


function SetUpVqPngDefault_base(fileName)
{


	// we are not loading in init.js, but simply setting the variables. 	
	nodes_loaded = true;
	floor_loaded = true;
	thumbs_loaded = true;
	
	buildings = {
		BUILDING_NAME_GOES_HERE: {
			name: "",
			company: "",
			address: "",
			city: "",
			state: "",
			zipcode: "",
			country: "",
			FacMgr: "",
			FacMgr_title: "",
			FacMgr_email: "",
			FacMgr_phone: "",
			floors: {
				FLOOR_NAME_GOES_HERE: {
					name: "name_of_file_to_appear",
					file: "file_name",
					rooms: {

					}
				}
			}
		}
		
	}
	layers_all = cvjs_rPaper[cvjs_active_floorplan_div_nr].g();
	if (!cvjs_Community_Version)
		cvjs_redlineStickyNoteLayer[cvjs_active_floorplan_div_nr] = cvjs_rPaper[cvjs_active_floorplan_div_nr].g();  // 2018-03-21




//console.log(floor_loaded+" "+nodes_loaded+" "+thumbs_loaded+" "+default_full_loaded);

	//cvjs_InitializeModals(floorplan_div);

	cvjs_rPaper[cvjs_active_floorplan_div_nr] = null;
	var svgDiv = "#"+floorplan_div_Array[cvjs_active_floorplan_div_nr];
	if (!cvjs_rPaper[cvjs_active_floorplan_div_nr])
    	cvjs_rPaper[cvjs_active_floorplan_div_nr] = Snap(svgDiv);

		
//	// remove all content of the floorplan, we may be loading another page...
//	cvjs_rPaper[cvjs_active_floorplan_div_nr].selectAll("*").remove();

//  NOTE; WE ARE NOT READING init.js  , we are faking the variable settings
	if ((floor_loaded) && (nodes_loaded) && (thumbs_loaded) && (default_full_loaded)){
		
		load_failures = 0;
		thumb_loaded = false;
				
		cvjs_rasterImageLoaded = new Image();
	
		cvjs_rasterImageLoaded.onload = function(){

			var layer_Bitmap_Layer = cvjs_rPaper[cvjs_active_floorplan_div_nr].g();
		
			if (cvjs_bitmapFileNameIsServerPath_flag){	
				var callName = cvjs_serverHandlersPath+cvjs_serverLoadFileController+"?file="+fileName;
				layer_Bitmap_Layer = cvjs_rPaper[cvjs_active_floorplan_div_nr].image( callName, 0, 0, this.width, this.height);		
			}
			else{
				layer_Bitmap_Layer = cvjs_rPaper[cvjs_active_floorplan_div_nr].image( fileName, 0, 0, this.width, this.height);				
			}

			var bbox = layer_Bitmap_Layer.getBBox();

			layers_all = cvjs_rPaper[cvjs_active_floorplan_div_nr].g();
			if (!cvjs_Community_Version)
				cvjs_redlineStickyNoteLayer[cvjs_active_floorplan_div_nr] = cvjs_rPaper[cvjs_active_floorplan_div_nr].g();  // 2018-03-21

			layers_all.add(layer_Bitmap_Layer);

			
			var boundingbox = "M0,0V"+this.height+"H"+(this.width)+"V0.0H0.0"
			if (cvjs_debug) console.log("boundingbox "+boundingbox);
			var layer_Bitmap_Layer_frame = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(boundingbox).attr({stroke : "rgb(164,164,164)" , "stroke-width" : "0.1", fill : "none"});
			layers_all.add(layer_Bitmap_Layer_frame);

			// we do not want to pan with thumb layer
			panWithThumb = false;

			boundingbox = "M0,0V"+bbox.height+"H"+bbox.width+"V0.0H0.0";			
			layer_thumb = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(
				cvjs_rPaper[cvjs_active_floorplan_div_nr].path(boundingbox).attr({stroke: "rgba(153,153,153,0.5)" , "stroke-width" : "2", fill: "none"})
			);
		
			var bbox = layers_all.getBBox();
					
			// set variables sizes
			actualLLX[cvjs_active_floorplan_div_nr] = 0;
			actualLLY[cvjs_active_floorplan_div_nr] = 0;
			actualURX[cvjs_active_floorplan_div_nr] = bbox.width;
			actualURY[cvjs_active_floorplan_div_nr] = bbox.height;
			// build
			
			
			
			
			
			
			if (cvjs_debug) console.log("XXXXXXXXXXXXXXXX   boundingbox "+bbox.width+"  "+bbox.height);
			
			
			// 2017-09-02
//window.alert("making master 1");
			
			cvjs_masterBackground[cvjs_active_floorplan_div_nr] = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
			cvjs_masterBackground[cvjs_active_floorplan_div_nr].attr({fill: "#ffffff", "fill-opacity":"0.01", "stroke-width": 0});

			//cvjs_masterBackground[cvjs_active_floorplan_div_nr].attr({fill: "#ff0000", "fill-opacity":"1.00", "stroke-width": 0});
			
			
			cvjs_masterBackground[cvjs_active_floorplan_div_nr].data("id", "master_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]);
			cvjs_masterBackground[cvjs_active_floorplan_div_nr].attr({id: "master_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]});

			
			// how to make drag for bitmaps


		//	cvjs_masterBackground[cvjs_active_floorplan_div_nr].after(layers_all);
			// 2018-01-30
			
			layers_all.after(cvjs_masterBackground[cvjs_active_floorplan_div_nr]);

			
			// 3.0.14d    - we put masterbackground on top instead as else no drag on image
			//cvjs_masterBackground[cvjs_active_floorplan_div_nr].before(layers_all);
			viewBox[cvjs_active_floorplan_div_nr].X = actualLLX[cvjs_active_floorplan_div_nr];
			viewBox[cvjs_active_floorplan_div_nr].Y = actualLLY[cvjs_active_floorplan_div_nr];
			viewBox[cvjs_active_floorplan_div_nr].width = actualURX[cvjs_active_floorplan_div_nr];
			viewBox[cvjs_active_floorplan_div_nr].height = actualURY[cvjs_active_floorplan_div_nr];
			cvjs_floorplan_div = floorplan_div_Array[cvjs_active_floorplan_div_nr];
			cvjs_masterBackground[cvjs_active_floorplan_div_nr].drag(dragMove, dragStart, dragEnd);
			
			//console.log("before 2"+viewBox[cvjs_active_floorplan_div_nr].X+"  "+viewBox[cvjs_active_floorplan_div_nr].Y);





			
			
			cvjs_addMouseWheelControls(cvjs_active_floorplan_div_nr);
			
			jQuery("#looper").hide();
			jQuery('#cvjs_wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();

			//cvjs_windowResize_position(true, floorplan_div_Array[cvjs_active_floorplan_div_nr].slice(0, -4));
			
			//console.log(cvjs_active_floorplan_div_nr+" floorplan is "+floorplan_div_Array[cvjs_active_floorplan_div_nr]+"  "+'#floatNavigationMenu_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]);
			
			var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
	
			var floorplan_div = floorplan_div_Array[cvjs_active_floorplan_div_nr];
			jQuery("#tip"+"_"+floorplan_div).css({position: 'absolute'});
			jQuery("#tip"+"_"+floorplan_div).css({border: '1px solid gray'});
			jQuery("#tip"+"_"+floorplan_div).css({'z-index': 2000});
			jQuery("#tip"+"_"+floorplan_div).css({color: "#333"});
			jQuery("#tip"+"_"+floorplan_div).css({'background-color': "#efefef"});
			jQuery("#tip"+"_"+floorplan_div).css({padding: "3px"});
			jQuery("#tip"+"_"+floorplan_div).css({'max-width': "300px"});
			jQuery("#tip"+"_"+floorplan_div).css({'white-space': "nowrap"});
			jQuery("#tip"+"_"+floorplan_div).css({'font-family': "arial, verdana, sans-serif"});
			jQuery("#tip"+"_"+floorplan_div).css({'font-size': "0.75em"});

			tip[cvjs_active_floorplan_div_nr] = jQuery("#tip"+"_"+floorplan_div);
			tip[cvjs_active_floorplan_div_nr].hide();

			ResizeVq(jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr].width), jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr].height));

			if( jQuery('#floatNavigationMenu_'+floorplan_div).is(':visible')){			
					// do nothing
			}
			else{
	
				if (pageChangeInterface[cvjs_interfaceCounterIndex(floorplan_div_Array[cvjs_active_floorplan_div_nr])]){
					jQuery('#floatNavigationMenu_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).show();
					var pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
					var posmenu_x = pos.top+5;
//					var posmenu_y = pos.left+jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width()-415;
					var posmenu_y = pos.left+jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width()-475;
					if (posmenu_y <40) posmenu_y = 40;
					jQuery('#floatNavigationMenu_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).offset({ top: posmenu_x, left: posmenu_y });

//					jQuery('#floatpagemenuText_'+floorplan_div).offset({ left: posmenu_y+168 });
				}
			}
				
			var pageNr ="&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp" +  "&nbsp&nbsp&nbsp1/1&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp";		
			var pageText = "Single Page";
			var pageString = pageNr+"  "+pageText;
			
			jQuery('#floatpagemenuText_'+floorplan_div).html(pageString);			
	
			// 3.3.01b
			jQuery('#floatpagemenuText1_topBar_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("1/1");
			jQuery('#floatpagemenuText2_topBar_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("Single Page");
	
	

	
			multiPages[cvjs_active_floorplan_div_nr] = { multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]	
			};				   
			
			
			layerTable[cvjs_active_floorplan_div_nr] = { numberOfLayers: 0,
			layers: []};
					
			console.log("multiPages[ "+ multiPages[cvjs_active_floorplan_div_nr].multiPages);
						
			// 2018-05-07   With xlinks, the hyperlinks are in the SVG we need to have the masterbackground first in the set. For NODE_, we create them on masterBackground so do not need (but still use)
			try{
				cvjs_SVGGroup[cvjs_active_floorplan_div_nr].before(cvjs_masterBackground[cvjs_active_floorplan_div_nr]);
					
			}
			catch(err1){console.log("error setting masterbackground first");}
			
			
			// set the tooltip, which is done in the vq arrays for standard load
			// 2017-09-22
			if (cvjs_customMethodForOnLoadEnd){
				
				// 2018-05-10;
				cvjs_loadInProgress = false;
				
				cvjs_myOnLoadEndMethod();  // call my OnLoadEndMethod as an alternative to OnLoadEnd();
			}
			else{
				try{
//					cvjs_resetZoomPan_SetMasterBackground(cvjs_active_floorplan_div_nr);	

					var fplan = floorplan_div_Array[cvjs_active_floorplan_div_nr].slice(0, -4);
					// allowing load of drawings
					cvjs_loadInProgress = false;
										
					console.log("NOTE_ End of png load loop booleans in init");
	
					// we set the rotation to 0 with page change or new drawing
					cvjs_currentRotationAngle[cvjs_active_floorplan_div_nr] = 0;

	//				window.alert("dragback "+floorplan_div_Array[cvjs_active_floorplan_div_nr]+"  "+cvjs_preConversionFileExtension[cvjs_active_floorplan_div_nr])			
					// 3.0.14d   - if pdf we put masterbackground on top for bitmaps 
					if (cvjs_preConversionFileExtension[cvjs_active_floorplan_div_nr].indexOf("pdf")==0){
						cvjs_dragBackgroundToFront_SVG(fplan);
					}
						
					// 6.2.33
					cvjs_currentBackgroundColor[cvjs_active_floorplan_div_nr] = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css("background-color");						
					cvjs_OnLoadEnd(fplan);        // generic method name OnLoadEnd();
					
				}catch(exception) { console.log("Please define cvjs_OnLoadEnd in your encapsulating code: "+exception); }
			}
			//cvjs_loadCurrentLoadedDrawingAsString = false;
			jQuery("#looper").hide();
			jQuery('#cvjs_wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
			cvjs_bitmapLoadFlag = false;
			// 2017-09-02  We
	//		  DoSetUpVq();
		}
		

//      NEW 2018-02-05   try to set the cross origin attribute so it can be handled in toDataUrl when printing
			cvjs_rasterImageLoaded.setAttribute('crossOrigin', 'anonymous'); 
		
	
//      HERE WE SET THE 		
//		cvjs_rasterImageLoaded.src = fileName;
			if (cvjs_bitmapFileNameIsServerPath_flag){	
				var callName = cvjs_serverHandlersPath + cvjs_serverLoadFileController + "?file=" + fileName;
				cvjs_rasterImageLoaded.src = callName;
				console.log("After calling - loading server bitmaps through php setting cvjs_rasterImageLoaded.src="+callName);
				}
			else{
				cvjs_rasterImageLoaded.src = fileName;
				console.log("After calling - loading bitmap direct from url cvjs_rasterImageLoaded.src="+fileName);
			}
		
		}
	else if (load_failures < 40)    // 40- 5  NOTE TEST PHASE ONLY!!!
		{
		load_failures++;
		jQuery("#loading").html(languageTable.languages[cvjs_currentLanguage].LoadingModal.Loading);
	    setTimeout(function(){SetUpVqPngDefault(fileName, floorplan_div_Array[cvjs_active_floorplan_div_nr])},256);
    	}
    else
	    {

		load_failures = 0;
		jQuery("#looper").hide();
		jQuery('#cvjs_wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();






//		var status = "Failure loading file: "+FileNamePath+FileNameNoExtension+".js";
//		jQuery('#cvjs_informationModalText').html(status);
//		jQuery('#info_messageModal').modal('show');



		var textString = "Failure loading file: "+current_FileNamePath+cvjs_FileNameNoExtension+".js";
		cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], textString);



	    }
}


/**
 * Clear all redlines currently visible
 * @param {String} floorplan_div - div of the CADViewerJS canvas
 */
 
function cvjs_clearCurrentRedline(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	if (floorplan_div == undefined){
		// do nothing;
	}
	else{
		// find active floorplan number and set that
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	
	}



	cvjs_clearDrawingStickyNotes();

	var lockedRedFlag = false;

    for (i = 0; i < vqRedlines.length; i++) {
          if (vqRedlines[i].data("locked")) {
          	lockedRedFlag = true;
          	break;
          }
    }

	if (!lockedRedFlag){  	// there are no locked redlines so we can remove everything

		cvjs_deleteAllRedlines();
		
		for (i=0; i<vqRedlines.length; i++){
			vqRedlines[i].remove();
		}
		vqRedlines.length = 0;
	}
	else{  // there are locked redlines, so we neeed to do things differently
		// here we do something else

		//window.alert("we do things differently here");

		var maxNode = cvjs_findMaxRedlineStickyNote(); // cvjs_findMaxRedlineNode();

		//window.alert(maxNode);

		for (i=0; i<maxNode; i++){
			var redl="RED_"+(i+1);
			//window.alert(redl);
			cvjs_setUpVqRedlines_deleteNode_direct(redl);
		}
		//cvjs_deleteAllRedlines();
	}


// WE NO NOT REMOVE STICKYNOTES HERE, WE WANT THAT THROUGH STICKYNOTE INTERFACE
// WE NEED TO UPDATE THAT INTERFACE TOO, SO THAT DELETE ON LOCKED NOTES IS PREVENTED

// 2018-03-07  WE HAVE REACTIVATED, SO STICKYNOTES CAN BE DELETED

	var lockedNotesFlag = false;

    for (i = 0; i < vqStickyNotes.length; i++) {
          if (vqStickyNotes[i].data("locked")) {
          	lockedNotesFlag = true;
          }

    }

    if (!lockedNotesFlag){  	// there are no locked notes so we can remove everything

/*
		for (i=0; i<vqStickyNotes.length; i++){
			vqStickyNotes[i].remove();
		}
		cvjs_deleteAllStickyNotes();
		vqStickyNotes.length = 0;
*/

		// alternative route

		var maxNode = cvjs_findMaxRedlineStickyNote(); // cvjs_findMaxRedlineNode();

//		window.alert("no locked before stickynotes "+maxNode);

		for (i=0; i<maxNode; i++){
			var note="SNOTE_"+(i+1);
			//window.alert(note);
			cvjs_setUpStickyNotes_deleteNode_direct(note);
		}
		//cvjs_deleteAllRedlines();

	}
	else{

		var maxNode = cvjs_findMaxRedlineStickyNote(); // cvjs_findMaxRedlineNode();
//		window.alert("before stickynotes "+maxNode);
		for (i=0; i<maxNode; i++){
			var note="SNOTE_"+(i+1);
			//window.alert(note);
			cvjs_setUpStickyNotes_deleteNode_direct(note);
		}
		//cvjs_deleteAllRedlines();
	}




}


function cvjs_findMaxRedlineStickyNote(){

	var max_node = 0;
	for (var redl in vqRedlines){
		var redline_node = vqRedlines[redl].data("node");
		var c_Node = parseInt(redline_node.substring(4));  // RED_
		if (c_Node>max_node) max_node=c_Node;
	}

	var max_note = 0;
	for (var note in vqStickyNotes){
		var s_note = vqStickyNotes[note].data("node");
		var s_Note = parseInt(s_note.substring(6));  // RED_
		if (s_Note>max_note) max_note=s_Note;
	}

	var max = max_node+max_note;
	return (max);
}


function cvjs_findMaxStickyNote(){
	var max_node = 0;
	for (var redl in vqRedlines){
		redline_node = vqRedlines[redl].data("node");
		var c_Node = parseInt(redline_node.substring(4));  // RED_
		if (c_Node>max_node) max_node=c_Node;
	}
	return (max_node);
}


function cvjs_setUpVqRedlines_deleteNode_direct(delete_redline){
	var redline_node;
	for (var redl in vqRedlines){
		redline_node = vqRedlines[redl].data("node");

		//console.log(redline_node+" "+delete_redline);
		var locked = vqRedlines[redl].data("locked");
		//console.log(redline_node+" "+locked+" delete_redline "+delete_redline);

		if (locked){
			if (redline_node == delete_redline){

				//var status = languageTable.languages[cvjs_currentLanguage].InfoMessageModal.RedlinesLocked+vqRedlines[redl].data("username");
				//jQuery('#cvjs_informationModalText').html(status);
				//jQuery('#info_messageModal').modal('show');
			}
		}
		else{
			if (redline_node == delete_redline){
				// we simply hide it by making it very small - remove the item when save
				//window.alert(vqRedlines[redl]);

				vqRedlines[redl].data("deleted", true);
				var dTransform = "S0.001";
				vqRedlines[redl].attr({'transform': dTransform, "opacity" : "0.01"});
			}
		}
	}
	// cvjs_setUpVqRedlines_currentNode not implemented
	//console.log("remove current redline");
}


function cvjs_setUpStickyNotes_deleteNode_direct(delete_note)
{
	var sticky_note;
	for (var note in vqStickyNotes){
		sticky_note = vqStickyNotes[note].data("node");


		//window.alert(sticky_note+" "+delete_note);


		//console.log("delete in arrary note="+note);
		if (sticky_note == delete_note){

//			window.alert(sticky_note+" lets delete");

			// we simply hide it by making it very small - remove the item when save
			vqStickyNotes[note].data("deleted", true);
			var dTransform = "S0.001";
			vqStickyNotes[note].attr({'transform': dTransform, "opacity" : "0.01"});
			hideOnlyStickyNote(note);

			// we are simply removing the object

			jQuery(vqStickyNotes[note].node).qtip('destroy');
			vqStickyNotes.splice(note, 1);
		}
	}
}





/**
 * Sets the username and password on the server where the converter has to pick up the file for conversion set to "" "" if not protected
 */

function cvjs_setOriginatingFileUsernamePassword(username, password){

	cvjs_conversion_originatingUsername[cvjs_active_floorplan_div_nr ] = username;
	cvjs_conversion_originatingPassword[cvjs_active_floorplan_div_nr ] = password;


}



/**
 * Returns the recommended conversion engine php controller for this library, use this to intialize the conversion server setup, this value gets overwritten using cvjs_Init_ConversionServer
 */

function cvjs_restApiController(){

	return (rest_php_version);

}


/**
 * Returns the recommended conversion engine php controller location for this library, use this to intialize the conversion server setup, this value gets overwritten using cvjs_Init_ConversionServer
 */

function cvjs_restApiControllerLocation(){

	return (tms_rest_api_url1);

}


/**
 * Set the engine controller location for this library,
 * @param {string} myAXlocation - location of the server side autoXchange structure
 */

function cvjs_setRestApiControllerLocation(myAXlocation){

	tms_rest_api_url1 = myAXlocation;

}


/**
 * Set the engine controller document handling conversions
 * @param {string} myConverterDoc - name of the document handling conversions
 */

function cvjs_setRestApiController(myConverterDoc){

	rest_php_version = myConverterDoc;

	if (rest_php_version.indexOf("call-Api_Conversion.php")>-1){
//		rest_converter ="AutoXchange AX2019";   // converter
// 4.1.01a
		rest_converter ="AutoXchange AX2020";   // converter
		rest_version ="V1.00";            // version
	}

 if (cvjs_debug) console.log(rest_converter+"  "+rest_php_version+"  "+myConverterDoc);

}




/**
 * Returns the recommended converter for this library
 */

function cvjs_restApiConverter(){

	return (rest_converter);

}


/**
 * Returns the minimum recommended converter version number for this library
 */

function cvjs_restApiConverterVersion(){

	return (rest_version);

}



/**
 * Set the AutoXchange converter name and version to be used for the Rest conversion call
 * @param {string} converter - converter name
 * @param {string} version - converter version
 */

function cvjs_setConverter(converter, version){

	rest_converter = converter;
	rest_version = version;

}


/**
 * Set the username and password to be used for the Rest conversion call
 * @param {string} username - username on the Rest server where AutoXchange is installed
 * @param {string} password - password on the Rest server where AutoXchange is installed
 */

function cvjs_setConverterCredentials(username, password){

	cvjs_usr = username;
	cvjs_pwd = password;

}



/**
 * Set up CADViewer for the call to the server side custom implementation of the API controlling conversions of DWG,DXF, and DWF files through AutoXchange
 * @param {string} rest_api_url - url of conversion rest api on server
 * @param {string} rest_api_php - url of the PHP rest controller on server
 * @param {string} username - the username of the server, "" if no username
 * @param {string} password - the password of the server, "" if no username
 */

function cvjs_Init_ConversionServer(rest_api_url, rest_api_php, username, password){

	tms_rest_api_url1 = rest_api_url;
	rest_php_version = rest_api_php;
	cvjs_usr = username;
	cvjs_pwd = password;
}




// controls for restful API
// Need to set up new updated route

var tms_rest_api_url1 = "http://onlinedemo.vizquery.com/cadviewer_3_0_1/php/"
var rest_php_version ="call-Api_Conversion.php";
var rest_action = "conversion";
//var rest_converter ="AutoXchange AX2019";   // converter
//4.1.01a
var rest_converter ="AutoXchange AX2020";   // converter
var rest_version ="V1.00";            // version

var rest_contentType = "file";
var rest_contentLocation;
var rest_contentStream;
var rest_embeddedContent;
var rest_contentFormat = "DWG";
var rest_contentUserName;
var rest_contentPassword;
var rest_userLabel = "fromCADViewerJS";
var rest_contentResponse = "stream";
var rest_parameters;

// building array
var rest_nname = [[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]]; //new Array();
var rest_vvalue = [[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]];//ew Array();

var rest_nname_custom = [[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]];//new Array();
var rest_vvalue_custom = [[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]]; //new Array();


/**
 * Set SVG conversion control parameter for server based conversion using either SVG or JS as format.
 * @param {boolean} mode - true for SVG as intermediate format false for .js as intermediate format. Default is true.
 */

function cvjs_setSVG_outputFormatInAXConversions(mode){

	cvjs_SVG_outputFormatInAXConversions = mode;
}




/**
 * Clears the custom AutoXchange conversion control parameter for server based conversion
 * @param {string} floorplan_div - name of the div on which the floorplan is places
 */

function cvjs_conversion_clearAXconversionParameters(floorplan_div){

	if (floorplan_div == undefined){
		cvjs_active_floorplan_div_nr = 0;
	}
	else{
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	
	}
	
	
	rest_nname[cvjs_active_floorplan_div_nr ].length = 0;
	rest_vvalue[cvjs_active_floorplan_div_nr ].length = 0;
	rest_nname[cvjs_active_floorplan_div_nr ][0] = "f";
	rest_vvalue[cvjs_active_floorplan_div_nr ][0] = "js";

	if (cvjs_SVG_outputFormatInAXConversions) rest_vvalue[cvjs_active_floorplan_div_nr ][0] = "svg";    // 2017-08-01


	rest_nname_custom[cvjs_active_floorplan_div_nr ].length = 0;
	rest_vvalue_custom[cvjs_active_floorplan_div_nr ].length = 0;
}



/**
 * Add an AutoXchange conversion control parameter for server based conversion
 * @param {string} name - conversion parameter name
 * @param {string} value- conversion parameter value, if no value set ""
 * @param {string} floorplan_div - name of the div on which the floorplan is places
 */

function cvjs_conversion_addAXconversionParameter(name, value, floorplan_div){


	if (floorplan_div == undefined){
		cvjs_active_floorplan_div_nr = 0;
	}
	else{
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	
	}
	

	var indexp = rest_nname_custom[cvjs_active_floorplan_div_nr ].length;

	rest_nname_custom[cvjs_active_floorplan_div_nr ][indexp] = name;
	rest_vvalue_custom[cvjs_active_floorplan_div_nr ][indexp] = value;
	//rest_nname_custom[cvjs_active_floorplan_div_nr ].length = indexp+1;

if (cvjs_debug) 	console.log("addAXConversionParameter "+rest_nname_custom[cvjs_active_floorplan_div_nr ][indexp]+" "+rest_vvalue_custom[cvjs_active_floorplan_div_nr ][indexp]+"  "+rest_nname_custom[cvjs_active_floorplan_div_nr ].length);
}



/**
 * Sets control parameter for conversion
 * @param {string} contentType - "file | embedded | stream"
 */

function cvjs_conversion_setContentType(contentType){

	rest_contentType = contentType;
}




/**
 * Sets control parameter for conversion
 * @param {string} contentFormat - "DWG | DXF| DWF | DGN    - DGN currently not implemented",
 */

function cvjs_conversion_setContentFormat(contentFormat){

	rest_contentFormat = contentFormat;
}




/**
 * Sets fileformat for file-load
 * @param {string} fileFormat - "PNG, JPG, GIF", to set bitmap,  "JS" for standard load
 */

function cvjs_fileLoad_setContentFormat(contentFormat){

	if (contentFormat == "PNG" || contentFormat == "png")
		fileLoad_contentFormat = "png";

	if (contentFormat == "JPG" || contentFormat == "jpg")
		fileLoad_contentFormat = "jpg";

	if (contentFormat == "GIF" || contentFormat == "gif")
		fileLoad_contentFormat = "gif";

	if (contentFormat == "JS" || contentFormat == "js")
		fileLoad_contentFormat = "JS";

}



/**
 * Sets control parameter for conversion
 * @param {string} userLabel - " optional label returned in the response",,
 */

function cvjs_conversion_setUserLabel(userLabel){

	rest_userLabel = userLabel;
}


/**
 * Sets control parameter for conversion
 * @param {string} userLabel - " optional label returned in the response",,
 */

function cvjs_conversion_setContentResponse(contentResponse){

	rest_contentResponse = contentResponse;
}


/**
 * Get the current type of content response
 * @return string - Returns type of content response - "file | embedded | stream"
*/


function cvjs_conversion_getContentResponse(){

	return(rest_contentResponse);
}


var cvjs_debug = false;


/**
 * Sets debug mode
 * @param {boolean} debug - true for debug traces, false otherwise
 */

function cvjs_debugMode(debug){

	cvjs_debug = debug;
}



/**
 * Sets password protection for Server Access
 * @param {boolean} passwordprotection - true for passwordprotection, false otherwise
 */

function cvjs_setPasswordProtectionServerAccess(passwordprotection){

	cvjs_passwordProtected  = debug;
}


/**
 * Sets ajax call for server access call for Servlets
 *    jQuery.ajax({
 *        url: "jsonservlet -  cvjs_setRestApiControllerLocation + cvjs_setRestApiController",
 *        type: 'POST',
 *        dataType: 'json',
 *        data: JSON.stringify(article),
 *        contentType: 'application/json',
 *        mimeType: 'application/json',
 *
 * @param {boolean} flag - true for servlets, false standard php case
 */

function cvjs_setServerAccessToServlet(flag){

	cvjs_servlet_handshake = flag;

	if (flag == true){
		cvjs_jsonp_handshake = false;
		cvjs_post_handshake = false;
	}
	else{
		cvjs_jsonp_handshake = true;
		cvjs_post_handshake = false;

	}
}




/**
 * Sets ajax call for server access call for Post
 *    jQuery.ajax({
 *        type: 'POST',
 *		  url: serverUrl,
 *        data: JSON.stringify(object),
 *
 * @param {boolean} flag - true for Post, false standard php case
 */

function cvjs_setServerAccessToPost(flag){

	cvjs_post_handshake = flag;

	if (flag == true){
		cvjs_jsonp_handshake = false;
		cvjs_servlet_handshake = false;
	}
	else{
		cvjs_jsonp_handshake = true;
		cvjs_servlet_handshake = false;
	}

}


// user name and password for restful API
var	cvjs_usr = "guest";
var cvjs_pwd = "guest";

//  var	cvjs_usr = "tms";
//  var cvjs_pwd = "restful";

var cvjs_passwordProtected = false;

var cvjs_servlet_handshake = false;
var cvjs_jsonp_handshake = true;
var cvjs_post_handshake = false;

// 3.2.01g
var contentStreamGraphics;
var contentStreamNodes;
var contentStreamData;
var contentStreamThumb;

var contentLocationGraphics;
var contentLocationNodes;
var contentLocationData;
var contentLocationThumb;




/**
 * Loads a DWG drawing into CADViewer, this method can only be used after intialization of CADViewer through the cvjs_InitCADViewerJS_ methods
 * The method connects to the TailorMade Restful API, alternative Open Source alternatives for conversion of DWG, DXF,DWF and DGN,PCF files
 * @param {string} floorplan_div - the SVG canvas object to which CADViewer is allocated
 * @param {string} originatingContent - the originating content, can be a http path to location, local server side path, stream link or 64 base encoded data
 * @param {string} FileNameNoExtension - file name of the drawing without extension - CADViewer will automatically generate naming
 * @param {string} originatingUsername - if the originating file is username/password protected , "" if no username
 * @param {string} originatingPassword - if the originating file is username/password protected , "" if no password
 */


function cvjs_LoadDrawing_Conversion(floorplan_div, originatingContent, originatingFileNameNoExtension, originatingUsername, originatingPassword){

	if (cvjs_Community_Version) 
		cvjs_LoadDrawing_Conversion_original(floorplan_div, originatingContent, originatingFileNameNoExtension, originatingUsername, originatingPassword);
	else 
		cvjs_checkLicensePreThenLoad(floorplan_div, originatingContent, originatingFileNameNoExtension, originatingUsername, originatingPassword);

}


function cvjs_LoadDrawing_Conversion_original(floorplan_div, originatingContent, originatingFileNameNoExtension, originatingUsername, originatingPassword){

	// if we loaded a PDF before, then we do not want to have the page-change set
//window.alert("here");
	cvjs_SVG_multiPagesFlag[cvjs_active_floorplan_div_nr] = false;

	try{
//		if (cvjs_debug) console.log("cvjs_LoadDrawing_Conversion_original "+cvjs_initMasterBackground+"  "+cvjs_rPaper[cvjs_active_floorplan_div_nr]);
		if (cvjs_debug) console.log("cvjs_LoadDrawing_Conversion_original  ");
		if (cvjs_initMasterBackground){
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].selectAll("*").remove();
			//if (cvjs_debug) console.log(fileOverlay+"ÅÅÅÅÅÅ    file overlay 3"+cvjs_rPaper[cvjs_active_floorplan_div_nr]);
			// new, we clear the element  IE 11 fix  2017-12-19
			//var element = document.getElementById(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
			//	element.parentNode.removeChild(element);	
			if (fileOverlay){   // we only initialize if not overlay!!!   2018-05-05
			
				if (cvjs_debug) console.log("file overlay we do nothing 3");
			}
			else{
				try{
					var myNode = document.getElementById(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
					while (myNode.firstChild) {
						myNode.removeChild(myNode.firstChild);
					}
				}catch (err1){ console.log("IE11 clean: "+err1);}

				cvjs_rPaper[cvjs_active_floorplan_div_nr] = null;
				
				var svgDiv = "#"+floorplan_div_Array[cvjs_active_floorplan_div_nr];
				if (!cvjs_rPaper[cvjs_active_floorplan_div_nr])
						cvjs_rPaper[cvjs_active_floorplan_div_nr] = Snap(svgDiv);

	if (cvjs_debug) console.log("cvjs_LoadDrawing_Conversion_original: setting active floorplan "+cvjs_active_floorplan_div_nr+"  snap() ");
//	if (cvjs_debug) console.log("cvjs_LoadDrawing_Conversion_original: setting active floorplan "+cvjs_active_floorplan_div_nr+"  snap() "+svgDiv);

			}
		}
	}
	catch (err){console.log(err);};


//if (cvjs_debug) 		console.log("after remove all "+cvjs_initMasterBackground);


	jQuery('#cvjs_wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html('<table class=\"waitlooperTable\" width=\"100\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr><td><div id=\"looper_image_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\"></div></td></tr><tr><td><div class=\"cvjs_wait_text_4\" id=\"cvjs_wait_looper_text_id_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\">'+languageTable.languages[cvjs_currentLanguage].LoadingModal.Loading+'</div></td></tr></table>');
	jQuery("#cvjs_wait_looper_text_id_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].LoadingModal.Loading);

	cvjs_setLooperPosition();
	
	jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).show();
	
	jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();

	// 3.3.01e
	if (printDebugFlag) jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).show();

	
	cvjs_objectIsZoomedExtents = true;


	cvjs_loadDrawing_conversionMode = true;
	cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ] = originatingContent;
	cvjs_conversion_originatingFileNameNoExtension[cvjs_active_floorplan_div_nr ] = originatingFileNameNoExtension;
	cvjs_conversion_originatingUsername[cvjs_active_floorplan_div_nr ] = originatingUsername;
	cvjs_conversion_originatingPassword[cvjs_active_floorplan_div_nr ] = originatingPassword;

	if (fileOverlay){
		// this is an overlay file, let us keep the content
		if (cvjs_debug) console.log("HERE WE DO NOT REMOVE THE CONTENT OF flooplan");
	
	}
	else{
		
		jQuery("#"+floorplan_div).html('');
		
	}
	
	
	floor_loaded = false;
	nodes_loaded = false;
	thumbs_loaded = false;

	VqSetup = false;



	// if there is no initialization of the parameters we use -f=js
	if (rest_nname[cvjs_active_floorplan_div_nr ].length==undefined || rest_nname[cvjs_active_floorplan_div_nr ].length==0){
		rest_nname[cvjs_active_floorplan_div_nr ][0] = "f";
		rest_vvalue[cvjs_active_floorplan_div_nr ][0] = "js";

		if (cvjs_SVG_outputFormatInAXConversions) rest_vvalue[cvjs_active_floorplan_div_nr ][0] = "svg";    // 2017-08-01
	}

	if (cvjs_compareDrawings)    // 2018-05-05
		for (var i=0; i<rest_nname[cvjs_active_floorplan_div_nr ].length; i++){
			if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="f")  rest_vvalue[cvjs_active_floorplan_div_nr ][i] = "svg";   // 2018-05-06we change into SVG as format
//			if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="f")  rest_vvalue[cvjs_active_floorplan_div_nr ][i] = "js";
			//console.log(rest_nname[cvjs_active_floorplan_div_nr ][i]);
		}





	// if there is no layout defined as page to view or if -basic is not defined, I want the model to be converted
	var modelflag= true;

	for (var i=0; i<rest_nname[cvjs_active_floorplan_div_nr ].length; i++){
		if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="basic")  modelflag = false;
		if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="layout")  modelflag = false;
		if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="model")  modelflag = false;
		if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="layoutsonly")  modelflag = false;
		if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="lastsavedview")  modelflag = false;
		if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="last")  modelflag = false;
		if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="firstlayout")  modelflag = false;

		//console.log(rest_nname[cvjs_active_floorplan_div_nr ][i]);
	}

	if (modelflag){

		var i=rest_nname[cvjs_active_floorplan_div_nr ].length;

		if (rest_contentFormat.toLowerCase().indexOf("dwf")==0){   // for DWF, the first page in the set is found via -lastsavedview

			// if AX2015 , if AX2011
			rest_nname[cvjs_active_floorplan_div_nr ][i] = "lastsavedview";

			// if AX2017
			if (rest_converter.indexOf("AutoXchange AX2017")==0)
				rest_nname[cvjs_active_floorplan_div_nr ][i] = "firstlayout";

			if (rest_converter.indexOf("AutoXchange AX2019")==0)
				rest_nname[cvjs_active_floorplan_div_nr ][i] = "firstlayout";
//4.1.01a
			if (rest_converter.indexOf("AutoXchange AX2020")==0)
				rest_nname[cvjs_active_floorplan_div_nr ][i] = "firstlayout";

		}
		else{
			rest_nname[cvjs_active_floorplan_div_nr ][i] = "model";
		}

		rest_vvalue[cvjs_active_floorplan_div_nr ][i] = "";


		i=rest_nname[cvjs_active_floorplan_div_nr ].length;

		rest_nname[cvjs_active_floorplan_div_nr ][i] = "extents";
		rest_vvalue[cvjs_active_floorplan_div_nr ][i] = "";
	}


	// if we have a pcf file, we have to tell that we are converting a dgn file
	if (rest_contentFormat.toLowerCase().indexOf("pcf")==0){

			var i=rest_nname[cvjs_active_floorplan_div_nr ].length;
			rest_nname[cvjs_active_floorplan_div_nr ][i] = "treatas";
			rest_vvalue[cvjs_active_floorplan_div_nr ][i] = "DGN";

	}



	// if we are converting a FM object we need to set the conversion parameters to RL TL

	//console.log("open file "+cvjs_convertSpaceObject);

	if (cvjs_convertSpaceObject){
		var fm_flag = false;
		var l_len = rest_nname[cvjs_active_floorplan_div_nr ].length;
		for (var i=0; i<l_len; i++){
			if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="RL"){
				rest_vvalue[cvjs_active_floorplan_div_nr ][i] = cvjs_convertRoomLayer;
				fm_flag = true;
			}
		}
		if (!fm_flag){
			rest_nname[cvjs_active_floorplan_div_nr ][l_len]= "RL";
			rest_vvalue[cvjs_active_floorplan_div_nr ][l_len] = cvjs_convertRoomLayer;

			//console.log(l_len+" "+rest_nname[cvjs_active_floorplan_div_nr ][l_len]+ " "+rest_vvalue[cvjs_active_floorplan_div_nr ][l_len]);
		}

		fm_flag = false;
		var l_len = rest_nname[cvjs_active_floorplan_div_nr ].length;
		for (var i=0; i<l_len; i++){
			if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="TL"){
				rest_vvalue[cvjs_active_floorplan_div_nr ][i] = cvjs_convertTextLayer;
				fm_flag = true;
			}
		}
		if (!fm_flag){
			rest_nname[cvjs_active_floorplan_div_nr ][l_len]= "TL";
			rest_vvalue[cvjs_active_floorplan_div_nr ][l_len] = cvjs_convertTextLayer;

			//console.log(l_len+" "+rest_nname[cvjs_active_floorplan_div_nr ][l_len]+ " "+rest_vvalue[cvjs_active_floorplan_div_nr ][l_len]);

		}

		// remove off layers in conversion
		var offLayerList = "";
		var firstLayer = true;

		for (var i=0; i<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; i++){
			if (layerTable[cvjs_active_floorplan_div_nr].layers[i].status=="OFF"){
				if (firstLayer){
					offLayerList+= layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName
					firstLayer = false;
				}
				else{
					offLayerList+= ";"+ layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName
				}
			}
		}

		if (offLayerList.length>0){   // there is an off layer
			loff_flag = false;
			var l_len = rest_nname[cvjs_active_floorplan_div_nr ].length;
			for (var i=0; i<l_len; i++){
				if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="LOFF"){
					rest_vvalue[cvjs_active_floorplan_div_nr ][i] = offLayerList;
					loff_flag = true;
				}
			}
			if (!loff_flag){
				rest_nname[cvjs_active_floorplan_div_nr ][l_len]= "LOFF";
				rest_vvalue[cvjs_active_floorplan_div_nr ][l_len] = offLayerList;


			}
		}


	}
	else{
			var l_len = rest_nname[cvjs_active_floorplan_div_nr ].length;
			for (var i=0; i<l_len; i++){
				if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="RL"){
					rest_nname[cvjs_active_floorplan_div_nr ].splice(i, 1);
					rest_vvalue[cvjs_active_floorplan_div_nr ].splice(i, 1);
				}
			}

			var l_len = rest_nname[cvjs_active_floorplan_div_nr ].length;
			for (var i=0; i<l_len; i++){
				if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="TL"){
					rest_nname[cvjs_active_floorplan_div_nr ].splice(i, 1);
					rest_vvalue[cvjs_active_floorplan_div_nr ].splice(i, 1);
				}
			}

	}

//console.log(rest_nname[cvjs_active_floorplan_div_nr ].length);
	// here we are adding all customs parameter  2018-08-08
//if (cvjs_debug) console.log("cvjs_LoadDrawing_Conversion_original "+rest_nname_custom[cvjs_active_floorplan_div_nr ].length)


	if (rest_nname_custom[cvjs_active_floorplan_div_nr ].length>0){

			var l_len = rest_nname[cvjs_active_floorplan_div_nr ].length;
			var c_len = rest_nname_custom[cvjs_active_floorplan_div_nr ].length;

			for (var i=0; i<c_len; i++){
				var flag = false;
				for (var j=0; j<l_len; j++){
					if (rest_nname[cvjs_active_floorplan_div_nr ][j]==rest_nname_custom[cvjs_active_floorplan_div_nr ][i])
						flag = true;
					}
				if (!flag){
					rest_nname[cvjs_active_floorplan_div_nr ][l_len] = rest_nname_custom[cvjs_active_floorplan_div_nr ][i];
					rest_vvalue[cvjs_active_floorplan_div_nr ][l_len] = rest_vvalue_custom[cvjs_active_floorplan_div_nr ][i];
					l_len++;

				}
			}

	}


	// 6.1.20  - if we have -layout , we cannot have custom parameters with -last, -lastsavedview or -model
	var layoutflag = false;
	var l_len = rest_nname[cvjs_active_floorplan_div_nr ].length;
	for (var i=0; i<l_len; i++){
		if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="layout") layoutflag = true;
//		window.alert(i+"  "+rest_nname[cvjs_active_floorplan_div_nr ][i]);
	}
	for (var i=0; i<l_len; i++){
		if (layoutflag) 
			if ( rest_nname[cvjs_active_floorplan_div_nr ][i]=="last"){rest_nname[cvjs_active_floorplan_div_nr ][i]="";}; 
		if (layoutflag) 
			if ( rest_nname[cvjs_active_floorplan_div_nr ][i]=="lastsavedview"){rest_nname[cvjs_active_floorplan_div_nr ][i]="";};
		if (layoutflag) 
			if ( rest_nname[cvjs_active_floorplan_div_nr ][i]=="model"){rest_nname[cvjs_active_floorplan_div_nr ][i]="";};
		if (layoutflag) 
			if ( rest_nname[cvjs_active_floorplan_div_nr ][i]=="firstlayout"){rest_nname[cvjs_active_floorplan_div_nr ][i]="";};
	}


	// 6.2.35  6.2.36
	// if we have a PDF file, we have to tell what page we are converting, if converting as Layout
	if (rest_contentFormat.toLowerCase().indexOf("pdf")==0){

			var l_len = rest_nname[cvjs_active_floorplan_div_nr].length;
			var m_pages = multiPages[cvjs_active_floorplan_div_nr].multiPages;
			var dummy_index;
			//window.alert("In CONVERSION before length "+l_len+" pages "+m_pages);
			for (var i=0; i<l_len; i++){
				console.log(i+" "+rest_nname[cvjs_active_floorplan_div_nr ][i]);
				if (rest_nname[cvjs_active_floorplan_div_nr ][i] == "layout"){
					// change to -pg
					if (rest_vvalue[cvjs_active_floorplan_div_nr ][i] == "dummy"){
						//window.alert("do nothing.. dummy");
					}
					else{
						rest_nname[cvjs_active_floorplan_div_nr ][i] = "pg";			
						console.log("layout to pg i "+i);
						for (var j=0; j<m_pages; j++){
					//		console.log(" "+j);
							console.log(i+" "+j+" "+multiPages[cvjs_active_floorplan_div_nr].pages[j].pageName+"  "+rest_vvalue[cvjs_active_floorplan_div_nr ][i]);
							if (multiPages[cvjs_active_floorplan_div_nr].pages[j].pageName == rest_vvalue[cvjs_active_floorplan_div_nr ][i] )
								rest_vvalue[cvjs_active_floorplan_div_nr ][i] = (j+1).toString();
						}
					}
					// use the page number instead of layout
				
				}
				//window.alert("convert loop: "+rest_nname[cvjs_active_floorplan_div_nr ][i]+"  "+rest_vvalue[cvjs_active_floorplan_div_nr ][i]);
			}
	}




//console.log(rest_nname[cvjs_active_floorplan_div_nr ][0]);

	var conv_extr_request = new Object();
	conv_extr_request.action      = "svg_js_creation";

	if (cvjs_SVG_outputFormatInAXConversions){ 
		conv_extr_request.action  = "svg_creation";  // 2017-08-01
		// if loading from SharePoint REST interface, we let the converter know
		
		if (cvjs_fileLoadingFromSharePointServer){
			conv_extr_request.action  = "svg_creation_sharepoint_REST";  // 2017-11-02

		}	
			
	}	
	
	
	if (cvjs_compareDrawings){
//		conv_extr_request.action  = "svg_js_creation";  // 2017-08-31 - we make the drawing as js, if compare

		conv_extr_request.action  = "svg_creation";  // 2018-05-05   we change to SVG creation on the server side
		
	}

	conv_extr_request.converter  = rest_converter ;
	conv_extr_request.version    = rest_version ;

	conv_extr_request.contentType  = rest_contentType;

	// 3.2.01b	
	originatingContent = originatingContent.replace(/\\/g, "/");	
	// 3.2.01b	
	if (conv_extr_request.contentType == "file"){
		if (originatingContent.indexOf("%")>0) // if %, then it is already URL encoded 
			conv_extr_request.contentLocation  = originatingContent;
		else 
			conv_extr_request.contentLocation  = encodeURIComponent(originatingContent);
			
		}
		
	// 3.2.01b	
	if (conv_extr_request.contentType == "stream"){
		if (originatingContent.indexOf("%")>0) // if %, then it is already URL encoded 
			conv_extr_request.contentStream  = originatingContent;
		else
			conv_extr_request.contentStream  = encodeURIComponent(originatingContent);			
	}

	// 3.2.01b	
	if (conv_extr_request.contentType == "embedded"){
		if (originatingContent.indexOf("%")>0) // if %, then it is already URL encoded 
			conv_extr_request.embeddedContent  = originatingContent;
		else
			conv_extr_request.embeddedContent  = encodeURIComponent(originatingContent);
			
	}

	conv_extr_request.contentFormat  = rest_contentFormat;
	conv_extr_request.contentUsername    = originatingUsername;


	if (cvjs_fileLoadingFromSharePointServer){
		conv_extr_request.contentUsername    = cvjs_sharepoint_UserName;	

	}	
	
	
	conv_extr_request.contentPassword    = originatingPassword;
	conv_extr_request.userLabel  = rest_userLabel;
	conv_extr_request.contentResponse  = rest_contentResponse;
		
	
	if (conv_extr_request.contentResponse == "stream"){
		conv_extr_request.leaveStreamOnServer  = 0;
		if (cvjs_compareDrawings) conv_extr_request.leaveStreamOnServer  = 1;
	}

	
	// 3.2.01g
	if (rest_serviceCall){
		conv_extr_request.userLabel  = rest_ServiceToken;
		conv_extr_request.applicationPlatform = rest_applicationPlatform; 
		conv_extr_request.applicationPlatformUsername = rest_applicationPlatformUsername;
		conv_extr_request.applicationPlatformUserID = rest_applicationPlatformUserID; 
		if (conv_extr_request.contentResponse == "stream")
			conv_extr_request.leaveStreamOnServer = rest_leaveStreamOnServer;
		
	}
	
	
	conv_extr_request.parameters  = new Array();


//console.log(rest_nname[cvjs_active_floorplan_div_nr ].length);

	for (var i=0; i<rest_nname[cvjs_active_floorplan_div_nr ].length; i++){

		var params = new Object

		params.paramName = rest_nname[cvjs_active_floorplan_div_nr ][i];
		params.paramValue = rest_vvalue[cvjs_active_floorplan_div_nr ][i];

		conv_extr_request.parameters[i] = params;
	}

	api_data = JSON.stringify(conv_extr_request);

	tms_rest_api_url = tms_rest_api_url1+rest_php_version;


//if (cvjs_debug) console.log(" index of"+tms_rest_api_url1.indexOf("tms-restful-api"));


	if (tms_rest_api_url1.indexOf("tms-restful-api")>-1){
		cvjs_passwordProtected = true;
		if (cvjs_isLicensed){
			cvjs_usr = "tms";
			cvjs_pwd = "restful";
		}
		if (cvjs_Community_Version){
			cvjs_usr = "tms";
			cvjs_pwd = "restful";
		}
		

if (cvjs_debug) console.log(cvjs_isLicensed+" "+cvjs_usr+" "+cvjs_pwd);

	}

	var tms_rest_api_url_pw;


	if (cvjs_passwordProtected){
		var loc_1 = tms_rest_api_url.indexOf("//");
		var protocol_1 = tms_rest_api_url.substring(0,loc_1+2);
		var url_1 = tms_rest_api_url.substring(loc_1+2);
		tms_rest_api_url_pw = protocol_1+cvjs_usr+":"+cvjs_pwd+"@"+url_1;

	}else{
		tms_rest_api_url_pw = tms_rest_api_url;
	}

	
	// Encoding for Tomcat 8, xerces PHP server, we encode the json stream encodeURIComponent(api_data), previously only api_data

//if (cvjs_debug) console.log(tms_rest_api_url_pw+" in makeConversion  request="+ encodeURIComponent(api_data));
if (cvjs_debug) console.log(tms_rest_api_url_pw+" in makeConversion  request="+ encodeURIComponent(api_data)+"  non encoded request: "+api_data);

	var url_json = "";
	if (cvjs_encodeURIcall_server)
		url_json = tms_rest_api_url_pw+"?json="+encodeURIComponent(api_data);
	else
		url_json = tms_rest_api_url_pw+"?json="+api_data;


	if (cvjs_debug) console.log(" url_json:"+url_json);



	if (cvjs_jsonp_handshake){


		if (cvjs_debug) console.log("before ajax call to php ");

		
		jQuery.ajax({
			url : url_json,
       		jsonp: "tms_restful_api",
        	dataType: 'jsonp',
			success:function(Api_response)
					{
	if (cvjs_debug) console.log("jsonP Conversion success: "+Api_response);

						parseServerResponse(Api_response);

					},
			error:function(xhr, status, error)
					{

						console.log("1 jsonp getEngines error="+xhr.responseText+" status="+status+" error="+error);
					}
		});
	}


	if (cvjs_servlet_handshake){

		if (cvjs_debug) console.log("3 before ajax call to Servlet");

		var filelist_data = {};
		filelist_data['request'] = api_data;
		
		if (cvjs_debug) console.log("before ajax call to Servlet filelist_data['request'] "+ filelist_data['request']);
	
		jQuery.ajax({
			url : tms_rest_api_url_pw,
			type: 'post',
			data: filelist_data,
			success:function(Api_response)
					{
	if (cvjs_debug) console.log("Conversion success parseServerResponse: "+Api_response);
						parseServerResponse(Api_response);

					},
			error:function(data_e)
					{
						console.log("2 json getEngines error="+data_e);
					}
		});
	}


	if (cvjs_post_handshake){

	if (cvjs_debug) console.log("before ajax post call");
			// not working for cross domain

		var json_data = {};
		json_data['json_data'] = api_data;

		jQuery.ajax({
			url : tms_rest_api_url_pw,
			type: 'POST',
        	data: json_data,
			success:function(Api_response)
					{
						if (cvjs_debug) console.log("post Conversion: "+Api_response);
						parseServerResponse(Api_response);

					},
			error:function(data_e)
					{
						console.log("2 json getEngines error="+data_e);
					}
		});
	}







};

var cvjs_svgCreationContentLocation = "";
var cvjs_svgCreatedFromConversion = false;


function parseServerResponse(Api_response){

	var q = jQuery.parseJSON(Api_response);

	if (q.errorCode == "E0"){

		//console.log("Everything is fine");

	}
	else{
		// the file did not convert
		jQuery("#looper").hide();
		jQuery('#cvjs_wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
		//var status = "Server side conversion error, AutoXchange responded with errorcode: "+q.errorCode;
		//jQuery('#cvjs_informationModalText').html(status);
		//jQuery('#info_messageModal').modal('show');


		var textString = "Server side conversion error, AutoXchange responded with errorcode: "+q.errorCode;
		cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], textString);


		return;
	}

	// 2017-08-01  separation between js response and svg response file

	// standard JS response and handling
	if (q.completedAction=="svg_js_creation"){

		if (rest_contentResponse == "stream"){

			contentStreamGraphics = q.contentStreamGraphics;
			contentStreamNodes = q.contentStreamNodes;
			contentStreamData = q.contentStreamData;
			contentStreamThumb = q.contentStreamThumb;


			// 2017-09-01 : If we are loading a compare drawing we need to tell it is a js file
			if (cvjs_drawingLoadCounter == 1)
					cvjs_compareDrawingsFirstDrawing = contentStreamData;

			if (current_js_initialized == 1){
				replacejscssfile(current_jsFloorNames, contentStreamData, "js");

			if (!cvjs_FourFilesInOne){
				replacejscssfile(current_jsNodesFloorNames, contentStreamNodes, "js");
				replacejscssfile(current_jsThumbFloorNames, contentStreamThumb, "js");
				replacejscssfile(current_jsFullFloorNames, contentStreamGraphics, "js");
			}

			}
			else{
				current_js_initialized = 1;
				loadJSbase(contentStreamData);
				if (!cvjs_FourFilesInOne){
					loadJSbase(contentStreamNodes);
					loadJSbase(contentStreamThumb);
					loadJSbase(contentStreamGraphics);
				}

			}
			current_jsFloorNames =  contentStreamData;
			if (!cvjs_FourFilesInOne){
				current_jsNodesFloorNames = contentStreamNodes;
				current_jsThumbFloorNames = contentStreamThumb;
				current_jsFullFloorNames =  contentStreamGraphics;
			}
			rebuild_drop_spaces =1;  // make sure drop spaces are regenerated in spaces menu

		}
		else{
				if (rest_contentResponse == "file"){

					contentLocationGraphics = q.contentLocationGraphics;
					contentLocationNodes = q.contentLocationNodes;
					contentLocationData = q.contentLocationData;
					contentLocationThumb = q.contentLocationThumb;

					// we want the path to the files location on server
					cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ] = q.contentLocationGraphics.substring(0,(q.contentLocationGraphics.lastIndexOf("/")+1));


					// 2017-09-01 : If we are loading a compare drawing we need to tell it is a js file
					if (cvjs_drawingLoadCounter == 1)
							cvjs_compareDrawingsFirstDrawing = contentLocationData;



	//console.log("loading file 2 "+cvjs_FourFilesInOne +"  "+q.contentLocationData);

					if (current_js_initialized == 1){
						replacejscssfile(current_jsFloorNames, contentLocationData, "js");

						if (!cvjs_FourFilesInOne){
							replacejscssfile(current_jsNodesFloorNames, contentLocationNodes, "js");
							replacejscssfile(current_jsThumbFloorNames, contentLocationThumb, "js");
							replacejscssfile(current_jsFullFloorNames, contentLocationGraphics, "js");
						}
					}
					else{
						current_js_initialized = 1;
						loadJSbase(contentLocationData);

						if (!cvjs_FourFilesInOne){
							loadJSbase(contentLocationNodes);
							loadJSbase(contentLocationThumb);
							loadJSbase(contentLocationGraphics);
						}
					}

					current_jsFloorNames =  contentLocationData;

					if (!cvjs_FourFilesInOne){
						current_jsNodesFloorNames = contentLocationNodes;
						current_jsThumbFloorNames = contentLocationThumb;
						current_jsFullFloorNames =  contentLocationGraphics;
					}
					rebuild_drop_spaces =1;  // make sure drop spaces are regenerated in spaces menu


				}else{

					if (cvjs_debug) console.log("currently contentStream and contentLocation are implemented!! embedded to follow...");

				}
		}
	}

	// loading an SVG from the server
	if (q.completedAction=="svg_creation_sharepoint_REST"){

				cvjs_svgCreationContentLocation = q.contentLocation;
				cvjs_svgCreatedFromConversion = true;

				if (rest_contentResponse == "stream"){

if (cvjs_debug) 					console.log(" svg_creation_sharepoint_REST 1 svg server response " +q.contentStream);

					cvjs_LoadDrawingInternal(floorplan_div_Array[cvjs_active_floorplan_div_nr], q.contentStream, undefined, true);

				}
				else{
						if (rest_contentResponse == "file"){

if (cvjs_debug) 								console.log("svg_creation_sharepoint_REST 2 here we parse an svg server response " +q.contentLocation);

								cvjs_LoadDrawingInternal(floorplan_div_Array[cvjs_active_floorplan_div_nr], q.contentLocation, undefined, true);

						}else{

							if (cvjs_debug) console.log("currently contentStream and contentLocation are implemented!! embedded to follow...");

						}
				}

	}
				
				
	if (q.completedAction=="svg_creation"){

				cvjs_svgCreationContentLocation = q.contentLocation;
				cvjs_svgCreatedFromConversion = true;

				if (rest_contentResponse == "stream"){

if (cvjs_debug) 					console.log(" 1 REST parse svg server response " +q.contentStreamData+" "+q.contentLocation);  // we add the callback case

					contentStreamData = q.contentStreamData; // 3.2.01g

					cvjs_LoadDrawingInternal(floorplan_div_Array[cvjs_active_floorplan_div_nr], q.contentStreamData, undefined, true);

				}
				else{
						if (rest_contentResponse == "file"){

if (cvjs_debug) 								console.log("2 REST parse svg server response " +q.contentLocationData+" "+q.contentLocation);  // we add the callback case

							    contentLocationData = q.contentLocationData; // 3.2.01g

								cvjs_LoadDrawingInternal(floorplan_div_Array[cvjs_active_floorplan_div_nr], q.contentLocationData, undefined, true);

						}else{

							if (cvjs_debug) console.log("currently contentStream and contentLocation are implemented!! embedded to follow...");

						}
				}

	}

}





function createjscssfile(filename, filetype){
	if (filetype=="js"){ //if filename is a external JavaScript file
		var fileref=document.createElement('script');
		fileref.setAttribute("type","text/javascript");
		fileref.setAttribute("src", filename);
	}
	else if (filetype=="css"){ //if filename is an external CSS file
		var fileref=document.createElement("link");
		fileref.setAttribute("rel", "stylesheet");
		fileref.setAttribute("type", "text/css");
		fileref.setAttribute("href", filename);
	}
	
	// 3.1.21k    
	if (cvjs_buildFolderTree_crossDomain){
		filename = filename.substring(0, filename.indexOf("?dummy"));
		fileref.src = cvjs_serverHandlersPath+cvjs_serverLoadFileController+"?file="+filename;			
	}
	
	return fileref;
}


var cvjs_currentLoadedDrawingAsString = "";
var cvjs_loadCurrentLoadedDrawingAsString = false;


function replacejscssfile(oldfilename, newfilename, filetype){


	if (!cvjs_initMasterBackground && (filetype=="js")){
		// we do not clear the master background, lets load in the one on top

if (cvjs_debug) 		console.log("load base");

		loadJSbase(newfilename);
		return;
	}

if (cvjs_debug) 	console.log("replacejscssfile "+oldfilename+"  "+newfilename+"  "+filetype);

	try{

		var targetelement=(filetype=="js")? "script" : (filetype=="css")? "link" : "none" ; //determine element type to create nodelist using
		var targetattr=(filetype=="js")? "src" : (filetype=="css")? "href" : "none" ; //determine corresponding attribute to test for
		var allsuspects=document.getElementsByTagName(targetelement);

		
	// 3.1.21k    
	if (cvjs_buildFolderTree_crossDomain){
		//newfilename = newfilename.substring(0, newfilename.indexOf("?dummy"));
		newfilename = cvjs_serverHandlersPath+cvjs_serverLoadFileController+"?file="+newfilename;			
	}
//window.alert("25421 "+newfilename);		

	
		
		for (var i=allsuspects.length; i>=0; i--){ //search backwards within nodelist for matching elements to remove
				//console.log(" i "+" "+i+" "+allsuspects[i]);
			if (allsuspects[i] && allsuspects[i].getAttribute(targetattr)!=null && allsuspects[i].getAttribute(targetattr).indexOf(oldfilename)!=-1){

				if (cvjs_debug) console.log(" i "+" "+i+" "+allsuspects[i].getAttribute(targetattr));

				if (!cvjs_loadMultipleRedlinesStickyNotes && !cvjs_collab_mode) {
						cvjs_clearCurrentRedline(floorplan_div_Array[cvjs_active_floorplan_div_nr]);   // clear if not loading multiple redlines  and not in collab
				}else{
					// cvjs_loadMultipleRedlinesStickyNotes = true;                 cvjs_collab_mode = false;
				}
				
if (cvjs_debug) 	console.log("replacejscssfile  create new element "+newfilename+" old "+oldfilename);					
				
				var newelement="";
				
				if (filetype=="js"){
					newelement=createjscssfile(newfilename+"?dummy="+Math.random(), filetype);
				}
				else{
					newelement=createjscssfile(newfilename, filetype);
				}
					
				allsuspects[i].parentNode.replaceChild(newelement, allsuspects[i]);

if (cvjs_debug) 	console.log("replacejscssfile  replace child");					
				
				
				// if (cvjs_collab_mode) 	jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).fadeOut(500);   // tell we have updated the redline

			// now the .js file ls loaded
			js_loaded_flag = 1;

			}
		}
	}
	catch(err){
		console.log(err);
	}

	// IF CAFM - we are loading the entire structure up as a string and pasting that into the publish folder result

	if (cvjs_loadCurrentLoadedDrawingAsString){

		var saveSettingsUrl = cvjs_serverHandlersPath + cvjs_serverLoadFileController; //					var saveSettingsUrl = settings_data_url+'save-file-p1.php';
		var settings_data_location = newfilename;
		var settings_data = {};
		settings_data['file'] = settings_data_location;
		//console.log(" "+settings_data['file']);
		jQuery.ajax({
		  url:saveSettingsUrl,
		  type: 'post',
		  data: settings_data,
		  success: function(html){

				cvjs_currentLoadedDrawingAsString = html;
				//console.log(cvjs_currentLoadedDrawingAsString);

		  }  // end success

		});
	}






}

function loadJSbase(file) {


//console.log("loadJSbase "+file);

//window.alert("loadJSbase");

	/*
	jQuery.getScript(file, function(){
	   alert("Script loaded and executed. "+file);
	  // here you can use anything you defined in the loaded script

	 });
	*/

		
	if (cvjs_debug) console.log("loadJSbase "+file);

	try{
		// DOM: Create the script element
		var jsElm = document.createElement("script");
		// set the type attribute
		jsElm.type = "application/javascript";
		// make the script element load file
		jsElm.src = file + "?dummy="+Math.random();
		// finally insert the element to the body element in order to load the script

		
		// 3.1.21j    
		// we strip off the ?dummy= and then we simply enclose the path into the load file controller
		if (cvjs_buildFolderTree_crossDomain)
			jsElm.src = cvjs_serverHandlersPath+cvjs_serverLoadFileController+"?file="+file;
	
		document.body.appendChild(jsElm);
		// if (cvjs_collab_mode) 	jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).fadeOut(500);   // tell we have updated the redline

	//console.log("joadJSbase="+jsElm);
	}
	catch(err){
		console.log(err);
	}

	//*/


	if (cvjs_loadCurrentLoadedDrawingAsString){

		var saveSettingsUrl = cvjs_serverHandlersPath + cvjs_serverLoadFileController; //					var saveSettingsUrl = settings_data_url+'save-file-p1.php';
		var settings_data_location = file;
		var settings_data = {};
		settings_data['file'] = settings_data_location;
if (cvjs_debug) 		console.log(" "+settings_data['file']);
		jQuery.ajax({
		  url:saveSettingsUrl,
		  type: 'post',
		  data: settings_data,
		  success: function(html){

				cvjs_currentLoadedDrawingAsString = html;
				// console.log(cvjs_currentLoadedDrawingAsString);

		  }  // end success

		});
	}


}


var SVGloadFile = "";
var SVGloadFlag = false;

/**
 * Loads a SVG drawing into CADViewer, this method can only be used after intialization of CADViewer through the cvjs_InitCADViewerJS_ methods
 * @param {string} floorplan_div - the SVG canvas object to which CADViewer is allocated
 * @param {string} FileNamePath - the filepath to the location of the SVG drawing files to load in, the path is either absolute or relative to the document in which CADViewer is invoked
 * @param {string} FileName - file name of the SVG drawing
 * @param {string} ScriptPath - relative location of the javascript folder from the calling document
 */

function cvjs_LoadDrawing_SVG(floorplan_div, FileNamePath, FileName, ScriptPath){

	jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();

	// 3.3.01e
	if (printDebugFlag) jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).show();

	
	SVGloadFile = FileNamePath+FileName;
	SVGloadFlag = true;


//console.log("before load drawing with init");

	// we load the init file in script directory, then we overlay that with the svg file
	cvjs_LoadDrawingInternal(floorplan_div, ScriptPath, "init");
 }


var _label;
var Header1;
var BackgroundColor = "#FFF";
var rDrawing;

function setView(paper, x, y, wid, hgt)
{
	// CH
	//x = Math.min(cvjs_rPaper[cvjs_active_floorplan_div_nr].width-viewBoxWidth[cvjs_active_floorplan_div_nr], x);
	//viewBox[cvjs_active_floorplan_div_nr].X = Math.max(0, x);
	//y = Math.min(cvjs_rPaper[cvjs_active_floorplan_div_nr].height-viewBoxHeight[cvjs_active_floorplan_div_nr], y);
	//viewBox[cvjs_active_floorplan_div_nr].Y = Math.max(0, y);

	// CH - we allow zoom and pan outside border of drawing
	viewBox[cvjs_active_floorplan_div_nr].X = x;
	viewBox[cvjs_active_floorplan_div_nr].Y = y;
	//return paper.setViewBox(viewBox[cvjs_active_floorplan_div_nr].X, viewBox[cvjs_active_floorplan_div_nr].Y, wid, hgt);  CH - no good with an empty return

//NNN console.log("setView before paper..."+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+wid+"  "+hgt);
//Snap 	paper.setViewBox(viewBox[cvjs_active_floorplan_div_nr].X, viewBox[cvjs_active_floorplan_div_nr].Y, wid, hgt);

	var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+wid+" "+hgt+"\" }";
	var json_obj = jQuery.parseJSON(attr_2);
	cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);


}

var bbox;

function ResizeVq(wid,hgt)
{

	try{

    viewBoxWidth[cvjs_active_floorplan_div_nr] = wid;
	viewBoxHeight[cvjs_active_floorplan_div_nr] = hgt;

// 2014-12-11
//    cvjs_rPaper[cvjs_active_floorplan_div_nr].setSize(wid, hgt);

	rpWidth[cvjs_active_floorplan_div_nr] = actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr];
	rpHeight[cvjs_active_floorplan_div_nr] = actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr];
    rpX = actualLLX[cvjs_active_floorplan_div_nr];
	rpY = actualLLY[cvjs_active_floorplan_div_nr];

//console.log("actualURX[cvjs_active_floorplan_div_nr]="+actualURX[cvjs_active_floorplan_div_nr]+" actualLLX[cvjs_active_floorplan_div_nr]="+actualLLX[cvjs_active_floorplan_div_nr]);
//console.log("actualURY[cvjs_active_floorplan_div_nr]="+actualURY[cvjs_active_floorplan_div_nr]+" actualLLY[cvjs_active_floorplan_div_nr]="+actualLLY[cvjs_active_floorplan_div_nr]);
//console.log("rpWidth[cvjs_active_floorplan_div_nr]="+rpWidth[cvjs_active_floorplan_div_nr]+" viewBoxWidth[cvjs_active_floorplan_div_nr]="+viewBoxWidth[cvjs_active_floorplan_div_nr]);


	var xfactor = rpWidth[cvjs_active_floorplan_div_nr] / viewBoxWidth[cvjs_active_floorplan_div_nr];
    var yfactor = rpHeight[cvjs_active_floorplan_div_nr] / viewBoxHeight[cvjs_active_floorplan_div_nr];

//console.log("xfactor="+xfactor+" yfactor="+yfactor);

    if (xfactor > yfactor)
        zoomScale = yfactor;
    else
        zoomScale = xfactor;

//    zoomScale = 1.;

	//setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], rpX, rpY, rpWidth[cvjs_active_floorplan_div_nr], rpHeight[cvjs_active_floorplan_div_nr]);
//NNN    cvjs_rPaper[cvjs_active_floorplan_div_nr].setViewBox(rpX, rpY, rpWidth[cvjs_active_floorplan_div_nr], rpHeight[cvjs_active_floorplan_div_nr]);

//console.log("xx5 zoomScale "+zoomScale);


    	var attr_2 = "{\"viewBox\" : \""+rpX+" "+rpY+" "+rpWidth[cvjs_active_floorplan_div_nr]+" "+rpHeight[cvjs_active_floorplan_div_nr]+"\" }";

//console.log("x5 attr_2="+attr_2);

    	var json_obj = jQuery.parseJSON(attr_2);
    	cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);

	viewBox[cvjs_active_floorplan_div_nr].X = rpX;
	viewBox[cvjs_active_floorplan_div_nr].Y = rpY;
    viewBoxWidth[cvjs_active_floorplan_div_nr] = rpWidth[cvjs_active_floorplan_div_nr];
	viewBoxHeight[cvjs_active_floorplan_div_nr] = rpHeight[cvjs_active_floorplan_div_nr];

//if (cvjs_debug) console.log("ResizeVq: viewBox[cvjs_active_floorplan_div_nr].X="+viewBox[cvjs_active_floorplan_div_nr].X+" viewBox[cvjs_active_floorplan_div_nr].Y="+viewBox[cvjs_active_floorplan_div_nr].X+" viewBoxWidth[cvjs_active_floorplan_div_nr]="+viewBoxWidth[cvjs_active_floorplan_div_nr]+" viewBoxHeight[cvjs_active_floorplan_div_nr]="+viewBoxHeight[cvjs_active_floorplan_div_nr]+" zoomScale="+zoomScale);

	vBHo = viewBoxHeight[cvjs_active_floorplan_div_nr];
	vBWo = viewBoxWidth[cvjs_active_floorplan_div_nr];

	}catch(err){}

}


var thumb_loaded = false;
var load_failures = 0;


var SVGloadedFragment = "";
var SVGfragmentIsLoaded = false;


function SetUpVq(maj,min, floorplan_div)
{


	if (cvjs_debug) console.log("In SetUpVq: cvjs_bitmapLoadFlag="+cvjs_bitmapLoadFlag+" floor: "+floor_loaded+" nodes: "+nodes_loaded+" thumb: "+thumbs_loaded);

	// if we are loading bitmaps we do not want init.js setupvq to take over!
	if (cvjs_bitmapLoadFlag) return;
	
	
//console.log("SetUpVq init floor_loaded="+floor_loaded+" nodes_loaded="+nodes_loaded+" load_failures="+load_failures);


	if ((floor_loaded) && (nodes_loaded) && (thumbs_loaded))
		{
		load_failures = 0;
		thumb_loaded = false;

//console.log(" floor_loaded + nodes_loaded + thumbs_loaded all true ");
		// new: if we also have to load a SVG file on top of init file, we need to do that



		if (SVGloadFlag){

			// 2017-08-01, removing this part till we are regenerating canvas, so we know if we have to regen stuff from <metadata> section
			//SVGloadFlag = false;
						
			if (floorplan_div == undefined){
				for (var i=0; i<floorplan_div_Array.length; i++){
					if (floorplan_div_Array_current_Drawing[i] == SVGloadFile){
						floorplan_div = floorplan_div_Array[i];
					}
				}
			}
				
if (cvjs_debug) console.log("ZX5 Loading SVG "+SVGloadFile+" "+SVGfragmentIsLoaded+"  floorplan_div "+floorplan_div+" cvjs_active_floorplan_div_nr "+cvjs_active_floorplan_div_nr);
	
			
			if (!SVGfragmentIsLoaded){
					SVGfragmentIsLoaded = true;



					
if (cvjs_debug) 	console.log("Snap.load SVG SVGfragmentIsLoaded  "+SVGfragmentIsLoaded+" SVG load file="+SVGloadFile);

					try{

					var tux = Snap.load(SVGloadFile, function ( loadedFragment ) {
							SVGloadedFragment = loadedFragment;
if (cvjs_debug) 	console.log("before DoSetUpVq, SVGfragmentIsLoaded "+SVGfragmentIsLoaded+" loadedFragment "+loadedFragment);
	//                      removing this on 2017-08-04, it seems that SVG load is called twice with this
							VqSetup = false;  // make sure DoSetUpVq is run again
if (cvjs_debug)							console.log("Snap.load before DoSetUpVq "+VqSetup);
							DoSetUpVq(floorplan_div);
							} );			
					}
					catch (err){
						console.log("Err 1: "+err);
					}
			
			}
		}
		else{   // standard setup of -full, -nodes , .js
if (cvjs_debug) 			console.log("Standard .js load of DoSetUpVq");
			DoSetUpVq(floorplan_div);
		}


		}
	else if (load_failures < 80)    // 40- 5  NOTE TEST PHASE ONLY!!!
		{
		load_failures++;
		jQuery("#loading").html(languageTable.languages[cvjs_currentLanguage].LoadingModal.Loading);
//console.log("2x");
	    setTimeout(function(){SetUpVq(maj,min, floorplan_div)},256);
    	}
    else
	    {
//if (cvjs_debug) console.log("3x load_failures="+load_failures);
		load_failures = 0;
//		jQuery("#loading").html("Failure to load drawing");
		jQuery("#loading").html("Failure to load drawing, floor: "+floor_loaded+" ,nodes: "+nodes_loaded);

		jQuery("#looper").hide();
		jQuery("#waitpane").show();
//console.log("4x");
	    setTimeout(function(){jQuery("#waitpane").hide();jQuery("#looper").show();},5120);
	    }
}




var cvjs_addSVGClickHandler = false;


/**
 * Set the clickhandler mode for SVG on load. The default is false <br>
 * All SVG objects with an 'id' implemented will be associated with a clickhandler <br>
 * The method will call a number of user implemented call-back methods: <br>
 * cvjs_SVGfileObjectClicked(id, x, y) : callback for click on an object, this method is user implemented <br>
 * cvjs_SVGfileObjectMouseEnter(id, x, y) : callback for mouse entering an object, this method is user implemented <br>
 * cvjs_SVGfileObjectMouseLeave(id, x, y) : callback for mouse leaving an object, this method is user implemented <br>
 * cvjs_SVGfileObjectMouseMove(id, x, y) : callback for mouse move on an object, this method is user implemented <br>
 * @param {boolean} mode - true: click handlers are added to objects on load, false: no handers added on load
 */

function cvjs_addSVGClickHandler_onLoad(mode){

	cvjs_addSVGClickHandler = mode;
}






var mousedown_SVGCanvas = function() {
	if (cvjs_debug) console.log("SVG we have clicked "+jQuery(this).attr('id'));
}


var page_change_modal_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];



var cvjs_SVGGroup = new Array();
var cvjs_svgviewBox;
var cvjs_svgHeight;
var cvjs_svgwidth;
var cvjs_svgScaleTrans;

var	cvjs_svgTransX;
var	cvjs_svgTransY;
var	cvjs_svgScale;


var cvjs_svgWidthHeight100percent = false;


function DoSetUpVq(floorplan_div)
	{

	
	if (cvjs_debug) console.log("DoSetUpVq ");	
	
	
	// this method is being called twice.. ?
	if (VqSetup) {if (cvjs_debug) console.log("returning DoSetUpVq()"); return;}
	else VqSetup = true;


	cvjs_svgviewBox ="";
	cvjs_svgHeight ="";
	cvjs_svgwidth ="";
	cvjs_svgScaleTrans ="";

	cvjs_svgTransX ="";
	cvjs_svgTransY ="";
	cvjs_svgScale ="";
	cvjs_svgWidthHeight100percent = false;


	DefaultZoomFactor = 1.1;

    hgt = jQuery(window).height() - (jQuery("#logorow").height() + jQuery("#navrow").height()+20);
    wid = jQuery(window).width() - 128;

	var svgDiv = "#"+floorplan_div;  // floorPlan_div
//	jQuery(svgDiv).empty();


	// 2017-12-08
	if (floorplan_div == undefined){
			// we are loading from a .js file probably?
//if (cvjs_debug) console.log("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ");				
		floorplan_div = floorplan_div_Array[cvjs_active_floorplan_div_nr];
	}	
if (cvjs_debug) console.log("2 DoSetUpVq" + floorplan_div);

	// 2017-12-08

	// 	set the active rPaper floorplan number to correspond to floorplan_div
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div)

	
//try{ if (cvjs_debug) console.log("   "+vqRooms[0].length);} catch(err) {console.log(err);}			
	
	
	
	// initialize only if undefined
	
	
	if (fileOverlay){   // we only initialize if not overlay!!!   2018-05-05
	
		if (cvjs_debug) console.log("file overlay we do nothing");
	}
	else{
		cvjs_rPaper[cvjs_active_floorplan_div_nr] = null;
		svgDiv = "#"+floorplan_div;
	
		if (!cvjs_rPaper[cvjs_active_floorplan_div_nr])
			cvjs_rPaper[cvjs_active_floorplan_div_nr] = Snap(svgDiv);

	}
	

	 if (SVGloadFlag && !SVGfragmentIsLoaded) {if (cvjs_debug) console.log("we are loading SVG but the fragment is False, therefore return");  return;}


	if (SVGfragmentIsLoaded){
		SVGfragmentIsLoaded = false;

		try{
//if (cvjs_debug) 			console.log("B remove all "+cvjs_initMasterBackground)

			if (cvjs_initMasterBackground){
				//cvjs_rPaper[cvjs_active_floorplan_div_nr].selectAll("*").remove();
//if (cvjs_debug) console.log("blocked cvjs_rPaper[cvjs_active_floorplan_div_nr] select all ");


			// new, we clear the element  IE 11 fix  2017-12-19
			//var element = document.getElementById(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
			//	element.parentNode.removeChild(element);			


//try{ if (cvjs_debug) console.log("before remove "+vqRooms[0].length);} catch(err) {console.log(err);}			


			if (fileOverlay){   // we only initialize if not overlay!!!   2018-05-05
	
				if (cvjs_debug) console.log("file overlay we do nothing 2");
			}
			else{


				var myNode = document.getElementById(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
				while (myNode.firstChild) {
					myNode.removeChild(myNode.firstChild);
				}

				cvjs_rPaper[cvjs_active_floorplan_div_nr] = null;


	//			cvjs_rPaper[cvjs_active_floorplan_div_nr] = null;
				if (!cvjs_rPaper[cvjs_active_floorplan_div_nr])
						cvjs_rPaper[cvjs_active_floorplan_div_nr] = Snap(svgDiv);

				}


				
			}

			
						
				
//try{if (cvjs_debug) console.log("after remove "+vqRooms[0].length);} catch(err) {console.log(err);}			
			
			
			cvjs_svgWidthHeight100percent = false;

			hgt = jQuery(svgDiv).height();
			wid = jQuery(svgDiv).width();

			// 	2017-01-19: Setting this value high is OK, it adjusts itself from the cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox below.
			hgt = 10000; //3500;
			wid = 10000; // 3500;
	// 		2017-01-19:  The SVG from AX has viewbox larger than the JS canvas size in pixels therefore hgt,wid does clipping on the svg file
	//                   now testing to set the cvjs_rPaper[cvjs_active_floorplan_div_nr].svg() without setting the actual size of the svg sub element.
	//                   Without a physical setting of wid and hgt, dragging will not work.

		

if (cvjs_debug) console.log("before adding SVG with or without _secondfile ");		
			
			cvjs_SVGGroup[cvjs_active_floorplan_div_nr] = cvjs_rPaper[cvjs_active_floorplan_div_nr].group();
			
			if (fileOverlay){  // we put the second floorplan on its own main_master_
				cvjs_SVGGroup[cvjs_active_floorplan_div_nr].attr({id: "main_master_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]+"_secondfile"});				
			}
			else{				
				cvjs_SVGGroup[cvjs_active_floorplan_div_nr].attr({id: "main_master_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]});				
			}
			var myGroup = cvjs_SVGGroup[cvjs_active_floorplan_div_nr].svg(0,0, wid, hgt, 0,0, wid, hgt); 
			myGroup.add(SVGloadedFragment);
			cvjs_SVGGroup[cvjs_active_floorplan_div_nr].add(myGroup);
			
						
			
			
			
//if (cvjs_debug)	console.log("cvjs_SVGGroup:  "+cvjs_SVGGroup.toString());

			var pString_org = cvjs_rPaper[cvjs_active_floorplan_div_nr].toString();

//if (cvjs_debug)	console.log("SVG FFIRST  "+pString_org.substring(0,400));

			// for SVG/SVGZ files, determine text search location and overlay object location
			var pString = pString_org;

/*
			// 2017-08-04

			var start_index = pString.indexOf("viewBox");
			var SVGEndIndex = 0;
			var SVGStartIndex = 0;
			if (start_index>-1){
				SVGEndIndex = pString.indexOf('>', start_index);
				SVGStartIndex = pString.lastIndexOf("<svg");
				pString_org = pString.substring(SVGStartIndex, SVGEndIndex);
				pString = pString_org;
			}
*/

			// 2017-08-28
			// find the second SVG elememt, use the Viewbox from that
			var start_index = pString.indexOf("<svg");
			var SVGEndIndex = 0;
			var SVGStartIndex = 0;

			//console.log("first svg"+start_index);
			if (start_index>-1){

				SVGEndIndex = pString.indexOf('<svg', start_index+4);
				//console.log( SVGEndIndex);

				// first SVG statement
				var firstSVGDefinition = pString.substring(0, SVGEndIndex);

				// pString after the first SVG is cut out
				pString= pString.substring(SVGEndIndex);


if (cvjs_debug)	console.log("pString after first svg is cut out: "+pString.substring(0,400));

				// is there a 3rd svg declaration?

				var pString_tmp = pString.substring(4);

				SVGStartIndex = pString_tmp.indexOf('<svg');

				if (SVGStartIndex>-1){
					//console.log("WE HAVE A 3RD SVG");

					SVGEndIndex = pString.indexOf('<svg', SVGStartIndex+4);
					//console.log( SVGEndIndex);

					// pString after the third SVG is cut
					pString= pString.substring(SVGEndIndex);

					//console.log("pString after second svg is cut out: "+pString.substring(0,400));



				}
				else{
					//console.log("WE DO NOT HAVE THAT, ONLY 2 SVG STATEMENTS");
				}

			}

			pString_org = pString;

if (cvjs_debug)	console.log("After viewBox search "+pString_org.substring(0,100));

			if (pString.indexOf("viewBox")>0){
				// we have the right viewbox
				//pString = pString.substring(pString.indexOf("viewBox")+9);
				pString = pString.substring(pString.indexOf("viewBox")+9);
				pString = pString.substring(0, pString.indexOf("\""));
				var values = pString.split(" ");
//				console.log("SVG after Split "+values.length+" "+values[0]+" "+values[1]+" "+values[2]+" "+values[3]);
			}

			pString = pString_org;

			if (pString.indexOf("width=")>0){

				// 2017-08-04  we have hashed out the proper svg definition
	//			pString = pString.substring(pString.indexOf("viewBox")+9);
	//			pString = pString.substring(pString.indexOf("viewBox")+9);


	//			console.log("lastindex viewBox:"+pString);
				pString = pString.substring(pString.indexOf("width=")+7);
	//			console.log("first width"+pString);
				pString = pString.substring(0, pString.indexOf("\""));
	//			console.log("width "+pString);
				cvjs_svgWidth= Number(pString);
			}

			if (pString.indexOf("100%")==0){

	//			console.log("we have 100% here!");
				cvjs_svgWidthHeight100percent = true;
				cvjs_svgWidth = cvjs_svgviewBox[2];
			}

			pString = pString_org;

			if (pString.indexOf("height=")>0){
//				pString = pString.substring(pString.indexOf("viewBox")+9);   // 2017-08-20
//				pString = pString.substring(pString.indexOf("viewBox")+9);

				pString = pString.substring(pString.indexOf("height=")+8);
				pString = pString.substring(0, pString.indexOf("\""));
	//			console.log("height "+pString);
				cvjs_svgHeight= Number(pString);

			}

			if (pString.indexOf("100%")==0){
	//			console.log("we have 100% here!");

				cvjs_svgHeight = cvjs_svgviewBox[3];
				cvjs_svgWidthHeight100percent = true;
			}


//if (cvjs_debug)	console.log("cvjs_svgHeight="+cvjs_svgHeight+"  cvjs_svgWidth="+cvjs_svgWidth+" active floorplan "+cvjs_active_floorplan_div_nr);

			try{
				cvjs_svgviewBox = values.map(Number);
				
				if (cvjs_debug) console.log(cvjs_svgviewBox[0]+" cvjs_active_floorplan_div_nr "+cvjs_active_floorplan_div_nr+" "+actualLLX[cvjs_active_floorplan_div_nr] );
				
				if (cvjs_svgviewBox[2]!=cvjs_svgWidth || cvjs_svgviewBox[3]!=cvjs_svgHeight){

					actualLLX[cvjs_active_floorplan_div_nr] = 0;
					actualLLY[cvjs_active_floorplan_div_nr] = 0;
					actualURX[cvjs_active_floorplan_div_nr] = cvjs_svgWidth;
					actualURY[cvjs_active_floorplan_div_nr] = cvjs_svgHeight;
					
					//if (cvjs_debug) console.log("In HERE 1 "+actualLLX[cvjs_active_floorplan_div_nr]);
										
				}
				else{

					actualLLX[cvjs_active_floorplan_div_nr] = cvjs_svgviewBox[0];
					actualLLY[cvjs_active_floorplan_div_nr] = cvjs_svgviewBox[1];
					actualURX[cvjs_active_floorplan_div_nr] = cvjs_svgviewBox[2];
					actualURY[cvjs_active_floorplan_div_nr] = cvjs_svgviewBox[3];


					//if (cvjs_debug) console.log("In HERE 2 "+ actualLLX[cvjs_active_floorplan_div_nr]);

				}
				
							
if (cvjs_debug) console.log("SETTING OF MASTERBACKGROUND "+actualURX[cvjs_active_floorplan_div_nr]+"  "+actualURY[cvjs_active_floorplan_div_nr]);


//window.alert("making master 2 "+ cvjs_masterBackground[cvjs_active_floorplan_div_nr]);

				if (cvjs_masterBackground[cvjs_active_floorplan_div_nr]!=undefined) cvjs_masterBackground[cvjs_active_floorplan_div_nr].remove();

				cvjs_masterBackground[cvjs_active_floorplan_div_nr] = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
				
				cvjs_masterBackground[cvjs_active_floorplan_div_nr].data("id", "master_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]);
				cvjs_masterBackground[cvjs_active_floorplan_div_nr].attr({id: "master_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]});
					
				cvjs_masterBackground[cvjs_active_floorplan_div_nr].after(cvjs_SVGGroup);
				
				
			}
			catch(err1){if (cvjs_debug) console.log("values.map cvjs_svgviewBox "+err1);
			
			// we want to give a value if values are not working when reading from Batik
			
					actualLLX[cvjs_active_floorplan_div_nr] = 0;
					actualLLY[cvjs_active_floorplan_div_nr] = 0;
					actualURX[cvjs_active_floorplan_div_nr] = cvjs_svgWidth;
					actualURY[cvjs_active_floorplan_div_nr] = cvjs_svgHeight;
					
			
			
			}



if (cvjs_debug)	console.log("MASTERBACKGROUND actualLLX="+actualLLX[cvjs_active_floorplan_div_nr]);


			var scale = cvjs_svgHeight/(cvjs_svgviewBox[3]);
	//		console.log("scale "+scale);
			var wh_fac = cvjs_svgviewBox[2]/cvjs_svgviewBox[3];

			var wdiff = ((cvjs_svgWidth-(cvjs_svgHeight*wh_fac))/2.0)/scale;

	//		console.log("wdiff "+wdiff);

	//		cvjs_svgScaleTrans = "T"+(0-cvjs_svgviewBox[0])+","+(0-cvjs_svgviewBox[1])+"S"+scale+",0,0";
	//		cvjs_svgScaleTrans = "T"+(wdiff-cvjs_svgviewBox[0])+","+(0-cvjs_svgviewBox[1])+"S"+scale+",0,0";
			cvjs_svgScaleTrans = "T"+(wdiff-cvjs_svgviewBox[0])+","+(0-cvjs_svgviewBox[1])+"S"+scale+",0,0";

			cvjs_svgTransX = wdiff-cvjs_svgviewBox[0];
			cvjs_svgTransY = 0-cvjs_svgviewBox[1];
			cvjs_svgScale = scale;


	// 2017-08-28  MOVING calculation of Masterbackgound after the actual width and height of SVG is found

		if (cvjs_debug) console.log("cvjs_addSVGClickHandler "+cvjs_addSVGClickHandler);

			if (cvjs_addSVGClickHandler){

					// add a click handler to all objects in the SVG file
				   var oArr = {};
				   jQuery("*[id]").each(function() {
					   var id = jQuery(this).attr('id');
					   if (!oArr[id]) oArr[id] = true;
				   });

				   for (var prop in oArr){

						try{
							var target = "#"+prop;

							// find stroke width, for some reason defined inside path, not as style object
							// Mitchell - parsing of files

							var strokeW = jQuery(target).attr('stroke-width');
							if (strokeW == undefined){
							}
							else{
								jQuery( target ).data("original_stroke_width", strokeW);
							}


							// find the original color
							var styles = jQuery(target).attr('style');

							if (styles == undefined){
								jQuery( target ).data("original_stroke", "Undefined");
							}
							else{
								//console.log(styles +" before split");
								var attributes = styles.split(';');
								for (var i = 0; i < attributes.length; i++) {
									var entry = attributes[i].split(':');
									if (entry[0].trim()=='stroke'){
										jQuery( target ).data("original_stroke", entry[1].trim());
									}
			//						if (entry[0].trim()=='stroke-width'){
			//							jQuery( target ).data("original_stroke_width", entry[1].trim());
			//						}
								}
							}


							jQuery( target ).click(function(event) {
							 //console.log("calling with "+jQuery(this).attr('id'));
							  cvjs_SVGfileObjectClicked(jQuery(this).attr('id'), event.pageX, event.pageY);
							  // if selected then unselect

							});


							jQuery( target ).mouseenter(function(event) {
							 //console.log("mouseover "+jQuery(this).attr('id'));
							  cvjs_SVGfileObjectMouseEnter(jQuery(this).attr('id'), event.pageX, event.pageY);
							  // if selected then unselect

							});


							jQuery( target ).mouseleave(function(event) {
							 //console.log("mouse out "+jQuery(this).attr('id'));
							  cvjs_SVGfileObjectMouseLeave(jQuery(this).attr('id'), event.pageX, event.pageY);
							  // if selected then unselect

							});


							jQuery( target ).mousemove(function(event) {
							 //console.log("mouse out "+jQuery(this).attr('id'));
							  cvjs_SVGfileObjectMouseMove(jQuery(this).attr('id'), event.pageX, event.pageY);
							  // if selected then unselect

							});



						}
						catch(err){
							console.log("Err 2: "+err);
						}
					   // alert(prop);
				}
		   }
		}catch(err){console.log("Err 3 "+err);}

		//console.log(prop+" last-last "+target);

	//		cvjs_masterBackground[cvjs_active_floorplan_div_nr].add(SVGGroup);


	}
	else{
	
if (cvjs_debug) 		console.log("BEFORE INIT MASTERBACKGROUND "+cvjs_initMasterBackground)
		if (cvjs_initMasterBackground){
			
//			window.alert("making master 3");

			cvjs_masterBackground[cvjs_active_floorplan_div_nr] = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
		
			cvjs_masterBackground[cvjs_active_floorplan_div_nr].data("id", "master_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]);
			cvjs_masterBackground[cvjs_active_floorplan_div_nr].attr({id: "master_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]});

		}
		else{
		}

	}

	try{
		// console.log("make funny color"+printDebugFlag);
		// fill cvjs_masterbackground[cvjs_active_floorplan_div_nr] with funny color
		if (printDebugFlag)
			cvjs_masterBackground[cvjs_active_floorplan_div_nr].attr({fill: "#aa0fc0", "fill-opacity":"1.0"});
		//	Normal cvjs_masterbackground[cvjs_active_floorplan_div_nr] setting
		else
			cvjs_masterBackground[cvjs_active_floorplan_div_nr].attr({fill: "#fff", "fill-opacity":"0.01", "stroke-width": 0});

	}
	catch(errM){

		// this is a hack when loading batik PDF to SVG  , 2018-02-13
		
//		window.alert("making master 4");

		
		cvjs_masterBackground[cvjs_active_floorplan_div_nr] = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
	
		cvjs_masterBackground[cvjs_active_floorplan_div_nr].data("id", "master_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]);
		cvjs_masterBackground[cvjs_active_floorplan_div_nr].attr({id: "master_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]});

		

		cvjs_masterBackground[cvjs_active_floorplan_div_nr].attr({fill: "#0000ff", "fill-opacity":"0.3", "stroke-width": 0});	
		
		
		
		if (printDebugFlag)
			cvjs_masterBackground[cvjs_active_floorplan_div_nr].attr({fill: "#aa0fc0", "fill-opacity":"1.0"});
		//	Normal cvjs_masterbackground[cvjs_active_floorplan_div_nr] setting
		else
			cvjs_masterBackground[cvjs_active_floorplan_div_nr].attr({fill: "#fff", "fill-opacity":"0.01", "stroke-width": 0});

	
		
	}
	
	
	
// removing viewbox
//	cvjs_rPaper[cvjs_active_floorplan_div_nr].attr({viewBox : "50 0 500 400"});

   	viewBoxWidth[cvjs_active_floorplan_div_nr] = fpWidth;
	viewBoxHeight[cvjs_active_floorplan_div_nr] = winHeight;

	rpWidth[cvjs_active_floorplan_div_nr] = actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr];
	rpHeight[cvjs_active_floorplan_div_nr] = actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr];
    rpX = actualLLX[cvjs_active_floorplan_div_nr];
	rpY = actualLLY[cvjs_active_floorplan_div_nr];

	vBHo = viewBoxHeight[cvjs_active_floorplan_div_nr];
	vBWo = viewBoxWidth[cvjs_active_floorplan_div_nr];


	xfactor = rpWidth[cvjs_active_floorplan_div_nr] / viewBoxWidth[cvjs_active_floorplan_div_nr];
    yfactor = rpHeight[cvjs_active_floorplan_div_nr] / viewBoxHeight[cvjs_active_floorplan_div_nr];

    if (xfactor > yfactor)
        zoomScale = yfactor;
    else
        zoomScale = xfactor;

    var lastDx = 0;
    var lastDy = 0;


if (cvjs_debug) console.log("zoomScale="+zoomScale+" vBHo"+vBHo+" vBWo "+vBWo+"  viewBoxHeight[cvjs_active_floorplan_div_nr]="+viewBoxHeight[cvjs_active_floorplan_div_nr]+"   viewBoxWidth[cvjs_active_floorplan_div_nr]="+viewBoxWidth[cvjs_active_floorplan_div_nr]);
if (cvjs_debug)console.log("actualLLX[cvjs_active_floorplan_div_nr]="+actualLLX[cvjs_active_floorplan_div_nr]+" actualLLY[cvjs_active_floorplan_div_nr]"+actualLLY[cvjs_active_floorplan_div_nr]);


	var attr_2 = "{\"viewBox\" : \""+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+rpWidth[cvjs_active_floorplan_div_nr]+" "+rpHeight[cvjs_active_floorplan_div_nr]+"\" }";

if (cvjs_debug) console.log("x6 attr_2="+attr_2);

	var json_obj = jQuery.parseJSON(attr_2);
	cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);

	viewBox[cvjs_active_floorplan_div_nr] = { X:0, Y:0, width:0, height:0};
	viewBox[cvjs_active_floorplan_div_nr].X = actualLLX[cvjs_active_floorplan_div_nr];
	viewBox[cvjs_active_floorplan_div_nr].Y = actualLLY[cvjs_active_floorplan_div_nr];

//console.log(cvjs_rPaper[cvjs_active_floorplan_div_nr]);

    viewBoxWidth[cvjs_active_floorplan_div_nr] = rpWidth[cvjs_active_floorplan_div_nr];
	viewBoxHeight[cvjs_active_floorplan_div_nr] = rpHeight[cvjs_active_floorplan_div_nr];

	objArr = new Array();
	pathArr = new Array();



	try{
		drawDrawing(cvjs_rPaper[cvjs_active_floorplan_div_nr]);
		drawPaths(cvjs_rPaper[cvjs_active_floorplan_div_nr]);
		if (!cvjs_Community_Version)
			setUpVqRooms(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_active_floorplan_div_nr);
		else
			layer_vqrooms[active_floorplan_div_nr] = paper.g();	
	
	} catch(err) { if (cvjs_debug) console.log("Err 5: "+"Note: .js loading: drawDrawing, drawPaths, setUpVqRooms  "+err); }



	try{
		drawThumb(cvjs_rPaper[cvjs_active_floorplan_div_nr]);  // 2016-01-11
	} catch(err) { if (cvjs_debug)console.log("Err 6: "+"Note: .js loading:  drawThumb  "+err); }


	try{
		setUpVqStickyNotes(cvjs_rPaper[cvjs_active_floorplan_div_nr]);
		setUpVqRedlines(cvjs_rPaper[cvjs_active_floorplan_div_nr]);
		setUpVqURLs(cvjs_rPaper[cvjs_active_floorplan_div_nr]);
	} catch(err) { if (cvjs_debug) console.log("Err 7: "+"Note: .js loading:  setUpVqStickyNotes, setUpVqRedlines, setUpVqURLs "+err); }



if (cvjs_debug) console.log("before cvjs_masterBackground[cvjs_active_floorplan_div_nr] "+cvjs_initMasterBackground);
	//layers_all.attr(show);  // XXXXXXXX

	if (cvjs_initMasterBackground)
		cvjs_masterBackground[cvjs_active_floorplan_div_nr].add(layers_all);
	else{

//		cvjs_rPaper[cvjs_active_floorplan_div_nr].add(layers_all_overlay);
//		layers_all_overlay.add(layers_all);
//		new_layer.before(layers_all);
//		cvjs_masterBackground[cvjs_active_floorplan_div_nr].add(new_layer);
//		cvjs_masterBackground[cvjs_active_floorplan_div_nr].add(layers_all);

	}
	//if (!cvjs_initMasterBackground) cvjs_rPaper[cvjs_active_floorplan_div_nr].add(layers_all_overlay);

	//cvjs_masterBackground[cvjs_active_floorplan_div_nr].add(layers_all);

//	if (cvjs_initMasterBackground) cvjs_masterBackground[cvjs_active_floorplan_div_nr].add(layers_all);

	cvjs_addMouseWheelControls(cvjs_active_floorplan_div_nr);


	if (!SVGloadFlag){
if (cvjs_debug) 		console.log("before parsing Layers ");

		try{
			for (id=0; id<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; id++){
				layerTable[cvjs_active_floorplan_div_nr].layers[id].layer.data("layerClass", layerTable[cvjs_active_floorplan_div_nr].layers[id].layerClass);
				layerTable[cvjs_active_floorplan_div_nr].layers[id].layer.mousedown(function (e){
					if (cvjs_turnDrawingLayerOffFlag ){
						cvjs_turnDrawingLayerOffFlag = false;
						// turn layer off
						var layerClass = this.data("layerClass");
						for (jj=0; jj<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; jj++){
							if (layerTable[cvjs_active_floorplan_div_nr].layers[jj].layerClass == layerClass && layerTable[cvjs_active_floorplan_div_nr].layers[jj].status == "ON" ){
								cvjs_LayerOff(layerTable[cvjs_active_floorplan_div_nr].layers[jj].layer);
								layerTable[cvjs_active_floorplan_div_nr].layers[jj].status = "OFF";
							}
						}
					}
				});
			}
		}
		catch (err2){console.log("we could not add Layer handlers to objects"+err2);}

	}


	if (SVGloadFlag){
		// 2017-08-01, removing this part till we are regenerating canvas, so we know if we have to regen stuff from <metadata> section
		SVGloadFlag = false;

		// we have to enable navigation from the SVG, but only if the SVG is created from conversion
		if (cvjs_svgCreatedFromConversion){
			cvjs_svgCreatedFromConversion = false;
			cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ] = cvjs_svgCreationContentLocation;
			cvjs_loadDrawing_conversionMode = true;
		}
if (cvjs_debug) console.log("META-DATA SECTION");

		// we are pulling content from <metadata> section
		var attr2 = "";
		try{

			var elems = document.querySelectorAll('[id^="cadviewer_multiPages"]');
	
			var idFlag = false; 
			for (var i = 0, len = elems.length; i < len; i++){
				//window.alert(elems[i]);  //.disabled = false; // to make them all enabled
				//window.alert(elems[i].textContent);  //.disabled = false; // to make them all enabled
				var pagesID = elems[i].id;  //.disabled = false; // to make them all enabled
			
				var searchString = "[id^="+floorplan_div_Array[cvjs_active_floorplan_div_nr]+"]";
				var metatextID = jQuery("#"+pagesID).parents(searchString).attr('id');
			
				if (metatextID == floorplan_div_Array[cvjs_active_floorplan_div_nr] && !idFlag){		
					idFlag = true;
					//attr2 = document.getElementById('cadviewer_multiPages').textContent;
					attr2 = elems[i].textContent;
					attr2 = attr2.substring(attr2.indexOf("=")+1);
					
		//			attr2 = attr2.replace(/(\r\n|\n|\r)/gm,"");
		//			attr2 = attr2.replace(/\s+/g, '');
					multiPages[cvjs_active_floorplan_div_nr] = jQuery.parseJSON(attr2);
					if (cvjs_debug) console.log("INSIDE LOOP cadviewer_multiPages_xxx  cvjs_active_floorplan_div_nr="+cvjs_active_floorplan_div_nr);			
				}
			}
			
			if (!idFlag){
					attr2 = document.getElementById('cadviewer_multiPages').textContent;
					attr2 = attr2.substring(attr2.indexOf("=")+1);
					multiPages[cvjs_active_floorplan_div_nr] = jQuery.parseJSON(attr2);
					if (cvjs_debug) console.log("AFTER LOOP cadviewer_multiPages  cvjs_active_floorplan_div_nr="+cvjs_active_floorplan_div_nr);		
			}
	
//console.log("MULTIIIIIIIIIIIIIIIIIIIIIIIIII multiPages[cvjs_active_floorplan_div_nr].multiPages "+multiPages[cvjs_active_floorplan_div_nr].multiPages+"  "+multiPages[0].multiPages);

		}catch(err){
			if (cvjs_debug) console.log("no multiPages["+cvjs_active_floorplan_div_nr+"] defined in metadata"+err);
				
		}

		try{
			
			var elems = document.querySelectorAll('[id^="cadviewer_worldUnits"]');
			var idFlag = false; 
			for (var i = 0, len = elems.length; i < len; i++){
				var pagesID = elems[i].id;  //.disabled = false; // to make them all enabled
				var searchString = "[id^="+floorplan_div_Array[cvjs_active_floorplan_div_nr]+"]";
				var metatextID = jQuery("#"+pagesID).parents(searchString).attr('id');
			
				if (metatextID == floorplan_div_Array[cvjs_active_floorplan_div_nr] && !idFlag){		
					idFlag = true;
					attr2 = elems[i].textContent;
					attr2 = attr2.substring(attr2.indexOf("=")+1);
					if (cvjs_debug) console.log("XX"+attr2+"XX");
					worldUnits= jQuery.parseJSON(attr2);
				}
			}
			
			if (!idFlag){
				attr2 = document.getElementById('cadviewer_worldUnits').textContent;
				attr2 = attr2.substring(attr2.indexOf("=")+1);
				if (cvjs_debug) console.log("XX"+attr2+"XX");
				worldUnits= jQuery.parseJSON(attr2);
			}
			
			
			// assignment of scale arrays
			// 3.3.01g  

			if (worldUnits.svgToWorldUnits == 0) worldUnits.svgToWorldUnits = 1;
 			
			// we are used the reverse value compared to what AX is providing
			
			worldUnits.svgToWorldUnits = 1.0/ worldUnits.svgToWorldUnits;
			
			cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr] =  worldUnits.svgToWorldUnits
			cvjs_units[cvjs_active_floorplan_div_nr] = worldUnits.units;
			// NOTE:  WE ARE NOT SETTING THE globalorigin , X, Y !!!!!!
			
						
if (cvjs_debug)	console.log("worldUnits.units "+worldUnits.units);



		}catch(err){if (cvjs_debug) console.log("no worldUnits defined in metadata"+err);}

		
		try{
							
			var elems = document.querySelectorAll('[id^="cadviewer_drawingCoordinates"]');
			var idFlag = false; 
			for (var i = 0, len = elems.length; i < len; i++){
				var pagesID = elems[i].id;  //.disabled = false; // to make them all enabled
				var searchString = "[id^="+floorplan_div_Array[cvjs_active_floorplan_div_nr]+"]";
				var metatextID = jQuery("#"+pagesID).parents(searchString).attr('id');
			
				if (metatextID == floorplan_div_Array[cvjs_active_floorplan_div_nr] && !idFlag){		
					idFlag = true;
					attr2 = elems[i].textContent;
					attr2 = attr2.replace(/(\r\n|\n|\r)/gm,"");			
					if (cvjs_debug)	console.log("cadviewer_drawingCoordinates="+attr2+"XXX");
					cvjs_drawingCoordinates[multiPages[cvjs_active_floorplan_div_nr].currentPage] = jQuery.parseJSON(attr2);
				}
			}
			
			if (!idFlag){
				attr2 = document.getElementById('cadviewer_drawingCoordinates').textContent;
				attr2 = attr2.replace(/(\r\n|\n|\r)/gm,"");			
				if (cvjs_debug)	console.log("cadviewer_drawingCoordinates="+attr2+"XXX");
	//			attr2 = attr2.replace(/\s+/g, '');
				cvjs_drawingCoordinates[multiPages[cvjs_active_floorplan_div_nr].currentPage] = jQuery.parseJSON(attr2);
			}
			
if (cvjs_debug)	console.log("drawingCoordinates "+cvjs_drawingCoordinates[multiPages[cvjs_active_floorplan_div_nr].currentPage]+"     "+multiPages[cvjs_active_floorplan_div_nr].currentPage);

		}catch(err){if (cvjs_debug) console.log("no drawingCoordinates defined in metadata or parsing error "+err);}

		
		
if (cvjs_debug) 		console.log("Now we add handler to SVG layers:");

		// 2017-08-18 , new structure of SVG file

		layerTable[cvjs_active_floorplan_div_nr] = { numberOfLayers: 0,
					layers: []
		};


		var oArr = {};

///* 2017-11-27, what is this?

		jQuery("[id^=layer_]").each(function() {
		   var id = jQuery(this).attr('id');
		   // here we flush out the \u of the id and change the id again
		   var  newid = id.toString();
		   
		   if (newid.indexOf('\\u')>-1){   // this is a unicode layer name id definition
				newid = newid.replace(/\\u/g,"__u");
				//console.log(id+"  "+newid);
				document.getElementById(id).setAttribute("id",newid);
		   }
		
		});

//*/

		// LAYERS

		//var oArr = {};
		jQuery("[id^=layer_]").each(function() {
		   var id = jQuery(this).attr('id');
		   
		   

//				   jQuery(this).hide();

		   
	
			// new 2018-01-17  find only layers within the right div
			var searchString = "[id^="+floorplan_div_Array[cvjs_active_floorplan_div_nr]+"]";
			var svgID = jQuery("#"+id).parents(searchString).attr('id');
					
//console.log("layer loop "+id+"  "+svgID+"  "+floorplan_div_Array[cvjs_active_floorplan_div_nr]);			
			
			if (svgID == floorplan_div_Array[cvjs_active_floorplan_div_nr]){
				if (!oArr[id]) oArr[id] = true;
		      
					// 3.0.13i
				   // first we hide  all layers
				   //jQuery(this).hide();
				   jQuery(this).attr(hide);
				   	   
		   		   		   
			}
		   
		   //if (!oArr[id]) oArr[id] = true;
		});


		XrefFileList[0] = "none";
		XrefFileList.length = 0;
		
		var nodeVal = 0;
		for (var prop in oArr){
			
			var target = "#"+prop;
			//var layer_id = jQuery(target).attr('id');
			var layer_id = prop;
			var layer_class= "";			
			var layer_name="";
			var layer_status="ON";
//		if (cvjs_debug) console.log("  ");	
//		if (cvjs_debug) console.log("  target "+target);
			layer_class = jQuery(target).attr('class');		
			jQuery(target).each(function() {
			  jQuery.each(this.attributes, function() {
				if(this.specified) {
				  var cvname = (this.name).toString().toLowerCase();
//				  if (cvjs_debug) console.log("cvname="+cvname+" value:"+this.value+"XX");
				  if (cvname == "id") layer_id = this.value;  // all lowercase
				  if (cvname == "class") layer_class = this.value;  // all lowercase
				  if (cvname == "cvjs:layername") layer_name = this.value;  // all lowercase
				  if (cvname == "cvjs:status") layer_status = this.value;
				}
			  });
			});
			layer_name = JSON.parse('"' + layer_name + '"');

			layer_base_name = layer_name;
			xref_file = "none";
			xref_flag = false;			
			xref_extension = "none";
			if (cvjs_preConversionFileName[cvjs_active_floorplan_div_nr] == undefined || cvjs_preConversionFileName[cvjs_active_floorplan_div_nr] == null){
				xref_extension = "svg";				
			}
			else{				
				xref_extension = cvjs_preConversionFileName[cvjs_active_floorplan_div_nr].substring(cvjs_preConversionFileName[cvjs_active_floorplan_div_nr].lastIndexOf(".")+1);				
			}					
			if (layer_name.indexOf("|")>-1){			
				layer_base_name =layer_name.substring(layer_name.indexOf("|")+1);
				xref_file = layer_name.substring(0, layer_name.indexOf("|"))+"."+xref_extension;
				
				for (k=0; k<XrefFileList.length;k++){
					if (XrefFileList[k].indexOf(xref_file) == 0) xref_flag = true;
					if (XrefFileList[k].indexOf("none") == 0) { 
						XrefFileList[k] = xref_file; 
						xref_flag = true;
					}
				}
				if (!xref_flag) XrefFileList[XrefFileList.length] = xref_file;  // incrementing array with xref_file  - array should be two dimentional
			}
			
			try{
				if (layer_class.toString().indexOf('\\u') > -1 || layer_class.toString().endsWith('_block')){  				
					// this is a unicode class name definition, we are replacing it, we are assuming there is a layer already with this name
					if (layer_class.toString().indexOf('\\u') > -1){
						jQuery(target).removeClass(layer_class);		
						var newclass = layer_class.toString().replace(/\\u/g, "_u");
						jQuery(target).addClass(newclass);		
						layer_class = jQuery(target).attr('class');
						//if (cvjs_debug) console.log("new XXXX"+layer_class+"XXXX");
						var existing_layer = target.toString().replace(/__u/g, "_u");			
						if (jQuery(existing_layer).length){  // there is an existing layer preprocessed with the same name, so we remove and add to that					
	//						if (cvjs_debug) console.log(target+" move to: "+existing_layer+" with name: "+layer_name);
							jQuery(target).detach().appendTo(existing_layer);			
						}else{
							// the layer is not dublicate, and it contain a \u class, so we add it to the layer list
//							var singleLayer ={ layer: layer_id, layerClass: layer_class, layerName: layer_name, status : layer_status};
							var singleLayer ={ layer: layer_id, layerClass: layer_class, layerName: layer_name, status : layer_status, layerBaseName: layer_base_name, xRefFile: xref_file};
							layerTable[cvjs_active_floorplan_div_nr].layers[nodeVal] = singleLayer;
							nodeVal++;
							layerTable[cvjs_active_floorplan_div_nr].numberOfLayers = nodeVal;				
						}
					}

					// this is a block layer
					if (layer_class.toString().endsWith('_block')){
						
						var existing_layer = target.substring(0, target.toString().indexOf('_block'));
						//console.log(existing_layer);
						if (jQuery(existing_layer).length){  // there is an existing layer preprocessed with the same name, so we remove and add to that	

							jQuery(target).removeClass(layer_class);		
							var newclass = layer_class.toString().substring(0, layer_class.toString().indexOf('_block'));
							jQuery(target).addClass(newclass);		
							layer_class = jQuery(target).attr('class');
						
	//						if (cvjs_debug) console.log(target+" move block to: "+existing_layer+" with name: "+layer_name);
							jQuery(target).detach().appendTo(existing_layer);			
						}else{
							// the layer is not dublicate, and it contain a \u class, so we add it to the layer list
//							var singleLayer ={ layer: layer_id, layerClass: layer_class, layerName: layer_name, status : layer_status};
							var singleLayer ={ layer: layer_id, layerClass: layer_class, layerName: layer_name, status : layer_status, layerBaseName: layer_base_name, xRefFile: xref_file};
							layerTable[cvjs_active_floorplan_div_nr].layers[nodeVal] = singleLayer;
							nodeVal++;
							layerTable[cvjs_active_floorplan_div_nr].numberOfLayers = nodeVal;				
						}
					}				
				}		
				else{
					// standard case, we are building the layer list									
					//var singleLayer ={ layer: layer_id, layerClass: layer_class, layerName: layer_name, status : layer_status};
					var singleLayer ={ layer: layer_id, layerClass: layer_class, layerName: layer_name, status : layer_status, layerBaseName: layer_base_name, xRefFile: xref_file};
					layerTable[cvjs_active_floorplan_div_nr].layers[nodeVal] = singleLayer;
					nodeVal++;
					layerTable[cvjs_active_floorplan_div_nr].numberOfLayers = nodeVal;
				}
			}
			catch (err){  // standard case, no class definition on layer
				// 3.0.13b
				layer_class = layer_id;				
				layer_name = layer_id.substring(layer_id.indexOf("layer_")+6);
				layer_status = "ON";
				// standard case, we are building the layer list
//				var singleLayer ={ layer: layer_id, layerClass: layer_class, layerName: layer_name, status : layer_status};
				var singleLayer ={ layer: layer_id, layerClass: layer_class, layerName: layer_name, status : layer_status, layerBaseName: layer_base_name, xRefFile: xref_file};
				layerTable[cvjs_active_floorplan_div_nr].layers[nodeVal] = singleLayer;
				nodeVal++;
				layerTable[cvjs_active_floorplan_div_nr].numberOfLayers = nodeVal;				
			}
		}

		if (cvjs_debug) console.log("layerTable[cvjs_active_floorplan_div_nr].numberOfLayers  "+layerTable[cvjs_active_floorplan_div_nr].numberOfLayers);

///*** 3.0.13i testing		
			for (id=0; id<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; id++){
					// 3.0.13h
					for (j=0; j<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; j++){
							if (id!=j)	jQuery("#"+layerTable[cvjs_active_floorplan_div_nr].layers[j].layer).attr(hide);
						else{
							jQuery("#"+layerTable[cvjs_active_floorplan_div_nr].layers[j].layer).attr(show);
						}
					}

					bbox = cvjs_SVGGroup[cvjs_active_floorplan_div_nr].getBBox();
					if (cvjs_debug) console.log(" cvjs_active_floorplan_div_nr:"+cvjs_active_floorplan_div_nr+" "+layerTable[cvjs_active_floorplan_div_nr].layers[id].layer); 	
				}
//**/
		// 3.0.13i   , all layers are turned on again for extents calculation
		try{
			for (id=0; id<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; id++){
				jQuery("#"+layerTable[cvjs_active_floorplan_div_nr].layers[id].layer).attr(show);
//				jQuery("#"+layerTable[cvjs_active_floorplan_div_nr].layers[id].layer).show();
			}
			
		}
		catch(err1) {console.log(err+" show layers");}
	


				
	
/*
			for (id=0; id<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; id++){
					jQuery("#"+layerTable[cvjs_active_floorplan_div_nr].layers[id].layer).show();
			}
*/	

		try{
			for (id=0; id<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; id++){

					// let us hide the Thumb layer
					if (layerTable[cvjs_active_floorplan_div_nr].layers[id].layerName == "cvjs_Thumb"){
						cvjs_LayerOff(layerTable[cvjs_active_floorplan_div_nr].layers[id].layer);
						layerTable[cvjs_active_floorplan_div_nr].layers[id].status = "OFF";
					}

					//  let us build the layer off by click method
					
									
					
					jQuery("#"+layerTable[cvjs_active_floorplan_div_nr].layers[id].layer).mousedown(function (e){
						//console.log("in function mousedown layer");
						if (cvjs_turnDrawingLayerOffFlag ){
							cvjs_turnDrawingLayerOffFlag = false;
							// turn layer off
							var id = jQuery(this).attr('id');
							var layerClass = id; 		// this.data("layerClass");
							for (jj=0; jj<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; jj++){
								if (layerTable[cvjs_active_floorplan_div_nr].layers[jj].layerClass == layerClass && layerTable[cvjs_active_floorplan_div_nr].layers[jj].status == "ON" ){
									cvjs_LayerOff(layerTable[cvjs_active_floorplan_div_nr].layers[jj].layer);
									layerTable[cvjs_active_floorplan_div_nr].layers[jj].status = "OFF";
								}
							}
						}
					});
			}
		}
		catch (err2){console.log("we could not add Layer handlers to objects"+err2);}

		try{
			// 2017-12-11 blocked
			// vqRooms = new Array();
			if (vqRooms[cvjs_active_floorplan_div_nr] == undefined){
				//window.alert("we define again!");
				vqRooms[cvjs_active_floorplan_div_nr] = new Array();
				
				
				
				console.log("QQQQQQQQQQQQQQQQQ third init vqRooms "+cvjs_active_floorplan_div_nr);
				

				
			}


if (cvjs_debug) 			console.log("AAAA BEFORE setupVqRoom  vqRooms.length "+vqRooms[cvjs_active_floorplan_div_nr].length+" buildings[vqBuilding].floors[vqFloor].rooms.length "+Object.keys(buildings[vqBuilding].floors[vqFloor].rooms).length);
			
			
			var uItem = new Array();
			//for (i=0; i<myNodes.numberOfNodes;i++){
			//	uItem[i]=cvjs_rPaper[cvjs_active_floorplan_div_nr].path(myNodes.nodes[i].path).data("node",myNodes.nodes[i].node);
			//	vqRooms[cvjs_active_floorplan_div_nr].push(uItem1);
			//}

			vqBuilding = "BUILDING_NAME_GOES_HERE";
			vqFloor = "FLOOR_NAME_GOES_HERE";

/*
			buildings = {
				BUILDING_NAME_GOES_HERE: {
					name: "",
					company: "",
					address: "",
					city: "",
					state: "",
					zipcode: "",
					country: "",
					FacMgr: "",
					FacMgr_title: "",
					FacMgr_email: "",
					FacMgr_phone: "",
					floors: {
						FLOOR_NAME_GOES_HERE: {
							name: "name_of_file_to_appear",
							file: "file_name",
							rooms: {
								NODE_1: {
									name: "",
									id: "",
									type: "",
									attributeStatus: "unpopulated",
									attributes: [{ name: "Room Id", value: ""},
											{ name: "FirstName", value: ""},
											{ name: "LastName", value: ""},
											{ name: "Phone", value: ""},
											{ name: "Building", value: ""},
											{ name: "Floor", value: ""},
											{ name: "Department", value: ""},
											{ name: "Division", value: ""},
											{ name: "Dept Name", value: ""},
											{ name: "Category", value: ""},
											{ name: "Type", value: ""},
											{ name: "Standard", value: ""}],
									occupancy: "",
									tags: { 1: ""},
									linked: false
									},
							}
						}
					}
				}
			}
*/

			buildings = {
				BUILDING_NAME_GOES_HERE: {
					name: "",
					company: "",
					address: "",
					city: "",
					state: "",
					zipcode: "",
					country: "",
					FacMgr: "",
					FacMgr_title: "",
					FacMgr_email: "",
					FacMgr_phone: "",
					floors: {
						FLOOR_NAME_GOES_HERE: {
							name: "name_of_file_to_appear",
							file: "file_name",
							rooms: {
							}
						}
					}
				}
			}

						
			//buildings[vqBuilding].floors[vqFloor].rooms = {};

if (cvjs_debug) console.log("before cvjs_nodes loop buildings[vqBuilding].floors[vqFloor].rooms "+buildings[vqBuilding].floors[vqFloor].rooms.length);


			// ROOMS LAYER, TEXT LAYER PARSING
			// 6.2.34
			if (true){
					// we have to clear the vqRooms layer, prior to creation:
					// 2018-02-09
					vqRooms[cvjs_active_floorplan_div_nr] = new Array();
		
					// add a click handler to all cvjs_nodes objects in the SVG file
				   var oArr = {};
				   // 6.2.34
				   jQuery(".cvjs_nodes, [id^=layer_]").each(function() {  
						var id = jQuery(this).attr('id');
						//console.log(" id="+id);

					    // new 2018-01-09   
						var searchString = "[id^="+floorplan_div_Array[cvjs_active_floorplan_div_nr]+"]";
					   	var svgID = jQuery("#"+id).parents(searchString).attr('id');
						
						if (svgID == floorplan_div_Array[cvjs_active_floorplan_div_nr])
							if (!oArr[id]) oArr[id] = true;
				   });


					var nodeVal = 0;

			//console.log("oArr.length"+oArr.length);
//			window.alert("cvjs_units "+cvjs_units);
					// 3.2.02d
					try {  // we set the units from the SVG matrix
						cvjs_units[cvjs_active_floorplan_div_nr] = worldUnits.units;
					}
					catch(err){  // if not, we default to mm
						cvjs_units[cvjs_active_floorplan_div_nr] = "mm";
					}
			
		
					// 6.2.34
					var currentLayerName = "XX";
					
					
				   for (var prop in oArr){
			//console.log("oArr  prop"+prop);
						try{
	
							var target = "#"+prop;
							
							if (cvjs_debug) console.log("target "+target);
							
							jQuery(target).each(function() {
							  jQuery.each(this.attributes, function() {
								if(this.specified) {
								  var cvname = (this.name).toString().toLowerCase();
								  if (cvname == "cvjs:layername") 
									  currentLayerName = this.value;  // all lowercase
								}
							  });
							});
						}catch(err){console.log("try catch layer");}
			
						try{
							var target = "#"+prop;
							var Node_path = jQuery(target).attr('d');
							nodeVal++;
							//var NodeX = "NODE_"+nodeVal.toString();
							var cvjsNode = "";  //  jQuery(target).attr('cvjs:node');
							var cvjsName = ""; // jQuery(target).attr('cvjs:name');
							var cvjsId = ""; // jQuery(target).attr('cvjs:roomId');
							var cvjsType = ""; // jQuery(target).attr('cvjs:type');
							var cvjsArea = ""; // jQuery(target).attr('cvjs:area');   // 3.1.20g
							jQuery(target).each(function() {
							  jQuery.each(this.attributes, function() {
								// this.attributes is not a plain object, but an array
								// of attribute nodes, which contain both the name and value
								if(this.specified) {
								  //console.log(this.name, this.value);
								  var cvname = (this.name).toString().toLowerCase();
								  if (cvname == "cvjs:roomid") cvjsId = this.value;  // all lowercase
								  if (cvname == "cvjs:name") cvjsName = this.value;
								  if (cvname == "cvjs:type") cvjsType = this.value;
								  if (cvname == "cvjs:node") cvjsNode = this.value;
								  if (cvname == "cvjs:area") cvjsArea = this.value;// 3.1.20g

								}
							  });
							});

							uItem[i]=cvjs_rPaper[cvjs_active_floorplan_div_nr].path(Node_path).data("node", cvjsNode);						
//console.log(i+" "+uItem[i]);														
							
							vqRooms[cvjs_active_floorplan_div_nr].push(uItem[i]);
							if (cvjsName == "") cvjsName = cvjsId;
							if (cvjsType == "") cvjsType = "Space";

// console.log(cvjs_units[cvjs_active_floorplan_div_nr]+" 1 ÅÅÅÅ "+cvjsArea+"  "+(Number(cvjsArea)/1550.003).toFixed(2)+" "+cvjsId);								
														
							
							// 3.2.02d							
							if (cvjs_units[cvjs_active_floorplan_div_nr] == "m"){
								if (cvjsArea != "") cvjsType += " <br>"+(Number(cvjsArea)).toFixed(2)+" m<sup>2</sup>";   // 3.1.20g
								if (cvjsArea != "") cvjsArea=(Number(cvjsArea)).toFixed(2)+" m2";
								
							}else if (cvjs_units[cvjs_active_floorplan_div_nr] == "cm"){
								// 3.1.20h
								if (cvjsArea != "") cvjsType += " <br>"+(Number(cvjsArea)/10000).toFixed(2)+" m<sup>2</sup>";   // 3.1.20g
								if (cvjsArea != "") cvjsArea=(Number(cvjsArea)/10000).toFixed(2)+" m2";
							}
							else if (cvjs_units[cvjs_active_floorplan_div_nr] == "mm"){
								// 3.1.20h
								if (cvjsArea != "") cvjsType += " <br>"+(Number(cvjsArea)/1000000).toFixed(2)+" m<sup>2</sup>";   // 3.1.20g
								if (cvjsArea != "") cvjsArea=(Number(cvjsArea)/1000000).toFixed(2)+" m2";
							}
							else if (cvjs_units[cvjs_active_floorplan_div_nr] == "in"){
								// 3.2.02g                     1550,003 in2 -> 1m
								
								if (cvjsArea != "") cvjsType += " <br>"+(Number(cvjsArea)/1550.003).toFixed(2)+" m<sup>2</sup>";   
								if (cvjsArea != "") cvjsArea=(Number(cvjsArea)/1550.003).toFixed(2)+" m2";
							}
							else{
								// 3.1.20h
								if (cvjsArea != "") cvjsType += " <br>"+(Number(cvjsArea)/1000000).toFixed(2)+" m<sup>2</sup>";   // 3.1.20g
								if (cvjsArea != "") cvjsArea=(Number(cvjsArea)/1000000).toFixed(2)+" m2";
								
							}
							
														
							//							console.log("Id "+cvjsId+" node "+cvjsNode+" name "+cvjsName+" type "+cvjsType);
							var node = {
											name: cvjsName,
											id: cvjsId,   // cvjsId
											type: cvjsType,
											area: cvjsArea,
											attributeStatus: "unpopulated",
											attributes: [{ name: "Room Id", value: ""},
													{ name: "FirstName", value: ""},
													{ name: "LastName", value: ""},
													{ name: "Phone", value: ""},
													{ name: "Building", value: ""},
													{ name: "Floor", value: ""},
													{ name: "Department", value: ""},
													{ name: "Division", value: ""},
													{ name: "Dept Name", value: ""},
													{ name: "Category", value: ""},
													{ name: "Type", value: ""},
													{ name: "Standard", value: ""}],
											occupancy: "",
											tags: { 1: ""},
											linked: true,
											handle: "",                     // 3.2.02e
											layer: currentLayerName,   // 6.2.34
											displaySpaceObject : "on"  // 6.2.34
											
									};
//							console.log(" Node "+NodeX+"     "+node);
							buildings[vqBuilding].floors[vqFloor].rooms[cvjsNode] = node;
						}
						catch(err){
							console.log("Err 8: "+err);
						}
					   // alert(prop);
				}
			}

			
/********   6.2.51  - remove handle processing			 */

			// AUTOCAD HANDLE PARSING
			if (true){

					// add a click handler to all cvjs_handle objects in the SVG file
				   var oArr = {};
				   jQuery(".cvjs_handles").each(function() {
					   var id = jQuery(this).attr('id');
					   
					    // new 2018-01-09
						var searchString = "[id^="+floorplan_div_Array[cvjs_active_floorplan_div_nr]+"]";
					   	var svgID = jQuery("#"+id).parents(searchString).attr('id');
						
						if (svgID == floorplan_div_Array[cvjs_active_floorplan_div_nr])
							if (!oArr[id]) oArr[id] = true;
				   
				   });

					var nodeVal = 0;

					var cccount = 0;
				    for (var prop in oArr){
						cccount++;
					}

//console.log("HERE QQQQQQQQQQQQQQQQQQQQQQQ    oArr.length " +oArr.size+"  floorplan "+"[id^="+floorplan_div_Array[cvjs_active_floorplan_div_nr]+"]");
//window.alert("HERE QQQQQQQQQQQQQQQQQQQQQQQ    oArr.length " +cccount+"  floorplan "+"[id^="+floorplan_div_Array[cvjs_active_floorplan_div_nr]+"]");

				   for (var prop in oArr){
			//console.log("oArr  prop"+prop);
						try{
							var target = "#"+prop;
							var Node_path = jQuery(target).attr('d');
							nodeVal++;
							//var NodeX = "NODE_"+nodeVal.toString();
							var cvjsNode = "";  //  jQuery(target).attr('cvjs:node');
							var cvjsName = ""; // jQuery(target).attr('cvjs:name');
							var cvjsId = ""; // jQuery(target).attr('cvjs:handle');
							var cvjsType = ""; // jQuery(target).attr('cvjs:type');
							var cvjsArea = ""; // jQuery(target).attr('cvjs:area');   // 3.1.20g

							var cvjsXdata = ""; // 3.2.02c
							var cvjsHandle = ""; // 3.2.02e;

							// we are setting the clone stroke width to 10x the original width

							jQuery(target).each(function() {
							  jQuery.each(this.attributes, function() {
								// this.attributes is not a plain object, but an array
								// of attribute nodes, which contain both the name and value
								if(this.specified) {
								  //console.log(this.name, this.value);
								  var cvname = (this.name).toString().toLowerCase();
								  if (cvname == "cvjs:handle"){
									  cvjsId = this.value;  // all lowercase
									  cvjsHandle = this.value;
									  //console.log("id + handle "+cvjsHandle+" target "+target+" prop"+prop);
									  var target_clone = prop + "_clone";	
									  //console.log("target_clone "+target_clone);									  
									  jQuery(target).clone().insertAfter(target).attr('id', target_clone);
									  var clonestroke = jQuery("#"+target_clone).css('stroke');
									  var clonestrokewidth = jQuery("#"+target_clone).css('stroke-width');
									  var elementOriginalTag = jQuery("#"+target_clone).get(0).tagName

									  if (elementOriginalTag == "text"){
										// do nothing§  
									  }
									  else{
										  if (clonestrokewidth.indexOf("px")>0) {
												clonestrokewidth = clonestrokewidth.substring(0, clonestrokewidth.indexOf("px"));
										  }
										  clonestrokewidth = parseFloat(clonestrokewidth)*10;
										 jQuery("#"+target_clone).css({'stroke-width':  clonestrokewidth+"px" });
									  }									  
									  jQuery("#"+target_clone).css({'opacity':0.01});
//console.log("target clone "+target_clone);									  
									  
									  jQuery("#"+target_clone).mouseover(function(e){

										    var localid = jQuery(this).attr('id');
											var myClass = jQuery(this).attr("class");
											var entity = "";										
											if (myClass.indexOf("AcDb")>-1){												
												entity = myClass.substring(myClass.indexOf("AcDb"));
												if (entity.indexOf(" ")>-1){														
													entity = entity.substring(0, entity.indexOf(" "));
												}													
											}	

											var handleId = "";
											//console.log("id "+localid+" "+this);
											jQuery(this).each(function() {
											  jQuery.each(this.attributes, function() {
													if (this.specified) {
													  var cvname = (this.name).toString().toLowerCase();
												      //console.log(localid+"  "+cvname + "  "+this.value);
														if (cvname == "cvjs:handle"){		
															handleId = this.value;
															if(localid.indexOf("_clone")>0)
																cvjs_mouseover(localid.substring(0, localid.indexOf("_clone")), handleId, entity);
															else
																cvjs_mouseover(localid , handleId, entity);
																
													  }
													};
											  });
											});
											
											
											if (cvjs_handleToolTip) {
												tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});			
												var tipText = "Handle: "+handleId;									
												tipText = tipText + "<br>" + entity;
										
												tip[cvjs_active_floorplan_div_nr].html(tipText);
												tip[cvjs_active_floorplan_div_nr].show();
													
												var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
												var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
												if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
												//console.log("absolute");
												   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
												}
												else{  // we have placed CV-JS inside a div and we have to make a relative position
													//console.log("inside");
													tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
												}
											}
									
									   });

									  jQuery("#"+target_clone).mouseenter(function(e){

										    var localid = jQuery(this).attr('id')
											var myClass = jQuery(this).attr("class");
											var entity = "";										
											if (myClass.indexOf("AcDb")>-1){												
												entity = myClass.substring(myClass.indexOf("AcDb"));
												if (entity.indexOf(" ")>-1){														
													entity = entity.substring(0, entity.indexOf(" "));
												}													
											}	
											jQuery(this).each(function() {
											  jQuery.each(this.attributes, function() {
													if (this.specified) {
													  var cvname = (this.name).toString().toLowerCase();
//												      console.log(localid+"  "+cvname + "  "+this.value);
														if (cvname == "cvjs:handle"){
	
															if(localid.indexOf("_clone")>0)
																cvjs_mouseenter(localid.substring(0, localid.indexOf("_clone")), this.value, entity);
															else
																cvjs_mouseenter(localid , this.value, entity);
													  }
													};
											  });
											});

									   });


									  jQuery("#"+target_clone).mouseout(function(e){

										    var localid = jQuery(this).attr('id')
											var myClass = jQuery(this).attr("class");
											var entity = "";										
											if (myClass.indexOf("AcDb")>-1){												
												entity = myClass.substring(myClass.indexOf("AcDb"));
												if (entity.indexOf(" ")>-1){														
													entity = entity.substring(0, entity.indexOf(" "));
												}													
											}	
											jQuery(this).each(function() {
											  jQuery.each(this.attributes, function() {
													if (this.specified) {
													  var cvname = (this.name).toString().toLowerCase();
//												      console.log(localid+"  "+cvname + "  "+this.value);
														if (cvname == "cvjs:handle"){
//															cvjs_mouseout(localid , this.value);
	
															if(localid.indexOf("_clone")>0)
																cvjs_mouseout(localid.substring(0, localid.indexOf("_clone")), this.value, entity);
															else
																cvjs_mouseout(localid , this.value, entity);

														}
													};
											  });
											});
											if (cvjs_handleToolTip){
												tip[cvjs_active_floorplan_div_nr].hide();
											}
									   });
									  jQuery("#"+target_clone).mouseleave(function(){

										    var localid = jQuery(this).attr('id')
											var myClass = jQuery(this).attr("class");
											var entity = "";										
											if (myClass.indexOf("AcDb")>-1){												
												entity = myClass.substring(myClass.indexOf("AcDb"));
												if (entity.indexOf(" ")>-1){														
													entity = entity.substring(0, entity.indexOf(" "));
												}													
											}	
											jQuery(this).each(function() {
											  jQuery.each(this.attributes, function() {
													if (this.specified) {
													  var cvname = (this.name).toString().toLowerCase();
	//											      console.log(localid+"  "+cvname + "  "+this.value);
														if (cvname == "cvjs:handle"){
		//													cvjs_mouseleave(localid , this.value);

															if(localid.indexOf("_clone")>0)
																cvjs_mouseleave(localid.substring(0, localid.indexOf("_clone")), this.value, entity);
															else
																cvjs_mouseleave(localid , this.value, entity);


													  }
													};
											  });
											});
									   });


									  jQuery("#"+target_clone).click(function(){

										    var localid = jQuery(this).attr('id')
											var myClass = jQuery(this).attr("class");
											var entity = "";										
											if (myClass.indexOf("AcDb")>-1){												
												entity = myClass.substring(myClass.indexOf("AcDb"));
												if (entity.indexOf(" ")>-1){														
													entity = entity.substring(0, entity.indexOf(" "));
												}													
											}	
											jQuery(this).each(function() {
											  jQuery.each(this.attributes, function() {
													if (this.specified) {
													  var cvname = (this.name).toString().toLowerCase();
														if (cvname == "cvjs:handle"){
															if(localid.indexOf("_clone")>0)
																cvjs_click(localid.substring(0, localid.indexOf("_clone")), this.value, entity);
															else
																cvjs_click(localid , this.value, entity);
													  }
													};
											  });
											});
									   });

									  jQuery("#"+target_clone).dblclick(function(){

										    var localid = jQuery(this).attr('id')
											var myClass = jQuery(this).attr("class");
											var entity = "";										
											if (myClass.indexOf("AcDb")>-1){												
												entity = myClass.substring(myClass.indexOf("AcDb"));
												if (entity.indexOf(" ")>-1){														
													entity = entity.substring(0, entity.indexOf(" "));
												}													
											}	
											jQuery(this).each(function() {
											  jQuery.each(this.attributes, function() {
													if (this.specified) {
													  var cvname = (this.name).toString().toLowerCase();
														if (cvname == "cvjs:handle"){

															if(localid.indexOf("_clone")>0)
																cvjs_dblclick(localid.substring(0, localid.indexOf("_clone")), this.value, entity);
															else
																cvjs_dblclick(localid , this.value, entity);
													  }
													};
											  });
											});

									   });																  
								  }
								  
								}
							  });
							});

							
/**  						*/

/*
							uItem[i]=cvjs_rPaper[cvjs_active_floorplan_div_nr].path(Node_path).data("node", cvjsNode);
//console.log(i+" "+uItem[i]);							

							// 3.2.02c
							var Objectlinked = false;
							if (cvjsXdata != ""){
								//
									console.log(i+" xdata field "+cvjsXdata);
									// if there is an xdata object we set linked to true and use the xdata as the Id
									Objectlinked = true;			
									cvjsId = cvjsXdata;
							}
							
							vqRooms[cvjs_active_floorplan_div_nr].push(uItem[i]);
							if (cvjsName == "") cvjsName = cvjsId;
							if (cvjsType == "") cvjsType = "Space";
							
							
//console.log(cvjs_units+" 2 ÅÅÅÅ "+cvjsArea+"  "+(Number(cvjsArea)/1550.003).toFixed(2));								
							
console.log(cvjs_units[cvjs_active_floorplan_div_nr]+" Before 2 ÅÅÅÅ "+cvjsArea+"  "+cvjsId);								
							
														
							// 3.2.02d							
							//window.alert("cvjs_units="+cvjs_units);
							if (cvjs_units[cvjs_active_floorplan_div_nr] == "m"){						
								//window.alert("we have m");
								if (cvjsArea != "") cvjsType += " <br>"+(Number(cvjsArea)).toFixed(2)+" m<sup>2</sup>";   // 3.1.20g
								if (cvjsArea != "") cvjsArea=(Number(cvjsArea)).toFixed(2)+" m2";
								
							}else if (cvjs_units[cvjs_active_floorplan_div_nr] == "cm"){
							
								//window.alert("we have cm");
								// 3.1.20h
								if (cvjsArea != "") cvjsType += " <br>"+(Number(cvjsArea)/10000.0).toFixed(2)+" m<sup>2</sup>";   // 3.1.20g
								if (cvjsArea != "") cvjsArea=(Number(cvjsArea)/10000.0).toFixed(2)+" m2";
							
							}							
							else if (cvjs_units[cvjs_active_floorplan_div_nr] == "mm"){
								//window.alert("we have mm");

								// 3.1.20h
								if (cvjsArea != "") cvjsType += " <br>"+(Number(cvjsArea)/1000000.0).toFixed(2)+" m<sup>2</sup>";   // 3.1.20g
								if (cvjsArea != "") cvjsArea=(Number(cvjsArea)/1000000.0).toFixed(2)+" m2";
							}
							else if (cvjs_units[cvjs_active_floorplan_div_nr] == "in"){
								// 3.2.02g                     1550,003 in2 -> 1m
								if (cvjsArea != "") cvjsType += " <br>"+(Number(cvjsArea)/1550.003).toFixed(2)+" m<sup>2</sup>";   
								if (cvjsArea != "") cvjsArea=(Number(cvjsArea)/1550.003).toFixed(2)+" m2";
							}
							else{
								//window.alert("we have no unit, use mm");
								// 3.1.20h
								if (cvjsArea != "") cvjsType += " <br>"+(Number(cvjsArea)/1000000.0).toFixed(2)+" m<sup>2</sup>";   // 3.1.20g
								if (cvjsArea != "") cvjsArea=(Number(cvjsArea)/1000000.0).toFixed(2)+" m2";
							}
							

console.log(cvjs_units[cvjs_active_floorplan_div_nr]+" after Area 2 ÅÅÅÅ "+cvjsArea+" "+cvjsId);								
							
							
							//if (cvjsArea != "") cvjsType += " <br>"+(Number(cvjsArea)/1000000).toFixed(2)+" m<sup>2</sup>";   // 3.1.20g
							//if (cvjsArea != "") cvjsArea=(Number(cvjsArea)/1000000).toFixed(2)+" m2";
							
// WE DO NOT YET HAVE AN USER MEAUREMENT UNIT FROM AX 
							
//							console.log("Id "+cvjsId+" node "+cvjsNode+" name "+cvjsName+" type "+cvjsType);
							var node = {
											name: cvjsName,
											id: cvjsId,   // cvjsId
											type: cvjsType,
											area: cvjsArea,
											attributeStatus: "unpopulated",
											attributes: [{ name: "Room Id", value: ""},
													{ name: "FirstName", value: ""},
													{ name: "LastName", value: ""},
													{ name: "Phone", value: ""},
													{ name: "Building", value: ""},
													{ name: "Floor", value: ""},
													{ name: "Department", value: ""},
													{ name: "Division", value: ""},
													{ name: "Dept Name", value: ""},
													{ name: "Category", value: ""},
													{ name: "Type", value: ""},
													{ name: "Standard", value: ""}],
											occupancy: "",
											tags: { 1: ""},
											linked: Objectlinked,   // 3.2.02c
											handle: cvjsHandle      // 3.2.02e

									};
//							console.log(" Node "+NodeX+"     "+node);
							buildings[vqBuilding].floors[vqFloor].rooms[cvjsNode] = node;
							
*/							
							
						}
						catch(err){
							console.log("Err 9: "+err);
						}
						
					   // alert(prop);
				
				}

			}


			
/*  6.2.52 ****/			
			
			
if (cvjs_debug) 			console.log("BEFORE setupVqRoom  vqRooms.length "+vqRooms[cvjs_active_floorplan_div_nr].length+" buildings[vqBuilding].floors[vqFloor].rooms.length "+Object.keys(buildings[vqBuilding].floors[vqFloor].rooms).length);

			if (!cvjs_Community_Version)
				setUpVqRooms(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_active_floorplan_div_nr);
			else
				layer_vqrooms[active_floorplan_div_nr] = paper.g();	

			cvjs_MinWidth = -1;   // if we have loaded a SVG but we started with a .JS, we have to tell the thickness method (indirectly) we have an SVG

		}catch(err){console.log("no buildings defined in metadata"+err);}
		//NOTE!     we need to build the vqRooms NODE arrays
		//NOTE!     we need to build the layer lists so the layer table can control them
	}





	try{

		try{

		cvjs_rPaper[cvjs_active_floorplan_div_nr].selectAll('text').attr({"stroke-width":"0"});
		cvjs_rPaper[cvjs_active_floorplan_div_nr].selectAll('path').attr({"stroke-linejoin":"round"});

		if (cvjs_PDFloadFlag){
			// if pdf conversion let the wait looper appear till pdfs are converted
		}
		else{
			// in all other cases, hide the wait-looper
			jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide(500);
		}


		if (page_change_modal_offset_flag[cvjs_active_floorplan_div_nr]){
			page_change_modal_offset_flag[cvjs_active_floorplan_div_nr] = false;

			// set the location of the navigation menu if enabled
			if (pageChangeInterface[cvjs_interfaceCounterIndex(floorplan_div_Array[cvjs_active_floorplan_div_nr])]){
				jQuery('#floatNavigationMenu_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).show();
				var pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
				var posmenu_x = pos.top+5;
//				var posmenu_x = pos.top+20;
//				var posmenu_y = pos.left+jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width()-350;
//				var posmenu_y = pos.left+jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width()-415;
				var posmenu_y = pos.left+jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width()-475;

				if (posmenu_y <40) posmenu_y = 40;
				jQuery('#floatNavigationMenu_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).offset({ top: posmenu_x, left: posmenu_y });

//				jQuery('#floatpagemenuText_'+floorplan_div).offset({ left: posmenu_y+168 });

			}
		}

		}
		catch (change_modal_err){console.log("LoadEnd: change_modal: "+change_modal_err);}


		try{



		var pageNr = "";

		// now we set the pagesArray to the SVG multipage Array, if we have multipage SVG files
		if (cvjs_SVG_multiPagesFlag[cvjs_active_floorplan_div_nr]){
				//window.alert("before multiPages[cvjs_active_floorplan_div_nr] "+cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].multiPages+" "+multiPages[cvjs_active_floorplan_div_nr].multiPages+" currentpage "+multiPages[cvjs_active_floorplan_div_nr].currentPage);
				pageNr = cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].currentPage+"/"+cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].multiPages;
		}
		else  // normal case
			pageNr = multiPages[cvjs_active_floorplan_div_nr].currentPage+"/"+multiPages[cvjs_active_floorplan_div_nr].multiPages;


		//var pageNr="1/11";
		var len = pageNr.length;


		// 3.3.01b
		jQuery('#floatpagemenuText1_topBar_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(pageNr);
//		jQuery('#floatpagemenuText2_topBar_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(pageText);


		
		pageNr = "&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp" + pageNr;
		
//window.alert(len);		
		
		if (len>=7) {
			// do nothing
			pageNr = pageNr+"";
			len +=1 ;
		}
		else
		if (len==6) {
			pageNr = "&nbsp" + pageNr;
			len = 9;
		}
		else
		if (len==5) {
			pageNr = "&nbsp&nbsp" + pageNr;
			len = 9;
		}
		else
		if (len==4) {
			pageNr = "&nbsp&nbsp&nbsp&nbsp" + pageNr;
			len = 9;
			}
		else
		if (len==3){
			pageNr = "&nbsp&nbsp&nbsp&nbsp&nbsp" + pageNr+ "&nbsp";
			len = 9;
		}
		

//		window.alert(len+"  "+pageNr.length+"X"+pageNr+"X");


		pageNr = pageNr + "&nbsp&nbsp&nbsp&nbsp";
		
		
		
		
		var pageText;

		if (cvjs_SVG_multiPagesFlag[cvjs_active_floorplan_div_nr]){


			// 3.1.21d
			var myPageName = "";
			//window.alert(multiPages[cvjs_active_floorplan_div_nr].pages[i].pageName)
			
			if (cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].pages[cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].currentPage-1].pageName.indexOf("com.autodesk")>-1)
				myPageName = "Layout"
			else
				myPageName = cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].pages[cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].currentPage-1].pageName;
		
			pageText = myPageName;
			//pageText = cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].pages[cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].currentPage-1].pageName;
		}
		else {// normal case
		
			// 3.1.21d
			var myPageName = "";
			//window.alert(multiPages[cvjs_active_floorplan_div_nr].pages[i].pageName)
			
			if (multiPages[cvjs_active_floorplan_div_nr].pages[multiPages[cvjs_active_floorplan_div_nr].currentPage-1].pageName.indexOf("com.autodesk")>-1)
				myPageName = "Layout"
			else
				myPageName = multiPages[cvjs_active_floorplan_div_nr].pages[multiPages[cvjs_active_floorplan_div_nr].currentPage-1].pageName;
		
			pageText = myPageName;

			//pageText = multiPages[cvjs_active_floorplan_div_nr].pages[multiPages[cvjs_active_floorplan_div_nr].currentPage-1].pageName;
		}	
			
		//window.alert(pageText);


		//var pageText = "Xxxxxxxxxxxxxxxxxxxxxxxxx";
		len = pageText.length;
		if (len>24) pageText = pageText.substring(0,22)+"..";
	

			// 3.3.01b
//		jQuery('#floatpagemenuText1_topBar_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(pageNr);
		jQuery('#floatpagemenuText2_topBar_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(pageText);
		//console.log("floatpagemenuText2_topBar_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]+"  "+pageText);	

		
		
		var pageString = pageNr+"  "+pageText;
		jQuery('#floatpagemenuText_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(pageString);

	
		
		// now we set the pagesArray to the SVG multipage Array for navigation
		if (cvjs_SVG_multiPagesFlag[cvjs_active_floorplan_div_nr]) multiPages[cvjs_active_floorplan_div_nr] = cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr];


		}
		catch (pageNr_err){
			
			console.log("LoadEnd: pageNr_err: "+pageNr_err);
			
			pageNr ="&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp" +  "&nbsp&nbsp&nbsp1/1&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp";
		
			pageText = "Single Page";
		
			var pageString = pageNr+"  "+pageText;

			jQuery('#floatpagemenuText_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(pageString);			


			// 3.3.01b
			jQuery('#floatpagemenuText1_topBar_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("1/1");
			jQuery('#floatpagemenuText2_topBar_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("Single Page");

			
		}
		// set the scale parameter for redline thickness

/// normalized factor for redline thickness based on size of loaded drawing, typically
/// 1/300 of a 2000 width drawing


		try{

			var lfactor = Math.sqrt(Math.pow((actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr]) ,2)+Math.pow((actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr]) ,2))
			cvjs_redlineThickness_scaleFactor = cvjs_redlineThickness_drawingFactor * lfactor;
			first_thickness = true;
			//console.log("cvjs_redlineThickness_scaleFactor "+cvjs_redlineThickness_scaleFactor);

			// reset Birds-Eye:
			if (cvjs_displayMagnifyingGlassFlag[cvjs_active_floorplan_div_nr]){ cvjs_displayMagnifyingGlassFlag[cvjs_active_floorplan_div_nr] = false; cvjs_exitBirdsEye(floorplan_div_Array[cvjs_active_floorplan_div_nr]);}

			cvjs_calibratedMeasurement = false;   // we reset calibration with each page load  2016-08-04
			cvjs_clearDrawingStickyNotes();   //2016-09-04

			if (!cvjs_Community_Version)
				cvjs_updateDrawingRedlines(cvjs_redlineStickyNoteLayer[cvjs_active_floorplan_div_nr]);
			
			// 3.0.13k   removing double key check
			//cvjs_checkLicense();
		}
		catch (license_div_err){console.log("LoadEnd: magnify, clear, update, checkLicense: "+license_div_err);}

	}
	catch(err){
		console.log(" 1 LoadEnd: "+err);
	}


	var radius = 40;
	var r1;
	var lastx, lasty;



	function pausecomp(millis){
	var date = new Date();
	var curDate = null;

	do { curDate = new Date(); }
	while(curDate-date < millis);

	}

	// this has been moved from OnLoadEnd, which is now behind the drag defintions of masterbackground
	cvjs_resetZoomPan_SetMasterBackground(cvjs_active_floorplan_div_nr);	


	cvjs_floorplan_div = floorplan_div;
	cvjs_masterBackground[cvjs_active_floorplan_div_nr].drag(dragMove, dragStart, dragEnd);

	
	cvjs_masterBackground[cvjs_active_floorplan_div_nr].mousedown(function (e) {
		currentMasterDiv = this.data("id");
		currentMasterDiv = currentMasterDiv.substring(7);  //  master_floorPlan1_svg, etc....		
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
		if (cvjs_debug) console.log(currentMasterDiv+"  "+cvjs_active_floorplan_div_nr+"    active_floorplan_div_nr");
	});

	cvjs_masterBackground[cvjs_active_floorplan_div_nr].mouseup(function (e) {	
		if (!cvjs_Community_Version)
			layer_vqrooms[cvjs_active_floorplan_div_nr].attr(show);
			// focus on room polygons is taken over by this class
			if (dragInsidePolygon && totalDragStart == 0){
				dragInsidePolygon = false;
				DoMouseUp(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
				setRoomAfterPanPC();
			}
	});
	
	cvjs_masterBackground[cvjs_active_floorplan_div_nr].mousemove(function (e) {

	try{

		mousex = e.clientX+document.body.scrollLeft;
		mousey = e.clientY+document.body.scrollTop;

		try{
		  if (!cvjs_Community_Version)
			if (tooltipLast[cvjs_active_floorplan_div_nr] != lastObj[cvjs_active_floorplan_div_nr]  && cvjs_location_flag && tooltipLast[cvjs_active_floorplan_div_nr]!=-1){

				if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors){
					vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[active_floorplan_div_nr]].attr(defaultColor);
				}
				else{
					if (vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[active_floorplan_div_nr]].data("linked")){
						vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[active_floorplan_div_nr]].attr(defaultColor_linked);
					}
					else{
						vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[active_floorplan_div_nr]].attr(defaultColor_unlinked);
					}
				}

				tip[cvjs_active_floorplan_div_nr].hide();
			}
		} catch (err2){};

		try{
			if (tooltipLastStickyNote != lastObjStickyNote[cvjs_active_floorplan_div_nr]  && cvjs_location_flag){

				//vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[active_floorplan_div_nr]].attr(defaultColor);

				if (!cvjs_supressPopUpModal){
					vqStickyNotes[tooltipLastStickyNote].attr(defaultColor_StickyNotes);
				}
				else{
					if (vqStickyNotes[tooltipLastStickyNote].data("linked")){
						vqStickyNotes[tooltipLastStickyNote].attr(defaultColor_linked);
					}
					else{
						vqStickyNotes[tooltipLastStickyNote].attr(defaultColor_unlinked);
					}
				}
				tip[cvjs_active_floorplan_div_nr].hide();
			}
		} catch (err3){};


		try{
			if (tooltipLastHyperlink != lastObjHyperlink[cvjs_active_floorplan_div_nr]  && cvjs_location_flag){

				if (!cvjs_supressHyperlinkColors){
					vqURLs[tooltipLastHyperlink].attr(defaultColor_Hyperlinks);
				}
				else{
					vqURLs[tooltipLastHyperlink].attr(defaultColor_Hyperlinks_blank);  // set colors ( note: change attribute name to something more applicable
				}

				tip[cvjs_active_floorplan_div_nr].hide();
			}
		} catch (err4){};



		// here we have to give control to stuff in setupvqroooms, if a drag operation is in progress on a non touch-device
		// focus on room polygons is taken over by this class

		if (dragInsidePolygon && totalDragStart == 0){


//string_X = "cvjs_masterbackground[cvjs_active_floorplan_div_nr] mouse move e.clientX="+e.clientX+" "+e.clientY+" lastDx="+lastDx+" lastDy="+lastDy;
//jQuery('#temperature').css('color', '#FF00FF');
//jQuery("#temperature").html(string_X);

		dx = e.clientX+document.body.scrollLeft;
		dy = e.clientY+document.body.scrollTop;

//string_X = "cvjs_masterbackground[cvjs_active_floorplan_div_nr] mouse move e.clientX="+e.clientX+" "+e.clientY+" lastDx="+lastDx+" lastDy="+lastDy+" vbx="+vbx+" vby="+vby;
//jQuery('#temperature').css('color', '#FF00FF');
//jQuery("#temperature").html(string_X);

		DoMouseMove(dx, dy);


		}

}
catch(err){

//string_X = "error "+err;
//jQuery('#temperature').css('color', '#FF00FF');
//jQuery("#temperature").html(string_X);

}




				})
			.touchstart(function(event) {	//// TOUCH START

//string_X = "cvjs_masterbackground[cvjs_active_floorplan_div_nr] touch start";
//jQuery('#temperature').css('color', '#FF00FF');
//jQuery("#temperature").html(string_X);

		preventDrag = true;

//console.log("touch start");

ttest=0;
		event.preventDefault();
		event.stopPropagation();

		if (!thumb_loaded){
			thumb_loaded = true;
			try{

// console.log("before drawThumb touchstart");


				drawThumb(cvjs_rPaper[cvjs_active_floorplan_div_nr]);
			}
			catch(err){
				//  allow the code to work with both version 1.1 and 1.2
				//console.log(err);
			}
//console.log("drawThumb");
		}


		try{

			if (totalDragStart == 0){    // only turn layers off in init cast



	//  find the case where the thumb layers should be used
	//			layer_thumb.attr(show);
	//			layers_all.attr(hide);



				if (panWithThumb){
					//layers_all.hide();
					//layer_thumb.show();
					layers_all.attr(hide);
					layer_thumb.attr(show);


					// this is for SVG files created with TMS   2017-09-04
					all_layer_off_thumb_on();


				}

console.log("hide vqrooms");
				
				layer_vqrooms[cvjs_active_floorplan_div_nr].attr(hide);



//ZZZZZZZ
//				layer_thumb.show();
//				layers_all.hide();
//				layer_vqrooms[cvjs_active_floorplan_div_nr].hide();


			}


		}
		catch(err){
			//  allow the code to work with both version 1.1 and 1.2
			console.log("t9 "+err);
		}





			try{


				firstFingerX = event.touches[0].pageX;
				firstFingerY = event.touches[0].pageY;

				//console.log("event.touches[0].pageX="+event.touches[0].pageX+" event.touches[0].pageY="+event.touches[0].pageY);
				totalDragStart = 1;
				preventDrag = false;

				//console.log("event.touches[1].pageX="+event.touches[1].pageX+" event.touches[1].pageY="+event.touches[1].pageY);
				secondFingerX = event.touches[1].pageX;
				secondFingerY = event.touches[1].pageY;
				totalDragStart = 2;
				preventDrag = true;

				allowPinchInPolygons = false;


				deltaXinit= secondFingerX - firstFingerX;
				deltaYinit= secondFingerY - firstFingerY;

				// the difference between two fingers
				deltaBase = Math.sqrt(deltaXinit*deltaXinit + deltaYinit*deltaYinit);

				deltaDynamicPre = deltaBase;

				viewBoxWidthPre = viewBoxWidth[cvjs_active_floorplan_div_nr];
				viewBoxheightPre = viewBoxHeight[cvjs_active_floorplan_div_nr];

				firstFingerX1 = firstFingerX;
				firstFingerY1 = firstFingerY;
				firstFingerX_init = firstFingerX;
				firstFingerY_init = firstFingerY;


				viewBox_initX[cvjs_active_floorplan_div_nr] = viewBox[cvjs_active_floorplan_div_nr].X;
				viewBox_initY[cvjs_active_floorplan_div_nr] = viewBox[cvjs_active_floorplan_div_nr].Y;

				viewBoxWidth_init[cvjs_active_floorplan_div_nr] = viewBoxWidth[cvjs_active_floorplan_div_nr];
				viewBoxHeight_init[cvjs_active_floorplan_div_nr] = viewBoxHeight[cvjs_active_floorplan_div_nr];

				flagOK = true;


				//viewBoxWidth[cvjs_active_floorplan_div_nr]  = cvjs_rPaper[cvjs_active_floorplan_div_nr].width;
				//viewBoxHeight[cvjs_active_floorplan_div_nr] = cvjs_rPaper[cvjs_active_floorplan_div_nr].height;



			}
			catch(err){
				//console.log("vqjs_38 1 : "+err);

				var dummy=1;
			}


//string_X = "touchstart "+totalDragStart;
//string_X = "allowPinchInPolygons "+allowPinchInPolygons;
//jQuery('#occupancy').css('color', '#FF00FF');
//jQuery("#occupancy").html(string_X);

				})

			.touchend(function(event) {         //// TOUCH END

//string_X = "cvjs_masterbackground[cvjs_active_floorplan_div_nr] touch end";
//jQuery('#temperature').css('color', '#FF00FF');
//jQuery("#temperature").html(string_X);

				preventDrag = true;


				if (totalDragStart == 2){

					event.preventDefault();
					event.stopPropagation();
					tip[cvjs_active_floorplan_div_nr].hide();
					if (!cvjs_Community_Version) hideOnlyPop();
				}




				try{


					if (totalDragStart == 2){


						viewBox[cvjs_active_floorplan_div_nr].X = viewBox_initX[cvjs_active_floorplan_div_nr];
						viewBox[cvjs_active_floorplan_div_nr].Y = viewBox_initY[cvjs_active_floorplan_div_nr];
						vBHo = viewBoxHeight_init[cvjs_active_floorplan_div_nr];
						vBWo = viewBoxWidth_init[cvjs_active_floorplan_div_nr];
						viewBoxWidth[cvjs_active_floorplan_div_nr] = viewBoxWidth_init[cvjs_active_floorplan_div_nr];
						viewBoxHeight[cvjs_active_floorplan_div_nr] = viewBoxHeight_init[cvjs_active_floorplan_div_nr];
						viewBoxWidth[cvjs_active_floorplan_div_nr] /= deltaDynamic/deltaBase;
						viewBoxHeight[cvjs_active_floorplan_div_nr]/= deltaDynamic/deltaBase;

						viewBox[cvjs_active_floorplan_div_nr].X -= (viewBoxWidth[cvjs_active_floorplan_div_nr] - vBWo) / 2;
						viewBox[cvjs_active_floorplan_div_nr].Y -= (viewBoxHeight[cvjs_active_floorplan_div_nr] - vBHo) / 2;

						zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/rpWidth[cvjs_active_floorplan_div_nr];


						var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
						var json_obj = jQuery.parseJSON(attr_2);
						cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);
					}

					totalDragStart = 0;

					if (!cvjs_Community_Version)
						layer_vqrooms[cvjs_active_floorplan_div_nr].attr(show);



					if (panWithThumb){
//						layers_all.show();
//						layer_thumb.hide();
						layers_all.attr(show);
						layer_thumb.attr(hide);

						// for SVG drawings from AX, 2017-09-04
						all_layer_on_thumb_off();

					}





				}
				catch(err){
					//  allow the code to work with both version 1.1 and 1.2
					console.log(err);
				}




				})

			.touchmove(function(event) {       //// TOUCH MOVE

string_X = "cvjs_masterbackground[cvjs_active_floorplan_div_nr] touch move event.touches[0].pageXY="+event.touches[0].pageX+"  "+event.touches[0].pageY+"  "+" dragstart="+totalDragStart;
jQuery('#movements3').css('color', '#FF00FF');
jQuery("#movements3").html(string_X);

			 if (preventDrag){
			 	event.stopPropagation();
				event.preventDefault();
			 }

			// disable drag move
			if (totalDragStart == 2){
				event.stopPropagation();
				event.preventDefault();
				tip[cvjs_active_floorplan_div_nr].hide();
				if (!cvjs_Community_Version) hideOnlyPop();
			}



			if (totalDragStart == 2){


				try{

					firstFingerX = event.touches[0].pageX;
					firstFingerY = event.touches[0].pageY;

					//console.log("event.touches[0].pageX="+event.touches[0].pageX+" event.touches[0].pageY="+event.touches[0].pageY);
					totalDragStart = 1;
					preventDrag = false;

					//console.log("event.touches[1].pageX="+event.touches[1].pageX+" event.touches[1].pageY="+event.touches[1].pageY);
					secondFingerX = event.touches[1].pageX;
					secondFingerY = event.touches[1].pageY;
					totalDragStart = 2;
					preventDrag = true;

					deltaX= secondFingerX - firstFingerX;
					deltaY= secondFingerY - firstFingerY;

					// zoom the difference between fingers

					//
					//deltaDynamic = Math.sqrt(deltaX*deltaX + deltaY*deltaY)/deltaBase;
					deltaDynamic = Math.sqrt(deltaX*deltaX + deltaY*deltaY);


string_X = "event.touches[1].pageX="+event.touches[1].pageX+"  "+deltaDynamic+"  "+" pre="+deltaDynamicPre;
jQuery('#movements').css('color', '#FF00FF');
jQuery("#movements").html(string_X);

					// if deltaDynamic > 1 zoom in
					// if deltaDynamic < 1 zoom out


	if ((deltaDynamic-deltaDynamicPre > 4 || deltaDynamic-deltaDynamicPre < -4 ) && flagOK){

						flagOK = false;

						deltaDynamicPre = deltaDynamic;

						viewBox[cvjs_active_floorplan_div_nr].X = viewBox_initX[cvjs_active_floorplan_div_nr];
						viewBox[cvjs_active_floorplan_div_nr].Y = viewBox_initY[cvjs_active_floorplan_div_nr];

						vBHo = viewBoxHeight_init[cvjs_active_floorplan_div_nr];
						vBWo = viewBoxWidth_init[cvjs_active_floorplan_div_nr];

						viewBoxWidth[cvjs_active_floorplan_div_nr] = viewBoxWidth_init[cvjs_active_floorplan_div_nr];
						viewBoxHeight[cvjs_active_floorplan_div_nr] = viewBoxHeight_init[cvjs_active_floorplan_div_nr];
						viewBoxWidth[cvjs_active_floorplan_div_nr] /= deltaDynamic/deltaBase;
						viewBoxHeight[cvjs_active_floorplan_div_nr]/= deltaDynamic/deltaBase;

						viewBox[cvjs_active_floorplan_div_nr].X -= (viewBoxWidth[cvjs_active_floorplan_div_nr] - vBWo) / 2;
						viewBox[cvjs_active_floorplan_div_nr].Y -= (viewBoxHeight[cvjs_active_floorplan_div_nr] - vBHo) / 2;

						//viewBox[cvjs_active_floorplan_div_nr].X -= (firstFingerX-firstFingerX_init);
						//viewBox[cvjs_active_floorplan_div_nr].Y -= (firstFingerY-firstFingerY_init);

						//viewBox[cvjs_active_floorplan_div_nr].X -= (firstFingerX-firstFingerX_init)*(deltaDynamic/deltaBase);
						//viewBox[cvjs_active_floorplan_div_nr].Y -= (firstFingerY-firstFingerY_init)*(deltaDynamic/deltaBase);

						//setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], viewBox[cvjs_active_floorplan_div_nr].X,viewBox[cvjs_active_floorplan_div_nr].Y,viewBoxWidth[cvjs_active_floorplan_div_nr],viewBoxHeight[cvjs_active_floorplan_div_nr]);

//NNN						zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/cvjs_rPaper[cvjs_active_floorplan_div_nr].width;

//console.log("xx2 viewBoxWidth[cvjs_active_floorplan_div_nr] "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" rpWidth[cvjs_active_floorplan_div_nr] "+rpWidth[cvjs_active_floorplan_div_nr]);

						zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/rpWidth[cvjs_active_floorplan_div_nr];

						var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
//console.log("x4 attr_2="+attr_2);
						var json_obj = jQuery.parseJSON(attr_2);
						cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);


//NNN						setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], viewBox[cvjs_active_floorplan_div_nr].X, viewBox[cvjs_active_floorplan_div_nr].Y, viewBoxWidth[cvjs_active_floorplan_div_nr], viewBoxHeight[cvjs_active_floorplan_div_nr]);
						//cvjs_rPaper[cvjs_active_floorplan_div_nr].setViewBox(viewBox[cvjs_active_floorplan_div_nr].X, viewBox[cvjs_active_floorplan_div_nr].Y, viewBoxWidth[cvjs_active_floorplan_div_nr], viewBoxHeight[cvjs_active_floorplan_div_nr]);


						var vb1X = viewBox[cvjs_active_floorplan_div_nr].X;
						var vb1Y = viewBox[cvjs_active_floorplan_div_nr].Y;


						firstFingerX1 = firstFingerX;
						firstFingerY1 = firstFingerY;

						flagOK = true;


				}




				}
				catch(err){
					//console.log(err);

					//console.log("vqjs_38 2 : "+err);

					var dummy2=1;

				}
			}

//console.log("touch move event="+event);
// make a zoom based on finger touch
	});


	jQuery("#waitpane").hide();

//		console.log("XXXX");

	 cvjs_change_space(0);  // clear the spaces   2014-01-19

	 
	 ////    ONLOAD END         ONLOAD END 
	// forcing Resize for PDF load	
	
	ResizeVq(jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width(), jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height());


		//  With xlinks, the hyperlinks are in the SVG we need to have the masterbackground first in the set. For NODE_, we create them on masterBackground so do not need (but still use)
		try{
			cvjs_SVGGroup[cvjs_active_floorplan_div_nr].before(cvjs_masterBackground[cvjs_active_floorplan_div_nr]);
			
		}
		catch(err1){console.log("error setting masterbackground first");}
				 
	 	if (cvjs_customMethodForOnLoadEnd){
			try{
				
				// 2018-05-10;
				cvjs_loadInProgress = false;
				
				
				cvjs_myOnLoadEndMethod();  // call my OnLoadEndMethod as an alternative to OnLoadEnd();
			}catch(exception) { console.log("Please define cvjs_myOnLoadEndMethod in your encapsulating code: "+exception); }
		}
		else{
			try{
				
//console.log("before reset zoompan "+cvjs_active_floorplan_div_nr+"  "+cvjs_rPaper[cvjs_active_floorplan_div_nr].toString().substring(0,100));
				var fplan = floorplan_div_Array[cvjs_active_floorplan_div_nr].slice(0, -4);								

				// allowing load of drawings
				cvjs_loadInProgress = false;

				// we set the rotation to 0 with page change or new drawing
				cvjs_currentRotationAngle[cvjs_active_floorplan_div_nr] = 0;

//				window.alert("dragback 2 "+floorplan_div_Array[cvjs_active_floorplan_div_nr]+"  "+cvjs_preConversionFileExtension[cvjs_active_floorplan_div_nr])				
				// 3.0.14d   - if pdf we put masterbackground on top for bitmaps 
				if (cvjs_preConversionFileExtension[cvjs_active_floorplan_div_nr].indexOf("pdf")==0){
					cvjs_dragBackgroundToFront_SVG(fplan);
				}
//window.alert("before cvjs_OnLoadEnd("+fplan+")");
	
				// 6.2.33
				cvjs_currentBackgroundColor[cvjs_active_floorplan_div_nr] = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css("background-color");
	
				cvjs_OnLoadEnd(fplan);        // generic method name OnLoadEnd();
				
			}catch(exception) { console.log("Please define cvjs_OnLoadEnd in your encapsulating code: "+exception); }
		}

		if (cvjs_compareDrawings){
			try{
				cvjs_OnLoadEndCompareDrawings();        // generic method name OnLoadEnd();
			}catch(exception) { console.log("Please define cvjs_OnLoadEndCompareDrawings in your encapsulating code: "+exception); }
		}

	// Let us build the LayerNameModal	 
	
	var  selectString = '<option value=\"1\">'+languageTable.languages[cvjs_currentLanguage].LayerListModal.BaseAndXref+'</option>';

	for (k=0; k<XrefFileList.length;k++){
		selectString = selectString + '<option value=\"'+(k+2)+'\">'+languageTable.languages[cvjs_currentLanguage].LayerListModal.Xref+" "+XrefFileList[k]+'</option>';
	}

	if (cvjs_debug) console.log(" selectString  " + selectString);
	jQuery('#cvjs_SelectLayerDrawings').multiselect('destroy');
	jQuery("#cvjs_SelectLayerDrawings").empty();		
	jQuery("#cvjs_SelectLayerDrawings").append(selectString);
	jQuery('#cvjs_SelectLayerDrawings').multiselect({
		includeSelectAllOption: true
	});
	jQuery('#cvjs_SelectLayerDrawings option').each(function(){
			this.selected=true;
	});
	jQuery('#cvjs_SelectLayerDrawings').multiselect("refresh");

}  // END OF VQSETUP  - END OF VQSETUP - END OF VQSETUP - END OF VQSETUP


var scroll_locationX;
var scroll_locationY;
//var cvjs_scrollMouse_intialized = false;
var cvjs_scrollMouse_intialized = new Array();


function cvjs_addMouseWheelControls(floorplan_div_nr){


	if (cvjs_debug) console.log(floorplan_div_nr+"   "+cvjs_scrollMouse_intialized[floorplan_div_nr]);

	if (cvjs_scrollMouse_intialized[floorplan_div_nr]){	
		return;   // we return because it already is initalized
	}
	else{
		cvjs_scrollMouse_intialized[floorplan_div_nr] = true;   // we set to true and continue
	}
	
	
	var floorplan_div = floorplan_div_Array[floorplan_div_nr]
	
	
	// implement scrollwheel
    var isFirefox = /Firefox/i.test(navigator.userAgent);

	if (isFirefox){

	   jQuery('#'+floorplan_div).mousemove(function(e){
			scroll_locationX = e.pageX;
			scroll_locationY = e.pageY;
		});



		jQuery('#'+floorplan_div).bind('DOMMouseScroll', function(e){

			var x = scroll_locationX;     // Get the horizontal coordinate
			var y = scroll_locationY;     // Get the vertical coordinate


			 if(e.originalEvent.detail > 0) {
				 //scroll down
if (cvjs_debug) 				 console.log('Down Firefox '+floorplan_div);
				 cvjs_zoomOutMouseWheel(x , y, floorplan_div);
			 }else {
				 //scroll up
if (cvjs_debug) 				 console.log('Up Firefox '+floorplan_div);
				 cvjs_zoomInMouseWheel(x, y, floorplan_div);
			 }

			 //prevent page fom scrolling
			 return false;
		 });
	}
	else{
		 //IE, Opera, Safari, Chrome
		 jQuery('#'+floorplan_div).bind('mousewheel', function(e){


			var x = event.clientX;     // Get the horizontal coordinate
			var y = event.clientY;     // Get the vertical coordinate

			 if(e.originalEvent.wheelDelta < 0) {
				 //scroll down
if (cvjs_debug) 				 console.log('Down  Chrome IE Safari '+floorplan_div);
				 cvjs_zoomOutMouseWheel(x ,y , floorplan_div);
			 }else {
				 //scroll up
if (cvjs_debug) 				 console.log('Up Chrome IE Safari '+floorplan_div);
				 cvjs_zoomInMouseWheel(x ,y , floorplan_div, x, y);
			 }

			 //prevent page fom scrolling
			 return false;
		 });
	}

}

var cvjs_SVGCallbackMethod;

function cvjs_addHandleFunc_findSVGcoordinates(mySVGCallbackMethod) {

	cvjs_SVGCallbackMethod = mySVGCallbackMethod;
	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});
	handleGroup.mousedown(mousedown_cvjs_svgCoord);
}


var mousedown_cvjs_svgCoord = function(e,x,y) {

	var svg_x = (x - delta_x)/global_scale;
	var svg_y = (y - delta_y)/global_scale;

	//window.alert("SVG coordinates: " + svg_x+"  "+svg_y);

	cvjs_SVGCallbackMethod(svg_x, svg_y);

	handleGroup.selectAll('handler').remove();
	handleGroup.remove();

}




var cvjs_SVGCallbackMethod2;

function cvjs_addHandleFunc_clickSVGobject(mySVGCallbackMethod) {

	cvjs_SVGCallbackMethod2 = mySVGCallbackMethod;
	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});
	handleGroup.mousedown(mousedown_cvjs_svgObject);




}


var mousedown_cvjs_svgObject = function(e,x,y) {

	var svg_x = (x - delta_x)/global_scale;
	var svg_y = (y - delta_y)/global_scale;

//	cvjs_SVGCallbackMethod(svg_x, svg_y);

	handleGroup.selectAll('handler').remove();
	handleGroup.remove();

}



/**
 * Activated the Zoom Window command
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */
function cvjs_zoomWindow(floorplan_div)
{

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (cvjs_debug) console.log(floorplan_div.lastIndexOf("_svg")+"  "+(floorplan_div.length-4));
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	


	if (panWithThumb){

		try{
	
			layers_all.attr(hide);
			layer_thumb.attr(show);
			if (!cvjs_Community_Version)
				layer_vqrooms[cvjs_active_floorplan_div_nr].attr(show);
			
			// this is for SVG files created with TMS   2017-09-04
			all_layer_off_thumb_on();

		}
		catch(err) { console.log("ZoomWindow "+err);}
		
	}

	
	
	
	firstX_r = 0;
	firstY_r = 0;
	lastX_r = 0;
	lastY_r = 0;
	flag_rectangle = false;	
	
	

	// 2017-08-20  block double click or additional single click
	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;

	if (!cvjs_Community_Version) hideOnlyPop();
	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);  // we are telling what the active winedow is
	cvjs_addHandleFunc_ZoomWindow(floorplan_div);





if (cvjs_debug) console.log("Zoom Window!!!"+floorplan_div);

//NNN	setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], viewBox[cvjs_active_floorplan_div_nr].X+50,viewBox[cvjs_active_floorplan_div_nr].Y,viewBoxWidth[cvjs_active_floorplan_div_nr],viewBoxHeight[cvjs_active_floorplan_div_nr]);

}




function cvjs_addHandleFunc_ZoomWindow(floorplan_div) {

	tPath_r = "M" + firstX_r + "," + firstY_r;
	tRubberBand_r = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_r).attr({stroke: "#b00000", fill : "none"});

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,90, '');

	canvas_width = jQuery("#"+floorplan_div).width();
	canvas_height = jQuery("#"+floorplan_div).height();

//console.log(floorplan_div+"  "+canvas_width+"  "+canvas_height+"  "+viewBoxWidth[cvjs_active_floorplan_div_nr]+"  "+viewBoxHeight[cvjs_active_floorplan_div_nr]);	
	
	var position = jQuery("#"+floorplan_div).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


//	console.log("svg canvas"+canvas_width+" "+canvas_height+" "+global_scale);
//	console.log("handle group"+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])+" "+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
//	console.log("viewBox"+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]);

    // 6.2.31
	//var attr_2 = '{ \"fill\" : '+fill_var+' , \"fill-opacity\": '+fillopacity_var+' , \"stroke\": '+stroke_var+', \"stroke-width\": '+strokewidth_var+', \"stroke-opacity\": '+strokeopacity_var+',  \"stroke-linejoin\": '+strokelinejoin_var+' }';
	var zoomwindow_stroke = viewBoxWidth[cvjs_active_floorplan_div_nr]/400;

    // 6.2.31
    var elem, ZWstyle, XX;
    elem = document.querySelector('.ZW');
    ZWstyle = ""; 
    var ZW_strokeweight =  1.0;    //6.2.62
    try{
		ZWstyle =getComputedStyle(elem);
		ZW_strokeweight =  ZWstyle.getPropertyValue('stroke-width');  //6.2.62  
        ZW_strokeweight = parseFloat(ZW_strokeweight.substring(0, ZW_strokeweight.indexOf("px")));
    }catch(err){console.log("create_zoomwindow: "+err);}

    if (ZW_strokeweight != undefined && ZW_strokeweight>0){
        zoomwindow_stroke = viewBoxWidth[cvjs_active_floorplan_div_nr]/2500 * ZW_strokeweight * 2.0;

    }

    if (cvjs_debug) console.log("  "+ZW_strokeweight + " ZW_strokeweight "+ " box: "+viewBoxWidth[cvjs_active_floorplan_div_nr]+"  "+zoomwindow_stroke);

	var rectColor = "#0a0a0a";
	if (cvjs_blackBackground) rectColor = "#FEFEFE";
//	console.log(cvjs_blackBackground+"  "+rectColor);
	var attr_2 =  '{\"stroke\": \"'+rectColor+'\", \"fill\" : \"none\", \"stroke-opacity\": \"0.95\", \"stroke-width\": \"'+zoomwindow_stroke+'\"}';

	var json_obj = jQuery.parseJSON(attr_2);

	tRubberBand_r.attr(json_obj);


	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for zoom operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});

    // 6.2.31
	//handleGroup.mousedown(start_cvjs_create_zoomwindow_rectangle);
	//handleGroup.mousemove(move_cvjs_create_zoomwindow_rectangle);
	//handleGroup.mouseup(stop_cvjs_create_zoomwindow_rectangle);

	handleGroup.drag(move_cvjs_create_zoomwindow_rectangle,start_cvjs_create_zoomwindow_rectangle,stop_cvjs_create_zoomwindow_rectangle);
		
}


function cvjs_removeHandleFunc_ZoomWindowRectangle() {
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("handler removed");

	cvjs_objectIsZoomedExtents = false;

}

// 6.2.31
var cvjs_create_zoomStartX = 0;
var cvjs_create_zoomStartY = 0;

var start_cvjs_create_zoomwindow_rectangle = function(x,y) {

    flag_rectangle= false;
    console.log(x+" "+y+" ");
    cvjs_create_zoomStartX = x;
    cvjs_create_zoomStartY = y;

}


var zoomwindow_counter = 0;

var move_cvjs_create_zoomwindow_rectangle = function(dx,dy,x,y) {

//	var text = "  "+x+" "+y+" dx="+dx+" dy="+dy;
//    console.log(text);

    //	myText.attr({'text': text});
	zoomwindow_counter++;

		// 2016-04-11
		x = x+document.body.scrollLeft;
		y = y+document.body.scrollTop;


		if (!flag_rectangle){

            // this is first drag, but if lag in reception, then we simply change the window.
            // 6.2.31
            if ( (Math.abs(dx) + Math.abs(dy)) >10.0){
                //console.log("1 first time dx "+dx+" dy "+dy);
                firstX_r = cvjs_create_zoomStartX+document.body.scrollLeft;
                firstY_r = cvjs_create_zoomStartY+document.body.scrollTop;
                lastX_r = x;
                lastY_r = y;    
            }
            else{
                //console.log("2 first time dx "+dx+" dy "+dy);
                firstX_r = x;
                firstY_r = y;
                lastX_r = dx;
                lastY_r = dy;
            }
			flag_rectangle = true;
		}
		else{
			lastX_r = dx;
			lastY_r = dy;

		}

	tPath_r = "M" + (firstX_r-delta_x)/global_scale + "," + (firstY_r-delta_y)/global_scale;
	tPath_r += "h" + lastX_r/global_scale + "v" + lastY_r/global_scale+"h"+(-lastX_r/global_scale)+"v"+(-lastY_r/global_scale+" Z");

	if (zoomwindow_counter == 1){
		zoomwindow_counter = 0;
		tRubberBand_r.attr({'path': tPath_r});
	}

}

var stop_cvjs_create_zoomwindow_rectangle = function() {

// selected unlinked red: #ff9999 : 255, 153, 153
// #5BBEF6

	tRubberBand_r.attr({'path': "M0,0"});

	// change viewbox startpoint if in a different quardrant
	if (lastX_r<0) firstX_r+=lastX_r;
	if (lastY_r<0) firstY_r+=lastY_r;

	viewBox[cvjs_active_floorplan_div_nr].X = (firstX_r-delta_x)/global_scale;
	viewBox[cvjs_active_floorplan_div_nr].Y = (firstY_r-delta_y)/global_scale;

	viewBoxHeight[cvjs_active_floorplan_div_nr] = Math.abs(lastY_r/global_scale);    // 2016-10-02 replace window/
	viewBoxWidth[cvjs_active_floorplan_div_nr] = Math.abs(lastX_r/global_scale);

	var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
	var json_obj = jQuery.parseJSON(attr_2);
	cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);


	tRubberBand_r.attr({fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1"});

	cvjs_removeHandleFunc_ZoomWindowRectangle();

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;


	if (panWithThumb){

		try{
			layers_all.attr(show);
			layer_thumb.attr(hide);
			
			if (!cvjs_Community_Version)
				layer_vqrooms[cvjs_active_floorplan_div_nr].attr(show);

			all_layer_on_thumb_off();


		}
		catch(err) { console.log("ZoomWindowEnd "+err);}



		}

		// 5.1.04a
		cvjs_zoomZeroWidth();

};
// END - Draw Rectangle



/**
 * Pans the current active drawing one step to the right
 */
function cvjs_panRight()
{


	try{
//		layers_all.show();
//		layer_vqrooms[cvjs_active_floorplan_div_nr].show();
//		layer_thumb.hide();

	}
	catch(err){
		//  allow the code to work with both version 1.1 and 1.2
		var i=0;
		//console.log(err);
	}
	if (!cvjs_Community_Version) hideOnlyPop();

//	viewBox[cvjs_active_floorplan_div_nr].X+= 50;
	viewBox[cvjs_active_floorplan_div_nr].X+= viewBoxWidth[cvjs_active_floorplan_div_nr]/10;



	var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
	var json_obj = jQuery.parseJSON(attr_2);
	cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);

//NNN	setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], viewBox[cvjs_active_floorplan_div_nr].X+50,viewBox[cvjs_active_floorplan_div_nr].Y,viewBoxWidth[cvjs_active_floorplan_div_nr],viewBoxHeight[cvjs_active_floorplan_div_nr]);

	cvjs_objectIsZoomedExtents = false;
}

/**
 * Pans the current active drawing one step up
 */
function cvjs_panUp()
{

	try{
//		layers_all.show();
//		layer_vqrooms[cvjs_active_floorplan_div_nr].show();
//		layer_thumb.hide();

	}
	catch(err){
		//  allow the code to work with both version 1.1 and 1.2
		var i=0;
		//console.log(err);
	}


	if (!cvjs_Community_Version) hideOnlyPop();

//	viewBox[cvjs_active_floorplan_div_nr].Y-= 50;
	viewBox[cvjs_active_floorplan_div_nr].Y-= viewBoxHeight[cvjs_active_floorplan_div_nr]/10;




	var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
	var json_obj = jQuery.parseJSON(attr_2);
	cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);

	cvjs_objectIsZoomedExtents = false;

//NNN	setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], viewBox[cvjs_active_floorplan_div_nr].X,viewBox[cvjs_active_floorplan_div_nr].Y-50,viewBoxWidth[cvjs_active_floorplan_div_nr],viewBoxHeight[cvjs_active_floorplan_div_nr]);
}

/**
 * Pans the current active drawing one step down
 */
function cvjs_panDown()
{

	try{
//		layers_all.show();
//		layer_vqrooms[cvjs_active_floorplan_div_nr].show();
//		layer_thumb.hide();

	}
	catch(err){
		//  allow the code to work with both version 1.1 and 1.2
		var i=0;
		//console.log(err);
	}

	if (!cvjs_Community_Version) hideOnlyPop();

	//viewBox[cvjs_active_floorplan_div_nr].Y+= 50;
	viewBox[cvjs_active_floorplan_div_nr].Y+= viewBoxHeight[cvjs_active_floorplan_div_nr]/10;


	var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
	var json_obj = jQuery.parseJSON(attr_2);
	cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);

	cvjs_objectIsZoomedExtents = false;
//NNN	setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], viewBox[cvjs_active_floorplan_div_nr].X,viewBox[cvjs_active_floorplan_div_nr].Y+50,viewBoxWidth[cvjs_active_floorplan_div_nr],viewBoxHeight[cvjs_active_floorplan_div_nr]);
}

/**
 * Pans the drawing one step to the left
 */
function cvjs_panLeft()
{

	try{
//		layers_all.show();
//		layer_vqrooms[cvjs_active_floorplan_div_nr].show();
//		layer_thumb.hide();

	}
	catch(err){
		//  allow the code to work with both version 1.1 and 1.2
		var i=0;
		//console.log(err);
	}
	if (!cvjs_Community_Version) hideOnlyPop();

//	viewBox[cvjs_active_floorplan_div_nr].X-= 50;
	viewBox[cvjs_active_floorplan_div_nr].X-= viewBoxWidth[cvjs_active_floorplan_div_nr]/10;

	var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
	var json_obj = jQuery.parseJSON(attr_2);
	cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);

//NNN	setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], viewBox[cvjs_active_floorplan_div_nr].X-50,viewBox[cvjs_active_floorplan_div_nr].Y,viewBoxWidth[cvjs_active_floorplan_div_nr],viewBoxHeight[cvjs_active_floorplan_div_nr]);

	cvjs_objectIsZoomedExtents = false;


}




/**
 * Zoom Extents on the drawing
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

function cvjs_zoomExtents(floorplan_div){
	
	cvjs_resetZoomPan(floorplan_div);
}


/**
 * Zoom Extents on the drawing
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

function cvjs_resetZoomPan(floorplan_div)
{

	cvjs_addedObjectsToExtents = true;    // we are forcing a calculated extents for all cases

	if (floorplan_div == undefined){	
		// do nothing;
		return false;
	}
	else{
		// find active floorplan number and set that
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	}

	
	
	// 3.0.15c   - add "_svg" to div, if called through external API
	if (cvjs_debug) console.log(floorplan_div.lastIndexOf("_svg")+"  "+(floorplan_div.length-4));
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	
	
if (cvjs_debug) console.log("cvjs_resetZoomPan: cvjs_active_floorplan_div_nr "+cvjs_active_floorplan_div_nr+" rpWidth[cvjs_active_floorplan_div_nr] "+rpWidth[cvjs_active_floorplan_div_nr]+" rpHeight[cvjs_active_floorplan_div_nr] "+rpHeight[cvjs_active_floorplan_div_nr]+"  "+floorplan_div);

	bbox = cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox();
		
	try{
		layers_all.attr(show);              // 2016-01-11
		
		if (!cvjs_Community_Version)
			layer_vqrooms[cvjs_active_floorplan_div_nr].attr(show);
		
		layer_thumb.attr(hide);

	}
	catch(err){
		//  allow the code to work with both version 1.1 and 1.2
		var i=0;
		//console.log(err);
	}

	if (!cvjs_Community_Version) hideOnlyPop();

	if (cvjs_addedObjectsToExtents){  // custom case, added objects to canvas, so calculating extents before zoom extents

		// the masterbackground is scaled 
		var Ttrans = "T0,0S1.0";
		//var my_color = "#FF0000";
		cvjs_masterBackground[cvjs_active_floorplan_div_nr].attr({
		//	'fill-opacity': 0.8,
		//	 fill: my_color,
			 transform: Ttrans
		});
	
	
		bbox = cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox();
		if (cvjs_SVG_multiPagesFlag[cvjs_active_floorplan_div_nr]){   // 2018-03-21 
		
				
			bbox = cvjs_SVGGroup[cvjs_active_floorplan_div_nr].getBBox();
			// we have to add the extents of the stamp later
						
			// we have added stamp  (or other stuff)
			if (cvjs_customLayerContentAdded){
				var bbox2 = cvjs_customLayerContent.getBBox();
				var bbox3 = cvjs_SVGGroup[cvjs_active_floorplan_div_nr].getBBox();  // dummy
				if (bbox2.x<bbox3.x) bbox.x = bbox2.x; 
				if (bbox2.y<bbox3.y) bbox.y = bbox2.y;
			
				if (cvjs_debug) console.log("YYYYYYYYYYYYYYY"+bbox2.x+" "+bbox2.width);
				if (cvjs_debug) console.log("YYYYYYYYYYYYYYY"+bbox3.x+" "+bbox3.width);
				
				if ( (bbox2.x+bbox2.width) > (bbox3.x+bbox3.width) ) bbox.width = bbox2.x+bbox2.width - bbox3.x;
				if ( (bbox2.y+bbox2.height) > (bbox3.y+bbox3.height) ) bbox.height = bbox2.x+bbox2.width - bbox3.y;
			}
		}
			
		if (cvjs_debug) console.log("bounding box rpaper "+bbox.x+"  "+bbox.y+" "+bbox.width+" "+bbox.height)

			
		// we scale up the masterbackground for drag and paint operations		
		var Ttrans = "T0,0S3.0";
		//var my_color = "#FF0000";		
		cvjs_masterBackground[cvjs_active_floorplan_div_nr].attr({
		//	'fill-opacity': 0.8,
		//	 fill: my_color,
			 transform: Ttrans
		});
	
		viewBox[cvjs_active_floorplan_div_nr].X = bbox.x;
		viewBox[cvjs_active_floorplan_div_nr].Y = bbox.y;
		viewBoxWidth[cvjs_active_floorplan_div_nr] = bbox.width;
		viewBoxHeight[cvjs_active_floorplan_div_nr] = bbox.height;

			
		vBHo = viewBoxHeight[cvjs_active_floorplan_div_nr];
		vBWo = viewBoxWidth[cvjs_active_floorplan_div_nr];
		zoomScale = 1.0;

		var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr] +" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";

//window.alert("zoom extents "+attr_2);
		
		var json_obj = jQuery.parseJSON(attr_2);
		cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);
				
	}
	else{  // standard case, extents value from input file or intial calculation

	
		// the masterbackground is scaled down to original size
		var Ttrans = "T0,0S1.0";
		//var my_color = "#FF0000";
			
		cvjs_masterBackground[cvjs_active_floorplan_div_nr].attr({
		//	'fill-opacity': 0.8,
		//	 fill: my_color,
			 transform: Ttrans
		});
		
	
	
	//console.log("viewbox "+rpWidth[cvjs_active_floorplan_div_nr]+" "+rpHeight[cvjs_active_floorplan_div_nr]);
		viewBox[cvjs_active_floorplan_div_nr].X = actualLLX[cvjs_active_floorplan_div_nr];
		viewBox[cvjs_active_floorplan_div_nr].Y = actualLLY[cvjs_active_floorplan_div_nr];
	//    viewBoxWidth[cvjs_active_floorplan_div_nr] = actualURX[cvjs_active_floorplan_div_nr];
	//	viewBoxHeight[cvjs_active_floorplan_div_nr] = actualURY[cvjs_active_floorplan_div_nr];

		viewBoxWidth[cvjs_active_floorplan_div_nr] = rpWidth[cvjs_active_floorplan_div_nr];
		viewBoxHeight[cvjs_active_floorplan_div_nr] = rpHeight[cvjs_active_floorplan_div_nr];
		
		vBHo = viewBoxHeight[cvjs_active_floorplan_div_nr];
		vBWo = viewBoxWidth[cvjs_active_floorplan_div_nr];
		zoomScale = 1.0;

		var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+rpWidth[cvjs_active_floorplan_div_nr]+" "+rpHeight[cvjs_active_floorplan_div_nr]+"\" }";

		var json_obj = jQuery.parseJSON(attr_2);
		cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);	
		
	
		// the masterbackground is scaled up for drag and paint operations	
		var Ttrans = "T0,0S3.0";
		//var my_color = "#FF0000";	
		cvjs_masterBackground[cvjs_active_floorplan_div_nr].attr({
		//	'fill-opacity': 0.8,
		//	 fill: my_color,
			 transform: Ttrans
		});
		
		
	}	
		
	
//NNN	viewBox = cvjs_rPaper[cvjs_active_floorplan_div_nr].setViewBox(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr],rpWidth[cvjs_active_floorplan_div_nr], rpHeight[cvjs_active_floorplan_div_nr]);
//console.log(vBHo+" "+vBWo+" "+zoomScale);
	cvjs_objectIsZoomedExtents = true;

	
		// 5.1.04a
		cvjs_zoomZeroWidth();
		
}



function cvjs_resetZoomPan_SetMasterBackground(active_floorplan_div_nr)
{

// 3.0.13h
//if (true) return;


	if (active_floorplan_div_nr == undefined){
	
		active_floorplan_div_nr = 0;
	}
	else{
		// find active floorplan number and set that
		cvjs_active_floorplan_div_nr = active_floorplan_div_nr;
	
	}

if (cvjs_debug) console.log("cvjs_resetZoomPan_SetMasterBackground: cvjs_active_floorplan_div_nr "+cvjs_active_floorplan_div_nr+" rpWidth[cvjs_active_floorplan_div_nr] "+rpWidth[cvjs_active_floorplan_div_nr]+" rpHeight[cvjs_active_floorplan_div_nr] "+rpHeight[cvjs_active_floorplan_div_nr]);


	var bbox;
	
	if( jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).is(':visible')){	// WE CAN ONLY MAKE THIS CALCULATED EXTENTS IF THE <DIV> IS VISIBLE

	
	try{ // 3.0.13h
	
		// what if the masterbackground is already there, we need to remove

/***		
		console.log(cvjs_active_floorplan_div_nr+" "+cvjs_masterBackground[cvjs_active_floorplan_div_nr])
		bbox = cvjs_masterBackground[cvjs_active_floorplan_div_nr].getBBox();	
if (cvjs_debug) console.log(" master_bounding "+bbox.x+"  "+bbox.y+"  "+bbox.width+"  "+bbox.height+"  "+bbox.path); 	
**/		
		cvjs_masterBackground[cvjs_active_floorplan_div_nr].remove();

/**
		bbox = cvjs_SVGGroup[cvjs_active_floorplan_div_nr].getBBox();	
if (cvjs_debug) console.log(" cvjs_SVGGroup "+bbox.x+"  "+bbox.y+"  "+bbox.width+"  "+bbox.height+"  "+bbox.path); 	
**/

		}
	catch(err){
		console.log(err);
	}	
	
//if (cvjs_debug) console.log("1"); 	
	
		bbox = cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox();	
		

//if (cvjs_debug) console.log(" rPaper_bounding "+bbox.x+"  "+bbox.y+"  "+bbox.width+"  "+bbox.height+"  "+bbox.path); 	
		
		
		
	}
	else{  // HIDDEN  = standard case, then return
	
//if (cvjs_debug) console.log("2"); 	
	
	
	//console.log("viewbox "+rpWidth[cvjs_active_floorplan_div_nr]+" "+rpHeight[cvjs_active_floorplan_div_nr]);
		viewBox[cvjs_active_floorplan_div_nr].X = actualLLX[cvjs_active_floorplan_div_nr];
		viewBox[cvjs_active_floorplan_div_nr].Y = actualLLY[cvjs_active_floorplan_div_nr];
	//    viewBoxWidth[cvjs_active_floorplan_div_nr] = actualURX[cvjs_active_floorplan_div_nr];
	//	viewBoxHeight[cvjs_active_floorplan_div_nr] = actualURY[cvjs_active_floorplan_div_nr];

		viewBoxWidth[cvjs_active_floorplan_div_nr] = rpWidth[cvjs_active_floorplan_div_nr];
		viewBoxHeight[cvjs_active_floorplan_div_nr] = rpHeight[cvjs_active_floorplan_div_nr];
		
		vBHo = viewBoxHeight[cvjs_active_floorplan_div_nr];
		vBWo = viewBoxWidth[cvjs_active_floorplan_div_nr];
		zoomScale = 1.0;

		var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+rpWidth[cvjs_active_floorplan_div_nr]+" "+rpHeight[cvjs_active_floorplan_div_nr]+"\" }";
		var json_obj = jQuery.parseJSON(attr_2);
		cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);	
	
		// we return here...... if div is hidded then extents are zero
		
		//	cvjs_objectIsZoomedExtents = true;
		
		return;
				
	}


//if (true) return;	
	
	
	try{

		layers_all.attr(show);              // 2016-01-11		
		
		if (!cvjs_Community_Version)
			layer_vqrooms[cvjs_active_floorplan_div_nr].attr(show);
		
		
		layer_thumb.attr(hide);
	}
	catch(err){
		//  allow the code to work with both version 1.1 and 1.2
		var i=0;
		//console.log(err);
	}

	if (!cvjs_Community_Version) hideOnlyPop();

	if (true){  // custom case, added objects to canvas, so calculating extents before zoom extents



//if (cvjs_debug) console.log("4"); 	

		bbox = cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox();
		
				
//if (cvjs_debug) console.log(""+bbox.x+"  "+bbox.y+"  "+bbox.width+"  "+bbox.height); 	
		
		
		
		if (cvjs_SVG_multiPagesFlag[cvjs_active_floorplan_div_nr]){   // 2018-03-21 
			bbox = cvjs_SVGGroup[cvjs_active_floorplan_div_nr].getBBox();
			// we have to add the extents of the stamp later
			
			// we have added stamp  (or other stuff)
			if (cvjs_customLayerContentAdded){
				var bbox2 = cvjs_customLayerContent.getBBox();
				var bbox3 = cvjs_SVGGroup[cvjs_active_floorplan_div_nr].getBBox();  // dummy
				if (bbox2.x<bbox3.x) bbox.x = bbox2.x; 
				if (bbox2.y<bbox3.y) bbox.y = bbox2.y;
			
				if (cvjs_debug) console.log("YYYYYYYYYYYYYYY"+bbox2.x+" "+bbox2.width);
				if (cvjs_debug) console.log("YYYYYYYYYYYYYYY"+bbox3.x+" "+bbox3.width);
				
				if ( (bbox2.x+bbox2.width) > (bbox3.x+bbox3.width) ) bbox.width = bbox2.x+bbox2.width - bbox3.x;
				if ( (bbox2.y+bbox2.height) > (bbox3.y+bbox3.height) ) bbox.height = bbox2.x+bbox2.width - bbox3.y;
			}
									
		}

     //3.0.13h

		
		
		viewBox[cvjs_active_floorplan_div_nr].X = bbox.x;
		viewBox[cvjs_active_floorplan_div_nr].Y = bbox.y;

		viewBoxWidth[cvjs_active_floorplan_div_nr] = bbox.width;
		viewBoxHeight[cvjs_active_floorplan_div_nr] = bbox.height;

				
		
//		if (cvjs_debug) console.log(bbox.x+" "+bbox.y+" "+bbox.width+" "+bbox.height);
		
		
		vBHo = viewBoxHeight[cvjs_active_floorplan_div_nr];
		vBWo = viewBoxWidth[cvjs_active_floorplan_div_nr];
		zoomScale = 1.0;

		var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr] +" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
		var json_obj = jQuery.parseJSON(attr_2);
		cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);
	

		if (cvjs_masterBackground[cvjs_active_floorplan_div_nr]!=undefined) cvjs_masterBackground[cvjs_active_floorplan_div_nr].remove();

		var myid = "#master_"+floorplan_div_Array[cvjs_active_floorplan_div_nr];
//		window.alert(myid);
		if (cvjs_masterBackground[cvjs_active_floorplan_div_nr]!=undefined) jQuery(myid).remove();
		if (cvjs_masterBackground[cvjs_active_floorplan_div_nr]!=undefined) jQuery(myid).empty();
		
 // window.alert("making master 5 "+cvjs_masterBackground[cvjs_active_floorplan_div_nr]);
	
		
		cvjs_masterBackground[cvjs_active_floorplan_div_nr] = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].rect( viewBox[cvjs_active_floorplan_div_nr].X, viewBox[cvjs_active_floorplan_div_nr].Y, viewBoxWidth[cvjs_active_floorplan_div_nr], viewBoxHeight[cvjs_active_floorplan_div_nr]));
		cvjs_masterBackground[cvjs_active_floorplan_div_nr].attr({fill: "#fff", "fill-opacity":"0.01", "stroke-width": 0});	
//		cvjs_masterBackground[cvjs_active_floorplan_div_nr].attr({fill: "#ff0000", "fill-opacity":"0.3", "stroke-width": 0});	

		
		
		cvjs_masterBackground[cvjs_active_floorplan_div_nr].data("id", "master_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]);
		cvjs_masterBackground[cvjs_active_floorplan_div_nr].attr({id: "master_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]});
		
		
		if (!cvjs_Community_Version)
			layer_vqrooms[cvjs_active_floorplan_div_nr].prepend(cvjs_masterBackground[cvjs_active_floorplan_div_nr]);

		//window.alert("hi");
	//	console.log(actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+actualURX[cvjs_active_floorplan_div_nr]+" "+actualURY[cvjs_active_floorplan_div_nr]);

		actualLLX[cvjs_active_floorplan_div_nr] = viewBox[cvjs_active_floorplan_div_nr].X;
		actualLLY[cvjs_active_floorplan_div_nr] = viewBox[cvjs_active_floorplan_div_nr].Y 
		actualURX[cvjs_active_floorplan_div_nr] = actualLLX[cvjs_active_floorplan_div_nr] + viewBoxWidth[cvjs_active_floorplan_div_nr];
		actualURY[cvjs_active_floorplan_div_nr] = actualLLY[cvjs_active_floorplan_div_nr] + viewBoxHeight[cvjs_active_floorplan_div_nr];
		
		var lfactor = Math.sqrt(Math.pow((actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr]) ,2)+Math.pow((actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr]) ,2))
		cvjs_redlineThickness_scaleFactor = cvjs_redlineThickness_drawingFactor * lfactor;	

		if (!cvjs_Community_Version) cvjs_checkLicense();
		
	}
	else{  // standard case, extents value from input file or intial calculation

	}	

	cvjs_objectIsZoomedExtents = true;

}




/**
 * Zoom the Drawing In one step
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

 function cvjs_zoomIn(floorplan_div)
{


	if (floorplan_div == undefined){
	
		// do nothing;
	}
	else{
		// find active floorplan number and set that
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	}
	
	
	// 3.0.15c   - add "_svg" to div, if called through external API
	if (cvjs_debug) console.log(floorplan_div.lastIndexOf("_svg")+"  "+(floorplan_div.length-4));
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	
	
	
	
//window.alert(cvjs_active_floorplan_div_nr);
//window.alert(cvjs_rPaper[0]);
//window.alert(cvjs_rPaper[1]);

	
	try{
//		layers_all.show();
//		layer_vqrooms[cvjs_active_floorplan_div_nr].show();
//		layer_thumb.hide();

	}
	catch(err){
		//  allow the code to work with both version 1.1 and 1.2
		var i=0;
		//console.log(err);
	}

	if (!cvjs_Community_Version) hideOnlyPop();
	vBHo = viewBoxHeight[cvjs_active_floorplan_div_nr];
	vBWo = viewBoxWidth[cvjs_active_floorplan_div_nr];

//console.log("viewBoxHeight[cvjs_active_floorplan_div_nr]="+viewBoxHeight[cvjs_active_floorplan_div_nr]+" viewBoxWidth[cvjs_active_floorplan_div_nr]="+viewBoxWidth[cvjs_active_floorplan_div_nr]+" DefaultZoomFactor="+DefaultZoomFactor);

	viewBoxWidth[cvjs_active_floorplan_div_nr] /= DefaultZoomFactor;
	viewBoxHeight[cvjs_active_floorplan_div_nr]/= DefaultZoomFactor;
	viewBox[cvjs_active_floorplan_div_nr].X -= (viewBoxWidth[cvjs_active_floorplan_div_nr] - vBWo) / 2;
	viewBox[cvjs_active_floorplan_div_nr].Y -= (viewBoxHeight[cvjs_active_floorplan_div_nr] - vBHo) / 2;


	var attr_1 = "{ \"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
	var pan_x = jQuery.parseJSON(attr_1);
	cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(pan_x);

//NNN	setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], viewBox[cvjs_active_floorplan_div_nr].X,viewBox[cvjs_active_floorplan_div_nr].Y,viewBoxWidth[cvjs_active_floorplan_div_nr],viewBoxHeight[cvjs_active_floorplan_div_nr]);
//NNN	zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/cvjs_rPaper[cvjs_active_floorplan_div_nr].width;


//console.log("xx3 viewBoxWidth[cvjs_active_floorplan_div_nr] "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" rpWidth[cvjs_active_floorplan_div_nr] "+rpWidth[cvjs_active_floorplan_div_nr]);

	zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/rpWidth[cvjs_active_floorplan_div_nr];

//	var string_X = "vBHo ="+vBHo+" vBWo ="+vBWo+" viewBox[cvjs_active_floorplan_div_nr].X="+viewBox[cvjs_active_floorplan_div_nr].X+" viewBox[cvjs_active_floorplan_div_nr].Y="+viewBox[cvjs_active_floorplan_div_nr].Y+" cvjs_rPaper[cvjs_active_floorplan_div_nr].width="+cvjs_rPaper[cvjs_active_floorplan_div_nr].width+" viewBoxWidth[cvjs_active_floorplan_div_nr]="+viewBoxWidth[cvjs_active_floorplan_div_nr]+" vBWo="+vBWo+" zoomScale="+zoomScale;
//	jQuery('#temperature').css('color', '#00FF00');
//	jQuery("#temperature").html(string_X);

	cvjs_objectIsZoomedExtents = false;
	
	
	// 5.1.04a
	cvjs_zoomZeroWidth();
	

}



function cvjs_zoomInMouseWheel(x_pos, y_pos, floorplan_div)
{


	if (floorplan_div == undefined){
	
		// do nothing;
	}
	else{
		// find active floorplan number and set that
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	}


	var canvas_width = jQuery("#"+floorplan_div).width();
	var canvas_height = jQuery("#"+floorplan_div).height();

	var position = jQuery("#"+floorplan_div).position();

	var global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	var global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	var delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	var delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;
	
	
	var x_pos = x_pos+document.body.scrollLeft;
	var y_pos = y_pos+document.body.scrollTop;
	var mypointX = (x_pos-delta_x)/global_scale;
	var mypointY = (y_pos-delta_y)/global_scale;
	var x_offset =  (mypointX- viewBox[cvjs_active_floorplan_div_nr].X)/viewBoxWidth[cvjs_active_floorplan_div_nr];
	var y_offset =  (mypointY- viewBox[cvjs_active_floorplan_div_nr].Y)/viewBoxHeight[cvjs_active_floorplan_div_nr];
	


	try{
//		layers_all.show();
//		layer_vqrooms[cvjs_active_floorplan_div_nr].show();
//		layer_thumb.hide();

	}
	catch(err){
		//  allow the code to work with both version 1.1 and 1.2
		var i=0;
		//console.log(err);
	}

	if (!cvjs_Community_Version) hideOnlyPop();
	vBHo = viewBoxHeight[cvjs_active_floorplan_div_nr];
	vBWo = viewBoxWidth[cvjs_active_floorplan_div_nr];
	viewBoxWidth[cvjs_active_floorplan_div_nr] /= DefaultZoomFactor_mouseWheel;
	viewBoxHeight[cvjs_active_floorplan_div_nr]/= DefaultZoomFactor_mouseWheel;

	// offset runs from -50 t0 +50
	// when offset = -50  0
	// when offset = 0  (viewBoxWidth[cvjs_active_floorplan_div_nr] - vBWo) / 2
	// when offset = 50  (viewBoxWidth[cvjs_active_floorplan_div_nr] - vBWo)
	//viewBox[cvjs_active_floorplan_div_nr].X -= (viewBoxWidth[cvjs_active_floorplan_div_nr] - vBWo)*(50.0+x_offset)/100.0 ;
	//viewBox[cvjs_active_floorplan_div_nr].Y -= (viewBoxHeight[cvjs_active_floorplan_div_nr] - vBHo)*(50.0+x_offset)/100.0 ;
	

	
	// offset runs from 0 to 1
	viewBox[cvjs_active_floorplan_div_nr].X -= (viewBoxWidth[cvjs_active_floorplan_div_nr] - vBWo)*(x_offset);
	viewBox[cvjs_active_floorplan_div_nr].Y -= (viewBoxHeight[cvjs_active_floorplan_div_nr] - vBHo)*(y_offset);
	

	var attr_1 = "{ \"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
	var pan_x = jQuery.parseJSON(attr_1);
	cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(pan_x);

//NNN	setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], viewBox[cvjs_active_floorplan_div_nr].X,viewBox[cvjs_active_floorplan_div_nr].Y,viewBoxWidth[cvjs_active_floorplan_div_nr],viewBoxHeight[cvjs_active_floorplan_div_nr]);
//NNN	zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/cvjs_rPaper[cvjs_active_floorplan_div_nr].width;


//console.log("xx3 viewBoxWidth[cvjs_active_floorplan_div_nr] "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" rpWidth[cvjs_active_floorplan_div_nr] "+rpWidth[cvjs_active_floorplan_div_nr]);

	zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/rpWidth[cvjs_active_floorplan_div_nr];

//	var string_X = "vBHo ="+vBHo+" vBWo ="+vBWo+" viewBox[cvjs_active_floorplan_div_nr].X="+viewBox[cvjs_active_floorplan_div_nr].X+" viewBox[cvjs_active_floorplan_div_nr].Y="+viewBox[cvjs_active_floorplan_div_nr].Y+" cvjs_rPaper[cvjs_active_floorplan_div_nr].width="+cvjs_rPaper[cvjs_active_floorplan_div_nr].width+" viewBoxWidth[cvjs_active_floorplan_div_nr]="+viewBoxWidth[cvjs_active_floorplan_div_nr]+" vBWo="+vBWo+" zoomScale="+zoomScale;
//	jQuery('#temperature').css('color', '#00FF00');
//	jQuery("#temperature").html(string_X);

	cvjs_objectIsZoomedExtents = false;
	
	
	// 5.1.04a
	cvjs_zoomZeroWidth();
	

}



/**
 * Zoom the drawing Out one step
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

function cvjs_zoomOut(floorplan_div)
{


	if (floorplan_div == undefined){
	
		// do nothing;
	}
	else{
		// find active floorplan number and set that
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	}


	// 3.0.15c   - add "_svg" to div, if called through external API
	if (cvjs_debug) console.log(floorplan_div.lastIndexOf("_svg")+"  "+(floorplan_div.length-4));
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}



	try{
//		layers_all.show();
//		layer_vqrooms[cvjs_active_floorplan_div_nr].show();
//		layer_thumb.hide();

	}
	catch(err){
		//  allow the code to work with both version 1.1 and 1.2
		var i=0;
		//console.log(err);
	}

	if (!cvjs_Community_Version) hideOnlyPop();
	vBHo = viewBoxHeight[cvjs_active_floorplan_div_nr];
	vBWo = viewBoxWidth[cvjs_active_floorplan_div_nr];
	viewBoxWidth[cvjs_active_floorplan_div_nr] *= DefaultZoomFactor;
	viewBoxHeight[cvjs_active_floorplan_div_nr]*= DefaultZoomFactor;
	viewBox[cvjs_active_floorplan_div_nr].X -= (viewBoxWidth[cvjs_active_floorplan_div_nr] - vBWo) / 2;
	viewBox[cvjs_active_floorplan_div_nr].Y -= (viewBoxHeight[cvjs_active_floorplan_div_nr] - vBHo) / 2;


	var attr_1 = "{ \"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
	var pan_x = jQuery.parseJSON(attr_1);
	cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(pan_x);

//NNN	setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], viewBox[cvjs_active_floorplan_div_nr].X,viewBox[cvjs_active_floorplan_div_nr].Y,viewBoxWidth[cvjs_active_floorplan_div_nr],viewBoxHeight[cvjs_active_floorplan_div_nr]);
//NNN	zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/cvjs_rPaper[cvjs_active_floorplan_div_nr].width;


//console.log("xx4 viewBoxWidth[cvjs_active_floorplan_div_nr] "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" rpWidth[cvjs_active_floorplan_div_nr] "+rpWidth[cvjs_active_floorplan_div_nr]);

	zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/rpWidth[cvjs_active_floorplan_div_nr];

//	var string_X = "vBHo ="+vBHo+" vBWo ="+vBWo+" viewBox[cvjs_active_floorplan_div_nr].X="+viewBox[cvjs_active_floorplan_div_nr].X+" viewBox[cvjs_active_floorplan_div_nr].Y="+viewBox[cvjs_active_floorplan_div_nr].Y+" cvjs_rPaper[cvjs_active_floorplan_div_nr].width="+cvjs_rPaper[cvjs_active_floorplan_div_nr].width+" viewBoxWidth[cvjs_active_floorplan_div_nr]="+viewBoxWidth[cvjs_active_floorplan_div_nr]+" vBWo="+vBWo+" zoomScale="+zoomScale;
//	jQuery('#temperature').css('color', '#0000FF');
//	jQuery("#temperature").html(string_X);


	cvjs_objectIsZoomedExtents = false;

	
	// 5.1.04a
	cvjs_zoomZeroWidth();
	
}

/**
 * Zoom out on the drawing with a custom zoom factor
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 * @param {float} customZoomFactor- custom zoom factor, the factor is between 0 and 1.
 */

function cvjs_zoomOutCustomFactor(floorplan_div, customZoomFactor)
{


	if (floorplan_div == undefined){
	
		// do nothing;
	}
	else{
		// find active floorplan number and set that
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	}





	try{
//		layers_all.show();
//		layer_vqrooms[cvjs_active_floorplan_div_nr].show();
//		layer_thumb.hide();

	}
	catch(err){
		//  allow the code to work with both version 1.1 and 1.2
		var i=0;
		//console.log(err);
	}

	if (!cvjs_Community_Version) hideOnlyPop();
	vBHo = viewBoxHeight[cvjs_active_floorplan_div_nr];
	vBWo = viewBoxWidth[cvjs_active_floorplan_div_nr];
	viewBoxWidth[cvjs_active_floorplan_div_nr] *= customZoomFactor;
	viewBoxHeight[cvjs_active_floorplan_div_nr]*= customZoomFactor;
	viewBox[cvjs_active_floorplan_div_nr].X -= (viewBoxWidth[cvjs_active_floorplan_div_nr] - vBWo) / 2;
	viewBox[cvjs_active_floorplan_div_nr].Y -= (viewBoxHeight[cvjs_active_floorplan_div_nr] - vBHo) / 2;


	var attr_1 = "{ \"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
	var pan_x = jQuery.parseJSON(attr_1);
	cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(pan_x);

//NNN	setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], viewBox[cvjs_active_floorplan_div_nr].X,viewBox[cvjs_active_floorplan_div_nr].Y,viewBoxWidth[cvjs_active_floorplan_div_nr],viewBoxHeight[cvjs_active_floorplan_div_nr]);
//NNN	zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/cvjs_rPaper[cvjs_active_floorplan_div_nr].width;


//console.log("xx4 viewBoxWidth[cvjs_active_floorplan_div_nr] "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" rpWidth[cvjs_active_floorplan_div_nr] "+rpWidth[cvjs_active_floorplan_div_nr]);

	zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/rpWidth[cvjs_active_floorplan_div_nr];

//	var string_X = "vBHo ="+vBHo+" vBWo ="+vBWo+" viewBox[cvjs_active_floorplan_div_nr].X="+viewBox[cvjs_active_floorplan_div_nr].X+" viewBox[cvjs_active_floorplan_div_nr].Y="+viewBox[cvjs_active_floorplan_div_nr].Y+" cvjs_rPaper[cvjs_active_floorplan_div_nr].width="+cvjs_rPaper[cvjs_active_floorplan_div_nr].width+" viewBoxWidth[cvjs_active_floorplan_div_nr]="+viewBoxWidth[cvjs_active_floorplan_div_nr]+" vBWo="+vBWo+" zoomScale="+zoomScale;
//	jQuery('#temperature').css('color', '#0000FF');
//	jQuery("#temperature").html(string_X);


	cvjs_objectIsZoomedExtents = false;

	
	// 5.1.04a
	cvjs_zoomZeroWidth();
	
}





function cvjs_zoomOutMouseWheel(x_pos,y_pos, floorplan_div)
{

	if (floorplan_div == undefined){
	
		// do nothing;
	}
	else{
		// find active floorplan number and set that
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	}

	
	var canvas_width = jQuery("#"+floorplan_div).width();
	var canvas_height = jQuery("#"+floorplan_div).height();

	var position = jQuery("#"+floorplan_div).position();

	var global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	var global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	var delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	var delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;
	
	
	var x_pos = x_pos+document.body.scrollLeft;
	var y_pos = y_pos+document.body.scrollTop;
	var mypointX = (x_pos-delta_x)/global_scale;
	var mypointY = (y_pos-delta_y)/global_scale;
	var x_offset =  (mypointX- viewBox[cvjs_active_floorplan_div_nr].X)/viewBoxWidth[cvjs_active_floorplan_div_nr];
	var y_offset =  (mypointY- viewBox[cvjs_active_floorplan_div_nr].Y)/viewBoxHeight[cvjs_active_floorplan_div_nr];
	


	try{
//		layers_all.show();
//		layer_vqrooms[cvjs_active_floorplan_div_nr].show();
//		layer_thumb.hide();

	}
	catch(err){
		//  allow the code to work with both version 1.1 and 1.2
		var i=0;
		//console.log(err);
	}

	if (!cvjs_Community_Version) hideOnlyPop();
	vBHo = viewBoxHeight[cvjs_active_floorplan_div_nr];
	vBWo = viewBoxWidth[cvjs_active_floorplan_div_nr];
	viewBoxWidth[cvjs_active_floorplan_div_nr] *= DefaultZoomFactor_mouseWheel;
	viewBoxHeight[cvjs_active_floorplan_div_nr]*= DefaultZoomFactor_mouseWheel;

	
	// offset runs from 0 to 1
	viewBox[cvjs_active_floorplan_div_nr].X -= (viewBoxWidth[cvjs_active_floorplan_div_nr] - vBWo)*(x_offset);
	viewBox[cvjs_active_floorplan_div_nr].Y -= (viewBoxHeight[cvjs_active_floorplan_div_nr] - vBHo)*(y_offset);
	
	
	
	var attr_1 = "{ \"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
	var pan_x = jQuery.parseJSON(attr_1);
	cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(pan_x);

//NNN	setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], viewBox[cvjs_active_floorplan_div_nr].X,viewBox[cvjs_active_floorplan_div_nr].Y,viewBoxWidth[cvjs_active_floorplan_div_nr],viewBoxHeight[cvjs_active_floorplan_div_nr]);
//NNN	zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/cvjs_rPaper[cvjs_active_floorplan_div_nr].width;


//console.log("xx4 viewBoxWidth[cvjs_active_floorplan_div_nr] "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" rpWidth[cvjs_active_floorplan_div_nr] "+rpWidth[cvjs_active_floorplan_div_nr]);

	zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/rpWidth[cvjs_active_floorplan_div_nr];

//	var string_X = "vBHo ="+vBHo+" vBWo ="+vBWo+" viewBox[cvjs_active_floorplan_div_nr].X="+viewBox[cvjs_active_floorplan_div_nr].X+" viewBox[cvjs_active_floorplan_div_nr].Y="+viewBox[cvjs_active_floorplan_div_nr].Y+" cvjs_rPaper[cvjs_active_floorplan_div_nr].width="+cvjs_rPaper[cvjs_active_floorplan_div_nr].width+" viewBoxWidth[cvjs_active_floorplan_div_nr]="+viewBoxWidth[cvjs_active_floorplan_div_nr]+" vBWo="+vBWo+" zoomScale="+zoomScale;
//	jQuery('#temperature').css('color', '#0000FF');
//	jQuery("#temperature").html(string_X);


	cvjs_objectIsZoomedExtents = false;

	
	// 5.1.04a
	cvjs_zoomZeroWidth();
	
}





function cvjs_zoomPositionFactor(x_pos,y_pos, wportx, wporty, floorplan_div, zoomfactor)
{

	if (floorplan_div == undefined){
	
		// do nothing;
	}
	else{
		// find active floorplan number and set that
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	}

	
	var canvas_width = jQuery("#"+floorplan_div).width();
	var canvas_height = jQuery("#"+floorplan_div).height();

	var position = jQuery("#"+floorplan_div).position();

	var global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	var global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

		
	if (!cvjs_Community_Version) hideOnlyPop();
	vBHo = viewBoxHeight[cvjs_active_floorplan_div_nr];
	vBWo = viewBoxWidth[cvjs_active_floorplan_div_nr];
	viewBoxWidth[cvjs_active_floorplan_div_nr] *= zoomfactor;
	viewBoxHeight[cvjs_active_floorplan_div_nr]*= zoomfactor;

	

	viewBox[cvjs_active_floorplan_div_nr].X = wportx -x_pos/global_scale;
	viewBox[cvjs_active_floorplan_div_nr].Y = wporty -y_pos/global_scale;
	
	
	var attr_1 = "{ \"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";

	console.log("attr_l "+attr_1);

	var pan_x = jQuery.parseJSON(attr_1);
	cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(pan_x);

	zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/rpWidth[cvjs_active_floorplan_div_nr];
	
	cvjs_objectIsZoomedExtents = false;

	
		// 5.1.04a
	cvjs_zoomZeroWidth();

}









/**
 * Redraws the current ViewBox, thereby refreshing the screen with same zoom settings
 */

function cvjs_redrawViewBox()
{


	try{
//		layers_all.show();
//		layer_vqrooms[cvjs_active_floorplan_div_nr].show();
//		layer_thumb.hide();

	}
	catch(err){
		//  allow the code to work with both version 1.1 and 1.2
		var i=0;
		//console.log(err);
	}
	if (!cvjs_Community_Version) hideOnlyPop();

	viewBox[cvjs_active_floorplan_div_nr].X-= 0.01;
	var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
	var json_obj = jQuery.parseJSON(attr_2);
	cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);


if (cvjs_debug) console.log("after pan 1");
}





function d2h(d) {
	var h = d.toString(16);
	if (d < 16)
		return '0'+h;
	return h;
	}
function h2d(h) {return parseInt(h,16);}

function rgb2hex(r, g, b)
{
	var lastHex = d2h(r)+d2h(g)+d2h(b);

	return lastHex;
}


// MMMMMMMMMMMMMMM   fileload modal objects


var fnArr_FileName = new Array();  // load from .rw file
var fnArr_ShortName = new Array();  // load from .rw file
var fnArr_listdirectory_FileName = new Array();   // generate from list directory at load time of Add/Edit
var fnArr_listdirectory_ShortName = new Array();  // generate from list directory at load time of Add/Edit




/**
 * Set the Community Menu if no XML file has been designated for menu configuration
 * @param {string} floorplan_div - name of Element on which CADViewer is located
 */


function cvjs_LoadTopIconMenuViewing(floorplan_div){
				
	// 3.301c
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){	
		floorplan_div = floorplan_div.substring(0,floorplan_div.length-4);
	}
	else{
		// do nothing
	}
		
	jQuery("#topIconMenu_placeholder_1_"+floorplan_div+"_svg").html("");
	// ALWAYS ADD A LEFT LINE IMAGE
	cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_0", "none", floorplan_div, "cvjsIcon_base_left.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.LayerList );

//	var placeholderwidth = 40+2;  // pageChange
	var placeholderwidth = 46+2;  // pageChange
	
	
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 0) placeholderwidth = placeholderwidth + 14*30;	
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 1) placeholderwidth = placeholderwidth + 18*30;	
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 2) placeholderwidth = placeholderwidth + 11*30;	

//	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 3) placeholderwidth = placeholderwidth + 12*30;	
//	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 4) placeholderwidth = placeholderwidth + 4*30;	


	// 3.3.06de
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 3) placeholderwidth = placeholderwidth + 10*30;	
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 4) placeholderwidth = placeholderwidth + 12*30;	
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 5) placeholderwidth = placeholderwidth + 4*30;	


	jQuery("#topIconMenu_placeholder_1_"+floorplan_div+"_svg").css({width : placeholderwidth});
	
	
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 0){	
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_1", "cvjs_toggleBlackWhite", floorplan_div, "cvjsIcon_dra_p1_4_1_ToggleBlackWhite.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.Toggle );							
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_2", "cvjs_setBackgroundColor", floorplan_div, "cvjsIcon_dra_p1_4_2_BackgroundColor.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.Background );		
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_5_2", "cvjs_interactiveSearchText", floorplan_div, "cvjsIcon_dra_p1_5_2_SearchText.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.Search );	
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_2", "cvjs_Print", floorplan_div, "cvjsIcon_dra_p1_1_2_Print.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.Print );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_1", "cvjs_LayerList", floorplan_div, "cvjsIcon_dra_p1_1_1_LayerList.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.LayerList );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_8_1", "cvjs_Measurement", floorplan_div, "cvjsIcon_dra_p1_8_1_Measurement.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.Measurement );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_8_2", "cvjs_calibrateMeasurement", floorplan_div, "cvjsIcon_dra_p1_8_2_CalibrateMeasurement.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.Calibrate );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_9_1", "cvjs_displayMagnifyingGlass", floorplan_div, "cvjsIcon_dra_p1_9_1_ToggleBirdsEyeWindow.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.BirdsEye );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_9_2", "cvjs_activateLineThicknessModal", floorplan_div, "cvjsIcon_dra_p1_9_2_AdjustLineThickness.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.LineThickness );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_6_2", "cvjs_interactiveLayerOff", floorplan_div, "cvjsIcon_dra_p1_6_2_LayerOff.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.LayerOff );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_7_1", "cvjs_swapLayersInDrawing", floorplan_div, "cvjsIcon_dra_p1_7_1_SwapLayers.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.SwapLayers );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_7_2", "cvjs_allLayersInDrawingOn", floorplan_div, "cvjsIcon_dra_p1_7_2_LayerOn.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.AllLayersOn );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_6_1", "cvjs_displayInformationModal_Mode", 0, "cvjsIcon_dra_p1_6_1_Information.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.About );
	}
		
	
	if (cvjs_loadTopIconMenuVisible[cvjs_interfaceCounterIndex(floorplan_div)]==false)
		jQuery("#topIconMenu_placeholder_1_"+floorplan_div+"_svg").hide();

	
}			


var cvjs_loadCADViewerLanguageName = "";
var cvjs_loadCADViewerLanguageLocation = "";

/**
 * Set the language in CADViewer by first loading the language file 
 * @param {string} language - name of the language
 * @param {string} languagelocation - path and name of the language location, releative to install folder
 */

function cvjs_loadCADViewerLanguage(language, languagelocation){
		
	cvjs_loadCADViewerLanguageName = language;
	cvjs_loadCADViewerLanguageLocation = languagelocation;

}


/**
 * Set the language in CADViewer 
 * @param {string} Language - name of the language
 */

function cvjs_setLanguage(Language){
	
	try{
		cvjs_currentLanguage = 1;
		for (var i=0; i<languageTable.numberOfLanguages; i++) {
			//console.log(i+" "+Language.toLowerCase()+" "+(languageTable.languages[i].thisLanguage).toLowerCase());
			if ( Language.toLowerCase().indexOf((languageTable.languages[i].thisLanguage).toLowerCase()) == 0  && (Language.length == languageTable.languages[i].thisLanguage.length) )
				cvjs_currentLanguage = i;
		}
		//console.log(languageTable.languages[cvjs_currentLanguage].thisLanguage)
	}
	catch (err){  console.log(err)}

	//   After we have set the language, we have to update the modals
	//  No we do not update, because of the color palette and slider..... setLanguage is only called on intialization
	//  cvjs_updateModals();

	try{
		for (var i=0; i<languageTable.numberOfLanguages; i++) {
			//console.log(i+" "+Language.toLowerCase()+" "+(languageTable.languages[i].thisLanguage).toLowerCase());
			if ( Language.indexOf(languageTable.languages[i].languageCode) == 0)
				cvjs_currentLanguage = i;
		}
		//console.log(languageTable.languages[cvjs_currentLanguage].thisLanguage)
	}
	catch (err){  console.log(err)}
}



/**
 * Get the languages supported in CADViewer 
 * @return {string} languages - string with available languages
 */

function cvjs_getLanguages(){

	var string = "";
	try{
		for (var i=0; i<languageTable.numberOfLanguages; i++) {
			string += languageTable.languages[i].languageCode+":"+languageTable.languages[i].thisLanguage+";";
		}
	}
	catch (err){  console.log(err)}

	return string;
}


var cvjs_ServerLocation = "";
var cvjs_ServerUrl = "";


/**
 * Get the current ServerLocation variable; 
 * @return {string} ServerLoction - server location of html Element on which CADViewer is located
 */

function cvjs_getServerLocation(){

	return(cvjs_ServerLocation);
//	cvjs_ServerUrl = ServerUrl;
	
}

/**
 * Get the current ServerURL variable; 
 * @return {string} ServerURL - server url of html Element on which CADViewer is located
 */

function cvjs_getServerURL(){

	return(cvjs_ServerUrl);
//	return(cvjs_ServerLocation = ServerLocation);
//	cvjs_ServerUrl = ServerUrl;
	
}


/**
 * Returns the current object selected on active floorplan 
 * @return {string} lastObj- current space object selected, -1 if no current selection
 */

function cvjs_returnSpaceObjectSelected(){

    return(lastObj[cvjs_active_floorplan_div_nr] );
}



/**
 * Get the current ServerBackEndUrl variable; 
 * @return {string} ServerBackEndUrl - ServerBackEndUrl of current CADViewer settings
 */

function cvjs_getServerBackEndUrl(){

	return(ServerBackEndUrl);
	
}




/**
 * Pass over the current settings of the calling html document context
 * @param {string} ServerLocation - server location of html Element on which CADViewer is located
 * @param {string} ServerURL - server url of html Element on which CADViewer is located
 */

function cvjs_setServerLocationURL(ServerLocation, ServerUrl){

	// used for pdf generation and print modals
	
	cvjs_ServerLocation = ServerLocation;
	cvjs_ServerUrl = ServerUrl;
	
	
	// we also use this path to set the print controlling path strings and php strings
	
	cvjs_javaScriptsAbsoluteFolder = ServerUrl +"app/js/";
	cvjs_defaultJSPath = ServerUrl +"app/js/";

	
	
	// this is only for php case, not in the case of servlets, and not if they have been declare
		
	if (!cvjs_setServerHandersPath_called){   // 3.2.01d
		cvjs_serverHandlersPath = ServerUrl +"php/"
		cvjs_phpPath = ServerUrl +"php/"
	}
		
		
	if (!cvjs_printObjectPathAbsolute_called){
		// if the serverhandler path is absolute, then we set the cvjs_setPrintObjectPathAbsolute
		// 3.1.21c
		cvjs_printObjectPathAbsolute = cvjs_ServerUrl + "/php/temp_print/";
		cvjs_printObjectPathAbsoluteServer = cvjs_ServerLocation + "/php/temp_print/";
		cvjs_printObjectPathRelativeFlag = false;
	}
	
}	

var cvjs_TopIconMenu_pageNumber = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
var cvjs_TopIconMenu_maxPageNumber = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3];  // as default we restrict to standard 3 icon menu pages
var cvjs_topIconMenu = [Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object];

var cvjs_loadTopIconMenuVisible = [true,true,true,true,true,true,true,true,true,true,true];	
var cvjs_loadTopIconNavigationVisible = [true,true,true,true,true,true,true,true,true,true,true];	

var cvjs_loadTopIconMenuXML = [false,false,false,false,false,false,false,false,false,false];
var cvjs_topIconMenuXML = ["cadviewerjs_menu_all_items.xml","cadviewerjs_menu_all_items.xml","cadviewerjs_menu_all_items.xml","cadviewerjs_menu_all_items.xml","cadviewerjs_menu_all_items.xml","cadviewerjs_menu_all_items.xml","cadviewerjs_menu_all_items.xml","cadviewerjs_menu_all_items.xml","cadviewerjs_menu_all_items.xml","cadviewerjs_menu_all_items.xml"];
// 6.6.04e
var cvjs_topIconMenuXML_location = "/app/js/menu_config/";

/**
 * Loads in the top icon menu system from an XML file
 * The XML file is in /cadviewer/app/js/menu_config/
 * The XML file allows custom settings of the number of menu pages, the start menu page
 * and content of each page, based on the selection set of available API commands
 * @param {String} floorplan_div - div in which CADViewer is implemented
 * @param {String} xml_config_file - XML top menu configuration file
 * @param {String} xml_config_file_location - location of xml config file relative to install server location
 */
function cvjs_setTopMenuXML(floorplan_div, xml_config_file, xml_config_file_location){

	cvjs_topIconMenuXML_location = xml_config_file_location;

	cvjs_loadTopIconMenuXML[cvjs_interfaceCounterIndex(floorplan_div)] = true;
	cvjs_topIconMenuXML[cvjs_interfaceCounterIndex(floorplan_div)] = xml_config_file;
}




/**
 * Loads in the top icon menu system from an XML file
 * The XML file is in /cadviewer/app/js/menu_config/
 * The XML file allows custom settings of the number of menu pages, the start menu page
 * and content of each page, based on the selection set of available API commands
 * @param {String} xml_config_file - XML top menu configuration file
 * @param {String} floorplan_div - div in which CADViewer is implemented
 */
function cvjs_setCustomTopMenuXML(xml_config_file, floorplan_div){


	cvjs_loadTopIconMenuXML[cvjs_interfaceCounterIndex(floorplan_div)] = true;
	cvjs_topIconMenuXML[cvjs_interfaceCounterIndex(floorplan_div)] = xml_config_file;
}


/**
 * Controls top menu icon bar visibility
 * @param {boolean} display_status - default is true, use false to hide menu bar
 * @param {String} floorplan_div - div in which CADViewer is implemented
 */
function cvjs_displayTopMenuIconBar(display_status, floorplan_div){

	// check interface counter
	var selectedDiv = interfaceCounter;	
	var counter = cvjs_interfaceCounterIndex(floorplan_div);
	// zero is the default interface so we add one if 0
	if (counter>0){
		// we have a match
		selectedDiv = counter;
	}
	else{
		interfaceCounter++;
		selectedDiv = interfaceCounter;
		interfaceCounterDiv[selectedDiv] = floorplan_div+"_svg";  // adding _svg for internal processing
	//window.alert("floorplan_div "+floorplan_div+"selectedDiv="+selectedDiv);
	}
	
	//window.alert("cvjs_displayTopNavigationBar "+cvjs_rPaperIndex(floorplan_div)+" "+display_status);
	//cvjs_loadTopIconMenuVisible[cvjs_rPaperIndex(floorplan_div)] = display_status;
	cvjs_loadTopIconMenuVisible[selectedDiv] = display_status;
}


/**
 * Controls top menu navigation bar visibility
 * @param {boolean} display_status - default is true, use false to hide menu bar
 * @param {String} floorplan_div - div in which CADViewer is implemented
*/
function cvjs_displayTopNavigationBar(display_status, floorplan_div){

	// check interface counter
	var selectedDiv = interfaceCounter;	
	var counter = cvjs_interfaceCounterIndex(floorplan_div);
	// zero is the default interface so we add one if 0
	if (counter>0){
		// we have a match
		selectedDiv = counter;
	}
	else{
		interfaceCounter++;
		selectedDiv = interfaceCounter;
		interfaceCounterDiv[selectedDiv] = floorplan_div+"_svg";  // adding _svg for internal processing
	//window.alert("floorplan_div "+floorplan_div+"selectedDiv="+selectedDiv);
	}

//	cvjs_loadTopIconNavigationVisible[cvjs_rPaperIndex(floorplan_div)] = display_status;
	cvjs_loadTopIconNavigationVisible[selectedDiv] = display_status;
}



function cvjs_changePreviousIconPage_TopIconMenu(floorplan_div){
	
	cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)]--;
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)]<0) cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] = cvjs_TopIconMenu_maxPageNumber[cvjs_interfaceCounterIndex(floorplan_div)]-1;

	if (cvjs_loadTopIconMenuXML[cvjs_interfaceCounterIndex(floorplan_div)] )
		cvjs_LoadTopIconMenuXML(floorplan_div, cvjs_topIconMenu[cvjs_interfaceCounterIndex(floorplan_div)])
	else
		cvjs_LoadTopIconMenu(floorplan_div);	
}


function cvjs_changeNextIconPage_TopIconMenu(floorplan_div){
	
	cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)]++;
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)]>=cvjs_TopIconMenu_maxPageNumber[cvjs_interfaceCounterIndex(floorplan_div)]) cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] = 0; 
	
	if (cvjs_loadTopIconMenuXML[cvjs_interfaceCounterIndex(floorplan_div)] )
		cvjs_LoadTopIconMenuXML(floorplan_div, cvjs_topIconMenu[cvjs_interfaceCounterIndex(floorplan_div)])
	else
		cvjs_LoadTopIconMenu(floorplan_div);
}


function cvjs_LoadTopNavigationMenu(floorplan_div){

		// 3.301c
		if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){	
			floorplan_div = floorplan_div.substring(0,floorplan_div.length-4);
		}
		else{
			// do nothing
		}

		jQuery("#topIconMenu_placeholder_2_"+floorplan_div+"_svg").html("");

		// NAVIGATION MENU				
		jQuery("#topIconMenu_placeholder_2_"+floorplan_div+"_svg").append("<div id=\"floatNavigationMenu_topBar_"+floorplan_div+"\" style=\"flex-direction:row;\" class=\"changePagebox_topBar\"><a class=\"cvjs_rotateforward_topBar\" id=\"cvjs_rotateforward_topBar_"+floorplan_div+"\" href=\"javascript:cvjs_rotateForward(\'"+floorplan_div+"\');\"></a><a class=\"cvjs_rotateback_topBar\" id=\"cvjs_rotateback_topBar_"+floorplan_div+"\" href=\"javascript:cvjs_rotateBackward(\'"+floorplan_div+"\');\"></a><a class=\"cvjs_fastback_topBar\" id=\"cvjs_fastback_topBar_"+floorplan_div+"\" href=\"javascript:cvjs_firstPage(\'"+floorplan_div+"\');\"></a><a class=\"cvjs_back_topBar\" id=\"cvjs_back_topBar_"+floorplan_div+"\" href=\"javascript:cvjs_previousPage(\'"+floorplan_div+"\');\"></a><a class=\"cvjs_enterpagenumber_topBar\" id=\"cvjs_enterpagenumber_topBar_"+floorplan_div+"\" href=\"javascript:cvjs_enterPageChangeNumber(\'"+floorplan_div+"\');\"></a><a class=\"cvjs_selectpagefromlist_topBar\" id=\"cvjs_selectpagefromlist_topBar_"+floorplan_div+"\" href=\"javascript:cvjs_PageChangeList(\'"+floorplan_div+"\');\"></a><div class=\"floatpagemenuText1_topBar\" id=\"floatpagemenuText1_topBar_"+floorplan_div+"_svg\" style=\"flex-direction:row;\">nr </div><div class=\"floatpagemenuText2_topBar\" id=\"floatpagemenuText2_topBar_"+floorplan_div+"_svg\" style=\"flex-direction:row;\">page name</div><a class=\"cvjs_forward_topBar\" id=\"cvjs_forward_topBar_"+floorplan_div+"\" href=\"javascript:cvjs_nextPage(\'"+floorplan_div+"\');\"></a><a class=\"cvjs_fastforward_topBar\" id=\"cvjs_fastforward_topBar_"+floorplan_div+"\" href=\"javascript:cvjs_lastPage(\'"+floorplan_div+"\');\"></a></div>");
				
		cvjs_navigationMenuItemHighlight(floorplan_div, "topIconMenu_placeholder_2", "cvjs_rotateforward_topBar", languageTable.languages[cvjs_currentLanguage].PageModal.RotateForward, 1);
		cvjs_navigationMenuItemHighlight(floorplan_div, "topIconMenu_placeholder_2", "cvjs_rotateback_topBar", languageTable.languages[cvjs_currentLanguage].PageModal.RotateBack, 1);
		cvjs_navigationMenuItemHighlight(floorplan_div, "topIconMenu_placeholder_2", "cvjs_fastback_topBar", languageTable.languages[cvjs_currentLanguage].PageModal.First, 1);
		cvjs_navigationMenuItemHighlight(floorplan_div, "topIconMenu_placeholder_2", "cvjs_back_topBar", languageTable.languages[cvjs_currentLanguage].PageModal.Previous,1 );
		cvjs_navigationMenuItemHighlight(floorplan_div, "topIconMenu_placeholder_2", "cvjs_enterpagenumber_topBar", languageTable.languages[cvjs_currentLanguage].PageModal.EnterPage,1 );
		cvjs_navigationMenuItemHighlight(floorplan_div, "topIconMenu_placeholder_2", "cvjs_selectpagefromlist_topBar", languageTable.languages[cvjs_currentLanguage].PageModal.SelectPageFromList,2 );
		cvjs_navigationMenuItemHighlight(floorplan_div, "topIconMenu_placeholder_2", "cvjs_forward_topBar", languageTable.languages[cvjs_currentLanguage].PageModal.Next, 2);
		cvjs_navigationMenuItemHighlight(floorplan_div, "topIconMenu_placeholder_2", "cvjs_fastforward_topBar", languageTable.languages[cvjs_currentLanguage].PageModal.Last, 2);

		// MAKE A RESIZE CHECK TO MAKE THE MENU POSITION PROPERLY
		jQuery(window).trigger('resize');	
	
//		console.log(cvjs_loadTopIconNavigationVisible[cvjs_interfaceCounterIndex(floorplan_div)]);
		
		if (cvjs_loadTopIconNavigationVisible[cvjs_interfaceCounterIndex(floorplan_div)]==false)
			jQuery("#topIconMenu_placeholder_2_"+floorplan_div+"_svg").hide();
		
}


function cvjs_LoadTopIconMenu(floorplan_div){
				
	// 3.301c
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){	
		floorplan_div = floorplan_div.substring(0,floorplan_div.length-4);
	}
	else{
		// do nothing
	}
		
	jQuery("#topIconMenu_placeholder_1_"+floorplan_div+"_svg").html("");
	// ALWAYS ADD A LEFT LINE IMAGE
	cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_0", "none", floorplan_div, "cvjsIcon_base_left.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.LayerList );
	// PAGE CHANGE ARROW
//	cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_0_2", "cvjs_changeNextIconPage_TopIconMenu", floorplan_div, "cvjsIcon_dra_p1_0_2_NextMenu.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.NextMenuPage );
	cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_0_2prev", "cvjs_changePreviousIconPage_TopIconMenu", floorplan_div, "cvjsIcon_dra_p1_0_2_PreviousMenu_small.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.PreviousPage );
	cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_0_2", "cvjs_changeNextIconPage_TopIconMenu", floorplan_div, "cvjsIcon_dra_p1_0_2_NextMenu_small.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.NextMenuPage );

	// 3.3.05d
//	var placeholderwidth = 40+2;  // pageChange
	
	var placeholderwidth = 40+2;  // pageChange   2x23
			
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 0) placeholderwidth = placeholderwidth + 15*30;	
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 1) placeholderwidth = placeholderwidth + 19*30;	
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 2) placeholderwidth = placeholderwidth + 11*30;	

//	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 3) placeholderwidth = placeholderwidth + 12*30;	
//	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 4) placeholderwidth = placeholderwidth + 4*30;	

	// 3.3.06de
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 3) placeholderwidth = placeholderwidth + 10*30;	
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 4) placeholderwidth = placeholderwidth + 12*30;	
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 5) placeholderwidth = placeholderwidth + 4*30;	



//	jQuery("#topIconMenu_placeholder_1_"+floorplan_div+"_svg").css({width : placeholderwidth});
	jQuery("#topIconMenu_placeholder_1_"+floorplan_div+"_svg").css({width : 100});
	// 3.3.05d
		
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 0){	
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_1", "cvjs_LayerList", floorplan_div, "cvjsIcon_dra_p1_1_1_LayerList.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.LayerList );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_2", "cvjs_Print", floorplan_div, "cvjsIcon_dra_p1_1_2_Print.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.Print );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_1", "cvjs_toggleBlackWhite", floorplan_div, "cvjsIcon_dra_p1_4_1_ToggleBlackWhite.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.Toggle );							
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_2", "cvjs_setBackgroundColor", floorplan_div, "cvjsIcon_dra_p1_4_2_BackgroundColor.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.Background );		
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_5_1", "cvjs_openFileLoadToServer", floorplan_div, "cvjsIcon_dra_p1_5_1_FileLoad.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.FileLoad );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_5_2", "cvjs_interactiveSearchText", floorplan_div, "cvjsIcon_dra_p1_5_2_SearchText.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.Search );	
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_6_1", "cvjs_displayInformationModal_Mode", 0, "cvjsIcon_dra_p1_6_1_Information.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.About );		
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_6_2", "cvjs_interactiveLayerOff", floorplan_div, "cvjsIcon_dra_p1_6_2_LayerOff.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.LayerOff );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_7_1", "cvjs_swapLayersInDrawing", floorplan_div, "cvjsIcon_dra_p1_7_1_SwapLayers.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.SwapLayers );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_7_2", "cvjs_allLayersInDrawingOn", floorplan_div, "cvjsIcon_dra_p1_7_2_LayerOn.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.AllLayersOn );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_8_1", "cvjs_Measurement", floorplan_div, "cvjsIcon_dra_p1_8_1_Measurement.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.Measurement );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_8_2", "cvjs_calibrateMeasurement", floorplan_div, "cvjsIcon_dra_p1_8_2_CalibrateMeasurement.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.Calibrate );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_9_1", "cvjs_displayMagnifyingGlass", floorplan_div, "cvjsIcon_dra_p1_9_1_ToggleBirdsEyeWindow.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.BirdsEye );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_9_2", "cvjs_activateLineThicknessModal", floorplan_div, "cvjsIcon_dra_p1_9_2_AdjustLineThickness.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.LineThickness );
	}
	
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 1){	
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_9_1", "cvjs_mergeDXFDWG", floorplan_div, "cvjsIcon_dra_p2_9_1_MergeRedline.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.MergeAsDXF );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_9_2", "cvjs_publishPDF", floorplan_div, "cvjsIcon_dra_p2_9_2_PublishPDF.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.PublishAsPDF );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_2", "cvjs_loadStickyNotesRedlinesUser", floorplan_div, "cvjsIcon_dra_p2_1_2_LoadRedline.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.LoadRedline );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_1", "cvjs_saveStickyNotesRedlinesUser", floorplan_div, "cvjsIcon_dra_p2_1_1_SaveRedline.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.SaveRedline );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_3_1", "cvjs_setRedlineColor", floorplan_div, "cvjsIcon_dra_p2_3_1_RedlineColor.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.Color );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_3_2", "cvjs_setRedlineThickness", floorplan_div, "cvjsIcon_dra_p2_3_2_RedlineThickness.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.Thickness );		
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_1", "cvjs_drawStickyNote", floorplan_div, "cvjsIcon_dra_p2_4_1_StickyNote.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.StickyNote );							
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_8_2", "cvjs_drawRedlineText", floorplan_div, "cvjsIcon_dra_p2_8_2_RedlineText.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.Text );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_5_1", "cvjs_drawRedline_Freehand", floorplan_div, "cvjsIcon_dra_p2_5_1_FreehandRedline.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.Freehand );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_5_2", "cvjs_drawRedlineEllipseCloud", floorplan_div, "cvjsIcon_dra_p2_5_2_RedlineCloud.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.Cloud );	
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_6_1", "cvjs_drawRedlineFilledPolygon", floorplan_div, "cvjsIcon_dra_p2_6_1_RedlineFilledPolygon.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.FilledPolygon );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_6_2", "cvjs_drawRedlinePolyline", floorplan_div, "cvjsIcon_dra_p2_6_2_RedlinePolygon.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.Polyline );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_7_1", "cvjs_drawRedlineFilledRectangle", floorplan_div, "cvjsIcon_dra_p2_7_1_RedlineFilledRect.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.FilledRectangle );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_7_2", "cvjs_drawRedlineRectangle", floorplan_div, "cvjsIcon_dra_p2_7_2_RedlineRect.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.Rectangle );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_8_1", "cvjs_drawRedlineArrow", floorplan_div, "cvjsIcon_dra_p2_8_1_RedlineArrow.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.Arrow );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_2_1", "cvjs_deleteSingleRedline", floorplan_div, "cvjsIcon_dra_p2_2_1_DeleteSingleRedline.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.DeleteSingle );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_2_2", "cvjs_deleteLastRedline", floorplan_div, "cvjsIcon_dra_p2_2_2_DeleteLastRedline.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.DeleteLast );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_2", "cvjs_clearCurrentRedline", floorplan_div, "cvjsIcon_dra_p2_4_2_ClearRedlines.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.ClearAll );		
	}
	
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 2){	
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_2_2", "cvjs_insertImageLink", floorplan_div, "cvjsIcon_dra_p3_2_2_InsertImageLink.png", languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.InsertLink );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_2_1", "cvjs_loadAllImageLinks", floorplan_div, "cvjsIcon_dra_p3_2_1_LoadImageLinks.png", languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.LoadLink );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_3_1", "cvjs_saveAllImageLinks", floorplan_div, "cvjsIcon_dra_p3_3_1_SaveImageLinks.png", languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.SaveLink );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_3_2", "cvjs_clearAllImageLinks", floorplan_div, "cvjsIcon_dra_p3_3_2_ClearImageLinks.png", languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.ClearLink );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_1", "cvjs_quickCount", floorplan_div, "cvjsIcon_dra_p3_4_1_QuickCount.png", languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.QuickCount );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_2", "cvjs_showMeCounts", floorplan_div, "cvjsIcon_dra_p3_4_2_SummaryQuickCount.png", languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.CountSum );		
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_5_1", "cvjs_clearQuickCounts", floorplan_div, "cvjsIcon_dra_p3_5_1_ClearQuickCount.png", languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.ClearCount );							
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p3_1_1", "cvjs_compareDrawings_LoadSecondDrawing", floorplan_div, "cvjsIcon_dra_p4_1_1_LoadSecondCompare.png", languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.CompareLoad );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p3_1_2", "cvjs_compareDrawings_ToggleDrawings", floorplan_div, "cvjsIcon_dra_p4_1_2_ToggleCompareIndividually.png", languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.CompareToggle );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p3_2_1", "cvjs_compareDrawings_ToggleDrawingOverlay", floorplan_div, "cvjsIcon_dra_p4_2_1_ToggleCompareOverlaid.png", languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.CompareToggleOverlay );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p3_2_2", "cvjs_exitCompareDrawings", floorplan_div, "cvjsIcon_dra_p4_2_2_ExitCompare.png", languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.CompareExit );
	}

	// NOT MADE GENERAL PUBLIC YET
	
	// 	setting max page
	//	cvjs_TopIconMenu_maxPageNumber[0]=6;		
	
	// 3.3.06e	
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 3){	
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_2x", "cvjs_loadSpaceObjectsUser", floorplan_div, "cvjsIcon_dra_p5_7_1_LoadSpaceOverlay.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.LoadRedline );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_2", "cvjs_changeSpaceObjectDisplayMode", floorplan_div, "cvjsIcon_dra_p5_1_2_SpaceObjectEditMode.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Mode );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_3_2", "cvjs_addPolygonSpaceObject", floorplan_div, "cvjsIcon_dra_p5_3_2_PolygonSpaceObject.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Polygon );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_3_1", "cvjs_addRectangleSpaceObject", floorplan_div, "cvjsIcon_dra_p5_3_1_RectangleSpaceObject.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Rect );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_1", "cvjs_addCircleSpaceObject", floorplan_div, "cvjsIcon_dra_p5_4_1_CircleSpaceObject.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Circle );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_2", "cvjs_copyCircleSpaceObject", floorplan_div, "cvjsIcon_dra_p5_4_2_CopyCircleSpaceObject.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.CopyCircle );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_5_1", "cvjs_deleteSpaceObject", floorplan_div, "cvjsIcon_dra_p5_5_1_DeleteSpaceObject.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Delete );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_2_1", "cvjs_loadDrawingsWithSpaceObjects", floorplan_div, "cvjsIcon_dra_p5_2_1_LoadPreProcessSpaceObjects.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Load );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_2_2", "cvjs_LayerListSpaceObject", floorplan_div, "cvjsIcon_dra_p5_2_2_SpaceObjectsLayerList.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.LayerList );
	}
	

	// 3.3.06e
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 4){	
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_1", "cvjs_spaceObjectSettings", floorplan_div, "cvjsIcon_dra_p5_1_1_Settings.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Settings );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_2", "cvjs_changeSpaceObjectDisplayMode", floorplan_div, "cvjsIcon_dra_p5_1_2_SpaceObjectEditMode.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Mode );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_2_1", "cvjs_loadDrawingsWithSpaceObjects", floorplan_div, "cvjsIcon_dra_p5_2_1_LoadPreProcessSpaceObjects.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Load );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_2_2", "cvjs_LayerListSpaceObject", floorplan_div, "cvjsIcon_dra_p5_2_2_SpaceObjectsLayerList.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.LayerList );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_3_1", "cvjs_addRectangleSpaceObject", floorplan_div, "cvjsIcon_dra_p5_3_1_RectangleSpaceObject.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Rect );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_3_2", "cvjs_addPolygonSpaceObject", floorplan_div, "cvjsIcon_dra_p5_3_2_PolygonSpaceObject.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Polygon );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_1", "cvjs_addCircleSpaceObject", floorplan_div, "cvjsIcon_dra_p5_4_1_CircleSpaceObject.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Circle );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_2", "cvjs_copyCircleSpaceObject", floorplan_div, "cvjsIcon_dra_p5_4_2_CopyCircleSpaceObject.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.CopyCircle );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_5_1", "cvjs_deleteSpaceObject", floorplan_div, "cvjsIcon_dra_p5_5_1_DeleteSpaceObject.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Delete );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_5_2", "cvjs_setSpacePolygonOnLayer", floorplan_div, "cvjsIcon_dra_p5_5_2_MakeSpaceObjectOnPolygon.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.SelectPolygon );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_6_1", "cvjs_displaySpaceObjectsStructure", floorplan_div, "cvjsIcon_dra_p5_6_1_SpaceObjectDisplayMode.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Publish );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_6_2", "cvjs_saveAsSVG", floorplan_div, "cvjsIcon_dra_p5_6_2_DownloadProcessedSpaceObjects.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.DownloadSVG );
	}
	// 3.3.06e
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 5){	
//			cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_1", "cvjs_compareDrawings_LoadSecondDrawing", floorplan_div, "cvjsIcon_dra_p4_1_1_LoadSecondCompare.png", languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.CompareLoad );
//			cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_2", "cvjs_compareDrawings_ToggleDrawings", floorplan_div, "cvjsIcon_dra_p4_1_2_ToggleCompareIndividually.png", languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.CompareToggle );
//			cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_2_1", "cvjs_compareDrawings_ToggleDrawingOverlay", floorplan_div, "cvjsIcon_dra_p4_2_1_ToggleCompareOverlaid.png", languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.CompareToggleOverlay );
//			cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_2_2", "cvjs_exitCompareDrawings", floorplan_div, "cvjsIcon_dra_p4_2_2_ExitCompare.png", languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.CompareExit );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_7_1", "cvjs_start_collab", floorplan_div, "cvjsIcon_dra_p4_7_1_JoinCollab.png", languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.CollaborationJoinSession );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_7_2", "cvjs_make_collab_presenter", floorplan_div, "cvjsIcon_dra_p4_7_2_TakeControl.png", languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.CollaborationTakeControl );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_8_1", "cvjs_clear_collab_redline", floorplan_div, "cvjsIcon_dra_p4_8_1_ClearCollabRedlines.png", languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.CollaborationClearSession );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_8_2", "cvjs_stop_collab", floorplan_div, "cvjsIcon_dra_p4_8_2_LeaveCollabSession.png", languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.CollaborationLeaveSession );
	}
			
//		// resize the window, CHECK if _position or _fixedSize
//		cvjs_windowResize_position(true, floorplan_div );	
//		var floorplanMenu = "#floatNavigationMenu_"+floorplan_div+"_svg";
//		jQuery(floorplanMenu).show();
	
//	console.log(cvjs_loadTopIconMenuVisible[cvjs_interfaceCounterIndex(floorplan_div)]);
	
	if (cvjs_loadTopIconMenuVisible[cvjs_interfaceCounterIndex(floorplan_div)]==false)
		jQuery("#topIconMenu_placeholder_1_"+floorplan_div+"_svg").hide();
	
	
}			


// 3.3.05e
var cvjs_iconColumns = 0;
var cvjs_iconColumnsFlag = false;
var cvjs_iconmenu_pos_x = 0 ;
var cvjs_iconmenu_pos_y = 0;
var cvjs_initLoadMenuXML = true;

// 3.3.06c
var cvjs_gMenu_pos_x = 30 ; // 30
var cvjs_gMenu_pos_y = 20;  // 20

//		var pos = jQuery(floorplan).position();
//		jQuery('#gMenu_'+floorplan_div).offset({ top: pos.top+30, left: pos.left+20 });

		

function cvjs_LoadTopIconMenuXML(floorplan_div, cvjsIconMenu){


	// 3.301c
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){	
		floorplan_div = floorplan_div.substring(0,floorplan_div.length-4);
	}
	else{
		// do nothing
	}

	jQuery("#topIconMenu_placeholder_1_"+floorplan_div+"_svg").html("");
	// ALWAYS ADD A LEFT LINE IMAGE
	cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_0", "none", floorplan_div, "cvjsIcon_base_left.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.LayerList );
	// PAGE CHANGE ARROW
	cvjs_TopIconMenu_maxPageNumber[cvjs_interfaceCounterIndex(floorplan_div)] = cvjsIconMenu.cvjs.iconmenu.totalpages;

	
//window.alert(cvjs_interfaceCounterIndex(floorplan_div)+ "  "+ floorplan_div+"  " +cvjs_TopIconMenu_maxPageNumber[cvjs_interfaceCounterIndex(floorplan_div)]+" cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] "+cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)]);	


	if (cvjs_TopIconMenu_maxPageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 1){
		// do nothing, only single page		
		if (cvjs_Community_Version) cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_0_0", "cadviewer.com", floorplan_div, "cvjsIcon_dra_p1_0_0_CADViewer.png", "www.cadviewer.com" );				
	}
	else{
//		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_0_2", "cvjs_changeNextIconPage_TopIconMenu", floorplan_div, "cvjsIcon_dra_p1_0_2_NextMenu.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.NextMenuPage );	
	cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_0_2prev", "cvjs_changePreviousIconPage_TopIconMenu", floorplan_div, "cvjsIcon_dra_p1_0_2_PreviousMenu_small.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.PreviousPage );
	cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_0_2", "cvjs_changeNextIconPage_TopIconMenu", floorplan_div, "cvjsIcon_dra_p1_0_2_NextMenu_small.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.NextMenuPage );

// 3.3.05e
//		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_0_2", "cvjs_changeNextIconPage_TopIconMenu", floorplan_div, "cvjsIcon_dra_p1_0_2_NextMenuSmall.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.NextMenuPage );	
	}
		
	// check the current page
	// find all commands associated with current page inside cvjsIconMenu
	var commands;

	if (cvjsIconMenu.cvjs.iconmenu.totalpages == 1)
		commands = cvjsIconMenu.cvjs.iconmenu.pages.page.command;  // single page
	else
		commands = cvjsIconMenu.cvjs.iconmenu.pages.page[cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)]].command;
	
	
	// 3.3.05c
	var cvjs_customCommandText;	
	try{
		cvjs_customCommandText =cvjsIconMenu.cvjs.iconmenu.customcommand.tooltip ;
	}
	catch (err){
//		window.alert(err);	
		cvjs_customCommandText =["no text in xml config file", "no text in xml config file", "no text in xml config file", "no text in xml config file", "no text in xml config file", "no text in xml config file", "no text in xml config file", "no text in xml config file", "no text in xml config file", "no text in xml config file"] ;
	}		
	
	// 3.3.05e
	try{
		 cvjs_iconColumns = cvjsIconMenu.cvjs.iconmenu.icons_per_row;		 
		 if (cvjs_iconColumns>0 ){
			cvjs_iconColumnsFlag  = true;
		 }
	}
	catch (err){
		console.log("error 1 "+err);
		cvjs_iconColumnsFlag  = false;

	}	

	
	try{
		var temp1 = cvjsIconMenu.cvjs.iconmenu.icon_page_left_x;	
		cvjs_iconmenu_pos_x = parseInt(temp1);		 
		if (Number.isNaN(cvjs_iconmenu_pos_x)) cvjs_iconmenu_pos_x = 0;
	
	}
	catch (err){
		console.log("ERR"+err);
		cvjs_iconmenu_pos_x = 0;
	}		
	try{
		var temp1 = cvjsIconMenu.cvjs.iconmenu.icon_page_left_y;		 
		cvjs_iconmenu_pos_y = parseInt(temp1)		 
		if (Number.isNaN(cvjs_iconmenu_pos_y)) cvjs_iconmenu_pos_y = 0;
	}
	catch (err){
		console.log("ERR"+err);
		cvjs_iconmenu_pos_y = 0;
	}		

	
	// 3.3.06c
	try{
		var temp1 = cvjsIconMenu.cvjs.zoommenu.location_left_x;		 
		cvjs_gMenu_pos_x = parseInt(temp1)		 
		if (Number.isNaN(cvjs_gMenu_pos_x)) cvjs_gMenu_pos_x = 30;
	}
	catch (err){
		console.log("ERR"+err);
		cvjs_gMenu_pos_x = 0;
	}		
	try{
		var temp1 = cvjsIconMenu.cvjs.zoommenu.location_left_y;		 
		cvjs_gMenu_pos_y = parseInt(temp1)		 
		if (Number.isNaN(cvjs_gMenu_pos_y)) cvjs_gMenu_pos_y = 20;
	}
	catch (err){
		console.log("ERR"+err);
		cvjs_gMenu_pos_y = 0;
	}		
	// 3.3.06c




	// we have to redraw
	
	
	// 3.3.05d
	// 3.3.05e
	var placeholderwidth = 0;  // pageChange
	var iconColumnsCounter = 0;
	
	if (cvjsIconMenu.cvjs.iconmenu.totalpages == 1) 
		placeholderwidth = 2;  // single page only
	else 
		placeholderwidth = 2+46;// page change icon

	
	if (cvjs_Community_Version && cvjsIconMenu.cvjs.iconmenu.totalpages == 1)
		placeholderwidth+=38;
	
	
	
	if (!cvjs_iconColumnsFlag){ // we have a one row menu with all icons
		placeholderwidth = placeholderwidth + commands.length*30;	

		// 3.3.07c
		//window.alert(cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)]);
		if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 0){
				// if first row, we add an extra field for i-commmand.
		    // 
			placeholderwidth = placeholderwidth + (1)*30;	
		}
	}
	else{
		placeholderwidth = placeholderwidth + cvjs_iconColumns*30;	
	}
		

	jQuery("#topIconMenu_placeholder_1_"+floorplan_div+"_svg").css({width : placeholderwidth});
		
	
	// squeeze the placeholder
	//if ( iconColumns < commands.length) 
	//	jQuery("#topIconMenu"+"_"+floorplan_div+"_svg").css({height: '31px'});
		
//	jQuery("#topIconMenu_placeholder_1_"+floorplan_div+"_svg").css({overflow : 'hidden'});
	// 3.3.05d

	
		
	
//	window.alert(cvjs_customCommandText.length)
//window.alert(commands+"  "+commands.length);

	var about=false;

	for (i=0; i<commands.length; i++){

	if (cvjs_debug) console.log(commands[i]);

		// 3.3.05e
		if ( cvjs_iconColumnsFlag && iconColumnsCounter == cvjs_iconColumns ){
			cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_0", "none", floorplan_div, "cvjsIcon_dra_p1_0_2_Blank.png", "" );
			iconColumnsCounter = 0;
		}
	
		iconColumnsCounter++;

		if (commands[i] == "cvjs_LayerList"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_1", "cvjs_LayerList", floorplan_div, "cvjsIcon_dra_p1_1_1_LayerList.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.LayerList );  continue;} 
		if (commands[i] == "cvjs_Print"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_2", "cvjs_Print", floorplan_div, "cvjsIcon_dra_p1_1_2_Print.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.Print );  continue;} 
		if (commands[i] == "cvjs_toggleBlackWhite"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_1", "cvjs_toggleBlackWhite", floorplan_div, "cvjsIcon_dra_p1_4_1_ToggleBlackWhite.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.Toggle );   continue;} 
		if (commands[i] == "cvjs_setBackgroundColor"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_2", "cvjs_setBackgroundColor", floorplan_div, "cvjsIcon_dra_p1_4_2_BackgroundColor.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.Background );   continue;} 
		if (commands[i] == "cvjs_openFileLoadToServer"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_5_1", "cvjs_openFileLoadToServer", floorplan_div, "cvjsIcon_dra_p1_5_1_FileLoad.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.FileLoad );   continue;} 
		if (commands[i] == "cvjs_interactiveSearchText"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_5_2", "cvjs_interactiveSearchText", floorplan_div, "cvjsIcon_dra_p1_5_2_SearchText.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.Search ); continue;} 
		if (commands[i] == "cvjs_About"){ about=true; cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_6_1", "cvjs_displayInformationModal_Mode", 0, "cvjsIcon_dra_p1_6_1_Information.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.About );  continue;} 
		if (commands[i] == "cvjs_Settings"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_12_1", "cvjs_Settings", floorplan_div, "cvjsIcon_dra_p1_12_1_Settings.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.Settings );  continue;} 
		if (commands[i] == "cvjs_interactiveLayerOff"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_6_2", "cvjs_interactiveLayerOff", floorplan_div, "cvjsIcon_dra_p1_6_2_LayerOff.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.LayerOff );  continue;} 
		if (commands[i] == "cvjs_swapLayersInDrawing"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_7_1", "cvjs_swapLayersInDrawing", floorplan_div, "cvjsIcon_dra_p1_7_1_SwapLayers.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.SwapLayers );  continue;} 
		if (commands[i] == "cvjs_allLayersInDrawingOn"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_7_2", "cvjs_allLayersInDrawingOn", floorplan_div, "cvjsIcon_dra_p1_7_2_LayerOn.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.AllLayersOn );  continue;} 
		if (commands[i] == "cvjs_Measurement"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_8_1", "cvjs_Measurement", floorplan_div, "cvjsIcon_dra_p1_8_1_Measurement.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.Measurement );   continue;} 
		if (commands[i] == "cvjs_calibrateMeasurement"){  cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_8_2", "cvjs_calibrateMeasurement", floorplan_div, "cvjsIcon_dra_p1_8_2_CalibrateMeasurement.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.Calibrate ); continue;} 
		if (commands[i] == "cvjs_displayMagnifyingGlass"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_9_1", "cvjs_displayMagnifyingGlass", floorplan_div, "cvjsIcon_dra_p1_9_1_ToggleBirdsEyeWindow.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.BirdsEye );  continue;} 
		if (commands[i] == "cvjs_activateLineThicknessModal"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_9_2", "cvjs_activateLineThicknessModal", floorplan_div, "cvjsIcon_dra_p1_9_2_AdjustLineThickness.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.LineThickness );  continue;} 

		if (commands[i] == "cvjs_mergeDXFDWG"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p2_9_1", "cvjs_mergeDXFDWG", floorplan_div, "cvjsIcon_dra_p2_9_1_MergeRedline.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.MergeAsDXF );  continue;} 
		if (commands[i] == "cvjs_publishPDF"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p2_9_2", "cvjs_publishPDF", floorplan_div, "cvjsIcon_dra_p2_9_2_PublishPDF.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.PublishAsPDF );  continue;} 
		if (commands[i] == "cvjs_loadStickyNotesRedlinesUser"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_2", "cvjs_loadStickyNotesRedlinesUser", floorplan_div, "cvjsIcon_dra_p2_1_2_LoadRedline.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.LoadRedline );  continue;} 
		if (commands[i] == "cvjs_saveStickyNotesRedlinesUser"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_1", "cvjs_saveStickyNotesRedlinesUser", floorplan_div, "cvjsIcon_dra_p2_1_1_SaveRedline.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.SaveRedline );   continue;} 
		if (commands[i] == "cvjs_setRedlineColor"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_3_1", "cvjs_setRedlineColor", floorplan_div, "cvjsIcon_dra_p2_3_1_RedlineColor.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.Color );  continue;} 
		if (commands[i] == "cvjs_setRedlineThickness"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_3_2", "cvjs_setRedlineThickness", floorplan_div, "cvjsIcon_dra_p2_3_2_RedlineThickness.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.Thickness );		  continue;} 
		if (commands[i] == "cvjs_drawStickyNote"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_1", "cvjs_drawStickyNote", floorplan_div, "cvjsIcon_dra_p2_4_1_StickyNote.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.StickyNote );							  continue;} 
		if (commands[i] == "cvjs_drawRedlineText"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_8_2", "cvjs_drawRedlineText", floorplan_div, "cvjsIcon_dra_p2_8_2_RedlineText.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.Text );  continue;} 
		if (commands[i] == "cvjs_drawRedline_Freehand"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_5_1", "cvjs_drawRedline_Freehand", floorplan_div, "cvjsIcon_dra_p2_5_1_FreehandRedline.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.Freehand );   continue;} 
		if (commands[i] == "cvjs_drawRedlineEllipseCloud"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_5_2", "cvjs_drawRedlineEllipseCloud", floorplan_div, "cvjsIcon_dra_p2_5_2_RedlineCloud.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.Cloud );	  continue;} 
		if (commands[i] == "cvjs_drawRedlineFilledPolygon"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_6_1", "cvjs_drawRedlineFilledPolygon", floorplan_div, "cvjsIcon_dra_p2_6_1_RedlineFilledPolygon.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.FilledPolygon );   continue;} 
		if (commands[i] == "cvjs_drawRedlinePolyline"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_6_2", "cvjs_drawRedlinePolyline", floorplan_div, "cvjsIcon_dra_p2_6_2_RedlinePolygon.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.Polyline );   continue;} 
		if (commands[i] == "cvjs_drawRedlineFilledRectangle"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_7_1", "cvjs_drawRedlineFilledRectangle", floorplan_div, "cvjsIcon_dra_p2_7_1_RedlineFilledRect.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.FilledRectangle );  continue;} 
		if (commands[i] == "cvjs_drawRedlineRectangle"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_7_2", "cvjs_drawRedlineRectangle", floorplan_div, "cvjsIcon_dra_p2_7_2_RedlineRect.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.Rectangle );  continue;} 
		if (commands[i] == "cvjs_drawRedlineArrow"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_8_1", "cvjs_drawRedlineArrow", floorplan_div, "cvjsIcon_dra_p2_8_1_RedlineArrow.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.Arrow );  continue;} 
		if (commands[i] == "cvjs_deleteSingleRedline"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_2_1", "cvjs_deleteSingleRedline", floorplan_div, "cvjsIcon_dra_p2_2_1_DeleteSingleRedline.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.DeleteSingle );  continue;} 
		if (commands[i] == "cvjs_deleteLastRedline"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_2_2", "cvjs_deleteLastRedline", floorplan_div, "cvjsIcon_dra_p2_2_2_DeleteLastRedline.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.DeleteLast );  continue;} 
		if (commands[i] == "cvjs_clearCurrentRedline"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_2", "cvjs_clearCurrentRedline", floorplan_div, "cvjsIcon_dra_p2_4_2_ClearRedlines.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.ClearAll );		   continue;} 
	    // 3.3.02d
		if (commands[i] == "cvjs_PinMarker"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_10_1", "cvjs_PinMarker", floorplan_div, "cvjsIcon_dra_p6_1_1_PinMarker.png", languageTable.languages[cvjs_currentLanguage].IconPage_p6_1.PinMarker );		   continue;} 

		
		if (commands[i] == "cvjs_insertImageLink"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_2_2", "cvjs_insertImageLink", floorplan_div, "cvjsIcon_dra_p3_2_2_InsertImageLink.png", languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.InsertLink );   continue;} 
		if (commands[i] == "cvjs_loadAllImageLinks"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_2_1", "cvjs_loadAllImageLinks", floorplan_div, "cvjsIcon_dra_p3_2_1_LoadImageLinks.png", languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.LoadLink );  continue;} 
		if (commands[i] == "cvjs_saveAllImageLinks"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_3_1", "cvjs_saveAllImageLinks", floorplan_div, "cvjsIcon_dra_p3_3_1_SaveImageLinks.png", languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.SaveLink );   continue;} 
		if (commands[i] == "cvjs_clearAllImageLinks"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_3_2", "cvjs_clearAllImageLinks", floorplan_div, "cvjsIcon_dra_p3_3_2_ClearImageLinks.png", languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.ClearLink );   continue;} 
		if (commands[i] == "cvjs_quickCount"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_1", "cvjs_quickCount", floorplan_div, "cvjsIcon_dra_p3_4_1_QuickCount.png", languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.QuickCount );   continue;} 
		if (commands[i] == "cvjs_showMeCounts"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_2", "cvjs_showMeCounts", floorplan_div, "cvjsIcon_dra_p3_4_2_SummaryQuickCount.png", languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.CountSum );		   continue;} 
		if (commands[i] == "cvjs_clearQuickCounts"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_5_1", "cvjs_clearQuickCounts", floorplan_div, "cvjsIcon_dra_p3_5_1_ClearQuickCount.png", languageTable.languages[cvjs_currentLanguage].IconPage_p3_8.ClearCount );							   continue;} 
		if (commands[i] == "cvjs_compareDrawings_LoadSecondDrawing"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p3_1_1", "cvjs_compareDrawings_LoadSecondDrawing", floorplan_div, "cvjsIcon_dra_p4_1_1_LoadSecondCompare.png", languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.CompareLoad );  continue;} 
		if (commands[i] == "cvjs_compareDrawings_ToggleDrawings"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p3_1_2", "cvjs_compareDrawings_ToggleDrawings", floorplan_div, "cvjsIcon_dra_p4_1_2_ToggleCompareIndividually.png", languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.CompareToggle );   continue;} 
		if (commands[i] == "cvjs_compareDrawings_ToggleDrawingOverlay"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p3_2_1", "cvjs_compareDrawings_ToggleDrawingOverlay", floorplan_div, "cvjsIcon_dra_p4_2_1_ToggleCompareOverlaid.png", languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.CompareToggleOverlay );   continue;} 
		if (commands[i] == "cvjs_exitCompareDrawings"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p3_2_2", "cvjs_exitCompareDrawings", floorplan_div, "cvjsIcon_dra_p4_2_2_ExitCompare.png", languageTable.languages[cvjs_currentLanguage].IconPage_p4_8.CompareExit );   continue;} 


		if (commands[i] == "cvjs_spaceObjectSettings") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_1", "cvjs_spaceObjectSettings", floorplan_div, "cvjsIcon_dra_p5_1_1_Settings.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Settings );   continue;}
		if (commands[i] == "cvjs_changeSpaceObjectDisplayMode") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_2", "cvjs_changeSpaceObjectDisplayMode", floorplan_div, "cvjsIcon_dra_p5_1_2_SpaceObjectEditMode.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Mode );   continue;}
		if (commands[i] == "cvjs_loadDrawingsWithSpaceObjects") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_2_1", "cvjs_loadDrawingsWithSpaceObjects", floorplan_div, "cvjsIcon_dra_p5_2_1_LoadPreProcessSpaceObjects.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Load );   continue;}
		if (commands[i] == "cvjs_LayerListSpaceObject") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_2_2", "cvjs_LayerListSpaceObject", floorplan_div, "cvjsIcon_dra_p5_2_2_SpaceObjectsLayerList.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.LayerList );   continue;}
		if (commands[i] == "cvjs_addRectangleSpaceObject") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_3_1", "cvjs_addRectangleSpaceObject", floorplan_div, "cvjsIcon_dra_p5_3_1_RectangleSpaceObject.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Rect );   continue;}
		if (commands[i] == "cvjs_addPolygonSpaceObject") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_3_2", "cvjs_addPolygonSpaceObject", floorplan_div, "cvjsIcon_dra_p5_3_2_PolygonSpaceObject.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Polygon );   continue;}
		if (commands[i] == "cvjs_addCircleSpaceObject") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_1", "cvjs_addCircleSpaceObject", floorplan_div, "cvjsIcon_dra_p5_4_1_CircleSpaceObject.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Circle );   continue;}
		if (commands[i] == "cvjs_copyCircleSpaceObject") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_2", "cvjs_copyCircleSpaceObject", floorplan_div, "cvjsIcon_dra_p5_4_2_CopyCircleSpaceObject.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.CopyCircle );   continue;}
		if (commands[i] == "cvjs_deleteSpaceObject") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_5_1", "cvjs_deleteSpaceObject", floorplan_div, "cvjsIcon_dra_p5_5_1_DeleteSpaceObject.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Delete );   continue;}
		if (commands[i] == "cvjs_setSpacePolygonOnLayer") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_5_2", "cvjs_setSpacePolygonOnLayer", floorplan_div, "cvjsIcon_dra_p5_5_2_MakeSpaceObjectOnPolygon.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.SelectPolygon );   continue;}
		if (commands[i] == "cvjs_displaySpaceObjectsStructure") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_6_1", "cvjs_displaySpaceObjectsStructure", floorplan_div, "cvjsIcon_dra_p5_6_1_SpaceObjectDisplayMode.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Publish );   continue;}

		// 3.3.07a
		if (commands[i] == "cvjs_loadSpaceObjectsUser"){cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_2x", "cvjs_loadSpaceObjectsUser", floorplan_div, "cvjsIcon_dra_p5_7_1_LoadSpaceOverlay.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.LoadSpaceObjects );  continue;}

		
		if (commands[i] == "cvjs_saveAsSVG") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_6_2", "cvjs_saveAsSVG", floorplan_div, "cvjsIcon_dra_p5_6_2_DownloadProcessedSpaceObjects.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.DownloadSVG );   continue;}

		// 3.3.05d
// 		add 20 new placeholders for custom commands
		if (commands[i] == "cvjs_customCommand_01") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_custom_0_1", "cvjs_customCommand_01", floorplan_div, "cvjsIcon_customCommand_01.png", cvjs_customCommandText[0] );   continue;}
		if (commands[i] == "cvjs_customCommand_02") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_custom_0_2", "cvjs_customCommand_02", floorplan_div, "cvjsIcon_customCommand_02.png", cvjs_customCommandText[1] );   continue;}
		if (commands[i] == "cvjs_customCommand_03") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_custom_0_3", "cvjs_customCommand_03", floorplan_div, "cvjsIcon_customCommand_03.png", cvjs_customCommandText[2] );   continue;}
		if (commands[i] == "cvjs_customCommand_04") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_custom_0_4", "cvjs_customCommand_04", floorplan_div, "cvjsIcon_customCommand_04.png", cvjs_customCommandText[3] );   continue;}
		if (commands[i] == "cvjs_customCommand_05") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_custom_0_5", "cvjs_customCommand_05", floorplan_div, "cvjsIcon_customCommand_05.png", cvjs_customCommandText[4] );   continue;}
		if (commands[i] == "cvjs_customCommand_06") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_custom_0_6", "cvjs_customCommand_06", floorplan_div, "cvjsIcon_customCommand_06.png", cvjs_customCommandText[5] );   continue;}
		if (commands[i] == "cvjs_customCommand_07") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_custom_0_7", "cvjs_customCommand_07", floorplan_div, "cvjsIcon_customCommand_07.png", cvjs_customCommandText[6] );   continue;}
		if (commands[i] == "cvjs_customCommand_08") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_custom_0_8", "cvjs_customCommand_08", floorplan_div, "cvjsIcon_customCommand_08.png", cvjs_customCommandText[7] );   continue;}
		if (commands[i] == "cvjs_customCommand_09") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_custom_0_9", "cvjs_customCommand_09", floorplan_div, "cvjsIcon_customCommand_09.png", cvjs_customCommandText[8] );   continue;}
		if (commands[i] == "cvjs_customCommand_10") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_custom_1_0", "cvjs_customCommand_10", floorplan_div, "cvjsIcon_customCommand_10.png", cvjs_customCommandText[9] );   continue;}
		if (commands[i] == "cvjs_customCommand_11") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_custom_1_1", "cvjs_customCommand_11", floorplan_div, "cvjsIcon_customCommand_01.png", cvjs_customCommandText[0] );   continue;}
		if (commands[i] == "cvjs_customCommand_12") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_custom_1_2", "cvjs_customCommand_12", floorplan_div, "cvjsIcon_customCommand_02.png", cvjs_customCommandText[11] );   continue;}
		if (commands[i] == "cvjs_customCommand_13") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_custom_1_3", "cvjs_customCommand_13", floorplan_div, "cvjsIcon_customCommand_03.png", cvjs_customCommandText[12] );   continue;}
		if (commands[i] == "cvjs_customCommand_14") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_custom_1_4", "cvjs_customCommand_14", floorplan_div, "cvjsIcon_customCommand_04.png", cvjs_customCommandText[13] );   continue;}
		if (commands[i] == "cvjs_customCommand_15") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_custom_1_5", "cvjs_customCommand_15", floorplan_div, "cvjsIcon_customCommand_05.png", cvjs_customCommandText[14] );   continue;}
		if (commands[i] == "cvjs_customCommand_16") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_custom_1_6", "cvjs_customCommand_16", floorplan_div, "cvjsIcon_customCommand_06.png", cvjs_customCommandText[15] );   continue;}
		if (commands[i] == "cvjs_customCommand_17") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_custom_1_7", "cvjs_customCommand_17", floorplan_div, "cvjsIcon_customCommand_07.png", cvjs_customCommandText[16] );   continue;}
		if (commands[i] == "cvjs_customCommand_18") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_custom_1_8", "cvjs_customCommand_18", floorplan_div, "cvjsIcon_customCommand_08.png", cvjs_customCommandText[17] );   continue;}
		if (commands[i] == "cvjs_customCommand_19") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_custom_1_9", "cvjs_customCommand_19", floorplan_div, "cvjsIcon_customCommand_09.png", cvjs_customCommandText[18] );   continue;}
		if (commands[i] == "cvjs_customCommand_20") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_custom_2_0", "cvjs_customCommand_20", floorplan_div, "cvjsIcon_customCommand_10.png", cvjs_customCommandText[19] );   continue;}


		
		// 4.1.02i   - new Space Image (Sensor) commands
		if (commands[i] == "cvjs_addFixedSizeImageSpaceObject") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_10_1", "cvjs_addFixedSizeImageSpaceObject", floorplan_div, "cvjsIcon_dra_p7_2_1_FixedSpaceImageObject.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.InsertSpaceImage );   continue;}
		if (commands[i] == "cvjs_addDragRectangleImageSpaceObject") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_10_2", "cvjs_addDragRectangleImageSpaceObject", floorplan_div, "cvjsIcon_dra_p7_2_2_RectangleSpaceImageObject.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.DragSpaceImage );   continue;}
		if (commands[i] == "cvjs_resizeSpaceImageObject") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_10_3", "cvjs_resizeSpaceImageObject", floorplan_div, "cvjsIcon_dra_p7_3_1_ResizeSpaceImageObject.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.ResizeSpaceImage );   continue;}
		if (commands[i] == "cvjs_deleteSpaceImageObject") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_10_4", "cvjs_deleteSpaceImageObject", floorplan_div, "cvjsIcon_dra_p5_5_1_DeleteSpaceObject.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.Delete );   continue;}
		// 4.1.03a  - have change saveAsSVGOnServer to saveAsSVG
		if (commands[i] == "cvjs_saveAsSVGOnServer") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_10_5", "cvjs_saveAsSVG", floorplan_div, "cvjsIcon_dra_p6_2_1_PublishSVG.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.DownloadSVG );   continue;}
		//if (commands[i] == "cvjs_saveAsSVGOnServer") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_5", "cvjs_saveAsSVGOnServer", floorplan_div, "cvjsIcon_dra_p6_2_1_PublishSVG.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.DownloadSVG );   continue;}

		
		
		// 3.3.02g
//			<command>cvjs_customLayerList</command>
//			<command>cvjs_downloadAsSVG</command>
//			<command>cvjs_mergeQR</command>
		if (commands[i] == "cvjs_customFileLoad"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_pA_5_1", "cvjs_customFileLoad", floorplan_div, "cvjsIcon_dra_p1_5_1_CustomFileLoad.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.FileLoad );   continue;} 
		if (commands[i] == "cvjs_customLayerList") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p5A_2_2", "cvjs_customLayerList", floorplan_div, "cvjsIcon_dra_p5_2_2_CustomLayerList.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.LayerList );   continue;}
		if (commands[i] == "cvjs_downloadAsSVG") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p6_6_1", "cvjs_downloadAsSVG", floorplan_div, "cvjsIcon_dra_p6_2_1_PublishSVG.png", languageTable.languages[cvjs_currentLanguage].IconPage_p5_8.DownloadSVG );   continue;}
		if (commands[i] == "cvjs_mergeQR") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p6_6_2", "cvjs_mergeQR", floorplan_div, "cvjsIcon_dra_p6_2_1_MergeQR.png", languageTable.languages[cvjs_currentLanguage].IconPage_p2_8.MergeWithQR );   continue;}
		
		

		}
	
	if (cvjs_TopIconMenu_maxPageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 1 && about==false){
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_6_1", "cvjs_displayInformationModal_Mode", 0, "cvjsIcon_dra_p1_6_1_Information.png", languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.About );		
	}
	
	
	// 3.3.05c
	if (cvjs_initLoadMenuXML){
		cvjs_initLoadMenuXML = false;
		cvjs_resizeWindow_position(floorplan_div);
	}
	
}	


// INTERACTIVE MENU SYSTEM _ END



function cvjs_rPaperIndex(floorplan_div){

	for (var i=0; i< floorplan_div_Array.length; i++){
		if (floorplan_div_Array[i].indexOf(floorplan_div)>-1 && floorplan_div_Array[i].length == floorplan_div.length){
//		if (cvjs_debug) console.log("cvjs_rPaperIndex "+floorplan_div+" return index "+i);
			return i;
		}
	}

	floorplan_div = floorplan_div+"_svg";
	
	for (var i=0; i< floorplan_div_Array.length; i++){
		if (floorplan_div_Array[i].indexOf(floorplan_div)>-1 && floorplan_div_Array[i].length == floorplan_div.length){
//		if (cvjs_debug) console.log("cvjs_rPaperIndex (with _svg) "+floorplan_div+" return index "+i);
			return i;
		}
	}
	
	
//	if (cvjs_debug) console.log("cvjs_rPaperIndex "+floorplan_div+"not defined returning -1  length="+ floorplan_div_Array.length);
		
	return -1;  // as default
}


/// PRO Variables needed in declarations 


var buildings;
var vqBuilding = "BUILDING_NAME_GOES_HERE";
var vqFloor = "FLOOR_NAME_GOES_HERE";
var vqRooms = new Array();
var vqTBorder  = new Array();
var vqText  = new Array();
var vqURLs  = new Array();

// INTERACTIVE MENU SYSTEM _ BEGIN

function cvjs_insertSingleIconImage(floorplan_div, placeholder, icon_image_code, cvjs_command_name, cvjs_command_parameter, cvjs_icon_image, cvjs_language_popup ){

// hack!!  - Angular 
//		cvjs_imagesLocation = "http://onlinedemo.cadviewer.com/cadviewer_4_1_0/app/images/";
//		cvjs_imagesLocation = "assets/cadviewer/app/images/";//
//		jQuery("#floorPlan_custom_menu").append("<a id=\""+icon_image_code+"_"+floorplan_div+"\" href=\"javascript:"+cvjs_command_name+"(\'"+cvjs_command_parameter+"\')\">"+"<img src="+cvjs_imagesLocation+cvjs_icon_image+">"+"</a>");	
//		console.log("IMAGE  "+cvjs_imagesLocation+"singleIcons/"+cvjs_icon_image);

//window.alert(cvjs_command_name+"  "+cvjs_Community_Version+ "  "+ (cvjs_command_name.indexOf("cadviewer.com")));
//window.alert("<a id=\""+icon_image_code+"_"+floorplan_div+"\" href=\"https://"+cvjs_command_name+">"+"<img id= "+icon_image_code+"_img' src="+cvjs_imagesLocation+"singleIcons/"+cvjs_icon_image+">"+"</a>")

		if (cvjs_Community_Version && (cvjs_command_name.indexOf("cadviewer.com")==0))
			jQuery("#"+placeholder+"_"+floorplan_div+"_svg").append("<a id=\""+icon_image_code+"_"+floorplan_div+"\" href=\"http://"+cvjs_command_name+"\">"+"<img id="+icon_image_code+"_img' src="+cvjs_imagesLocation+"singleIcons/"+cvjs_icon_image+">"+"</a>");	
		else
			jQuery("#"+placeholder+"_"+floorplan_div+"_svg").append("<a id=\""+icon_image_code+"_"+floorplan_div+"\" href=\"javascript:"+cvjs_command_name+"(\'"+cvjs_command_parameter+"\')\">"+"<img id="+icon_image_code+"_img' src="+cvjs_imagesLocation+"singleIcons/"+cvjs_icon_image+">"+"</a>");	
	
	
		jQuery('#'+icon_image_code+'_'+floorplan_div).mouseover(function(){				
                // 6.2.31   - we can drag only on page-change icon
                if (cvjs_command_name.indexOf("cvjs_changeNextIconPage_TopIconMenu")==0  || cvjs_command_name.indexOf("cvjs_changePreviousIconPage_TopIconMenu")==0){
                    jQuery("#topIconMenu_placeholder_1"+"_"+floorplan_div+"_svg").draggable();
                    jQuery("#topIconMenu_placeholder_1"+"_"+floorplan_div+"_svg").draggable({disabled:false});
                }
								
                //console.log(cvjs_command_name+"  "+ cvjs_command_name.indexOf("cvjs_changeNextIconPage_TopIconMenu")+" "+"#topIconMenu_placeholder_1"+"_"+floorplan_div );
                
				try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
				cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
						
				jQuery('#'+icon_image_code+'_'+floorplan_div).css('cursor','pointer');			
				jQuery('#'+icon_image_code+'_'+floorplan_div).css({
					WebkitFilter: 'brightness(90%) invert(0)  blur(0px)'
				})


				// 3.4.03d
				tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});		
				tip[cvjs_active_floorplan_div_nr].html(cvjs_language_popup);
				tip[cvjs_active_floorplan_div_nr].show();
				
				tip[cvjs_active_floorplan_div_nr].css("left", jQuery("#"+floorplan_div+"_svg").position().left + jQuery("#"+placeholder+"_"+floorplan_div+"_svg").position().left - jQuery("#"+floorplan_div+"_svg").position().left + jQuery('#'+icon_image_code+'_'+floorplan_div).position().left+27);	
				tip[cvjs_active_floorplan_div_nr].css("top", jQuery("#"+floorplan_div+"_svg").position().top +jQuery("#"+placeholder+"_"+floorplan_div+"_svg").position().top - jQuery("#"+floorplan_div+"_svg").position().top + 26 + jQuery('#'+icon_image_code+'_'+floorplan_div).position().top);				
					
				
		});
		jQuery('#'+icon_image_code+'_'+floorplan_div).mouseout(function(){

                // 6.2.31   - we can drag only on page-change icon
                if (cvjs_command_name.indexOf("cvjs_changeNextIconPage_TopIconMenu")==0){
                    jQuery("#topIconMenu_placeholder_1"+"_"+floorplan_div+"_svg" ).draggable('disable');
                }

				tip[cvjs_active_floorplan_div_nr].hide();
				jQuery('#'+icon_image_code+'_'+floorplan_div).css('opacity','1.0');

				jQuery('#'+icon_image_code+'_'+floorplan_div).css({
					WebkitFilter: 'brightness(100%) invert(0)  blur(0px)'
				})

		});
	
}




function cvjs_navigationMenuItemHighlight(floorplan_div, placeholder, highlight_object_id, cvjs_language_popup, displayflag ){

	
//window.alert(cvjs_language_popup);
	
		jQuery('#'+highlight_object_id+'_'+floorplan_div).mouseover(function(){				
				try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
				cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
						
				jQuery('#'+highlight_object_id+'_'+floorplan_div).css('cursor','pointer');
				jQuery('#'+highlight_object_id+'_'+floorplan_div).css('opacity','0.1');


				// 3.4.03d
				tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});		
				tip[cvjs_active_floorplan_div_nr].html(cvjs_language_popup);
				
				// 3.3.05c  - rewritten!
// 
				if (cvjs_debug) console.log(displayflag+"  "+ jQuery("#"+placeholder+"_"+floorplan_div+"_svg").position().left+"  "+jQuery("#"+placeholder+"_"+floorplan_div+"_svg").position().top+"  "+jQuery('#'+highlight_object_id+'_'+floorplan_div).position().left);
				
				// 4.1.02l   cvjs_navigationMenuItemHighlight tooltip added jQuery("#"+floorplan_div+"_svg").position().left
				
				
				var leftfactor = 0;
				if (displayflag == 1){
					leftfactor = 31;
				}
				if (displayflag == 2){
					leftfactor = -130;
				}
				

				tip[cvjs_active_floorplan_div_nr].css("left", jQuery("#"+floorplan_div+"_svg").position().left + jQuery("#"+placeholder+"_"+floorplan_div+"_svg").position().left+jQuery('#'+highlight_object_id+'_'+floorplan_div).position().left+leftfactor - jQuery("#"+floorplan_div+"_svg").position().left);				
				tip[cvjs_active_floorplan_div_nr].css("top", jQuery("#"+floorplan_div+"_svg").position().top+ jQuery("#"+placeholder+"_"+floorplan_div+"_svg").position().top+32 - jQuery("#"+floorplan_div+"_svg").position().top);				
						
				tip[cvjs_active_floorplan_div_nr].show();
				

				
		});
		jQuery('#'+highlight_object_id+'_'+floorplan_div).mouseout(function(){
				tip[cvjs_active_floorplan_div_nr].hide();
				jQuery('#'+highlight_object_id+'_'+floorplan_div).css('opacity','0.0');
		});

}



/**
 * Enables file load through the icon interface, or allows it only through the encapsulating application
 * @param {boolean} mode - true for file load through File Manager, default is false
 */
function cvjs_allowFileLoadToServer(mode){

	cvjs_fileLoadToServer = mode;
}


var cvjs_buildFolderTree_crossDomain = false;


// internal methods to handle compare drawings
var cvjs_compareDrawingsFirstDrawing = "";
var cvjs_compareDrawingsSecondDrawing = "";
var cvjs_compareDrawings = false;
var colorFlag=true;
var firstOverlayCompareFile = true;
var layers_all_overlay;
var layers_all_overlay2;
var fileOverlay = false;

// 2.4_41  settings for layers and groups on/off
var attr_1 = "{\"display\" : \"none\" }",
hide = jQuery.parseJSON(attr_1),
attr_2 = "{\"display\" : \"inline\" }",
show = jQuery.parseJSON(attr_2);


var cvjs_SVG_multiPages = [{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
},{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
},{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
},{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
},{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
},{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
},{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
},{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
},{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
},{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
},{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
}];

var cvjs_SVG_multiPagesFlag = [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false];
var cvjs_multipageURL_FileNamePath  = "";
var cvjs_multipage_FileNamePath  = "";
var cvjs_multipagePDFtoSVG_tempDir = ""; 



/**
 * Build an internal navigational structure over a folder with SVG files named sequentially xx_1.svg, xx_2.svg....
 * @param {string} directory - server side name of the folder in which the svg files are placed. The folder should only contain the svg files to navigate over
 * @param {string} url_directory - url of the folder in which the svg files are placed.
 */

function  cvjs_buildMultiPageSVG(directory, url_directory){

	cvjs_multipageURL_FileNamePath = url_directory;

	var finalUrl = cvjs_serverHandlersPath + cvjs_serverListDirectoryController;

	// data
	var filelist_data = {};

	filelist_data['directory'] = directory;
	filelist_data['directoryurl'] = directory;

	jQuery.ajax({
	  url:finalUrl,
	  type: 'post',
	  data: filelist_data,
	  success: function(html){

			//var multiPages[cvjs_active_floorplan_div_nr] =  { multiPages[cvjs_active_floorplan_div_nr]: 1, currentPage:1, pages : [ { fileName:"default", pageName:"Single Page"}]};

			var str = html;
			var n = str.split("<br>");
			if (n.length >= 1){

if (cvjs_debug) console.log("Creating multipage SVG page structure n.length="+n.length+" "+cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].pages[0].fileName);

				cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].multiPages = n.length-1;
				cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].currentPage = 1;
				var buildPages = [];

				//multiPages[cvjs_active_floorplan_div_nr] = { multiPages[cvjs_active_floorplan_div_nr]: 1, currentPage:1, pages : [ { fileName:"default", pageName:"Single Page"}];
				var j=0;
				for (var i=0;i<n.length;i++){
					if ( n[i].indexOf(".svg")>0 || n[i].indexOf(".svgz")>0 ){
						//window.alert(n[i]+" "+(i));
						var n_string = n[i].substring(n[i].lastIndexOf('_')+1,n[i].indexOf('.svg'));
//						window.alert(n_string);
						var k = parseInt(n_string);
						//window.alert(k);
						var pname = "Page "+k;
//						window.alert(k+" "+pname+" "+n[i]);
						if (k>=1)
							cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].pages[k-1] = { fileName : n[i], pageName : pname };
						j++;
					}
				}
		//		cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].pages = buildPages;

				cvjs_SVG_multiPagesFlag[cvjs_active_floorplan_div_nr] = true;

			}

		}
	});

}

var layer_vqrooms = new Array();

/// factor for redline thickness based on size of loaded drawing
var cvjs_redlineThickness_scaleFactor = 1;

/// normalized factor for redline thickness based on size of loaded drawing, typically
/// 1 pixel of a 3000 diagonal width drawing, 1/5000
var cvjs_redlineThickness_drawingFactor = 0.00020;




var string_X = "";


var totalDragStart = 0;
var firstFingerX = 0;
var firstFingerY = 0;
var secondFingerX = 0;
var secondFingerY = 0;

var firstFingerX1 = 0;
var firstFingerY1 = 0;


var firstFingerXinit = 0;
var firstFingerYinit = 0;

var ttest = 0;
var flagOK = true;

var preventDrag = true;

var base_x=0;
var base_y=0;

function dragStart(x, y, event)
{


if (cvjs_debug)		console.log("dragstart "+cvjs_floorplan_div+" "+cvjs_rPaperIndex(cvjs_floorplan_div));

	// dragstart is called before mousedown!!!
	
	try{
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(cvjs_floorplan_div);
	
	currentMasterDiv = this.data("id");
	currentMasterDiv = currentMasterDiv.substring(7);  //  master_floorPlan1_svg, etc....		

	}
	catch (err){console.log(" err "+err);}
   

//string_X = "vqjs dragStart x="+x+" y="+y;
//jQuery('#temperature').css('color', '#FF00FF');
//jQuery("#temperature").html(string_X);


//lastObj[cvjs_active_floorplan_div_nr] = null;

pdx = 0;
pdy = 0;
lastDx = 0;
lastDy = 0;

//console.log("before error "+cvjs_active_floorplan_div_nr);		

vbx = viewBox[cvjs_active_floorplan_div_nr].X;
vby = viewBox[cvjs_active_floorplan_div_nr].Y;

if (!cvjs_Community_Version) hideOnlyPop();

base_x = 0;
base_y = 0;


string_X = "vqjs dragStart x="+x+" y="+y+" vbx "+vbx+" vby "+vby+" cvjs_active_floorplan_div_nr "+cvjs_active_floorplan_div_nr+"  "+this.data("id");
if (cvjs_debug) console.log(string_X);
//jQuery('#temperature').css('color', '#FF00FF');
//jQuery("#temperature").html(string_X);

if (!thumb_loaded){
	base_x = x;
	base_y = y;
}



//string_X = "vqjs dragstart "+base_x+" "+base_y+" x="+x+" y="+y+"  cvjs_active_floorplan_div_nr "+cvjs_active_floorplan_div_nr  ;
//jQuery('#movements2').css('color', '#FF00FF');
//jQuery("#movements2").html(string_X);



if (!thumb_loaded){
	thumb_loaded = true;
	try{

//console.log("before drawThumb dragstart");

//				drawThumb(cvjs_rPaper[cvjs_active_floorplan_div_nr]);
	}
	catch(err){
		//  allow the code to work with both version 1.1 and 1.2
		//console.log(err);
	}
}




var flagCounter = 0;


try{

	flagCounter = 1;
	firstFingerX = event.touches[0].pageX;

	flagCounter = 2;
	firstFingerY = event.touches[0].pageY;

	totalDragStart = 1;

	flagCounter = 3;
	secondFingerX = event.touches[1].pageX;
	flagCounter = 4;
	secondFingerY = event.touches[1].pageY;
	totalDragStart = 2;
	flagCounter = 5;

}
catch(err){

	//console.log("vqjs_sn_51 : flag="+flagCounter+" : "+err);

	//console.log(err);

	var dummy3 = 1;

}


try{

	event.preventDefault();
	event.stopPropagation();

	if (totalDragStart == 2 ){

		event.preventDefault();
		event.stopPropagation();

//string_X = "startDrag propagation stop "+totalDragStart;
//jQuery('#occupancy').css('color', '#F0F0FF');
//jQuery("#occupancy").html(string_X);

	}

//  find the case where the thumb layers should be used
//			layer_thumb.attr(show);
//			layers_all.attr(hide);


/*

console.log("here! "+panWithThumb+"  "+(base_x-x)+" "+(base_y-y));

	if (panWithThumb && ((base_x-x) != 0) && ((base_y-y) != 0)){

		layers_all.attr(hide);
		layer_thumb.attr(show);
		layer_vqrooms[cvjs_active_floorplan_div_nr].attr(hide);
	}
*/



}
catch(err){
	//  allow the code to work with both version 1.1 and 1.2
	console.log("t7 "+err);
}

};




function dragEnd(e)
{



var testVar = "drag end ";
//alert(testVar);
//cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(400, 275, 300, 100  ).attr({fill:"rgb(255,255,255)", stroke:"rgb(0,0,0)", "fill-opacity":"1"});
//cvjs_rPaper[cvjs_active_floorplan_div_nr].text(actualLLX[cvjs_active_floorplan_div_nr]+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])*0.2,actualLLY[cvjs_active_floorplan_div_nr]+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr])*0.2, testVar ).attr({fill:"rgb(250,000,150)", stroke:"rgb(250,000,150)", "fill-opacity":"1"});




//window.alert("DragEnd");				

	//*******   2018-05-14, if dragging 
	if (cvjs_SVGHyperLinkCSSAll_Drag){
			cvjs_SVGHyperLinkCSSAll_Drag = false;				
			//window.alert("DragEND Undrag");
			cvjs_SVGGroup[cvjs_active_floorplan_div_nr].undrag();
			console.log("no mouseup undrag dragend");
	}










preventDrag = true;


//string_X = "dragEnd "+totalDragStart+" vbx="+vbx+" vby="+vby+" XX";
//jQuery('#occupancy').css('color', '#FF0DDF');
//jQuery("#occupancy").html(string_X);


if (totalDragStart == 2){

	e.preventDefault();
	e.stopPropagation();

}


	try{

		if (totalDragStart == 2){


			viewBox[cvjs_active_floorplan_div_nr].X = viewBox_initX[cvjs_active_floorplan_div_nr];
			viewBox[cvjs_active_floorplan_div_nr].Y = viewBox_initY[cvjs_active_floorplan_div_nr];
			vBHo = viewBoxHeight_init[cvjs_active_floorplan_div_nr];
			vBWo = viewBoxWidth_init[cvjs_active_floorplan_div_nr];
			viewBoxWidth[cvjs_active_floorplan_div_nr] = viewBoxWidth_init[cvjs_active_floorplan_div_nr];
			viewBoxHeight[cvjs_active_floorplan_div_nr] = viewBoxHeight_init[cvjs_active_floorplan_div_nr];
			viewBoxWidth[cvjs_active_floorplan_div_nr] /= deltaDynamic/deltaBase;
			viewBoxHeight[cvjs_active_floorplan_div_nr]/= deltaDynamic/deltaBase;

			viewBox[cvjs_active_floorplan_div_nr].X -= (viewBoxWidth[cvjs_active_floorplan_div_nr] - vBWo) / 2;
			viewBox[cvjs_active_floorplan_div_nr].Y -= (viewBoxHeight[cvjs_active_floorplan_div_nr] - vBHo) / 2;


			//viewBox[cvjs_active_floorplan_div_nr].X -= (firstFingerX-firstFingerX_init);
			//viewBox[cvjs_active_floorplan_div_nr].Y -= (firstFingerY-firstFingerY_init);

			//viewBox[cvjs_active_floorplan_div_nr].X -= (firstFingerX-firstFingerX_init)*(deltaDynamic/deltaBase);
			//viewBox[cvjs_active_floorplan_div_nr].Y -= (firstFingerY-firstFingerY_init)*(deltaDynamic/deltaBase);

//console.log("viewBoxWidth[cvjs_active_floorplan_div_nr] "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" cvjs_rPaper[cvjs_active_floorplan_div_nr]Width "+cvjs_rPaper[cvjs_active_floorplan_div_nr].width);

			zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/cvjs_rPaper[cvjs_active_floorplan_div_nr].width;

			//setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], viewBox[cvjs_active_floorplan_div_nr].X, viewBox[cvjs_active_floorplan_div_nr].Y, viewBoxWidth[cvjs_active_floorplan_div_nr], viewBoxHeight[cvjs_active_floorplan_div_nr]);
//NNN					cvjs_rPaper[cvjs_active_floorplan_div_nr].setViewBox(viewBox[cvjs_active_floorplan_div_nr].X, viewBox[cvjs_active_floorplan_div_nr].Y, viewBoxWidth[cvjs_active_floorplan_div_nr], viewBoxHeight[cvjs_active_floorplan_div_nr]);


// 2015-05-05					var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+wid+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";

			var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";

//console.log("x8 attr_2="+attr_2);

			var json_obj = jQuery.parseJSON(attr_2);
			cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);

//var string_X = " viewBox[cvjs_active_floorplan_div_nr].X="+viewBox[cvjs_active_floorplan_div_nr].X+" viewBox[cvjs_active_floorplan_div_nr].Y="+viewBox[cvjs_active_floorplan_div_nr].Y+"secondFingerX="+secondFingerX+" secondFingerY="+secondFingerY+" deltaDynamic="+deltaDynamic+" cvjs_rPaper[cvjs_active_floorplan_div_nr].width="+cvjs_rPaper[cvjs_active_floorplan_div_nr].width+" viewBoxWidth[cvjs_active_floorplan_div_nr]="+viewBoxWidth[cvjs_active_floorplan_div_nr]+" vBWo="+vBWo+" firstFingerX-firstFingerX1="+(firstFingerX-firstFingerX1);
//jQuery('#temperature').css('color', '#F000FF');
//jQuery("#temperature").html(string_X);

		}

	}
	catch(err){
		//  allow the code to work with both version 1.1 and 1.2
		//console.log(err);
	}




	try{


//  find the case where the thumb layers should be used
//				layer_thumb.attr(hide);
//				layers_all.attr(show);


		if (panWithThumb){
//					layers_all.show();
//					layer_thumb.hide();
			layers_all.attr(show);
			layer_thumb.attr(hide);

			// for SVG drawings from AX, 2017-09-04
			all_layer_on_thumb_off();

		}

		if (!cvjs_Community_Version)
			layer_vqrooms[cvjs_active_floorplan_div_nr].attr(show);

		thumb_loaded = false;
		
	}
	catch(err){
		//  allow the code to work with both version 1.1 and 1.2
		console.log("t8 "+err);
	}

}



function dragMove(dx, dy, x, y, e)
{


//string_X = "vqjs dragMove "+totalDragStart+" "+dx+" "+dy+" vbx="+vbx+" vby="+vby+" zoomSc="+zoomScale;
//jQuery('#movements2').css('color', '#FF00FF');
//jQuery("#movements2").html(string_X);

var testVar = "dragmove "+x+" "+y;
//alert(testVar);
//cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(400, 275, 300, 100  ).attr({fill:"rgb(255,255,255)", stroke:"rgb(0,0,0)", "fill-opacity":"1"});
//cvjs_rPaper[cvjs_active_floorplan_div_nr].text(actualLLX[cvjs_active_floorplan_div_nr]+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])*0.2,actualLLY[cvjs_active_floorplan_div_nr]+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr])*0.2, testVar ).attr({fill:"rgb(250,000,250)", stroke:"rgb(250,000,250)", "fill-opacity":"1"});




try{

//console.log("here! "+panWithThumb+"  "+(base_x-x)+" "+(base_y-y));

	if (panWithThumb && (((base_x-x) != 0) || ((base_y-y) != 0))){

	
	
		layers_all.attr(hide);
		layer_thumb.attr(show);
		
		
console.log("hide vqrooms   cvjs_active_floorplan_div_nr "+cvjs_active_floorplan_div_nr);
		
		layer_vqrooms[cvjs_active_floorplan_div_nr].attr(hide);

		// this is for SVG files created with TMS   2017-09-04
		all_layer_off_thumb_on();

	}


}
catch(err){
	//  allow the code to work with both version 1.1 and 1.2
	console.log("t7 "+err);
}


if (totalDragStart == 2) return;
// Snap  - moved from move()
if (totalDragStart<2){
	if ((Math.abs(lastDx-dx)>4) || (Math.abs(lastDy-dy)>4))
		{

			if (!dragMoveControl){

			}
			else{
				//dragMoveControl = false;


				tip[cvjs_active_floorplan_div_nr].hide();
				lastDx = dx;
				lastDy = dy;

//console.log("dx="+dx+" dy="+dy+" zoomScale="+zoomScale);

				pdx = dx*zoomScale;                       // change * to / ?
				pdy = dy*zoomScale;


// 	pdx    dx/window-width * viewBoxWidth[cvjs_active_floorplan_div_nr]
// 	pdx    dy/window-height * viewBoxHeight[cvjs_active_floorplan_div_nr]

				var xscale = viewBoxWidth[cvjs_active_floorplan_div_nr]/jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
				var yscale = viewBoxHeight[cvjs_active_floorplan_div_nr]/jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();
				var scale = 1;
				if (xscale>yscale) {
					scale = xscale
				}
				else{
					scale = yscale;
				}
				pdx = dx*scale;
				pdy = dy*scale;

				viewBox[cvjs_active_floorplan_div_nr].X = vbx - pdx;
				viewBox[cvjs_active_floorplan_div_nr].Y = vby - pdy;

//		string_X = "dragMove width "+jQuery("#floorPlan").width()+" height "+jQuery("#floorPlan").height()+"viewbox: "+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr];
//		jQuery('#movements3').css('color', '#0000FF');
//		jQuery("#movements3").html(string_X);

				var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";

//console.log("x10 attr_2="+attr_2);
				var json_obj = jQuery.parseJSON(attr_2);

				//console.log("json_obj="+json_obj);
				cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);

				// NNN setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], vbx - pdx, vby - pdy,viewBoxWidth[cvjs_active_floorplan_div_nr],viewBoxHeight[cvjs_active_floorplan_div_nr]);


				//dragMoveControl = true;
			}

		}
	 }
}


var cvjs_customMethodForOnLoadEnd = false;
var cvjs_myOnLoadEndMethod;

/**
 * Set custom call back method for OnLoadEnd when drawings are loaded.
 * @param {boolean} callbackMethodOnLoadEnd - false: default - no custom method , true: custom method defined.
 * @param {function} myOnLoadEndMethod : method that is executed OnLoadEnd of drawing
 */

function cvjs_setCustomCallbackMethodOnLoadEnd(callbackMethodOnLoadEnd, myOnLoadEndMethod){

	cvjs_customMethodForOnLoadEnd = callbackMethodOnLoadEnd;

	cvjs_myOnLoadEndMethod = myOnLoadEndMethod;

};


function cvjs_setLooperPosition(){

	
	var loc_x = (jQuery(window).width()-86)/2;   // image is 86x14
	var loc_y = (jQuery(window).height()- 14) / 2;
		
		
	var w = window.innerWidth;
	var h = window.innerHeight;		
		
				
	var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
	var floorplan_h = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();
	var floorplan_w = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');	


	// first initalization, when floating size of Element, then we use the innerWidth/innerHeight  3.1.20c
	if (floorplan_h == 150  && floorplan_w == 300) {
		floorplan_h = h;
		floorplan_w = w;
		
	}
	
	
	
	
//console.log("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM    "+floorplan_pos+" h "+floorplan_h+" w "+floorplan_w+" left "+position.left+" top "+position.top)

/***  dont need this	
	if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
		loc_x = position.left+floorplan_w/2-86;   // image is 86x14
		loc_y = position.top+floorplan_h/2-14;		
	}
	else{	
		loc_x = floorplan_w/2-86;   // image is 86x14
		loc_y = floorplan_h/2-14;		
	}
	
***/	
	
	// can it be that wait-looper is always relative to floorplan_div ?
	
	// move is slightly more left and up
	loc_x = floorplan_w/2-86;   // image is 86x14
	loc_y = floorplan_h/2-14;		
	

	loc_x = floorplan_w/2-120;   // modal is 195 x 63 pixels
	loc_y = floorplan_h/2-60;		


	loc_x += position.left;   // 3.0.13f
	loc_y += position.top;		
	

//window.alert("setLooper "+loc_x+" "+loc_y+"  "+floorplan_div_Array[cvjs_active_floorplan_div_nr]+"  "+floorplan_h+"  "+floorplan_w+" "+w+" "+h);	

	
	jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css({
		left:loc_x,
		top: loc_y,
		position:'fixed'
	});
	jQuery('#looper_image_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("");
    jQuery('#looper_image_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).append("<img class=\"waiting\" src=\""+cvjs_imagesLocation+"looper.gif\" />");
	

}
	

function cvjs_zoomZeroWidth(){
	 
	if (!cvjs_zeroWidthHandling) return;   // return if no ZW handling

	// 1: zoomWindow 
	var currentZW_zoomFactor = viewBoxWidth[cvjs_active_floorplan_div_nr]/ cvjs_zeroWidthHandling_viewBoxWidth;
		
		
	if (cvjs_debug) console.log("cvjs_zoomZeroWidth  zoomFactor "+currentZW_zoomFactor) 
			
	   for (var prop in cvjs_zeroWidthHandlingArr){

		try{
			var target = "#"+prop;

			//console.log(target+" parent id"+jQuery(target).parent().attr("id"));
			
			if (jQuery(target).parent().attr("id").indexOf("layer_")==0 || jQuery(target).parent().attr("id").indexOf("Layer_")==0){
				//console.log("target with Layer/layour parent "+target);
				var valWidth = jQuery(target).css("stroke-width");
				//console.log(valWidth);

				if (valWidth.indexOf("px")>-1) {
					valWidth = valWidth.substring(0,valWidth.indexOf("px"));
					valWidth = parseFloat(valWidth);
					valWidth = valWidth * cvjs_MinWidthSVG;
				}
				else
					valWidth = valWidth * cvjs_MinWidthSVG;
//console.log(cvjs_SVGLineThicknessArray[prop]+"  "+currentZW_zoomFactor+"  "+cvjs_zeroWidthScaleFactor);
				jQuery(target).css("stroke-width", cvjs_SVGLineThicknessArray[prop] * currentZW_zoomFactor * cvjs_zeroWidthScaleFactor);
			}

		}catch(err){}

	}
	
	// set the pointRadius
	//jQuery(".ZW").css("stroke-width", 0.6 * currentZW_zoomFactor*2.0 * cvjs_zeroWidthScaleFactor);
	
	if (currentZW_zoomFactor<0.5){
		if (currentZW_zoomFactor<0.25){
			if (currentZW_zoomFactor<0.1)
				jQuery(".tmsPoints").css("r", 0.3 * currentZW_zoomFactor *4.0 * cvjs_zeroWidthScaleFactor);
			else
				jQuery(".tmsPoints").css("r", 0.3 * currentZW_zoomFactor *3.0 * cvjs_zeroWidthScaleFactor);
		}
		else
			jQuery(".tmsPoints").css("r", 0.3 * currentZW_zoomFactor *2.0 * cvjs_zeroWidthScaleFactor);			
	}else 
		jQuery(".tmsPoints").css("r", 0.3 * currentZW_zoomFactor *1.0 * cvjs_zeroWidthScaleFactor);
	 
}


var cvjs_zeroWidthHandling = false;     
var cvjs_zeroWidthHandling_viewBoxWidth = 0; 
var cvjs_zeroWidthHandling_viewBoxHeight = 0; 
var cvjs_zeroWidthHandlingArr = {};
var cvjs_zeroWidthScaleFactor = 1.0; 


/**
 * Init ZW class handling, automated Zoom and adjustment of zerowidth
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 * @param {int}    scale_factor - scale factor on zero width lines when zooming
 */

function cvjs_initZeroWidthHandling(floorplan_div, scale_factor){
 
// 5.1.04a
			cvjs_zeroWidthHandling = true;
			
			cvjs_zeroWidthScaleFactor = scale_factor;

// calculate the viewbox size

		//window.alert(viewBox[cvjs_active_floorplan_div_nr].X +"  "+ viewBox[cvjs_active_floorplan_div_nr].Y +"  "+ viewBoxWidth[cvjs_active_floorplan_div_nr] +"  "+ 	viewBoxHeight[cvjs_active_floorplan_div_nr]);
			
			cvjs_zeroWidthHandling_viewBoxWidth = viewBoxWidth[cvjs_active_floorplan_div_nr];
			cvjs_zeroWidthHandling_viewBoxHeight = viewBoxHeight[cvjs_active_floorplan_div_nr];
			
			cvjs_MinWidthSVG = 1;
			reference_thickness = cvjs_MinWidthSVG;
			cvjs_svgLineThickness = true;

var cc=0;			
		   cvjs_SVGLineThicknessArray = {}
		   cvjs_zeroWidthHandlingArr = {}
		   //var oArr = {};
		// 5.1.04a    - we are adding selector to find ZW class
		   jQuery("*[id] .ZW").each(function() {
//		   jQuery("*[id]").each(function() {
			   var id = jQuery(this).attr('id');
			   cc++;
			   if (!cvjs_zeroWidthHandlingArr[id]) cvjs_zeroWidthHandlingArr[id] = true;
//			   if (!oArr[id]) oArr[id] = true;
		   });

if (cvjs_debug) console.log("cvjs_initZeroWidthHandling = "+cc);		 
		 
		   for (var prop in cvjs_zeroWidthHandlingArr){
				try{
					var target = "#"+prop;
					//console.log(target+" parent id"+jQuery(target).parent().attr("id"));

					if (jQuery(target).parent().attr("id").indexOf("layer_")==0 || jQuery(target).parent().attr("id").indexOf("Layer_")==0){
						//console.log("FIRST THICKNESS target with Layer/layour parent "+target);
						var valWidth = jQuery(target).css("stroke-width");
						//console.log(valWidth);

						if (valWidth.indexOf("px")>-1) {
							valWidth = valWidth.substring(0,valWidth.indexOf("px"));
							valWidth = parseFloat(valWidth);
						}
						cvjs_SVGLineThicknessArray[prop] = valWidth
					}
				}catch(err){}
			}
		
// 5.1.04c   - we redraw if zoom factor is different from 1.0		
if (scale_factor == 1.0) {}
else
	cvjs_resetZoomPan(floorplan_div);		
}


var dragInsidePolygon = false;
var cvjs_SVGHyperLinkCSSAll_Drag = false;


/**
 * Rotates 90 degrees forward
 * @param {string} floorplan_div - name of Element on which CADViewer is located
 */

function cvjs_rotateForward(floorplan_div){

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	var angle = cvjs_currentRotationAngle[cvjs_active_floorplan_div_nr] + 90;

	if (angle >= 360 ) angle = 0;
	if (angle <= -360 ) angle = 0;
	
	cvjs_rotateAngle(angle, floorplan_div);
		
}
 
 
/**
 * Rotates 90 degrees forward
 * @param {string} floorplan_div - name of Element on which CADViewer is located
 */

function cvjs_rotateBackward(floorplan_div){

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	var angle = cvjs_currentRotationAngle[cvjs_active_floorplan_div_nr] - 90;

	if (angle >= 360 ) angle = 0;
	if (angle <= -360 ) angle = 0;

	cvjs_rotateAngle(angle, floorplan_div);

	
}
 
 
var cvjs_currentRotationAngle = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];

 
/**
 * Rotates an angle based from 0
 * @param {float} angle - rotation angle
 * @param {string} floorplan_div - name of Element on which CADViewer is located
 */

function cvjs_rotateAngle(angle, floorplan_div){


	if (angle<-360 || angle>360) return;
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

console.log(floorplan_div+"  "+cvjs_active_floorplan_div_nr);	
	
	
	var bbox = cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox();
	if (cvjs_debug) console.log("bounding box rpaper "+bbox.x+"  "+bbox.y+" "+bbox.width+" "+bbox.height)
	
	var centerx = (bbox.x+bbox.width/2);		
	var centery = (bbox.y+bbox.height/2);
	
	var Ttrans = "T"+centerx+" "+centery+"0,0R"+angle;
			
	cvjs_SVGGroup[cvjs_active_floorplan_div_nr].attr({
		 transform: Ttrans
	});

	cvjs_masterBackground[cvjs_active_floorplan_div_nr].attr({
		 transform: Ttrans
	});		

	cvjs_currentRotationAngle[cvjs_active_floorplan_div_nr] = angle;	
	
	cvjs_zoomExtents(floorplan_div);

}


// BEGIN - Draw Rectangle
var firstX_r = 0;
var firstY_r = 0;
var lastX_r = 0;
var lastY_r = 0;
var flag_rectangle = false;

var tPath_r;
var tRubberBand_r;
 

var interactive_text_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];

/**
 * Activates the interactive Text Modal
 * @param {string} floorplan_div - name of Element on which CADViewer is located
 */

function cvjs_interactiveSearchText(floorplan_div){

	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;

	
	// 3.0.15c   - add "_svg" to div, if called through external API
	if (cvjs_debug) console.log(floorplan_div.lastIndexOf("_svg")+"  "+(floorplan_div.length-4));
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	

	if (interactive_text_offset_flag[cvjs_active_floorplan_div_nr]){
		interactive_text_offset_flag[cvjs_active_floorplan_div_nr] = false;
		// 3.1.21j .appendTo('body');
		jQuery("#textsearchModal_"+floorplan_div).css({position: "fixed"});
		jQuery("#textsearchModal_"+floorplan_div).offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});
	}
	textSearchPre = "";
	jQuery( "#textsearchModal_"+floorplan_div ).show();
}


function cvjs_interactiveSearchText_zoomLevel(zoomlevel){

	if (interactive_text_offset_flag[cvjs_active_floorplan_div_nr]){
		interactive_text_offset_flag[cvjs_active_floorplan_div_nr] = false;
		// 3.1.21j .appendTo('body');
		jQuery("#textsearchModal").css({position: "fixed"});
		jQuery("#textsearchModal").offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});  //.offset({left:150, top: 50});
	}
	textSearchPre = "";

	jQuery('#cvjs_percentageLevelFromModal').val(zoomlevel);
	jQuery("#textsearchModal").show();

}


function cvjs_exitSearchTextModal(){

	jQuery( cvjs_textSearchPreElement ).css("fill" , cvjs_textSearchPreFill);
	cvjs_textSearchPreElement = "";
	cvjs_textSearchPreFill = "";

//	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;

	jQuery( "#textsearchModal" ).hide();
}


var cvjs_textSearchPreElement = "";
var cvjs_textSearchPreFill = "";

/**
 * Text Search; finds a text string in the drawing, and zooms over the search result
 * @param {string} searchString - the text string to search after
 * @param {int} zoomFactor - zoom factor of the seach result in percentage of zoom extents
 */

function cvjs_searchText(textString, zoomFactor){

	if (isNaN(zoomFactor)){
		zoomFactor = 100;
	}

	jQuery("text").each(function( index ) {

//console.log("text "+index+"  "+jQuery( this ).text());

		  if ( ((jQuery( this ).text()).toLowerCase()).indexOf(textString.toLowerCase())>-1){

				//console.log(jQuery( this ));
				//console.log( index + ": " + jQuery( this ).text() );

				jQuery( cvjs_textSearchPreElement ).css("fill" , cvjs_textSearchPreFill);
				var xx = jQuery( this ).attr('x');
				var yy = jQuery( this ).attr('y')

if (cvjs_debug)	console.log("text search  xx="+xx+" yy="+yy);


//				jQuery( this ).attr("stroke" , "#FF0000");
//				jQuery( this ).attr("fill" , "#FF0000");

				cvjs_textSearchPreElement = this;
				cvjs_textSearchPreFill = jQuery( this ).css("fill");
				jQuery( this ).css("fill" , "#FF0000");


				//console.log("xx "+xx+" yy "+yy+" vb.X "+viewBox[cvjs_active_floorplan_div_nr].X+" vb.Y "+viewBox[cvjs_active_floorplan_div_nr].Y+" vb.W "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" vb.H "+viewBoxHeight[cvjs_active_floorplan_div_nr]);

				// if we have an SVG with an unknown coordiante system we return directly
				if (cvjs_svgWidthHeight100percent) return;

				// this is an SVG file with a different coordinate system, we translate into the parents coordinate system

if (cvjs_debug)					console.log("cvjs_svgTransX "+cvjs_svgTransX+" cvjs_svgTransY "+cvjs_svgTransY+" cvjs_svgScale "+ cvjs_svgScale);

				if (cvjs_svgTransX != "" && cvjs_svgTransX != ""){
					//console.log("cvjs_svgTransX "+cvjs_svgTransX+" "+cvjs_svgTransX+" "+cvjs_svgScale+" "+xx+" "+(cvjs_svgTransX + Number(xx)));
					xx = (cvjs_svgTransX + Number(xx))*cvjs_svgScale;
					yy = (cvjs_svgTransY + Number(yy))*cvjs_svgScale;
					//console.log("xx, yy "+xx+" "+yy);
				}

				viewBoxWidth[cvjs_active_floorplan_div_nr] = rpWidth[cvjs_active_floorplan_div_nr]/zoomFactor*100;
				viewBoxHeight[cvjs_active_floorplan_div_nr] = rpHeight[cvjs_active_floorplan_div_nr]/zoomFactor*100;

				viewBox[cvjs_active_floorplan_div_nr].X = xx - viewBoxWidth[cvjs_active_floorplan_div_nr]/2 ;
				viewBox[cvjs_active_floorplan_div_nr].Y = yy - viewBoxHeight[cvjs_active_floorplan_div_nr]/2;

				//console.log("after xx "+xx+" yy "+yy+" vb.X "+viewBox[cvjs_active_floorplan_div_nr].X+" vb.Y "+viewBox[cvjs_active_floorplan_div_nr].Y+" vb.W "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" vb.H "+viewBoxHeight[cvjs_active_floorplan_div_nr]);

				var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
				var json_obj = jQuery.parseJSON(attr_2);
				cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);

				zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/rpWidth[cvjs_active_floorplan_div_nr];

				return;


		  }
	});

}


/**
 * Text Search; finds a text string in the drawing, and zooms over the search result
 * @param {string} searchString - the text string to search after
 * @param {int} zoomFactor - zoom factor of the seach result in percentage of zoom extents
 * @param {int} textInstance - if multiple entries of text object, load instance, the first instance is 1
 */

function cvjs_searchTextInstance(textString, zoomFactor, textInstance){

	if (isNaN(zoomFactor)){
		zoomFactor = 100;
	}

	var instance = 0;
	var flag = false;

	jQuery("text").each(function( index ) {

		  if ( ((jQuery( this ).text()).toLowerCase()).indexOf(textString.toLowerCase())>-1){

				instance ++;

//				console.log("bingo "+instance);

				if (instance == textInstance){

					//console.log(instance+"  "+jQuery( this ));
					//console.log( index + ": " + jQuery( this ).text() );

					var xx = jQuery( this ).attr('x');
					var yy = jQuery( this ).attr('y')

					jQuery( cvjs_textSearchPreElement ).css("fill" , cvjs_textSearchPreFill);

					cvjs_textSearchPreElement = this;
					cvjs_textSearchPreFill = jQuery( this ).css("fill");
					jQuery( this ).css("fill" , "#FF0000");


					// if we have an SVG with an unknown coordiante system we return directly
					if (cvjs_svgWidthHeight100percent) return;

					// this is an SVG file with a different coordinate system, we translate into the parents coordinate system
					if (cvjs_svgTransX != "" && cvjs_svgTransX != ""){
						xx = (cvjs_svgTransX + Number(xx))*cvjs_svgScale;
						yy = (cvjs_svgTransY + Number(yy))*cvjs_svgScale;

					}


					viewBoxWidth[cvjs_active_floorplan_div_nr] = rpWidth[cvjs_active_floorplan_div_nr]/zoomFactor*100;
					viewBoxHeight[cvjs_active_floorplan_div_nr] = rpHeight[cvjs_active_floorplan_div_nr]/zoomFactor*100;

					viewBox[cvjs_active_floorplan_div_nr].X = xx - viewBoxWidth[cvjs_active_floorplan_div_nr]/2 ;
					viewBox[cvjs_active_floorplan_div_nr].Y = yy - viewBoxHeight[cvjs_active_floorplan_div_nr]/2;

					var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
					var json_obj = jQuery.parseJSON(attr_2);
					cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);

					zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/rpWidth[cvjs_active_floorplan_div_nr];

					flag = true;
				}


		  }
	});

	return flag;

}


///BEGIN METHOD TO DRAW CALIBRATION LINE

var calibrate_first_point = true;
var calibrate_first_point_x = 1;
var calibrate_first_point_y = 1;



var calibrate_Triangle;
var calibrate_Triangle2;
var calibrate_color = "#ED1E05";
var calibrate_lineWidth_base = 1;
var calibrate_lineWidth = 1;


function cvjs_calibrateMeasurement_RedlinePolyline(){

	calibrate_lineWidth = cvjs_redlineThickness_scaleFactor*calibrate_lineWidth_base;

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,120, '');

	calibrate_first_point = true;

	tPath_poly_redline1 = "M" + firstX_poly_redline1 + "," + firstY_poly_redline1;
	tRubberBand_poly_redline1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_poly_redline1).attr({stroke: calibrate_color, "stroke-width": calibrate_lineWidth, fill: "#FFF", "fill-opacity": "0.01"});
	polyPath_redline1 = "M" + firstX_poly_redline1 + "," + firstY_poly_redline1;
	tPolygon_redline1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polyPath_redline1).attr({stroke: calibrate_color, "stroke-width": calibrate_lineWidth, fill: "#FFF", "fill-opacity": "0.01"});


	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();
	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;
	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;




//  	var triangle_design= -10+","+10.0+" "+0+","+-10.0+" "+10+","+10.0;
  	var triangle_design= (-10*calibrate_lineWidth_base*0.333*cvjs_redlineThickness_scaleFactor)+","+(10.0*calibrate_lineWidth_base*0.333*cvjs_redlineThickness_scaleFactor)+" "+0+","+(-10.0*calibrate_lineWidth_base*0.333*cvjs_redlineThickness_scaleFactor)+" "+(10*calibrate_lineWidth_base*0.333*cvjs_redlineThickness_scaleFactor)+","+(10.0*calibrate_lineWidth_base*0.333*cvjs_redlineThickness_scaleFactor);




  	calibrate_Triangle = cvjs_rPaper[cvjs_active_floorplan_div_nr].polyline(triangle_design);
	calibrate_Triangle2 = cvjs_rPaper[cvjs_active_floorplan_div_nr].polyline(triangle_design);

	draw_poly_redline1 = false;
	first_point_poly_redline1 = true;

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});


	handleGroup.mousedown(mousedown_polygon_calibrate);
	handleGroup.mousemove(mousemove_polygon_calibrate);
}


function cvjs_removeHandleFunc_CalibrateMeasurementPolyline(){
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("removed handler");
}


function finish_calibrate() {

// console.log(tRubberBand_poly_redline1);
//	polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale+"L" + (originX_poly_redline1-delta_x)/global_scale + "," + (originY_poly_redline1-delta_y)/global_scale;
//	polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
//	tPolygon_redline1.attr({'path': polyPath_redline1});

	calibrate_x2 = (lastX_poly_redline1-delta_x)/global_scale;
	calibrate_y2 = (lastY_poly_redline1-delta_y)/global_scale;

	cvjs_removeHandleFunc_CalibrateMeasurementPolyline();

	//console.log("update database!! "+tPolygon);
//	tRubberBand_poly_redline1.attr({'path': "M0,0"});


// not now!
//	tPolygon_redline1.attr({'path': "M0,0"});

	draw_poly_redline1 = false;
	first_point_poly_redline1 = true;

	cvjs_calibrate_end = true;

	//console.log(tPolygon_redline1);

	//cvjs_addVqRedlinesGraphics_newNode(cvjs_currentRedline_underbar, tPolygon_redline1);
	//cvjs_graphicalObjectCreated('RedlinePolyline');
}



var mousedown_polygon_calibrate = function() {


	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();
	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;
	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


	//console.log("mousedown draw_poly="+draw_poly);
		 if (draw_poly_redline1){
			 finish_calibrate();

		 	//polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
			//tPolygon_redline1.attr({'path': polyPath_redline1});
			//firstX_poly_redline1 = lastX_poly_redline1;
			//firstY_poly_redline1 = lastY_poly_redline1;




			//console.log("firstX_poly="+firstX_poly);
		 }
		 else{

			polyPath_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," +(firstY_poly_redline1-delta_y)/global_scale;
		 	tPolygon_redline1.attr({'path': polyPath_redline1});
		 	tPolygon_redline1.attr({stroke: calibrate_color, "stroke-width": calibrate_lineWidth, fill: "#FFF", "fill-opacity" : "0.01"});

			calibrate_x1 = (firstX_poly_redline1-delta_x)/global_scale;
			calibrate_y1 = (firstY_poly_redline1-delta_y)/global_scale;

			//tPolygon.attr({fill: "none", "fill-opacity": "0.01", stroke: '#0b0000', 'stroke-opacity': "1"});
			 draw_poly_redline1 = true;

			 cvjs_calibrate_end = false;
		 }

}

var mousemove_polygon_calibrate = function(e,x,y) {


	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();
	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;
	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;



	if (draw_poly_redline1){

		//console.log("mousemove");

		//var text = x+" "+y+" dx="+dx+" dy="+dy;
//		var text = e+" "+x+" "+y;
//		myText.attr({'text': text});

				if (first_point_poly_redline1){
					first_point_poly_redline1 = false;
					firstX_poly_redline1 = x;
					firstY_poly_redline1 = y;
					lastX_poly_redline1 = x;
					lastY_poly_redline1 = y;
					originX_poly_redline1 = x;
					originY_poly_redline1 = y;

					polyPath_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," + (firstY_poly_redline1-delta_y)/global_scale;
				}
				else{
					lastX_poly_redline1 = x;
					lastY_poly_redline1 = y;
				}

			if (calibrate_first_point){
				calibrate_first_point = false;

				tPath_poly_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," + (firstY_poly_redline1-delta_y)/global_scale;
				tPath_poly_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
				tRubberBand_poly_redline1.attr({'path': tPath_poly_redline1});

				calibrate_x1 = (firstX_poly_redline1-delta_x)/global_scale;
				calibrate_y1 = (firstY_poly_redline1-delta_y)/global_scale;

				calibrate_first_point_x = calibrate_x1;
				calibrate_first_point_y = calibrate_y1;
			}
			else{

				calibrate_x1 = calibrate_first_point_x;
				calibrate_y1 = calibrate_first_point_y;

				var dX = (lastX_poly_redline1-delta_x)/global_scale - calibrate_x1;
				var dY = (lastY_poly_redline1-delta_y)/global_scale - calibrate_y1;

				//console.log(dX+" "+dY);
				var angleInDegrees = ( Math.atan2(dY,dX) / Math.PI * 180.0);
				var angleInDegrees2 = ( Math.atan2(dY,dX) / Math.PI * 180.0);


				var angle = Math.atan2(dY,dX);
				var deltax = Math.cos(angle)*10.0*cvjs_redlineThickness_scaleFactor*calibrate_lineWidth_base*0.333;
				var deltay = Math.sin(angle)*10.0*cvjs_redlineThickness_scaleFactor*calibrate_lineWidth_base*0.333;

				var Ttrans = 'r' + (angleInDegrees-270)+ 'T' + ((lastX_poly_redline1-delta_x)/global_scale-deltax)+ "," + ((lastY_poly_redline1-delta_y)/global_scale-deltay);
				var Ttrans2 = 'r' + (angleInDegrees-90) +""+ 'T' + (calibrate_x1+deltax) + "," + (calibrate_y1+deltay) ;

				calibrate_Triangle.attr({
					fill: measurement_color,
					transform: Ttrans
				});

				calibrate_Triangle2.attr({
					fill: measurement_color,
					transform: Ttrans2
				});


				tPath_poly_redline1 = "M" + (calibrate_first_point_x+deltax) + "," + (calibrate_first_point_y+deltay);
				tPath_poly_redline1 += "L" + ((lastX_poly_redline1-delta_x)/global_scale-deltax) + "," + ((lastY_poly_redline1-delta_y)/global_scale-deltay);
				tRubberBand_poly_redline1.attr({'path': tPath_poly_redline1});
			}

	}
}

///END METHOD TO DRAW CALIBRATION LINE



///BEGIN METHOD TO DRAW MEASUREMENT LINE


var measurement_first_point = true;
var measurement_first_point_x = 1;
var measurement_first_point_y = 1;

var measurement_Triangle;
var measurement_Triangle2;
var measurement_color = "#ED1E05";

// 6.2.44
var measurement_lineWidth = 0.33;    //  1 -> 0.33
var measurement_lineWidth_base = 0.33;  // 1 -> 0.33


function cvjs_Measurement_RedlinePolyline(){

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,120, '');

	measurement_lineWidth = cvjs_redlineThickness_scaleFactor*measurement_lineWidth_base;
	measurement_first_point = true;

	tPath_poly_redline1 = "M" + firstX_poly_redline1 + "," + firstY_poly_redline1;
	tRubberBand_poly_redline1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_poly_redline1).attr({stroke: measurement_color, "stroke-width": measurement_lineWidth, fill: "#FFF", "fill-opacity": "0.01"});
	polyPath_redline1 = "M" + firstX_poly_redline1 + "," + firstY_poly_redline1;
	tPolygon_redline1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polyPath_redline1).attr({stroke: measurement_color, "stroke-width": measurement_lineWidth, fill: "#FFF", "fill-opacity": "0.01"});

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


	var scaleTriangle = 3 ;

  	var triangle_design= (-10*measurement_lineWidth_base*0.333*cvjs_redlineThickness_scaleFactor)+","+(10.0*measurement_lineWidth_base*0.333*cvjs_redlineThickness_scaleFactor)+" "+0+","+(-10.0*measurement_lineWidth_base*0.333*cvjs_redlineThickness_scaleFactor)+" "+(10*measurement_lineWidth_base*0.333*cvjs_redlineThickness_scaleFactor)+","+(10.0*measurement_lineWidth_base*0.333*cvjs_redlineThickness_scaleFactor);


    measurement_Triangle = cvjs_rPaper[cvjs_active_floorplan_div_nr].polyline(triangle_design);
	measurement_Triangle2 = cvjs_rPaper[cvjs_active_floorplan_div_nr].polyline(triangle_design);


	draw_poly_redline1 = false;
	first_point_poly_redline1 = true;

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});


	
	handleGroup.mousedown(mousedown_polygon_measurement);
	handleGroup.mousemove(mousemove_polygon_measurement);
	//handleGroup.dblclick( polygon_finish_redline1_calibrate);
}


function cvjs_removeHandleFunc_MeasurementPolyline(){
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("removed handler");

}


function finish_measurement() {


	// 3.1.20i
	if (cvjs_callbackMeasurement) cvjs_measurementCallback(cvjs_currentMeasurementLength, 0, cvjs_units[cvjs_active_floorplan_div_nr]);


	// 3.2.01f
	
	if (cvjs_measurementInteractiveType == 2){
		tRubberBand_poly_redline1.attr({'path': "M0,0"});
		cvjs_removeHandleFunc_MeasurementFilledPolygon()			
	}

	if (cvjs_measurementInteractiveType == 1)	
		cvjs_removeHandleFunc_MeasurementPolyline();


	draw_poly_redline1 = false;
	first_point_poly_redline1 = true;
	cvjs_measurement_end = true;

}



var mousedown_polygon_measurement = function() {


	if (cvjs_measurementInteractiveType >2){

		var x2 = (lastX_poly_redline1-delta_x)/global_scale;
		var y2 = (lastY_poly_redline1-delta_y)/global_scale;

		var grid_value1 = x2 - measurement_lineWidth*10.0;
		var grid_value2 = x2 + measurement_lineWidth*10.0;
		
		if ( (cvjs_measurementInteractiveType == 3) || (cvjs_measurementInteractiveType == 4) ) 
				polyPath_redline1 = "";
		
		polyPath_redline1 += "M" + grid_value1 + "," +y2+"L"+ grid_value2+","+y2;
		grid_value1 = y2 - measurement_lineWidth*10.0;
		grid_value2 = y2 + measurement_lineWidth*10.0;
		polyPath_redline1 += "M" + x2 + "," +grid_value1+"L"+ x2+","+grid_value2;	
		// here we echo the cooordinate set ...
		
		if (cvjs_measurementInteractiveType == 3) jQuery("#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("("+cvjs_get_dwg_x_coord(x2, multiPages[cvjs_active_floorplan_div_nr].currentPage).toFixed(4)+","+cvjs_get_dwg_y_coord(y2, multiPages[cvjs_active_floorplan_div_nr].currentPage).toFixed(4)+")");
		if (cvjs_measurementInteractiveType == 4) jQuery("#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("("+x2.toFixed(4)+","+y2.toFixed(4)+")");
		if (cvjs_measurementInteractiveType == 5) {
			var textstring = jQuery("#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html();
			if (textstring.indexOf("(0,0)") == 0)
				jQuery("#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("("+cvjs_get_dwg_x_coord(x2, multiPages[cvjs_active_floorplan_div_nr].currentPage).toFixed(4)+","+cvjs_get_dwg_y_coord(y2, multiPages[cvjs_active_floorplan_div_nr].currentPage).toFixed(4)+")");
			else
				jQuery("#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(textstring+",("+cvjs_get_dwg_x_coord(x2, multiPages[cvjs_active_floorplan_div_nr].currentPage).toFixed(4)+","+cvjs_get_dwg_y_coord(y2, multiPages[cvjs_active_floorplan_div_nr].currentPage).toFixed(4)+")");
		}
		if (cvjs_measurementInteractiveType == 6) {
			var textstring = jQuery("#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html();
			if (textstring.indexOf("(0,0)") == 0)
				jQuery("#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("("+x2.toFixed(4)+","+y2.toFixed(4)+")");
			else
				jQuery("#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(textstring+",("+x2.toFixed(4)+","+y2.toFixed(4)+")");
		}

		if (cvjs_measurementInteractiveType == 7) {
			var textstring = jQuery("#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html();
			if (textstring.indexOf("M0,0") == 0)
				jQuery("#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("M"+x2.toFixed(4)+","+y2.toFixed(4)+"");
			else
				jQuery("#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(textstring+"L"+x2.toFixed(4)+","+y2.toFixed(4)+"");
		}
		

		
//		window.alert(polyPath_redline1);
		tRubberBand_poly_redline1.attr({'path': polyPath_redline1});
//		tPolygon_redline1.attr({stroke: measurement_color, "stroke-width": measurement_lineWidth, fill: "#FFF", "fill-opacity" : "0.01"});


		if ( (cvjs_measurementInteractiveType == 3) || (cvjs_measurementInteractiveType == 4) ) 
			cvjs_removeHandleFunc_MeasurementPolyline();



		return;
	}

		 if (draw_poly_redline1){
			 finish_measurement();
		 }
		 else{
			polyPath_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," +(firstY_poly_redline1-delta_y)/global_scale;
		 	tPolygon_redline1.attr({'path': polyPath_redline1});
		 	tPolygon_redline1.attr({stroke: measurement_color, "stroke-width": measurement_lineWidth, fill: "#FFF", "fill-opacity" : "0.01"});

			 draw_poly_redline1 = true;
			 //cvjs_measurement_end = true;
			 cvjs_measurement_end = false;
		 }
}


var mousemove_polygon_measurement = function(e,x,y) {

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();
	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];
	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;
	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


	if (cvjs_measurementInteractiveType >2) {
		lastX_poly_redline1 = x;
		lastY_poly_redline1 = y;
		return;
	}

	if (draw_poly_redline1){

		//console.log("mousemove");
		//var text = x+" "+y+" dx="+dx+" dy="+dy;
//		var text = e+" "+x+" "+y;
//		myText.attr({'text': text});

				if (first_point_poly_redline1){
					first_point_poly_redline1 = false;
					firstX_poly_redline1 = x;
					firstY_poly_redline1 = y;
					lastX_poly_redline1 = x;
					lastY_poly_redline1 = y;
					originX_poly_redline1 = x;
					originY_poly_redline1 = y;

					polyPath_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," + (firstY_poly_redline1-delta_y)/global_scale;
				}
				else{
					lastX_poly_redline1 = x;
					lastY_poly_redline1 = y;
				}



			if (measurement_first_point){

				measurement_first_point = false;

				measurement_x1 = (firstX_poly_redline1-delta_x)/global_scale;
				measurement_y1 = (firstY_poly_redline1-delta_y)/global_scale;

				measurement_x2 = (lastX_poly_redline1-delta_x)/global_scale;
				measurement_y2 = (lastY_poly_redline1-delta_y)/global_scale;

				var dX = measurement_x2 -measurement_x1;
				var dY = measurement_y2 - measurement_y1;

				//console.log(dX+" "+dY);
				var angleInDegrees = ( Math.atan2(dY,dX) / Math.PI * 180.0);
				var angleInDegrees2 = ( Math.atan2(dY,dX) / Math.PI * 180.0);

				var angle = Math.atan2(dY,dX);
				var deltax = Math.cos(angle)*10.0*cvjs_redlineThickness_scaleFactor*measurement_lineWidth_base*0.333;
				var deltay = Math.sin(angle)*10.0*cvjs_redlineThickness_scaleFactor*measurement_lineWidth_base*0.333;

				tPath_poly_redline1 = "M" + (measurement_x1+deltax) + "," + (measurement_y1+deltay);
				tPath_poly_redline1 += "L" + (measurement_x2-deltax)  + "," + (measurement_y2-deltay);


//				tPath_poly_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," + (firstY_poly_redline1-delta_y)/global_scale;
//				tPath_poly_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
				tRubberBand_poly_redline1.attr({'path': tPath_poly_redline1});


			}else{

				measurement_x2 = (lastX_poly_redline1-delta_x)/global_scale;
				measurement_y2 = (lastY_poly_redline1-delta_y)/global_scale;


				var dX = measurement_x2 -measurement_x1;
				var dY = measurement_y2 - measurement_y1;

				//console.log(dX+" "+dY);
				var angleInDegrees = ( Math.atan2(dY,dX) / Math.PI * 180.0);
				var angleInDegrees2 = ( Math.atan2(dY,dX) / Math.PI * 180.0);


				var angle = Math.atan2(dY,dX);
				var deltax = Math.cos(angle)*10.0*cvjs_redlineThickness_scaleFactor*measurement_lineWidth_base*0.333;
				var deltay = Math.sin(angle)*10.0*cvjs_redlineThickness_scaleFactor*measurement_lineWidth_base*0.333;


				tPath_poly_redline1 = "M" + (measurement_x1+deltax) + "," + (measurement_y1+deltay);
				tPath_poly_redline1 += "L" + (measurement_x2-deltax)  + "," + (measurement_y2-deltay);
				tRubberBand_poly_redline1.attr({'path': tPath_poly_redline1});

			}

    var dX = measurement_x2 -measurement_x1;
	var dY = measurement_y2 - measurement_y1;

    //console.log(dX+" "+dY);
    var angleInDegrees = ( Math.atan2(dY,dX) / Math.PI * 180.0);
    var angleInDegrees2 = ( Math.atan2(dY,dX) / Math.PI * 180.0);


    var angle = Math.atan2(dY,dX);
    var deltax = Math.cos(angle)*10.0*cvjs_redlineThickness_scaleFactor*measurement_lineWidth_base*0.333;
    var deltay = Math.sin(angle)*10.0*cvjs_redlineThickness_scaleFactor*measurement_lineWidth_base*0.333;

	var Ttrans = 'r' + (angleInDegrees-270)+ 'T' + (measurement_x2-deltax)+ "," + (measurement_y2-deltay);
	var Ttrans2 = 'r' + (angleInDegrees-90) +""+ 'T' + (measurement_x1+deltax) + "," + (measurement_y1+deltay) ;

	measurement_Triangle.attr({
		fill: measurement_color,
		transform: Ttrans
	});

	measurement_Triangle2.attr({
		fill: measurement_color,
		transform: Ttrans2
	});

	var measurementLength = Math.sqrt( Math.pow( (measurement_x2-measurement_x1), 2) + Math.pow( (measurement_y2-measurement_y1),2 ))

	var mLength = (cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr]*measurementLength).toFixed(2);

	// 3.1.20i
	cvjs_currentMeasurementLength = mLength;


	if (cvjs_measurementInteractiveType == 1)
		jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Distance);
	else 
		jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Area);
	

	if (cvjs_units[cvjs_active_floorplan_div_nr].indexOf("feet")==0){

		var lint = Math.floor(mLength);
		var fraction = mLength - Math.floor(mLength);
		fraction = Math.round(fraction*16);
		if (fraction == 16){
			lint+=1;
			fraction = 0;
		}
//6.2.18	jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Distance+lint+"\'"+" "+fraction+"/16\"");			
		jQuery( "#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(lint+"\'"+" "+fraction+"/16\"");
	}
	else{
//6.2.18 jQuery('#cvjs_measurementLength_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Distance+mLength+" "+cvjs_units[cvjs_active_floorplan_div_nr]);
//		jQuery('#cvjs_measurementLength_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Distance);
		jQuery('#cvjs_measurementBox_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(mLength+" "+cvjs_units[cvjs_active_floorplan_div_nr]);
	}






//console.log(mLength);

	}
}

///END METHOD TO DRAW MEASUREMENT LINE


var originX_poly_redline1 = 0;
var originY_poly_redline1 = 0;
var firstX_poly_redline1 = 0;
var firstY_poly_redline1 = 0;
var lastX_poly_redline1 = 400;
var lastY_poly_redline1 = 300;

var tPath_poly_redline1;
var tRubberBand_poly_redline1;
var polyPath_redline1;
var tPolygon_redline1;
var draw_poly_redline1 = false;
var first_point_poly_redline1 = true;



var cvjs_currentRedline_color = "#FF0000";


// BEGIN  REDLINE MEASUREMENT Filled Polygon


var area_vertices;
var area_vertices_counter = 0;

function calcPolygonArea(vertices) {
    var total = 0;

    for (var i = 0, l = vertices.length; i < l; i++) {
      var addX = vertices[i].x;
      var addY = vertices[i == vertices.length - 1 ? 0 : i + 1].y;
      var subX = vertices[i == vertices.length - 1 ? 0 : i + 1].x;
      var subY = vertices[i].y;

      total += (addX * addY * 0.5);
      total -= (subX * subY * 0.5);
    }

    return Math.abs(total);
}






var cvjs_measurementArea = 0.0;
var cvjs_measurementMultipleSegmentLength = 0.0;
var cvjs_MeasurementFilledPoly_firstsegment = false;

function cvjs_addHandleFunc_MeasurementFilledPolygon(){

	area_vertices = new Array();
	area_vertices_counter = 0;


	cvjs_measurementMultipleSegmentLength = 0;
	cvjs_MeasurementFilledPoly_firstsegment = true;
	
	
	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,120, '');
	cvjs_addHandleFunc_MeasurementFilledPolygon_started = true;

	tPath_poly_redline1 = "M" + firstX_poly_redline1 + "," + firstY_poly_redline1;
	tRubberBand_poly_redline1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_poly_redline1).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor,  fill: cvjs_currentRedline_color, "fill-opacity":"0.1"});
	polyPath_redline1 = "M" + firstX_poly_redline1 + "," + firstY_poly_redline1;
	tPolygon_redline1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polyPath_redline1).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor,  fill: cvjs_currentRedline_color, "fill-opacity":"0.1"});

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


//	console.log("svg canvas"+canvas_width+" "+canvas_height+" "+global_scale);
//	console.log("handle group"+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])+" "+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
//	console.log("viewBox"+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]);
	draw_poly_redline1 = false;
	first_point_poly_redline1 = true;

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});



	handleGroup.mousedown(mousedown_polygon_redline4);
	handleGroup.mousemove(mousemove_polygon_redline4);
	handleGroup.dblclick( polygon_finish_redline4 );

	oldKeyDown = jQuery(document).keydown().bind({});
	jQuery(document).keydown(function(e) {

		if (e.keyCode == 27) {

			if (cvjs_addHandleFunc_MeasurementFilledPolygon_started){

				cvjs_addHandleFunc_MeasurementFilledPolygon_started = false;
				
				cvjs_measurementMultipleSegmentLength = Math.round( (cvjs_currentMeasurementLength)*100)/100;;
				measurement_first_point = true;
								
				
				polygon_finish_redline4();
				jQuery(document).keydown() == oldKeyDown;
			}
		}
	});



}


function cvjs_removeHandleFunc_MeasurementFilledPolygon(){
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("removed handler");
	
		
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
	
	
	//ÅÖÄ   2018-05-09  we save the screen as a pdf  - this has problems if the user decide not to save redlines, part implementation, 
	try { // 3.1.21j
		if (FileName.indexOf(".pdf")>-1 && cvjs_customPdfFolderFlag ) savepageaspdf(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	}
	catch(err){ console.log("pdf 12: "+err);}

}


var polygon_finish_redline4 = function() {


	cvjs_measurement_end = true;


	polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale+"L" + (originX_poly_redline1-delta_x)/global_scale + "," + (originY_poly_redline1-delta_y)/global_scale+"Z";   // end polygon
//	polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
	tPolygon_redline1.attr({'path': polyPath_redline1});


	cvjs_removeHandleFunc_MeasurementFilledPolygon();

	//console.log("update database!! "+tPolygon);

	tRubberBand_poly_redline1.attr({'path': "M0,0"});

	draw_poly_redline1 = false;
	first_point_poly_redline1 = true;

//	cvjs_addVqRedlinesGraphics_newNodeFill(cvjs_currentRedline_underbar, tPolygon_redline1, cvjs_currentRedline_color, 0.1);

//	cvjs_graphicalObjectCreated('RedlineFilledPolygon');


		// temp 		
		// we have to add the distance from first mouseclick to last mouse-click, so we let _x1 be the first point.

			measurement_x1 = (firstX_poly_redline1_segment1-delta_x)/global_scale;
			measurement_y1 = (firstY_poly_redline1_segment1-delta_y)/global_scale;


			var measurementLength = Math.sqrt( Math.pow( (measurement_x2-measurement_x1), 2) + Math.pow( (measurement_y2-measurement_y1),2 ))
			var mLength = (cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr]*measurementLength).toFixed(2);

			// 3.1.20i
		
//		console.log("XX"+cvjs_measurementMultipleSegmentLength +"XX"+ mLength+"ZZ")

		
			var displayLength = 0.0;
			
			cvjs_measurementMultipleSegmentLength = Math.round((cvjs_measurementMultipleSegmentLength)*100)/100;
			mLength = Math.round((mLength)*100)/100;
			var lLength = 0.0;
			
			if (cvjs_debug) console.log("XX"+cvjs_measurementMultipleSegmentLength +"XX"+ mLength+"ZZ"+" cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr] "+cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr]);
			
			lLength = cvjs_measurementMultipleSegmentLength + mLength;
						
						
						
			//window.alert(lLength);
						
//			displayLength = Math.round((cvjs_measurementMultipleSegmentLength + mLength)*100)/100;
			lLength = Math.round((lLength)*100)/100;
			displayLength = lLength;
			cvjs_measurementMultipleSegmentLength = lLength;			
			

			cvjs_currentMeasurementLength = displayLength;



		// CALCULATE AREA   DISPLAY DISTANCE

		// add the first point as the last in the polygon
		var vert_x = (firstX_poly_redline1_segment1-delta_x)/global_scale;
		var vert_y = (firstY_poly_redline1_segment1-delta_y)/global_scale;
		area_vertices[area_vertices_counter] = new Array();
		area_vertices[area_vertices_counter] = {x: vert_x, y: vert_y};
		
		if (cvjs_debug) console.log(area_vertices_counter+" "+ area_vertices[area_vertices_counter].x+"  "+area_vertices[area_vertices_counter].y);
		area_vertices_counter++;

		cvjs_measurementArea = (calcPolygonArea(area_vertices)*cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr]*cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr]).toFixed(2);;
		
		if (cvjs_callbackMeasurement) cvjs_measurementCallback(cvjs_measurementMultipleSegmentLength , cvjs_measurementArea, cvjs_units[cvjs_active_floorplan_div_nr]);
		


	if (cvjs_measurementInteractiveType == 1)
		jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Distance);
	else 
		jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Area);

			
		
		if (cvjs_units[cvjs_active_floorplan_div_nr].indexOf("feet")==0){

			var lint = Math.floor(lLength);
			var fraction = lLength - Math.floor(lLength);
			fraction = Math.round(fraction*16);
			if (fraction == 16){
				lint+=1;
				fraction = 0;
			}
//6.2.18			jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Area+": "+cvjs_measurementArea+" "+cvjs_units[cvjs_active_floorplan_div_nr]+"<sup>2</sup> ("+lint+"\'"+" "+fraction+"/16\")");
//			jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Area);
			jQuery( "#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(cvjs_measurementArea+" "+cvjs_units[cvjs_active_floorplan_div_nr]+"² ("+lint+"\'"+" "+fraction+"/16\")");

		}
		else{
//6.2.18			jQuery('#cvjs_measurementLength_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Area+": "+cvjs_measurementArea+" "+cvjs_units[cvjs_active_floorplan_div_nr]+"<sup>2</sup> ("+cvjs_measurementMultipleSegmentLength+" "+cvjs_units[cvjs_active_floorplan_div_nr]+")");
//			jQuery('#cvjs_measurementLength_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Area);
			jQuery('#cvjs_measurementBox_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(cvjs_measurementArea+" "+cvjs_units[cvjs_active_floorplan_div_nr]+"² ("+cvjs_measurementMultipleSegmentLength+" "+cvjs_units[cvjs_active_floorplan_div_nr]+")");

		}
		 
}

var	firstX_poly_redline1_segment1 = 0;
var	firstY_poly_redline1_segment1 = 0;




var mousedown_polygon_redline4 = function(e,x,y) {


		measurement_first_point = true;



	//console.log("mousedown draw_poly="+draw_poly);
		 if (draw_poly_redline1){
		 	polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
			tPolygon_redline1.attr({'path': polyPath_redline1});
			firstX_poly_redline1 = lastX_poly_redline1;
			firstY_poly_redline1 = lastY_poly_redline1;

			//console.log("firstX_poly="+firstX_poly);
		 }
		 else{

			polyPath_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," +(firstY_poly_redline1-delta_y)/global_scale;
		 	tPolygon_redline1.attr({'path': polyPath_redline1});
		 	tPolygon_redline1.attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: cvjs_currentRedline_color, "fill-opacity":"0.1"});

			//tPolygon.attr({fill: "none", "fill-opacity": "0.01", stroke: '#0b0000', 'stroke-opacity': "1"});
			 draw_poly_redline1 = true;
			 
			// we record the first point in world coordinates
			firstX_poly_redline1_segment1 = x;
			firstY_poly_redline1_segment1 = y;
			
					 
			 // 
			 
			 
			 
		 }


		if (cvjs_MeasurementFilledPoly_firstsegment){

				cvjs_MeasurementFilledPoly_firstsegment = false;
				cvjs_measurementMultipleSegmentLength = 0.0;
				
		}
		else{
			
			// temp 		

			
			//var measurementLength = Math.sqrt( Math.pow( (measurement_x2-measurement_x1), 2) + Math.pow( (measurement_y2-measurement_y1),2 ))
			//var mLength = (cvjs_svgToWorldUnits*measurementLength).toFixed(2);

						
			// here we have to update the total length of line segments

			//window.alert(cvjs_measurementMultipleSegmentLength+"  "+cvjs_currentMeasurementLength);
			
		
			cvjs_measurementMultipleSegmentLength = Math.round( (cvjs_currentMeasurementLength)*100)/100;;
			measurement_first_point = true;
						
			//window.alert(cvjs_measurementMultipleSegmentLength);
			
			
			
			
			// 3.1.20i
			//cvjs_currentMeasurementLength = mLength;
			
			// test
			
		}
		 
		 

		// begin array with vertices
		var vert_x = (x-delta_x)/global_scale;
		var vert_y = (y-delta_y)/global_scale;
		area_vertices[area_vertices_counter] = new Array();
		area_vertices[area_vertices_counter] = {x: vert_x, y: vert_y};

		if (cvjs_debug) console.log(area_vertices_counter+" "+area_vertices[area_vertices_counter].x+"  "+area_vertices[area_vertices_counter].y);
		area_vertices_counter++;

}

var mousemove_polygon_redline4 = function(e,x,y) {
	
	
	
	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();
	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];
	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;
	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;

		
	
	if (draw_poly_redline1){

		//console.log("mousemove");

		//var text = x+" "+y+" dx="+dx+" dy="+dy;
//		var text = e+" "+x+" "+y;
//		myText.attr({'text': text});

				if (first_point_poly_redline1){
					first_point_poly_redline1 = false;
					firstX_poly_redline1 = x;
					firstY_poly_redline1 = y;
					lastX_poly_redline1 = x;
					lastY_poly_redline1 = y;
					originX_poly_redline1 = x;
					originY_poly_redline1 = y;

					polyPath_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," + (firstY_poly_redline1-delta_y)/global_scale;
				}
				else{
					lastX_poly_redline1 = x;
					lastY_poly_redline1 = y;
				}
			tPath_poly_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," + (firstY_poly_redline1-delta_y)/global_scale;
			tPath_poly_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
			tRubberBand_poly_redline1.attr({'path': tPath_poly_redline1});
	}

	
	
	
	
			if (measurement_first_point){

				measurement_first_point = false;

				measurement_x1 = (firstX_poly_redline1-delta_x)/global_scale;
				measurement_y1 = (firstY_poly_redline1-delta_y)/global_scale;

				measurement_x2 = (lastX_poly_redline1-delta_x)/global_scale;
				measurement_y2 = (lastY_poly_redline1-delta_y)/global_scale;



			}else{

				measurement_x2 = (lastX_poly_redline1-delta_x)/global_scale;
				measurement_y2 = (lastY_poly_redline1-delta_y)/global_scale;


			}

	
	
		if (cvjs_MeasurementFilledPoly_firstsegment){
			
				// do nothing, this is before first segment
		}
		else{
	
	
			var measurementLength = Math.sqrt( Math.pow( (measurement_x2-measurement_x1), 2) + Math.pow( (measurement_y2-measurement_y1),2 ))
			var mLength = (cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr]*measurementLength).toFixed(2);

			// 3.1.20i
			
			var displayLength = 0.0;
			
			
			cvjs_measurementMultipleSegmentLength = Math.round((cvjs_measurementMultipleSegmentLength)*100)/100;
			mLength = Math.round((mLength)*100)/100;
			var lLength = 0.0;
			
			//console.log("XX"+cvjs_measurementMultipleSegmentLength +"XX"+ mLength+"ZZ")
			
			lLength = cvjs_measurementMultipleSegmentLength + mLength;
						
			//console.log(lLength);
						
//			displayLength = Math.round((cvjs_measurementMultipleSegmentLength + mLength)*100)/100;
			lLength = Math.round((lLength)*100)/100;
			displayLength = lLength;
			

			cvjs_currentMeasurementLength = displayLength;


	if (cvjs_measurementInteractiveType == 1)
		jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Distance);
	else 
		jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Area);




			
			if (cvjs_units[cvjs_active_floorplan_div_nr].indexOf("feet")==0){

				var lint = Math.floor(displayLength);
				var fraction = displayLength - Math.floor(displayLength);
				fraction = Math.round(fraction*16);
				if (fraction == 16){
					lint+=1;
					fraction = 0;
				}
//6.2.18				jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Distance+lint+"\'"+" "+fraction+"/16\"");
//				jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Distance);
				jQuery( "#cvjs_measurementBox_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(lint+"\'"+" "+fraction+"/16\"");			
			
			}
			else{
//6.2.18				jQuery('#cvjs_measurementLength_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Distance+displayLength+" "+cvjs_units[cvjs_active_floorplan_div_nr]);
//				jQuery('#cvjs_measurementLength_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Distance);
				jQuery('#cvjs_measurementBox_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(displayLength+" "+cvjs_units[cvjs_active_floorplan_div_nr]);
			}
		 
		}
			
}

var cvjs_currentRedline_strokeWidth = 1;   // 6.2.44   2-1;

// END  REDLINE MEASUREMENT Filled Polygon

var XrefFileList = new Array();



var cvjs_printModalCustomCheckBox = "";
var cvjs_customPrintCheckbox  = false;
var cvjs_customPrintCheckboxMode  = false;
var printmodalTextBox = "";


/**
 * Extents the Print Modal with a custom controlled checkbox
 * @param {boolean} mode - Add checkbox to interface, default is false
 * @param {string} print_modal_custom_checkbox - name of the custom method branch
 */

function cvjs_setPrintModalCustomCheckBox(mode, print_modal_custom_checkbox){
	
	cvjs_customPrintCheckboxMode = mode;
	cvjs_printModalCustomCheckBox = print_modal_custom_checkbox;		
	if (cvjs_debug) console.log("in cvjs_setPrintModalCustomCheckBox "+cvjs_printModalCustomCheckBox+"  "+print_modal_custom_checkbox );
	
}


/**
 * Extents the Print Modal with a custom controlled checkbox
 * @param {boolean} mode - Add checkbox to interface, default is false
 * @param {string} print_modal_custom_checkbox - filename containing variable definition location is ServerLocation + "/app/cv"
 */

function cvjs_setPrintModalCustomCheckBoxFromFile(mode, print_modal_custom_checkbox){
	
	// Read from File
	
	var cvjs_ParameterLoad = cvjs_serverHandlersPath + cvjs_serverLoadFileController;
	var parameter_data = {};
	parameter_data['file'] = cvjs_ServerLocation+"/app/cv/"+print_modal_custom_checkbox;

	jQuery.ajax({
	  url:cvjs_ParameterLoad,
	  type: 'post',
	  async: false,
	  data: parameter_data,
	  success: function(parameterstring){		
		cvjs_customPrintCheckboxMode = mode;
		cvjs_printModalCustomCheckBox = parameterstring;		
		if (cvjs_debug) console.log("in cvjs_setPrintModalCustomCheckBox "+cvjs_printModalCustomCheckBox+"  "+print_modal_custom_checkbox );
	
	  }
	});
	
}





var cvjs_printModalCustomTextBox = "";
var cvjs_printModalCustomTextBoxVariablesList = new Array();
var cvjs_printModalCustomTextBoxVariablesContent = new Array();
var cvjs_printModalCustomTextBoxVariablesPrepend = new Array();
var cvjs_customPrintTextbox  = false;
var cvjs_customPrintTextboxMode  = false;
var cvjs_customPrintDualTextboxMode  = false;


/**
 * Extents the Print Modal with a custom controlled textbox
 * @param {boolean} mode - Adds a dual checkbox to interface, default is false
 * @param {string} custom_textbox_variables_list_filename - filename containing variable definition location is ServerLocation + "/app/cv". Content is comma separated list with names of the variable in the document to which the Text will be inserted, of type $$$title$$$
 */

function cvjs_setPrintModalCustomDualTextBox(mode, custom_checkbox_variables_list_filename){
	
	cvjs_customPrintDualTextboxMode  = true;
	cvjs_setPrintModalCustomTextBox(mode, custom_checkbox_variables_list_filename);
}


/**
 * Extents the Print Modal with a custom controlled textbox
 * @param {boolean} mode - Add checkbox to interface, default is false
 * @param {string} print_modal_custom_textbox_variables_list - comma separated list with names of the variable in the document to which the Text will be inserted, of type $$$title$$$
 */

function cvjs_setPrintModalCustomTextBox(mode, print_modal_custom_checkbox_variables_list){
	
	cvjs_customPrintTextboxMode = mode;
	cvjs_printModalCustomTextBoxVariablesList = print_modal_custom_checkbox_variables_list.split(",");
	cvjs_printModalCustomTextBox = "hello";
	cvjs_printModalCustomTextBoxVariablesContent = new Array(cvjs_printModalCustomTextBoxVariablesList.length)
	cvjs_printModalCustomTextBoxVariablesPrepend = new Array(cvjs_printModalCustomTextBoxVariablesList.length);
	
	for (k=0; k<cvjs_printModalCustomTextBoxVariablesList.length; k++){				
		var prependlist = cvjs_printModalCustomTextBoxVariablesList[k].split(":"); //split(/[{}:]+/); // split(['{', ',', '}']);
		
		
//		if (prependlist.length == 2)
//			window.alert(cvjs_printModalCustomTextBoxVariablesList[k]+"  "+prependlist[0]+"  "+prependlist[1]);
		
//		for (j=0; j<prependlist.length; j++) window.alert(prependlist)	
		
		if (prependlist.length == 1) 
			cvjs_printModalCustomTextBoxVariablesPrepend[k] = "none";
		else{
			prependlist[0] = prependlist[0].replace('%7B','{');
			prependlist[1] = prependlist[1].replace('%7D','}')
			cvjs_printModalCustomTextBoxVariablesPrepend[k] = prependlist[1].substring(0, prependlist[1].length -1);
			cvjs_printModalCustomTextBoxVariablesList[k] = prependlist[0].substring(1);
		}
	}	
	
	// run through all variables, 
	
// NOTE:
//	cvjs_printModalCustomTextBoxVariablesList = print_modal_custom_checkbox;
			
	if (cvjs_debug) console.log("in cvjs_setPrintModalCustomTextBox "+cvjs_printModalCustomCheckBox+"  "+print_modal_custom_checkbox_variables_list );
}



/**
 * Extents the Print Modal with a custom controlled textbox
 * @param {boolean} mode - Adds a dual checkbox to interface, default is false
 * @param {string} custom_textbox_variables_list_filename - filename containing variable definition location is ServerLocation + "/app/cv". Content is comma separated list with names of the variable in the document to which the Text will be inserted, of type $$$title$$$
 */

function cvjs_setPrintModalCustomDualTextBoxFromFile(mode, custom_checkbox_variables_list_filename){
	
	cvjs_customPrintDualTextboxMode  = true;
	cvjs_setPrintModalCustomTextBoxFromFile(mode, custom_checkbox_variables_list_filename);
}


/**
 * Extents the Print Modal with a custom controlled textbox
 * @param {boolean} mode - Add checkbox to interface, default is false
 * @param {string} custom_textbox_variables_list_filename - filename containing variable definition location is ServerLocation + "/app/cv". Content is comma separated list with names of the variable in the document to which the Text will be inserted, of type $$$title$$$
 */

function cvjs_setPrintModalCustomTextBoxFromFile(mode, custom_checkbox_variables_list_filename){
	
	// Read from File

	var cvjs_ParameterLoad = cvjs_serverHandlersPath + cvjs_serverLoadFileController;
	var parameter_data = {};
	parameter_data['file'] = cvjs_ServerLocation+"/app/cv/"+custom_checkbox_variables_list_filename;

	jQuery.ajax({
	  url:cvjs_ParameterLoad,
	  type: 'post',
	  async: false,
	  data: parameter_data,
	  success: function(parameterstring){		
		print_modal_custom_checkbox_variables_list = parameterstring;		
		if (cvjs_debug) console.log("in cvjs_setPrintModalCustomCheckBox "+cvjs_printModalCustomCheckBox+"  "+custom_checkbox_variables_list_filename);	
	  }
	});
	
	
	cvjs_customPrintTextboxMode = mode;
	cvjs_printModalCustomTextBoxVariablesList = print_modal_custom_checkbox_variables_list.split(",");
	cvjs_printModalCustomTextBox = "hello";
	cvjs_printModalCustomTextBoxVariablesContent = new Array(cvjs_printModalCustomTextBoxVariablesList.length)
	cvjs_printModalCustomTextBoxVariablesPrepend = new Array(cvjs_printModalCustomTextBoxVariablesList.length);
	
	for (k=0; k<cvjs_printModalCustomTextBoxVariablesList.length; k++){				
		var prependlist = cvjs_printModalCustomTextBoxVariablesList[k].split(":"); //split(/[{}:]+/); // split(['{', ',', '}']);
		
		
//		if (prependlist.length == 2)
//			window.alert(cvjs_printModalCustomTextBoxVariablesList[k]+"  "+prependlist[0]+"  "+prependlist[1]);
		
//		for (j=0; j<prependlist.length; j++) window.alert(prependlist)	
		
		if (prependlist.length == 1) 
			cvjs_printModalCustomTextBoxVariablesPrepend[k] = "none";
		else{
			prependlist[0] = prependlist[0].replace('%7B','{');
			prependlist[1] = prependlist[1].replace('%7D','}')
			cvjs_printModalCustomTextBoxVariablesPrepend[k] = prependlist[1].substring(0, prependlist[1].length -1);
			cvjs_printModalCustomTextBoxVariablesList[k] = prependlist[0].substring(1);
		}
	}	
	// run through all variables, 
// NOTE:
//	cvjs_printModalCustomTextBoxVariablesList = print_modal_custom_checkbox;
			
	if (cvjs_debug) console.log("in cvjs_setPrintModalCustomTextBox "+cvjs_printModalCustomCheckBox+"  "+print_modal_custom_checkbox_variables_list );
}


/**
 * Retrieves a given parameter from the windows.location interface
 * @param {string} sParam - name of parameter to retrieve
 * @return {string} the parameter if found, otherwise ""
 */

function cvjs_GetURLParameter(sParam)
{
    var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split('&');
    for (var i = 0; i < sURLVariables.length; i++)
    {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] == sParam)
        {
            return sParameterName[1];
        }
    }

	return("");
}

/**
 * Sets the size of the pop-up browser page with the resulting Print To PDF file 
 * @param {string} factor - pop-up window relative screen size,  a value between 0 and 1, default is 0.4
 */

function cvjs_PrintToPDFWindowRelativeSize(factor){
	
	cvjs_print_to_pdf_windowRelativeSize = factor;

}


var cvjs_fileModalEditMode = true;

/**
 * Controls if the File Modal shall allow edit mode
 * @param {boolean} mode - suppress edit mode in file modal. 
 */

function cvjs_setFileModalEditMode(mode){
	
	cvjs_fileModalEditMode = mode;
}

// 6.1.31
/**
 * Controls if the Print object in standard print shall be SVG based or based on HTML5 bitmap object 
 * @param {boolean} mode - default is true = SVG based print object 
 */

function cvjs_setPrintPaperSizeasSVGObject(mode){
	
	cvjs_printPaperSizeasSVGObjectFlag = mode;
}

// 6.1.30 
var cvjs_printPaperSizeasSVGObjectFlag = true;

// 6.1.30 
function cvjs_printPaperSizeasSVGObject(floorplan_div){
	

	try{
		if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
				// do nothing
		}
		else{
			floorplan_div = floorplan_div + "_svg";
		}
				
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
		var bbox = cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox();
		
		//window.alert(" bbox.width "+bbox.width+" bbox.height "+bbox.height);		
		// here we recalculate the width/height factor to be based on the canvas element
		var widthHeightFactorSVG  = bbox.width/bbox.height;
		var widthHeightFactorSVGless1 = false;
		if (widthHeightFactorSVG<1) widthHeightFactorSVGless1 = true; else widthHeightFactorSVGless1 = false;
	
		var is_chrome = navigator.userAgent.indexOf('Chrome') > -1;
		var is_firefox = navigator.userAgent.indexOf('Firefox') > -1;
		var is_explorer = (navigator.userAgent.indexOf('MSIE') > -1) || (navigator.userAgent.indexOf('Trident') > -1);

		var is_safari = navigator.userAgent.indexOf("Safari") > -1;
		var is_Opera = navigator.userAgent.indexOf("Presto") > -1;
		if ((is_chrome)&&(is_safari)) {is_safari=false;}

			
		var header = '<?xml version="1.0" encoding="utf-8" ?>';
		header +=  ' <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">'; 
		header +=  '<svg contentScriptType="text/ecmascript" xmlns:xlink="http://www.w3.org/1999/xlink" zoomAndPan="magnify" contentStyleType="text/css" preserveAspectRatio="xMidYMid meet"' ;
		header += ' width="'+bbox.width+'" height="'+bbox.height+'" viewbox="'+bbox.x+' '+bbox.y+' '+bbox.width+' '+bbox.height+'"';

		if (!cvjs_printGrayscale){
			header += ' version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:cvjs="http://www.tailormade.com/" stroke-linecap="butt" stroke-linejoin="round" fill-rule="evenodd" >';
		}
		else{
			header += ' version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:cvjs="http://www.tailormade.com/" stroke-linecap="butt" stroke-linejoin="round" fill-rule="evenodd" filter="url(#grayscale)"> ';
			// 6.2.33
			//window.alert(jQuery('#cvjs_grayScaleType').val()==2);
			if (jQuery('#cvjs_grayScaleType').val()==2)  // black filter
//				header += '<filter id="grayscale"><feColorMatrix type="matrix" values="0.05 0.05 0.05 0 0 0.05 0.05 0.05 0 0 0.05 0.05 0.05 0 0 0 0 0 1 0"/></filter>';
				header += '<filter id="grayscale"><feColorMatrix type="matrix" values="0.1 0.1 0.1 0 0 0.1 0.1 0.1 0 0 0.1 0.1 0.1 0 0 0 0 0 1 0"/></filter>';
  			else        // gray filter
				header += '<filter id="grayscale"><feColorMatrix type="matrix" values="0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0"/></filter>';

			/*
			version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:cvjs="http://www.tailormade.com/" stroke-linecap="butt" stroke-linejoin="round" fill-rule="evenodd" " >
			<filter id="grayscale">
			  <feColorMatrix type="matrix" values="0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0"/>
			 </filter>
			*/		
		}


		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);		
		var myFloorPlan = header + cvjs_rPaper[cvjs_active_floorplan_div_nr] + "</svg>";		


		// 6.1.48  - store bbox
		cvjs_useFrameOutputFile_ZoomedStatus = false;
		if (cvjs_useFrameOutputFile){		
			var headerString = cvjs_rPaper[cvjs_active_floorplan_div_nr].toString();	
			headerString = headerString.substring(headerString.indexOf("svg id")+7);
			headerString = headerString.substring(headerString.indexOf("viewBox")+9);
			headerString = headerString.substring(0, headerString.indexOf('"'));
			var theBox = headerString.split(" ");			
			cvjs_FrameOutput_bbox.x = parseFloat(theBox[0]);
			cvjs_FrameOutput_bbox.y = parseFloat(theBox[1]);
			cvjs_FrameOutput_bbox.width = parseFloat(theBox[2]);
			cvjs_FrameOutput_bbox.height = parseFloat(theBox[3]);
			
			
//			window.alert(theBox[0]+" "+theBox[1]+" "+theBox[2]+" "+theBox[3]);
			
			// fabs within 5% 
			// change
			if ( Math.abs(cvjs_FrameOutput_bbox.width-2500.0) < 100.0 || Math.abs(cvjs_FrameOutput_bbox.height-2500.0) < 100.0 ){
				cvjs_useFrameOutputFile_ZoomedStatus = false;				
			}
			else{
				cvjs_useFrameOutputFile_ZoomedStatus = true;      // we have zoom if the viewbox does not have an init side near 2500								
			}
						
			cvjs_FrameOutput_clipbox.x = parseFloat(theBox[0]);
			cvjs_FrameOutput_clipbox.y = parseFloat(theBox[1]);
			cvjs_FrameOutput_clipbox.width = parseFloat(theBox[2]);
			cvjs_FrameOutput_clipbox.height = parseFloat(theBox[3]);

		}	
		//3.01.03a   - we have to strip out any assets and swap for /cadviewer nodejs folder,
		// nodejs issues!! 
		if (cvjs_NodeJSserver)  {	
				myFloorPlan = myFloorPlan.replace(/xlink:href=["]assets[/]cadviewer/g, 'xlink:href=\"'+ServerUrl+"files?file=");	
		}
						
		var randomVal = Math.floor((Math.random() * 1000000) + 1);		
		var temp_fileName = "print/"+randomVal+"/"+cvjs_FileNameNoExtension+'.svg';
		var temp_fileName_frame = "print/"+randomVal+"/"+cvjs_FileNameNoExtension+'_frame.svg';
				
		var pwidth =  cvjs_printPaperWidth_mm;   // mm landscape long side
		var pheight =  cvjs_printPaperHeight_mm;  // mm landscape short side
		var translate = cvjs_printPaperWidth_mm - cvjs_printPaperHeight_mm/2;
		
		// identify and scale base linewidth
		
		var tmsMinLineWidthPos = myFloorPlan.indexOf("tmsMinLineWidth");
		// 6.02.17
		if (tmsMinLineWidthPos > 0){ 

//window.alert("tmsMinLineWidthPos "+tmsMinLineWidthPos);
		
			var tmsMinLineWidth = myFloorPlan.substring(tmsMinLineWidthPos+17);
			var delimiterLocation = tmsMinLineWidth.indexOf(";");
			
			tmsMinLineWidth = tmsMinLineWidth.substring(0, delimiterLocation);
			
			var lineWidth = parseFloat(tmsMinLineWidth)
					
			// scale depending on orientation		
			var printingLandscape = (cvjs_printOrientation.indexOf("landscape")>-1);
						
			if (!widthHeightFactorSVGless1){
				var wfac = bbox.width;			
				wfac = pwidth/wfac;  // we decrease width based on mm
				
				if (!is_firefox){
					lineWidth = lineWidth *wfac;
					//window.alert("wfac"+wfac);
					// make a new myFloorPlan
					var myFloorPlan1 = myFloorPlan.substring(0,tmsMinLineWidthPos+17);
					var myFloorPlan2 = myFloorPlan.substring(tmsMinLineWidthPos+17+delimiterLocation);				
					myFloorPlan =  myFloorPlan1 + lineWidth + myFloorPlan2;
				}
			}
			else{
				var hfac =bbox.height;
				hfac = pheight/hfac;  // we decrease width based on mm

				if (!is_firefox){
					lineWidth = lineWidth *hfac;
					//window.alert("hfac"+hfac);
					// make a new myFloorPlan
					// make a new myFloorPlan
					var myFloorPlan1 = myFloorPlan.substring(0,tmsMinLineWidthPos+17);
					var myFloorPlan2 = myFloorPlan.substring(tmsMinLineWidthPos+17+delimiterLocation);				
					myFloorPlan =  myFloorPlan1 + lineWidth + myFloorPlan2;
				}
			}
		} // 6.02.17
		
		//console.log("XXXX"+myFloorPlan+"YYYY "+myFloorPlan.length+" ZZZ");
		if (cvjs_debug) console.log("YYYY "+myFloorPlan.length+" ZZZ");
		
		var redlines = myFloorPlan.substring(myFloorPlan.lastIndexOf("</g><g></g>")+11, myFloorPlan.lastIndexOf("</svg></svg>"));  
								
		if (cvjs_debug) console.log("redlines "+redlines);
				
//window.alert("redlines:"+redlines+"<XX");				
				
		if (redlines.length >0){
			// clip out the string
//window.alert("here?");			
			
			myFloorPlan = myFloorPlan.substring(0, myFloorPlan.lastIndexOf("</g><g></g>")+11)+"</svg></svg>";
			var location1 = myFloorPlan.lastIndexOf("</g><desc>Created with Snap</desc>");
			if (location1>-1){
				var part1 = myFloorPlan.substring(location1);			
				myFloorPlan = myFloorPlan.substring(0, location1) + redlines + part1;	
			}
			else{
			// we need to handle bitmaps converted w ax20202	
				location1 = myFloorPlan.lastIndexOf("</image>");
				if (location1>-1){
					var part1 = myFloorPlan.substring(location1+8);			
					myFloorPlan = myFloorPlan.substring(0, location1+8) + redlines + part1;	
				}	
			}
		}
			
			
		/*
		</g><desc>Created with Snap</desc></svg></svg></g><g fill="#ffffff" id="master_floorPlan_svg" style="fill-opacity: 0.01; stroke-width: 0;" transform="matrix(3,0,0,3,-2500,-1314.79)"><rect x="0" y="0" width="2500" height="1314.7900390625"></rect></g><g></g><g style="display: inline;"></g><g></g><path d="M240.75875486381324,156.42225688533563h286.96498054474705v1079.7665369649806h-286.96498054474705v-1079.7665369649806 Z" stroke="#ff0000" fill="#ff0000" style="stroke-width: 2.12132; fill-opacity: 0.1;"></path></svg></svg>
		</g><desc>Created with Snap</desc></svg></svg></g><g fill="#ffffff" id="master_floorPlan_svg" style="fill-opacity: 0.01; stroke-width: 0;" transform="matrix(3,0,0,3,-2500,-1314.79)"><rect x="0" y="0" width="2500" height="1314.7900390625"></rect></g><g></g><g style="display: inline;"></g><g></g></svg></svg>
		// find last index of 
		</g><g></g>
		// clip out everything after this. 
		add </svg></svg> to the end of original string 
		remove </svg></svg> from the portion clipped out.
		// find last index of 
		</g><desc>Created with Snap</desc>
		add new string in front of this.
		save string.
		*/		
		
		
		// saveFile		
		var saveSettingsUrl = cvjs_serverHandlersPath + cvjs_serverSaveFileController; //					var saveSettingsUrl = settings_data_url+'save-file-p1.php';
		var settings_data_location =  cvjs_ServerLocation  + "/converters/files/" +temp_fileName;
		var settings_data = {};
		settings_data['file'] = settings_data_location;
		settings_data['file_content'] = myFloorPlan;
		
//window.alert("file save "+settings_data_location);		
		
		jQuery.ajax({
		  url:saveSettingsUrl,
		  type: 'post',
		  async: false,
		  data: settings_data,
		  success: function(html){
			//window.alert("response "+html);
				if (cvjs_debug) console.log("Saved zoomed svg file");
				//window.alert("Saved zoomed svg file");			
		  }  // end success

		});
	
	
		if (cvjs_useFrameOutputFile_ZoomedStatus){

			// the saved drawing is syntacically OK
			// 6.1.50  - if background file superimpose, we must call AX to convert the background drawing to svg using json files		
			cvjs_Conversion_forPrint(floorplan_div_Array[cvjs_active_floorplan_div_nr ], cvjs_FrameOutputFileName, cvjs_conversion_originatingUsername[cvjs_active_floorplan_div_nr ], cvjs_conversion_originatingPassword[cvjs_active_floorplan_div_nr ], "svg");
		
			// in the conversion callback parseServerResponseSVGPrint: 		
			// ONLY if not add in f in fileName
			//http://127.0.0.1:3000/getFile_09?remainOnServer=0&fileTag=F76512&Type=svg			

			// we must now create the clip <use> portion to insert into background drawing.
			var backgroundFile = "";
			// we now load the frame background drawing			
			var js_data = {};
			if (cvjs_FrameOutputConvertedFileName.indexOf("fileTag")>0){
				var tempstr = cvjs_FrameOutputConvertedFileName.substring(cvjs_FrameOutputConvertedFileName.indexOf("fileTag")+8);
			    cvjs_FrameOutputConvertedFileName = tempstr.substring(0, tempstr.indexOf("&"))+".svg";
			}
			else{
				if (cvjs_FrameOutputConvertedFileName.charAt(0) != "f") cvjs_FrameOutputConvertedFileName = "f"+cvjs_FrameOutputConvertedFileName.substring(cvjs_FrameOutputConvertedFileName.lastIndexOf("/")+1); 
			}
						
			js_data['file'] = cvjs_ServerLocation  + "/converters/files/" + cvjs_FrameOutputConvertedFileName;
			
			jQuery.ajax({
			  url:cvjs_serverHandlersPath + cvjs_serverLoadFileController,
			  type: 'post',
			  data: js_data,
			  async: false,
			  success: function(filecontent){
						var status ="Load background file: ";//+filecontent;
						backgroundFile = filecontent;
						if (cvjs_debug) 		console.log(status+"  length of file"+filecontent.length);
						// we must swap white for black						
						// BUG IN AX!!!!!
						//backgroundFile = backgroundFile.replace(/#FFF/g, "#000000");
												
						
					},
			 error:function(data_e){console.log("Error "+data_e); return;}
			});

			// we must change the output name to reflect the location of the zoomed object
			//var cvjs_spaceReduction_TitleBlock_ZoomPrint_top = 0;
			//var cvjs_spaceReduction_TitleBlock_ZoomPrint_bottom =  0;
			//var cvjs_spaceReduction_TitleBlock_ZoomPrint_left = 0;
			//var cvjs_spaceReduction_TitleBlock_ZoomPrint_right =  0;
			//<g id="cv_frame_insert01" transform="translate(125,125),scale(1.0)">

			var scale=0;
			
			if ((cvjs_spaceReduction_TitleBlock_ZoomPrint_top+cvjs_spaceReduction_TitleBlock_ZoomPrint_bottom)> (cvjs_spaceReduction_TitleBlock_ZoomPrint_left+cvjs_spaceReduction_TitleBlock_ZoomPrint_right)){
				scale = cvjs_spaceReduction_TitleBlock_ZoomPrint_top+cvjs_spaceReduction_TitleBlock_ZoomPrint_bottom;
			}
			else{
				scale = cvjs_spaceReduction_TitleBlock_ZoomPrint_left+cvjs_spaceReduction_TitleBlock_ZoomPrint_right;
			}

			var svgUseString = 
			'<g id="cv_frame_insert01" transform="translate('+cvjs_spaceReduction_TitleBlock_ZoomPrint_top*2500.0+','+cvjs_spaceReduction_TitleBlock_ZoomPrint_left*2500.0+'),scale('+(1.0-scale)+')">'+
			'<svg viewBox="'+cvjs_FrameOutput_bbox.x+' '+cvjs_FrameOutput_bbox.y+' '+cvjs_FrameOutput_bbox.width+' '+cvjs_FrameOutput_bbox.height+'" >'+
			'<use xlink:href="'+cvjs_ServerUrl  + "/converters/files/" +temp_fileName+"#cv_main_drawing"+'" ></use>   '+
			'</svg>'+'</g>';

	
			// we add the <use> tag to backgroundfile
			var backpart1 = backgroundFile.substring(0,  backgroundFile.lastIndexOf("</svg>"));			
			backgroundFile = backpart1  + svgUseString + "</svg>";
			

			// we save the drawing back down
			var saveSettingsUrl = cvjs_serverHandlersPath + cvjs_serverSaveFileController; //					var saveSettingsUrl = settings_data_url+'save-file-p1.php';
			var settings_data = {};
			settings_data['file'] = cvjs_ServerLocation  + "/converters/files/" + temp_fileName_frame;
			settings_data['file_content'] = backgroundFile;
			
			if (cvjs_debug) console.log(settings_data['file']+"  "+backgroundFile.length);
					
			jQuery.ajax({
			  url:saveSettingsUrl,
			  type: 'post',
			  async: false,
			  data: settings_data,
			  success: function(html){
							if (cvjs_debug) console.log("saving file with svgUseString ");
						},
			  error:function(data_e){console.log("Error "+data_e); return;}
			});
			// we swap the drawing name for the framename when calling print. 
			temp_fileName = temp_fileName_frame;
			// change to frame based display
		}
	
//window.alert(temp_fileName);
	
		serverString = '<!DOCTYPE html><html><head><title>CADViewer - Print</title>';	
		if (cvjs_removePrintObject){

			//temp_fileName = Math.floor((Math.random() * 100000) + 1);

			var file_and_ext = "xXXX"+cvjs_ServerLocation  + "/converters/files/" +temp_fileName;

			var finalUrl = cvjs_serverHandlersPath+cvjs_serverDeleteFileController+'?file='+encodeURIComponent(file_and_ext);

			if (JQ_absoluteFolder)
				serverString += '<script src="'+cvjs_javaScriptsAbsoluteFolder+'" type="text/javascript"></script>';
			else
				serverString += '<script src="'+cvjs_javaScriptsAbsoluteFolder+'/jquery-2.2.3.js" type="text/javascript"></script>';

			serverString += '<script type="text/javascript">';

			serverString += 'jQuery(window).on(\'beforeunload\', function ()';
			serverString += '{';
			serverString += 'jQuery.ajax({';
			serverString += 'url:\''+finalUrl+'\',';
			serverString += 'cache: false,';
			serverString += 'success: function(html){';
			serverString += '}';
			serverString += '});';
			serverString += '});';

			serverString += 'jQuery(window).on(\'unload\', function ()';
			serverString += '{';
			serverString += 'jQuery.ajax({';
			serverString += 'url:\''+finalUrl+'\',';
			serverString += 'cache: false,';
			serverString += 'success: function(html){';
			serverString += '}';
			serverString += '});';
			serverString += '});';

	//		serverString += 'window.onbeforeunload = function () {window.open(\"http://www.tailormade.com\");return undefined;};';
			serverString += 'window.onbeforeunload = function () {';
			serverString += 'jQuery.ajax({';
			serverString += 'url:\''+finalUrl+'\',';
			serverString += 'cache: false,';
			serverString += 'success: function(html){';
			serverString += '}';
			serverString += '});';
			serverString += 'return undefined; }; ';

			serverString +='</script>';
		}

		serverString +="<style type=\"text/css\" media=\"print\">";
		// @page {size: A2 landscape}		
		serverString +="@page {size: ";        // all others		
		//window.alert("cvjs_printOrientation "+cvjs_printOrientation);
		
		if (cvjs_printOrientation.indexOf("landscape")>-1){			
			serverString += pwidth+"mm "+pheight+"mm";
		}
		else{
			serverString += pheight+"mm "+pwidth+"mm";			
		}
		
		serverString +="}";
		serverString +="</style>";
		
		var ph1 = pheight;
		var pw1 = pwidth;


		serverString += '<script src="'+cvjs_defaultJSPath+'/popper.js" type="text/javascript"></script><script src="'+cvjs_defaultJSPath+'/bootstrap.min.js" type="text/javascript"></script><link href="'+cvjs_defaultJSPath+'../css/bootstrap.min.css" rel="stylesheet"></script>';				
		serverString += '<link href="'+cvjs_defaultJSPath+'../css/font-awesome.min.css" rel="stylesheet"></script>';
		serverString += '<style>.btn {  background-color: DodgerBlue;  border: none;  color: white;  padding: 12px 30px;  cursor: pointer;  font-size: 20px;} /* Darker background on mouse-over */ .btn:hover {  background-color: RoyalBlue;} </style>';		
		serverString += '<script type="text/javascript">';
		var method1 = "jQuery(document).ready(function(){"
		+"	jQuery('#printbutton').click(function (e) { "
		+"		jQuery('#printbutton').remove(); window.print(); "
		+"	});"
		+"});"
		+"</script>";
		serverString += method1;
		serverString +='</head><body>';
		serverString +='<button id="printbutton" class="btn" style="width:100%"><i class="fa fa-print"></i> Print: '+(temp_fileName.substring(temp_fileName.lastIndexOf("/")+1)+'</button> <br>');
		serverString +='<div id=\"imagetag\"><object type=\'image/svg+xml\' data=\''+temp_fileName.substring(temp_fileName.lastIndexOf("/")+1);
		
		
		if (widthHeightFactorSVGless1){

			if (printDebugFlag)	console.log('b1 a (pw1-10)  \'  style=\"height: auto; width:'+(pw1-10)+'mm;\" /></div></body></html>');
			if (is_chrome)
				serverString +='\'  style=\"height: auto; width:'+(pw1-40)+'mm;\" /></div></body></html>';
			else
				serverString +='\'  style=\"height: auto; width:'+(pw1-0)+'mm;\" /></div></body></html>';
		}
		else{
			if (printDebugFlag)	console.log('b1 b (pw1-20)    \'  style=\"height: auto; width: '+(pw1-20)+'mm;\" /></div></body></html>');
			if (is_chrome)
				serverString +='\'  style=\"height: auto; width: '+(pw1-40)+'mm;\" /></div></body></html>';
			else
				serverString +='\'  style=\"height: auto; width: '+(pw1-0)+'mm;\" /></div></body></html>';
		}
		// now we save the html.

		// saveFile		
		var saveSettingsUrl = cvjs_serverHandlersPath + cvjs_serverSaveFileController; //					var saveSettingsUrl = settings_data_url+'save-file-p1.php';
		var settings_data_location =  cvjs_ServerLocation  + "/converters/files/" +temp_fileName.substring(0,temp_fileName.lastIndexOf(".")) + ".html";
		var settings_data = {};
		settings_data['file'] = settings_data_location;
		settings_data['file_content'] = serverString;
		jQuery.ajax({
		  url:saveSettingsUrl,
		  type: 'post',
		  async: false,
		  data: settings_data,
		  success: function(html){

			if (cvjs_debug) console.log("saving html before opening ");
			jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
			printWindow = window.open(cvjs_ServerUrl  + "/converters/files/" +temp_fileName.substring(0,temp_fileName.lastIndexOf(".")) + ".html", 'CADViewer - Print', 'height='+screen.height*0.5+',width='+screen.width*0.5);
			//printWindow.focus();
		
		  }  // end success
		});
		
	}
	catch(err){
		console.log(err);
		
		jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
		
	}	
	
//	jQuery("#cvjs_wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
}


var cvjs_useFrameOutputFile = false;
var cvjs_useFrameOutputFile_ZoomedStatus = false;
var cvjs_FrameOutputFileName = "";	
var cvjs_FrameOutputConvertedFileName = "";

var cvjs_spaceReduction_TitleBlock_ZoomPrint_top = 0;
var cvjs_spaceReduction_TitleBlock_ZoomPrint_bottom =  0;
var cvjs_spaceReduction_TitleBlock_ZoomPrint_left = 0;
var cvjs_spaceReduction_TitleBlock_ZoomPrint_right =  0;
var cvjs_FrameOutput_bbox = {x:0, y:0, width:0, height:0};
var cvjs_FrameOutput_clipbox = {x:0, y:0, width:0, height:0};
	

/**
 * Superimpose a border frame or background drawing when printing a zoomed in portion of the drawing
 * @param {string} floorplan_div - name of floorplan div
 * @param {string} backgroundDrawing - location of background drawing, http.
 * @param {float} adjustmentTop - size of background frame border at top for adjustment of zoomed object, value between 0 and 1
 * @param {float} adjustmentBottom - size of background frame border at bottom for adjustment of zoomed object, value between 0 and 1
 * @param {float} adjustmentLeft - size of background frame border at left side for adjustment of zoomed object, value between 0 and 1
 * @param {float} adjustmentRight - size of background frame border at right side for adjustment of zoomed object, value between 0 and 1
 */

function cvjs_superimposeBackgroundDrawing_PrintOutputAtZoom(floorplan_div, backgroundDrawing, adjustmentTop, adjustmentBottom, adjustmentLeft, adjustmentRight){
	
	cvjs_useFrameOutputFile = true;
	cvjs_FrameOutputFileName = backgroundDrawing;	
	cvjs_spaceReduction_TitleBlock_ZoomPrint_top = adjustmentTop;
	cvjs_spaceReduction_TitleBlock_ZoomPrint_bottom =  adjustmentBottom;
	cvjs_spaceReduction_TitleBlock_ZoomPrint_left = adjustmentLeft;
	cvjs_spaceReduction_TitleBlock_ZoomPrint_right =  adjustmentRight;

/*
	window.alert(
	cvjs_FrameOutputFileName+" "+
	cvjs_spaceReduction_TitleBlock_ZoomPrint_top+" "+
	cvjs_spaceReduction_TitleBlock_ZoomPrint_bottom+" "+
	cvjs_spaceReduction_TitleBlock_ZoomPrint_left+" "+
	cvjs_spaceReduction_TitleBlock_ZoomPrint_right
	)
*/
}


function parseServerResponseSVGPrint(Api_response){

	var q = jQuery.parseJSON(Api_response);
	var local = false;

	if (q.errorCode == "E0"){
		//console.log("Everything is fine");
		jQuery("#looper").hide();
		jQuery('#cvjs_wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
	}
	else{

		// the file did not convert
		jQuery("#looper").hide();
		jQuery('#cvjs_wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
		var textString = "";

		if (q.errorCode == "E1"){
			textString = languageTable.languages[cvjs_currentLanguage].InfoMessageModal.ServerSideFormatForPDFPrint;
			cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], textString);
		}
		else{
			textString = "Server side conversion error, AutoXchange responded with errorcode: "+q.errorCode;
			cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], textString);
		}
		return;
	}
	// loading an SVG from the server
	if (q.completedAction=="svg_creation"){
		cvjs_FrameOutputConvertedFileName = "";
		if (rest_contentResponse == "stream") cvjs_FrameOutputConvertedFileName = q.contentStreamData;
		if (rest_contentResponse == "file") cvjs_FrameOutputConvertedFileName = q.contentStreamData;
	}
	
	//window.alert(cvjs_FrameOutputConvertedFileName);
	
	console.log("Converted callback");
	
}

var cvjs_initCustomPrintCheckboxMode = false;


var settings_text_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];



/**
 * Set Language and Conversion settings
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */
function cvjs_Settings(floorplan_div){

	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;

	
	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}	
	


	if (settings_text_offset_flag[cvjs_active_floorplan_div_nr]){
		settings_text_offset_flag[cvjs_active_floorplan_div_nr] = false;
		// 3.1.21j .appendTo('body');
		jQuery("#settingsModal_"+floorplan_div).css({position: "fixed"});
		jQuery("#settingsModal_"+floorplan_div).offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});
	}
	
	// cvjs_settingsSelectLanguage
	// run through the current settings. 
	
	// update parameters only
	

	var selectLanguageString = ""; //"<select id=\"cvjs_settingsSelectLanguage\">";
	for (var i=0; i<languageTable.numberOfLanguages; i++) {		
		
		if (i== cvjs_currentLanguage)
			selectLanguageString += "<option value=\""+(i+1)+"\" selected>"+languageTable.languages[i].thisLanguage+"</option>";
		else
			selectLanguageString += "<option value=\""+(i+1)+"\">"+languageTable.languages[i].thisLanguage+"</option>";
	}
	//selectLanguageString +="</select>";
		
	jQuery("#cvjs_settingsSelectLanguage").html(selectLanguageString);
	
	// define each row of params and loop over them to add content
	// add empty fields up till max number of convertion commands - perhaps 8	
//	var paramLinesInput = "<canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas><font id=\"cvjs_calibrate_modal_distance\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Distance+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"1\" id=\"cvjs_calibrateReferenceDistance\" class=\"cvjs_inputSettingsModal\">";
	
	var paramLinesInput =  "";
	var totalParameters = languageTable.languages[cvjs_currentLanguage].SettingsModal.TotalParameters;
	var selectString = "";
	var flag = false;
	// change to custom
	for (k=0; k<totalParameters; k++){
		flag = false;
		for (i=0; i<rest_nname_custom[cvjs_active_floorplan_div_nr ].length; i++){		
			if ( rest_nname_custom[cvjs_active_floorplan_div_nr ][i] == languageTable.languages[cvjs_currentLanguage].SettingsModal.ParamNames.ParamName[k]) 
					flag = true;
		}
		if (!flag){
			var index = rest_nname_custom[cvjs_active_floorplan_div_nr ].length;
			rest_nname_custom[cvjs_active_floorplan_div_nr ][index] = languageTable.languages[cvjs_currentLanguage].SettingsModal.ParamNames.ParamName[k];
			rest_vvalue_custom[cvjs_active_floorplan_div_nr ][index] = languageTable.languages[cvjs_currentLanguage].SettingsModal.ParamValues.ParamValue[k];				
		}
	}


	// remove model and last after layout
	var removed = 0;
	var  layoutpos = -1;
	for (i=0; i<rest_nname[cvjs_active_floorplan_div_nr ].length; i++){		
			console.log("rest_nname[cvjs_active_floorplan_div_nr ][i] " + rest_nname[cvjs_active_floorplan_div_nr ][i]);
		if ( rest_nname[cvjs_active_floorplan_div_nr ][i].indexOf("layout") == 0){
			layoutpos = i;
			console.log("rest_nname[cvjs_active_floorplan_div_nr ][i] " + rest_nname[cvjs_active_floorplan_div_nr ][i]);
		}
	}
	
	
	console.log("layout "+layoutpos);
	
	if (layoutpos>-1)
		for (k=layoutpos+1; k<rest_nname[cvjs_active_floorplan_div_nr ].length; k++){		
			if (rest_nname[cvjs_active_floorplan_div_nr ][k] == "last"){
					rest_nname[cvjs_active_floorplan_div_nr ][k] = ""
					rest_vvalue[cvjs_active_floorplan_div_nr ][k] =  "";	
			}; 
			
			if (rest_nname[cvjs_active_floorplan_div_nr ][k] == "model"){
					rest_nname[cvjs_active_floorplan_div_nr ][k] = ""; 
					rest_vvalue[cvjs_active_floorplan_div_nr ][k] =  "";	
			}; 
			
		}
	
	// remove last after model
	var removed = 0;
	var  modelpos = -1;
	for (i=0; i<rest_nname[cvjs_active_floorplan_div_nr ].length; i++){		
			console.log("rest_nname[cvjs_active_floorplan_div_nr ][i] " + rest_nname[cvjs_active_floorplan_div_nr ][i]);
		if ( rest_nname[cvjs_active_floorplan_div_nr ][i].indexOf("model") == 0){
			modelpos = i;
		}
	}
	
	// remove any custom items from nname array
	for (i=0; i<rest_nname_custom[cvjs_active_floorplan_div_nr ].length; i++){		
		for (j=0; j<rest_nname[cvjs_active_floorplan_div_nr ].length; j++){		
			if ( rest_nname[cvjs_active_floorplan_div_nr ][j] ==  rest_nname_custom[cvjs_active_floorplan_div_nr ][i]){
					rest_nname[cvjs_active_floorplan_div_nr ][j] = ""
					rest_vvalue[cvjs_active_floorplan_div_nr ][j] =  "";	
			}
		}
	}
	
	console.log("modelpos "+modelpos);

	if (modelpos>-1)
		for (k=modelpos+1; k<rest_nname[cvjs_active_floorplan_div_nr ].length; k++){		
			if (rest_nname[cvjs_active_floorplan_div_nr ][k].indexOf("last") == 0){
					rest_nname[cvjs_active_floorplan_div_nr ][k] = ""
					rest_vvalue[cvjs_active_floorplan_div_nr ][k] =  "";	
			}; 
			if (rest_nname[cvjs_active_floorplan_div_nr ][k].indexOf("model") == 0){
					rest_nname[cvjs_active_floorplan_div_nr ][k] = ""
					rest_vvalue[cvjs_active_floorplan_div_nr ][k] =  "";	
			}; 					
		}
	
	// remove empty fields
	var removed = 0;
	for (i=0; i<rest_nname[cvjs_active_floorplan_div_nr ].length; i++){		
		if ( rest_nname[cvjs_active_floorplan_div_nr ][i] == ""){
			// shift all one down
			for (k=i; k<rest_nname[cvjs_active_floorplan_div_nr ].length-1; k++){		
				rest_nname[cvjs_active_floorplan_div_nr ][k] = rest_nname[cvjs_active_floorplan_div_nr ][k+1]; 
				rest_vvalue[cvjs_active_floorplan_div_nr ][k] =  rest_vvalue[cvjs_active_floorplan_div_nr ][k+1];
			}
			removed++;
		}
	}
	rest_nname[cvjs_active_floorplan_div_nr ].length = rest_nname[cvjs_active_floorplan_div_nr ].length-removed;

	
	for (k=0; k<rest_nname[cvjs_active_floorplan_div_nr ].length; k++){
		paramLinesInput += "<canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas><i><font id=\"cvjs_param"+(k+1)+"\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Param+"</font></i><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\""+rest_nname[cvjs_active_floorplan_div_nr ][k]+"\" id=\"cvjs_param_list_name"+(k+1)+"\" class=\"cvjs_inputSettingsModal\"><canvas id=\"dummy\" width=\"30\" height=\"23\"></canvas><i><font id=\"cvjs_param_value"+(k+1)+"\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Value+"</font></i><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\""+rest_vvalue[cvjs_active_floorplan_div_nr ][k]+"\" id=\"cvjs_param_list_value"+(k+1)+"\" class=\"cvjs_inputSettingsModal\"><br>";
	}

	paramLinesInput +="<canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas><font id=\"cvjs_conversion_user\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.ConversionUser+"</font>"+"<br>";

	// loop over rest_nname_custom[]

	for (k=0; k<rest_nname_custom[cvjs_active_floorplan_div_nr ].length; k++){
		paramLinesInput += "<canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas><font id=\"cvjs_param"+(k+1)+"\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Param+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\""+rest_nname_custom[cvjs_active_floorplan_div_nr ][k]+"\" id=\"cvjs_param_list_name"+(k+1+rest_nname[cvjs_active_floorplan_div_nr ].length)+"\" class=\"cvjs_inputSettingsModal\"><canvas id=\"dummy\" width=\"30\" height=\"23\"></canvas><font id=\"cvjs_param_value"+(k+1)+"\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Value+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\""+rest_vvalue_custom[cvjs_active_floorplan_div_nr ][k]+"\" id=\"cvjs_param_list_value"+(k+1+rest_nname[cvjs_active_floorplan_div_nr ].length)+"\" class=\"cvjs_inputSettingsModal\"><br>";
	}




	for (k=rest_nname[cvjs_active_floorplan_div_nr ].length+rest_nname_custom[cvjs_active_floorplan_div_nr ].length; k<9; k++){
		paramLinesInput += "<div id=\"settings_param_lines_input\"><canvas id=\"dummy\" width=\"10\" height=\"23\"></canvas><font id=\"cvjs_param"+(k+1)+"\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Param+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\""+""+"\" id=\"cvjs_param_list_name"+(k+1)+"\" class=\"cvjs_inputSettingsModal\"><canvas id=\"dummy\" width=\"30\" height=\"23\"></canvas><font id=\"cvjs_param_value"+(k+1)+"\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Value+"</font><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\""+""+"\" id=\"cvjs_param_list_value"+(k+1)+"\" class=\"cvjs_inputSettingsModal\"><br>";
	}

//	paramLinesInput += "<div id=\"cvjs_settingsModalText\"><canvas id=\"dummy\" width=\"0\" height=\"17\"></canvas><font id=\"cvjs_settings_modal_text\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Text+"</font></div><input id=\"cvjs_settings_button\" type=\"button\" name=\"bPrint\" value=\""+languageTable.languages[cvjs_currentLanguage].SettingsModal.OK+"\" onClick=\"cvjs_exitSettingsModal(\'"+floorplan_div+"\',2);\"><button class=\"btn\"><i class=\"fa fa-check\"></i></button>";
	paramLinesInput += "<div id=\"cvjs_settingsModalText\"><canvas id=\"dummy\" width=\"0\" height=\"17\"></canvas><font id=\"cvjs_settings_modal_text\">"+languageTable.languages[cvjs_currentLanguage].SettingsModal.Text+"</font></div><button id=\"cvjs_settings_button_icon\" class=\"cvjs_btn btn\" onClick=\"cvjs_exitSettingsModal(\'"+floorplan_div+"\',2);\"><i class=\"fa fa-check\"></i></button>";

	jQuery("#settings_param_lines_input").html(paramLinesInput);	
	jQuery("#settingsModal_"+floorplan_div).show();

}


function cvjs_exitSettingsModal(floorplan_div, flag){

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
	jQuery("#settingsModal_"+floorplan_div).hide();
	
	if (flag == 1){
		// window.alert("do nothing!");	
	}
	if (flag == 2){
		
		cvjs_currentLanguage = jQuery( "#cvjs_settingsSelectLanguage option:selected" ).val()-1;	
		cvjs_setCurrentLanguage(floorplan_div, cvjs_currentLanguage);
		// window.alert("do stuff");	
				
		// update each custom
		for (i=0; i<rest_nname_custom[cvjs_active_floorplan_div_nr ].length; i++){		
				rest_nname_custom[cvjs_active_floorplan_div_nr ][i] =   jQuery("#cvjs_param_list_name"+(i+1+rest_nname[cvjs_active_floorplan_div_nr ].length)).val();
				rest_vvalue_custom[cvjs_active_floorplan_div_nr ][i] =  jQuery("#cvjs_param_list_value"+(i+1+rest_nname[cvjs_active_floorplan_div_nr ].length)).val();
		}

		// if new added then update the rest_nname list
		for (k=rest_nname_custom[cvjs_active_floorplan_div_nr ].length + rest_nname[cvjs_active_floorplan_div_nr ].length; k<9; k++){
			if (jQuery("#cvjs_param_list_name"+(k+1)).val()!=""){
				rest_nname_custom[cvjs_active_floorplan_div_nr ][k-rest_nname[cvjs_active_floorplan_div_nr ].length] = jQuery("#cvjs_param_list_name"+(k+1)).val();
				rest_vvalue_custom[cvjs_active_floorplan_div_nr ][k-rest_nname[cvjs_active_floorplan_div_nr ].length] =  jQuery("#cvjs_param_list_value"+(k+1)).val();
			}
		}

	}

}


/**
 * Updates all modeals and callouts based on currentLanguage
 * @param {int} language - language as a index from the XML language settings file
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

function cvjs_setCurrentLanguage(floorplan_div, language){


	cvjs_currentLanguage = language;

	floorplan_Modal = floorplan_div;	
		
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}	
	
	
	// In the menu configuration file app/cv/community/menu_config/*.xml  or app/cv/pro/menu_config/*.xml 
	// change the  <tooltip>Commmand tooltip X</tooltip> to the highlight text you want
	// In folder app/images/singleicons/ change the icon cvjsIcon_customCommand_XX.png into your image of choice
	// Use the CADViewer API to program your own interaction with the CAD canvas


//	window.alert(languageTable.languages[cvjs_currentLanguage].IconPage_p1_8.Search);

	var iconmodal = "IconPage_p1_8";
	var item = "FileLoad";
	
	// layerlist language replacement: 
	jQuery("#cvjs_layerListTextHeader").html(languageTable.languages[cvjs_currentLanguage].LayerListModal.Header);
	jQuery("#cvjs_layer_search_field").attr("placeholder", languageTable.languages[cvjs_currentLanguage].LayerListModal.Search);
	jQuery("#cvjs_layer_sort_button").html(languageTable.languages[cvjs_currentLanguage].LayerListModal.Sort);
	jQuery("#cvjs_layer_settings_button1").attr("value", languageTable.languages[cvjs_currentLanguage].LayerListModal.AllLayerOn);
	jQuery("#cvjs_layer_settings_button2").attr("value", languageTable.languages[cvjs_currentLanguage].LayerListModal.AllLayerOff);
	jQuery("#cvjs_layer_settings_button3").attr("value", languageTable.languages[cvjs_currentLanguage].LayerListModal.SwapLayers);
	jQuery("#cvjs_layer_selectdrawing").html(languageTable.languages[cvjs_currentLanguage].LayerListModal.SelectDrawings);
	jQuery("#cvjs_layerlist_checkboxText").html(languageTable.languages[cvjs_currentLanguage].LayerListModal.XrefLayerName);

//	window.alert(languageTable.languages[cvjs_currentLanguage].LayerListModal.BaseAndXref+"  XX"+jQuery('#cvjs_SelectLayerDrawings option[value="1"]').text()+"XX");   //name=
	jQuery('#cvjs_SelectLayerDrawings option[value="1"]').text(languageTable.languages[cvjs_currentLanguage].LayerListModal.BaseAndXref);


	jQuery("#cvjs_pagechangeListTextHeader").html(languageTable.languages[cvjs_currentLanguage].PageChangeListModal.Header);
	jQuery("#cvjs_pagechange_search_field").attr("placeholder", languageTable.languages[cvjs_currentLanguage].PageChangeListModal.Search);
	jQuery("#cvjs_pagechange_sort_button").html(languageTable.languages[cvjs_currentLanguage].PageChangeListModal.Sort);

	jQuery("#cvjs_magnifyHeader").html(languageTable.languages[cvjs_currentLanguage].BirdsEyeModal.Header);

	jQuery("#cvjs_calibrateModalHeader").html(languageTable.languages[cvjs_currentLanguage].CalibrateModal.Header);
	jQuery("#cvjs_calibrate_modal_unit").html(languageTable.languages[cvjs_currentLanguage].CalibrateModal.Unit);
	jQuery("#cvjs_calibrate_modal_distance").html(languageTable.languages[cvjs_currentLanguage].CalibrateModal.Distance);
	jQuery("#cvjs_calibrate_button").html(languageTable.languages[cvjs_currentLanguage].CalibrateModal.OK);
	jQuery("#cvjs_calibrate_modal_text").html(languageTable.languages[cvjs_currentLanguage].CalibrateModal.Text);


	jQuery("#cvjs_measurementHeader").html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Header);
	jQuery("#cvjs_measurementLength_"+floorplan_div).html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Distance);
	jQuery("#cvjs_measurement_button").attr("value",languageTable.languages[cvjs_currentLanguage].MeasurementModal.MeasureAgain);
	jQuery("#cvjs_measurementModalText").html("<canvas id=\"dummy\" width=\"0\" height=\"20\"></canvas>"+languageTable.languages[cvjs_currentLanguage].MeasurementModal.Text);
	jQuery("#measureareaLocation").html(languageTable.languages[cvjs_currentLanguage].MeasurementModal.Area);
	jQuery("#cvjs_closearea_button").attr("value",languageTable.languages[cvjs_currentLanguage].MeasurementModal.ClosePolygon);

	if (cvjs_loadTopIconMenuXML[cvjs_interfaceCounterIndex(floorplan_div)] )
		cvjs_LoadTopIconMenuXML(floorplan_div, cvjs_topIconMenu[cvjs_interfaceCounterIndex(floorplan_div)])
	else
		cvjs_LoadTopIconMenu(floorplan_div);	
		
	cvjs_LoadTopNavigationMenu(floorplan_div)

	var paperSizes = languageTable.languages[cvjs_currentLanguage].PrintModal.PaperSizeTotal;
	var selectString = "";
	for (k=0; k<paperSizes; k++){
		selectString = selectString + '<option value=\"'+languageTable.languages[cvjs_currentLanguage].PrintModal.PaperSizes.PaperSize[k]+'\">'+languageTable.languages[cvjs_currentLanguage].PrintModal.MenuItems.MenuItem[k]+'</option>';
	}

	jQuery("#cvjs_printHeader").html(languageTable.languages[cvjs_currentLanguage].PrintModal.Header);
	jQuery("#cvjs_printmodal_paper").html(languageTable.languages[cvjs_currentLanguage].PrintModal.Paper);
	jQuery("#cvjs_paperSize").html(selectString);
	jQuery("#cvjs_print_modal_resolution").html(languageTable.languages[cvjs_currentLanguage].PrintModal.Resolution);
	jQuery("#cvjs_print_modal_resolution_text").html(languageTable.languages[cvjs_currentLanguage].PrintModal.ResolutionText);
	jQuery("#cvjs_print_button").attr("value", languageTable.languages[cvjs_currentLanguage].PrintModal.Print);
	

	jQuery("#greyscaleLocation").html("<select id=\"cvjs_grayScaleType\"><option value=\"1\">"+languageTable.languages[cvjs_currentLanguage].PrintModal.Grayscale+"</option><option value=\"2\">"+languageTable.languages[cvjs_currentLanguage].PrintModal.BlackWhite+"</option></select>");
//	jQuery("#greyscaleLocation").html(languageTable.languages[cvjs_currentLanguage].PrintModal.Grayscale);

	jQuery("#printToPdfLocation").html(languageTable.languages[cvjs_currentLanguage].PrintModal.PrintPDF);
	jQuery("#printToScaleLocation").html(languageTable.languages[cvjs_currentLanguage].PrintModal.PrintToScale);
	jQuery("#enterPrintToScaleValueLocation").html(languageTable.languages[cvjs_currentLanguage].PrintModal.EnterScale);
	jQuery("#printCustomCheckbox").html(languageTable.languages[cvjs_currentLanguage].PrintModal.CustomCheckbox);
	jQuery("#cvjs_printModalTextboxLocation_text").html(languageTable.languages[cvjs_currentLanguage].PrintModal.TextBox1Header);
	jQuery("#cvjs_printModalDualTextboxLocation_text").html(languageTable.languages[cvjs_currentLanguage].PrintModal.TextBox2Header);

	jQuery("#cvjs_printorientation_text").html(languageTable.languages[cvjs_currentLanguage].PrintModal.Orientation);

	var orientationString = '<option value=\"1\">'+languageTable.languages[cvjs_currentLanguage].PrintModal.Landscape+'</option>';
	orientationString += '<option value=\"2\">'+languageTable.languages[cvjs_currentLanguage].PrintModal.Portrait+'</option>';
	jQuery("#cvjs_paperOrientation").html(orientationString);

	jQuery("#cvjs_searchTextHeader").html(languageTable.languages[cvjs_currentLanguage].SearchTextModal.Header);
	jQuery("#cvjs_search_text_searchtext").html(languageTable.languages[cvjs_currentLanguage].SearchTextModal.SearchText);
	jQuery("#cvje_search_text_zoom").html(languageTable.languages[cvjs_currentLanguage].SearchTextModal.Zoom);
	jQuery("#cvjs_textsearch_button").attr("value", languageTable.languages[cvjs_currentLanguage].SearchTextModal.Search);

	jQuery("#cvjs_infoMessageHeader").html(languageTable.languages[cvjs_currentLanguage].InfoMessageModal.Header);
	jQuery("#cvjs_infoMessageHeader2").html(languageTable.languages[cvjs_currentLanguage].InfoMessageModal.Header2);

	jQuery("#cvjs_documentChangeModalHeader").html(languageTable.languages[cvjs_currentLanguage].DocumentPageChangeModal.Header);
	jQuery("#cvjs_documentPageChangeModal_changetext").html(languageTable.languages[cvjs_currentLanguage].DocumentPageChangeModal.Page);
	jQuery("#cvjs_documentPageChangeModal_button").attr("value", languageTable.languages[cvjs_currentLanguage].DocumentPageChangeModal.OK);


	jQuery("#cvjs_publishPDFHeader").html(languageTable.languages[cvjs_currentLanguage].PublishPDFModal.Header);
	jQuery("#cvjs_publish_pdf_selectmode").html(languageTable.languages[cvjs_currentLanguage].PublishPDFModal.SelectMode);
	jQuery("#cvjs_publishpdfmode1").html(languageTable.languages[cvjs_currentLanguage].PublishPDFModal.Mode1);
	jQuery("#cvjs_publishpdfmode2").html(languageTable.languages[cvjs_currentLanguage].PublishPDFModal.Mode2);
	jQuery("#cvjs_publishpdfmode3").html(languageTable.languages[cvjs_currentLanguage].PublishPDFModal.Mode3);
	jQuery("#cvjs_entiredoc_checkbox_text").html(languageTable.languages[cvjs_currentLanguage].PublishPDFModal.EntireDoc);
	jQuery("#cvjs_entiredoc_checkbox_text_recep").html(languageTable.languages[cvjs_currentLanguage].PublishPDFModal.Recipient);
	jQuery("#cvjs_entiredoc_checkbox_title").html(languageTable.languages[cvjs_currentLanguage].PublishPDFModal.Title);
	jQuery("#cvjs_entiredoc_checkbox_message").html(languageTable.languages[cvjs_currentLanguage].PublishPDFModal.Message);
	jQuery("#cvjs_publish_redline_to_pdf_button").attr("value",languageTable.languages[cvjs_currentLanguage].PublishPDFModal.OK);


	jQuery("#cvjs_backgroundColorHeader").html(languageTable.languages[cvjs_currentLanguage].BackgroundColorModal.Header);
	jQuery("#cvjs_background_color_pickcolor").html(languageTable.languages[cvjs_currentLanguage].BackgroundColorModal.PickColor);
	jQuery("#cvjs_background_color_selectcolor").html(languageTable.languages[cvjs_currentLanguage].BackgroundColorModal.SelectColor);
	jQuery("#cvjs_radio1_text").html(languageTable.languages[cvjs_currentLanguage].BackgroundColorModal.White);
	jQuery("#cvjs_radio2_text").html(languageTable.languages[cvjs_currentLanguage].BackgroundColorModal.Black);
	jQuery("#cvjs_radio3_text").html(languageTable.languages[cvjs_currentLanguage].BackgroundColorModal.Azure);
	jQuery("#cvjs_radio4_text").html(languageTable.languages[cvjs_currentLanguage].BackgroundColorModal.Pink);
	jQuery("#cvjs_radio5_text").html(languageTable.languages[cvjs_currentLanguage].BackgroundColorModal.Snow);
	jQuery("#cvjs_radio6_text").html(languageTable.languages[cvjs_currentLanguage].BackgroundColorModal.Silver);
	jQuery("#cvjs_radio7_text").html(languageTable.languages[cvjs_currentLanguage].BackgroundColorModal.Gray);
	jQuery("#cvjs_radio8_text").html(languageTable.languages[cvjs_currentLanguage].BackgroundColorModal.Brown);
	jQuery("#cvjs_backgroundcolor_button").attr("value", languageTable.languages[cvjs_currentLanguage].BackgroundColorModal.OK);


	jQuery("#cvjs_lineThicknessHeader").html(languageTable.languages[cvjs_currentLanguage].LineThicknessModal.Header);
	jQuery("#lineThicknessText").html(languageTable.languages[cvjs_currentLanguage].LineThicknessModal.LineThickness);


	jQuery("#cvjs_layerListTextHeaderSpace").html(languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.Header);
	jQuery("#cvjs_layer_search_space_field").attr("placeholder", languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.Search);
	jQuery("#cvjs_layer_sort_button_space").html(languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.Sort);
	jQuery("#cvjs_layer_settings_space_button1").attr("value", languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.AllLayerOn);
	jQuery("#cvjs_layer_settings_space_button2").attr("value", languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.AllLayerOff);
	jQuery("#cvjs_layer_settings_space_button3").attr("value", languageTable.languages[cvjs_currentLanguage].LayerListSpaceModal.SwapLayers);
	//jQuery("#cvjs_layer_selectdrawing").html(languageTable.languages[cvjs_currentLanguage].LayerListModal.SelectDrawings);
	//jQuery("#cvjs_layerlist_checkboxText").html(languageTable.languages[cvjs_currentLanguage].LayerListModal.XrefLayerName);
	//jQuery('#cvjs_SelectLayerDrawing option[name="1"]').text(languageTable.languages[cvjs_currentLanguage].LayerListModal.BaseAndXref);
	

	jQuery("#cvjs_CollabHeader").html(languageTable.languages[cvjs_currentLanguage].CollaborationStartModal.Header);
	jQuery("#collab_start_text").html(languageTable.languages[cvjs_currentLanguage].CollaborationStartModal.Session);
	jQuery("#cvjs_collabStart_button").attr("value", languageTable.languages[cvjs_currentLanguage].CollaborationStartModal.OK);


	jQuery("#cvjs_redlineColorHeader").html(languageTable.languages[cvjs_currentLanguage].RedlineColorModal.Header);
	jQuery("#cvjs_redline_color_pickcolor").html(languageTable.languages[cvjs_currentLanguage].RedlineColorModal.PickColor);
	jQuery("#cvjs_redline_color_selectcolor").html(languageTable.languages[cvjs_currentLanguage].RedlineColorModal.SelectColor);
	jQuery("#cvjs_radio1_text_red").html(languageTable.languages[cvjs_currentLanguage].RedlineColorModal.Blue);
	jQuery("#cvjs_radio2_text_red").html(languageTable.languages[cvjs_currentLanguage].RedlineColorModal.Red);
	jQuery("#cvjs_radio3_text_red").html(languageTable.languages[cvjs_currentLanguage].RedlineColorModal.Orange);
	jQuery("#cvjs_radio4_text_red").html(languageTable.languages[cvjs_currentLanguage].RedlineColorModal.Yellow);
	jQuery("#cvjs_radio5_text_red").html(languageTable.languages[cvjs_currentLanguage].RedlineColorModal.Green);
	jQuery("#cvjs_radio6_text_red").html(languageTable.languages[cvjs_currentLanguage].RedlineColorModal.Purple);
	jQuery("#cvjs_radio7_text_red").html(languageTable.languages[cvjs_currentLanguage].RedlineColorModal.Gray);
	jQuery("#cvjs_radio8_text_red").html(languageTable.languages[cvjs_currentLanguage].RedlineColorModal.Brown);
	jQuery("#cvjs_redlinecolor_button").attr("value", languageTable.languages[cvjs_currentLanguage].RedlineColorModal.OK);


	jQuery("#cvjs_redlineEllipseHeader").html(languageTable.languages[cvjs_currentLanguage].RedlineEllipseModal.Header);
	jQuery("#cvjs_redline_ellipse_type").html(languageTable.languages[cvjs_currentLanguage].RedlineEllipseModal.SelectType);
	jQuery("#cvjs_redline_ellipse_textellipse").html(languageTable.languages[cvjs_currentLanguage].RedlineEllipseModal.Ellipse);
	jQuery("#cvjs_redline_ellipse_textcloud").html(languageTable.languages[cvjs_currentLanguage].RedlineEllipseModal.Cloud);
	jQuery("#cvjs_ellipse_button").attr("value", languageTable.languages[cvjs_currentLanguage].RedlineEllipseModal.OK);

	jQuery("#cvjs_mergeDXFHeader").html(languageTable.languages[cvjs_currentLanguage].MergeDXFModal.Header);
	jQuery("#cvjs_publish_dxf_selectmode").html(languageTable.languages[cvjs_currentLanguage].MergeDXFModal.SelectMode);
	jQuery("#cvjs_mergedxfmode1").html(languageTable.languages[cvjs_currentLanguage].MergeDXFModal.Mode1);
	jQuery("#cvjs_mergedxfmode2").html(languageTable.languages[cvjs_currentLanguage].MergeDXFModal.Mode2);
	jQuery("#cvjs_mergedxfmode3").html(languageTable.languages[cvjs_currentLanguage].MergeDXFModal.Mode3);
	jQuery("#cvjs_entiredoc_checkbox_text_dxf").html(languageTable.languages[cvjs_currentLanguage].MergeDXFModal.EntireDoc);
	jQuery("#cvjs_entiredoc_checkbox_text_recep_dxf").html(languageTable.languages[cvjs_currentLanguage].MergeDXFModal.Recipient);
	jQuery("#cvjs_entiredoc_checkbox_title_dxf").html(languageTable.languages[cvjs_currentLanguage].MergeDXFModal.Title);
	jQuery("#cvjs_entiredoc_checkbox_message_dxf").html(languageTable.languages[cvjs_currentLanguage].MergeDXFModal.Message);
	jQuery("#cvjs_publish_redline_to_dxf_button").attr("value",languageTable.languages[cvjs_currentLanguage].MergeDXFModal.OK);


	jQuery("#cvjs_redlineThicknessHeader").html(languageTable.languages[cvjs_currentLanguage].RedlineThicknessModal.Header);
	jQuery("#cvjs_redline_thickness_thickness").html(languageTable.languages[cvjs_currentLanguage].RedlineThicknessModal.Thickness);
	jQuery("#cvjs_thickness_button").attr("value",languageTable.languages[cvjs_currentLanguage].RedlineThicknessModal.OK);

	jQuery("#cvjs_redlineTextHeader").html(languageTable.languages[cvjs_currentLanguage].RedlineTextModal.Header);
	jQuery("#cvjs_redline_text_fontsize").html(languageTable.languages[cvjs_currentLanguage].RedlineTextModal.FontSize);
	jQuery("#cvjs_redlinetext_button").attr("value",languageTable.languages[cvjs_currentLanguage].RedlineTextModal.OK);
	jQuery("#cvjs_redline_text_inserttext").html(languageTable.languages[cvjs_currentLanguage].RedlineTextModal.Text);


	jQuery("#cvjs_settingsModalHeader").html(languageTable.languages[cvjs_currentLanguage].SettingsModal.Header);
	jQuery("#cvjs_settings_language").html(languageTable.languages[cvjs_currentLanguage].SettingsModal.OnlineLanguage);
	jQuery("#cvjs_settings_button").attr("value", languageTable.languages[cvjs_currentLanguage].SettingsModal.OK);
	jQuery("#cvjs_ax2020_paramtext").html(languageTable.languages[cvjs_currentLanguage].SettingsModal.ConversionFixed);
	
	selectString = "";
	for (k=0; k<7; k++){     // 6.2.28   6->7
		selectString = selectString + '<option value=\"'+(k+1)+'\">'+languageTable.languages[cvjs_currentLanguage].MeasurementModal.MenuItems.MenuItem[k]+'</option>';
	}
	jQuery("#cvjs_measurementOption").html(selectString);
	
	// 6.2.56
	jQuery("#cvjs_spaceobjectchangesettingsTextHeader").html(languageTable.languages[cvjs_currentLanguage].InitSpaceObjects.ModalModify);
	jQuery("#cvjs_spaceobjectchangesettingsTextLayer").html(languageTable.languages[cvjs_currentLanguage].InitSpaceObjects.Layer);
	jQuery("#cvjs_spaceobjectchangesettingsTextSpaceId").html(languageTable.languages[cvjs_currentLanguage].InitSpaceObjects.SpaceId);

	jQuery("#cvjs_spaceobjectchangesettingsTextType").html(languageTable.languages[cvjs_currentLanguage].InitSpaceObjects.Type);
	jQuery("#cvjs_spaceobjectchangesettingsUnlink").attr("value",languageTable.languages[cvjs_currentLanguage].InitSpaceObjects.Unlink);
	jQuery("#cvjs_spaceobjectchangesettingsUpdate").attr("value",languageTable.languages[cvjs_currentLanguage].InitSpaceObjects.Update);


	jQuery("#cvjs_spaceobjectchangesettingsExplanation").html(languageTable.languages[cvjs_currentLanguage].InitSpaceObjects.Explanation);


//		+"</td></tr><tr><td><b class=\"cvjs_changespaceModalSmall\">"+languageTable.languages[cvjs_currentLanguage].InitSpaceObjects.Explanation+"</b></td></tr>"

	jQuery("#cvjs_spaceobjectsettingsTextLayer").html(languageTable.languages[cvjs_currentLanguage].InitSpaceObjects.Layer);
	jQuery("#cvjs_spaceobjectsettingsTextSpaceId").html(languageTable.languages[cvjs_currentLanguage].InitSpaceObjects.SpaceId);
	jQuery("#cvjs_spaceobjectsettingsTextCreate").attr("value",languageTable.languages[cvjs_currentLanguage].InitSpaceObjects.Create);
		
}



/**
 * Copies the content of the measurement field to the clipboard
 * @param {string} floorplan_div - name of div containing CADViewer canvas
 */

function cvjs_copyMeasurementField(floorplan_div){
	
	var textarea = document.getElementById("cvjs_measurementBox_"+floorplan_div);	
	textarea.select(); 
	var ok = document.execCommand('copy');
}




// 


var spacemodal_init_settings_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];


function cvjs_spaceObjectsInitSettingsModal(floorplan_div){

	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;

	
	// 3.0.15c   - add "_svg" to div, if called through external API
	if (cvjs_debug) console.log(floorplan_div.lastIndexOf("_svg")+"  "+(floorplan_div.length-4));
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	

	if (spacemodal_init_settings_offset_flag[cvjs_active_floorplan_div_nr]){
		spacemodal_init_settings_offset_flag[cvjs_active_floorplan_div_nr] = false;
		// 3.1.21j .appendTo('body');
		jQuery("#spaceobjectsInitSettingsModal_"+floorplan_div).css({position: "fixed"});
		jQuery("#spaceobjectsInitSettingsModal_"+floorplan_div).offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});
	}
	jQuery( "#spaceobjectsInitSettingsModal_"+floorplan_div ).show();
}


function cvjs_exitSpaceObjectsInitSettingsModal(){

	jQuery( "#spaceobjectsInitSettingsModal_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
}

function cvjs_continueCreateSpaceObjects(){

	var spaceLayer = jQuery("#cvjs_spaceobjectLayerFromModal").val();	
	// check if layer is in layerListHeader\	
	// if not, add as new Layer
	
	// 6.2.59   // we use standard to create....
	var layerflag = false;
	for (var i=0; i<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; i++){	
//		console.log(spaceLayer+"  "+layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName);
	
		if (spaceLayer == layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName)
			layerflag = true;
	
	}
	
	if (!layerflag){
		var layer_id = "layer_"+spaceLayer;
		var layer_class = layer_id;				
		var layer_status = "ON";
		var singleLayer ={ layer: layer_id, layerClass: layer_class, layerName: spaceLayer, status : layer_status, layerBaseName: "", xRefFile: ""};
		layerTable[cvjs_active_floorplan_div_nr].layers[layerTable[cvjs_active_floorplan_div_nr].numberOfLayers] = singleLayer;
		layerTable[cvjs_active_floorplan_div_nr].numberOfLayers = layerTable[cvjs_active_floorplan_div_nr].numberOfLayers +1;
	}
	
//	window.alert("polygon, rect, circle or copy circle..."+"#spaceobjectsInitSettingsModal_"+ [cvjs_active_floorplan_div_nr]);
	
	jQuery( "#spaceobjectsInitSettingsModal_"+ floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
	
	// create space polygon
	if (cvjs_addSpaceObjectType == 1)
		cvjs_addPolygonSpaceObjectCore(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	
	// create space rectangle
	if (cvjs_addSpaceObjectType == 2)		
		cvjs_addRectangleSpaceObjectCore(floorplan_div_Array[cvjs_active_floorplan_div_nr]);	

	// create space rectangle
	if (cvjs_addSpaceObjectType == 3)		
		cvjs_addCircleSpaceObjectCore(floorplan_div_Array[cvjs_active_floorplan_div_nr]);		

}
	

var spacemodal_update_settings_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];

function cvjs_spaceObjectsChangeSettingsModal(floorplan_div){

	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;
	
	// 3.0.15c   - add "_svg" to div, if called through external API
	if (cvjs_debug) console.log(floorplan_div.lastIndexOf("_svg")+"  "+(floorplan_div.length-4));
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	
	if (spacemodal_update_settings_offset_flag[cvjs_active_floorplan_div_nr]){
		spacemodal_update_settings_offset_flag[cvjs_active_floorplan_div_nr] = false;
		// 3.1.21j .appendTo('body');
		jQuery("#spaceobjectsChangeSettingsModal_"+floorplan_div).css({position: "fixed"});
		jQuery("#spaceobjectsChangeSettingsModal_"+floorplan_div).offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});
	}

	jQuery( "#spaceobjectsChangeSettingsModal_"+floorplan_div ).show();
	
	
	var mylayer = jQuery("#cvjs_spaceobjectchangeLayerFromModal").val();	
	if (mylayer == "unassigned" || mylayer == undefined  ) 
		jQuery("#cvjs_spaceobjectchangeLayerFromModal").val("cvjs_SpaceLayer");
		
}

function cvjs_exitSpaceObjectsChangeSettingsModal(){

	jQuery( "#spaceobjectsChangeSettingsModal_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
	
	// do all the stuff similar to exit in the old modal
	
	cvjs_setCreationMode(!cvjs_supressPopUpModal, true);
	hideOnlyPop();
	cvjs_clearDrawing();
	
}

function cvjs_updateChangeSpaceObjects(){

//	window.alert("polygon, rect, circle or copy circle..."+"#spaceobjectsInitSettingsModal_"+ [cvjs_active_floorplan_div_nr]);	
	jQuery( "#spaceobjectsUpdateSettingsModal_"+ floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
	
	var myId = selected_current_jsonStrucure.id;
	
	cvjs_changeSpaceObjectType(myId, jQuery("#cvjs_spaceobjectchangeTypeFromModal").val());
	cvjs_changeSpaceObjectLayer(myId, jQuery("#cvjs_spaceobjectchangeLayerFromModal").val());
	
//	window.alert(myId+"  "+jQuery("#cvjs_spaceobjectchangeIdFromModal").val());

	cvjs_changeSpaceObjectLinkStatus(myId, true);	

	cvjs_changeSpaceObjectName(myId, jQuery("#cvjs_spaceobjectchangeIdFromModal").val());  // name is the copy of ID
	cvjs_changeSpaceObjectID(myId, jQuery("#cvjs_spaceobjectchangeIdFromModal").val());	
	
	
	// 6.2.60
	var spaceLayer = jQuery("#cvjs_spaceobjectchangeLayerFromModal").val();
	// check if layer is in layerListHeader\	
	// if not, add as new Layer
	// 6.2.59   // we use standard to create....
	var layerflag = false;
	for (var i=0; i<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; i++){	
//		console.log(spaceLayer+"  "+layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName);
		if (spaceLayer == layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName)
			layerflag = true;
	}
	
	if (!layerflag){
		var layer_id = "layer_"+spaceLayer;
		var layer_class = layer_id;				
		var layer_status = "ON";
		var singleLayer ={ layer: layer_id, layerClass: layer_class, layerName: spaceLayer, status : layer_status, layerBaseName: "", xRefFile: ""};
		layerTable[cvjs_active_floorplan_div_nr].layers[layerTable[cvjs_active_floorplan_div_nr].numberOfLayers] = singleLayer;
		layerTable[cvjs_active_floorplan_div_nr].numberOfLayers = layerTable[cvjs_active_floorplan_div_nr].numberOfLayers +1;
	}

	
	cvjs_draw_space_object_names_on_spaces();
	
	hideOnlyPop();
	cvjs_clearDrawing();
	
}
	

function cvjs_unlinkChangeSpaceObjects(){

//	window.alert("polygon, rect, circle or copy circle..."+"#spaceobjectsInitSettingsModal_"+ [cvjs_active_floorplan_div_nr]);
	jQuery( "#spaceobjectsUpdateSettingsModal_"+ floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
	
	var myId = selected_current_jsonStrucure.id;
	
	cvjs_changeSpaceObjectLinkStatus(myId, false);	
	

	 cvjs_draw_space_object_names_on_spaces();

	hideOnlyPop();
	cvjs_clearDrawing();

	
}




